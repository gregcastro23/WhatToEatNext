1ab8bef39af4c116e40c83e3cb5c0228
"use strict";
// src/utils/elementalUtils.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateElementalAffinity = exports.fixRawIngredientMappings = exports.fixIngredientMappings = exports.fixIngredientMapping = exports.ensureLowercaseFormat = exports.getDefaultElementalProperties = exports.getCurrentElementalState = exports.enhanceOilProperties = exports.enhanceVegetableTransformations = exports.getStrengtheningElement = exports.getElementalRelationship = exports.getBalancingElement = exports.ensureCompleteElementalProperties = exports.getElementStrength = exports.getPrimaryElement = exports.normalizeElementalValues = exports.transformItemsWithPlanetaryPositions = exports.elementalFunctions = exports.elementalInteractions = exports.elements = exports.elementalUtils = exports.getMissingElements = exports.validateElementalRequirements = exports.standardizeRecipeElements = exports.normalizeProperties = exports.validateElementalProperties = void 0;
const elementalConstants_1 = require("@/constants/elementalConstants");
const ElementalCalculator_1 = require("@/services/ElementalCalculator");
const elementalMappings_1 = require("./elementalMappings");
Object.defineProperty(exports, "elements", { enumerable: true, get: function () { return elementalMappings_1.elements; } });
Object.defineProperty(exports, "elementalInteractions", { enumerable: true, get: function () { return elementalMappings_1.elementalInteractions; } });
Object.defineProperty(exports, "elementalFunctions", { enumerable: true, get: function () { return elementalMappings_1.elementalFunctions; } });
const planetaryFoodAssociations_1 = require("@/constants/planetaryFoodAssociations");
const validation_1 = require("@/utils/validation");
// Missing ELEMENTAL_CHARACTERISTICS constant
const ELEMENTAL_CHARACTERISTICS = {
    Fire: {
        cookingTechniques: ['grilling', 'roasting', 'searing', 'flambéing'],
        timeOfDay: ['morning', 'noon'],
        qualities: ['energetic', 'transformative', 'intense'],
        temperature: 'hot'
    },
    Water: {
        cookingTechniques: ['boiling', 'steaming', 'poaching', 'braising'],
        timeOfDay: ['evening', 'night'],
        qualities: ['flowing', 'cooling', 'nurturing'],
        temperature: 'cool'
    },
    Earth: {
        cookingTechniques: ['baking', 'slow-cooking', 'roasting', 'smoking'],
        timeOfDay: ['afternoon', 'evening'],
        qualities: ['grounding', 'stable', 'nourishing'],
        temperature: 'moderate'
    },
    Air: {
        cookingTechniques: ['whipping', 'frying', 'sautéing', 'dehydrating'],
        timeOfDay: ['morning', 'midday'],
        qualities: ['light', 'airy', 'quick'],
        temperature: 'variable'
    }
};
// AlchemicalProperty type imported from @/constants/planetaryElements
/**
 * Validates that elemental properties contain valid values
 * @param properties The elemental properties to validate
 * @returns True if properties are valid, false otherwise
 */
const validateElementalProperties = (properties) => {
    // If properties is null or undefined, return false immediately
    if (!properties) {
        console.warn('Warning: properties is null or undefined in validateElementalProperties');
        return false;
    }
    // Check if all required elements exist
    const requiredElements = ['Fire', 'Water', 'Earth', 'Air'];
    for (const element of requiredElements) {
        if (typeof properties[element] !== 'number') {
            console.warn(`Warning: properties.${element} is not a number in validateElementalProperties`);
            return false;
        }
        // Check if values are between 0 and 1
        if (properties[element] < 0 || properties[element] > 1) {
            (0, validation_1.logUnexpectedValue)('validateElementalProperties', {
                message: `Element value out of range: ${element} = ${properties[element]}`,
                element,
                value: properties[element],
            });
            return false;
        }
    }
    // Optionally check if properties sum to 1 (or close to it due to floating point)
    const sum = Object.values(properties).reduce((acc, val) => acc + val, 0);
    const isCloseToOne = Math.abs(sum - 1) < 0.01;
    if (!isCloseToOne) {
        (0, validation_1.logUnexpectedValue)('validateElementalProperties', {
            message: `Elemental properties do not sum to 1: ${sum}`,
            sum,
            properties,
        });
    }
    return true;
};
exports.validateElementalProperties = validateElementalProperties;
/**
 * Normalizes elemental properties to ensure they sum to 1
 * @param properties The elemental properties to normalize
 * @returns Normalized elemental properties
 */
const normalizeProperties = (properties) => {
    var _a, _b, _c, _d;
    // Handle null or undefined
    if (!properties) {
        console.warn('Warning: properties is null or undefined in normalizeProperties');
        return { ...elementalConstants_1.DEFAULT_ELEMENTAL_PROPERTIES };
    }
    // Fill in any missing properties with defaults
    const completeProperties = {
        Fire: (_a = properties.Fire) !== null && _a !== void 0 ? _a : elementalConstants_1.DEFAULT_ELEMENTAL_PROPERTIES.Fire,
        Water: (_b = properties.Water) !== null && _b !== void 0 ? _b : elementalConstants_1.DEFAULT_ELEMENTAL_PROPERTIES.Water,
        Earth: (_c = properties.Earth) !== null && _c !== void 0 ? _c : elementalConstants_1.DEFAULT_ELEMENTAL_PROPERTIES.Earth,
        Air: (_d = properties.Air) !== null && _d !== void 0 ? _d : elementalConstants_1.DEFAULT_ELEMENTAL_PROPERTIES.Air,
    };
    const sum = Object.values(completeProperties).reduce((acc, val) => acc + val, 0);
    if (sum === 0) {
        // If sum is 0, return balanced default
        console.warn('Warning: properties sum is 0 in normalizeProperties');
        return { ...elementalConstants_1.DEFAULT_ELEMENTAL_PROPERTIES };
    }
    // Normalize each value
    return Object.entries(completeProperties).reduce((acc, [key, value]) => {
        if ((0, validation_1.isElementalPropertyKey)(key)) {
            acc[key] = value / sum;
        }
        else {
            // This shouldn't happen with the type-safety above, but just in case
            console.warn(`Warning: invalid key ${key} in normalizeProperties`);
        }
        return acc;
    }, { ...elementalConstants_1.DEFAULT_ELEMENTAL_PROPERTIES });
};
exports.normalizeProperties = normalizeProperties;
/**
 * Standardizes elemental properties for recipes, ensuring all recipes have
 * properly normalized elemental values
 * @param recipe The recipe to standardize
 * @returns Recipe with standardized elemental properties
 */
const standardizeRecipeElements = (recipe) => {
    // Handle null /undefined recipe
    if (!recipe) {
        console.warn('Warning: recipe is null or undefined in standardizeRecipeElements');
        return {
            elementalProperties: { ...elementalConstants_1.DEFAULT_ELEMENTAL_PROPERTIES }
        };
    }
    // If recipe doesn't have elemental properties, use current elemental state
    if (!recipe.elementalProperties) {
        const currentState = ElementalCalculator_1.ElementalCalculator.getCurrentElementalState();
        return {
            ...recipe,
            elementalProperties: currentState,
        };
    }
    // Normalize properties to ensure they sum to 1
    return {
        ...recipe,
        elementalProperties: (0, exports.normalizeProperties)(recipe.elementalProperties),
    };
};
exports.standardizeRecipeElements = standardizeRecipeElements;
const validateElementalRequirements = (properties) => {
    return (0, validation_1.isElementalProperties)(properties);
};
exports.validateElementalRequirements = validateElementalRequirements;
/**
 * Gets the elements that are missing or significantly lower than ideal balance in the provided properties
 * @param properties The elemental properties to check
 * @returns Array of elements that are missing or low
 */
function getMissingElements(properties) {
    if (!properties) {
        return ['Fire', 'Water', 'Earth', 'Air'];
    }
    const missing = [];
    const idealBalance = 0.25; // Each element should ideally be 25%
    const threshold = 0.15; // Consider missing if below 15%
    for (const element of ['Fire', 'Water', 'Earth', 'Air']) {
        const value = properties[element] || 0;
        if (value < threshold) {
            missing.push(element);
        }
    }
    return missing;
}
exports.getMissingElements = getMissingElements;
exports.elementalUtils = {
    validateProperties: exports.validateElementalRequirements,
    normalizeProperties: exports.normalizeProperties,
    standardizeRecipeElements: exports.standardizeRecipeElements,
    getMissingElements,
    calculateelementalState(recipe) {
        var _a;
        if (!((_a = recipe === null || recipe === void 0 ? void 0 : recipe.ingredients) === null || _a === void 0 ? void 0 : _a.length)) {
            return ElementalCalculator_1.ElementalCalculator.getCurrentElementalState();
        }
        // Create a safe default balance to start
        const balance = { ...elementalConstants_1.DEFAULT_ELEMENTAL_PROPERTIES };
        // Get total amount for percentage calculations
        const totalAmount = recipe.ingredients.reduce((sum, ing) => {
            var _a;
            const amount = (_a = ing.amount) !== null && _a !== void 0 ? _a : 1; // Default to 1 if amount is missing
            return sum + amount;
        }, 0);
        // Handle the special case where there are no ingredients with amount
        if (totalAmount === 0) {
            return balance;
        }
        // Initialize balance with 0 values
        Object.keys(balance).forEach(el => {
            if ((0, validation_1.isElementalPropertyKey)(el)) {
                balance[el] = 0;
            }
        });
        // Process each ingredient
        recipe.ingredients.forEach(ing => {
            var _a;
            const amount = (_a = ing.amount) !== null && _a !== void 0 ? _a : 1; // Default to 1 if amount is missing
            if (ing.elementalProperties) {
                // For each element in the ingredient
                Object.entries(ing.elementalProperties).forEach(([element, value]) => {
                    if ((0, validation_1.isElementalPropertyKey)(element)) {
                        balance[element] += (value * amount) / totalAmount;
                    }
                });
            }
        });
        // Normalize to ensure they sum to 1
        return (0, exports.normalizeProperties)(balance);
    },
    combineProperties(a, b, bWeight = 0.5) {
        const combinedProps = {};
        const aWeight = 1 - bWeight;
        Object.keys(a).forEach((key) => {
            const element = key;
            combinedProps[element] =
                a[element] * aWeight + (b[element] || 0) * bWeight;
        });
        return combinedProps;
    },
    getelementalState(recipe) {
        var _a;
        if (!((_a = recipe.ingredients) === null || _a === void 0 ? void 0 : _a.length)) {
            return ElementalCalculator_1.ElementalCalculator.getCurrentElementalState();
        }
        const combinedProperties = recipe.ingredients.reduce((acc, ingredient) => {
            const props = ingredient.elementalProperties ||
                ElementalCalculator_1.ElementalCalculator.getCurrentElementalState();
            return {
                Fire: acc.Fire + props.Fire,
                Water: acc.Water + props.Water,
                Earth: acc.Earth + props.Earth,
                Air: acc.Air + props.Air,
            };
        }, { Fire: 0, Water: 0, Earth: 0, Air: 0 });
        return (0, exports.normalizeProperties)(combinedProperties);
    },
    /**
     * Gets a complementary element that works well with the given element
     * All elements work well together in their own way
     * @param element The element to find a complement for
     * @returns The complementary element
     */
    getComplementaryElement(element) {
        // Each element complements all others, but we return one suggestion
        // based on traditional culinary pairings
        const complementary = {
            Fire: 'Fire',
            Water: 'Water',
            Earth: 'Earth',
            Air: 'Air', // Air reinforces itself
        };
        return complementary[element];
    },
    /**
     * Gets the elemental characteristics for a specific element
     * @param element The element to get characteristics for
     * @returns The elemental characteristics
     */
    getElementalCharacteristics(element) {
        return ELEMENTAL_CHARACTERISTICS[element];
    },
    /**
     * Gets a complete elemental profile that includes properties and characteristics
     * @param properties The elemental properties
     * @returns A complete elemental profile
     */
    getElementalProfile(properties) {
        // Find the dominant element
        const entries = Object.entries(properties);
        let dominantElement = 'Fire';
        let maxValue = 0;
        for (const [element, value] of entries) {
            if (value > maxValue) {
                dominantElement = element;
                maxValue = value;
            }
        }
        return {
            dominant: dominantElement,
            balance: properties,
            characteristics: [this.getElementalCharacteristics(dominantElement)],
        };
    },
    /**
     * Gets the suggested cooking techniques based on elemental properties
     * @param properties The elemental properties
     * @returns Array of recommended cooking techniques
     */
    getSuggestedCookingTechniques(properties) {
        const techniques = [];
        const threshold = 0.3; // Only consider elements above this threshold for recommendations
        if (properties.Fire > threshold) {
            techniques.push(...ELEMENTAL_CHARACTERISTICS.Fire.cookingTechniques.slice(0, 2));
        }
        if (properties.Water > threshold) {
            techniques.push(...ELEMENTAL_CHARACTERISTICS.Water.cookingTechniques.slice(0, 2));
        }
        if (properties.Earth > threshold) {
            techniques.push(...ELEMENTAL_CHARACTERISTICS.Earth.cookingTechniques.slice(0, 2));
        }
        if (properties.Air > threshold) {
            techniques.push(...ELEMENTAL_CHARACTERISTICS.Air.cookingTechniques.slice(0, 2));
        }
        // Return unique techniques or a default if none meet the threshold
        return techniques.length > 0
            ? Array.from(new Set(techniques))
            : ['Balanced cooking'];
    },
    /**
     * Gets the complementary ingredients based on elemental properties
     * @param properties The elemental properties
     * @returns Array of recommended complementary ingredients
     */
    getRecommendedTimeOfDay(properties) {
        const times = [];
        const threshold = 0.3; // Only consider elements above this threshold for recommendations
        const weightedTimes = [];
        // Add times based on the elemental balance, weighted by their values
        if (properties.Fire > threshold) {
            for (let i = 0; i < Math.ceil(properties.Fire * 10); i++) {
                weightedTimes.push(...ELEMENTAL_CHARACTERISTICS.Fire.timeOfDay);
            }
        }
        if (properties.Water > threshold) {
            for (let i = 0; i < Math.ceil(properties.Water * 10); i++) {
                weightedTimes.push(...ELEMENTAL_CHARACTERISTICS.Water.timeOfDay);
            }
        }
        if (properties.Earth > threshold) {
            for (let i = 0; i < Math.ceil(properties.Earth * 10); i++) {
                weightedTimes.push(...ELEMENTAL_CHARACTERISTICS.Earth.timeOfDay);
            }
        }
        if (properties.Air > threshold) {
            for (let i = 0; i < Math.ceil(properties.Air * 10); i++) {
                weightedTimes.push(...ELEMENTAL_CHARACTERISTICS.Air.timeOfDay);
            }
        }
        // Return unique times or a default if none meet the threshold
        return weightedTimes.length > 0
            ? Array.from(new Set(weightedTimes))
            : ['Any time'];
    },
    // Get the default elemental properties
    getDefaultElementalProperties() {
        return elementalConstants_1.DEFAULT_ELEMENTAL_PROPERTIES;
    },
    // Export the default elemental properties constant for direct access
    DEFAULT_ELEMENTAL_PROPERTIES: elementalConstants_1.DEFAULT_ELEMENTAL_PROPERTIES,
    /**
     * Gets the current elemental state from the ElementalCalculator service
     * Pattern OO-3: Utility Import Alignment - Standalone export for TS2614 compatibility
     */
    getCurrentElementalState() {
        return ElementalCalculator_1.ElementalCalculator.getCurrentElementalState();
    },
    /**
     * Pattern OO-3: Utility Import Alignment - Format consistency helper
     * Ensures elemental property keys are in lowercase format
     */
    ensureLowercaseFormat(properties) {
        if (!properties || typeof properties !== 'object') {
            return properties;
        }
        const lowercaseProps = {};
        for (const [key, value] of Object.entries(properties)) {
            // Convert capitalized element names to lowercase
            const lowerKey = key.toLowerCase();
            lowercaseProps[lowerKey] = value;
        }
        return lowercaseProps;
    },
};
exports.default = exports.elementalUtils;
/**
 * Transform a list of elemental items based on planetary positions
 *
 * @param items Items to transform
 * @param planetaryPositions Current planetary positions
 * @param isDaytime Whether it is currently day
 * @param currentZodiac Current zodiac sign
 * @param lunarPhase Current lunar phase
 * @param elementalBoosts Optional elemental boosts to apply
 * @param planetaryBoosts Optional planetary boosts to apply
 * @returns Transformed alchemical items
 */
const ELEMENT_WEIGHTS = {
    Fire: 1.8,
    Water: 1.2,
    Earth: 0.9,
    Air: 1.5,
};
// Add this function if uniqueness score is needed
function _calculateUniqueness(elements, planetaryInfluence) {
    // Calculate variance of elemental properties
    const values = Object.values(elements);
    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;
    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) /
        values.length;
    // Combine with planetary influence
    return Math.min(1, variance * (1 + planetaryInfluence));
}
// Or modify the transformation to remove uniqueness score if not needed
function transformItemsWithPlanetaryPositions(items, planetaryPositions, isDaytime = true, currentZodiac, lunarPhase, tarotElementBoosts, tarotPlanetaryBoosts) {
    return items.map((item) => {
        const { boost: planetaryInfluence } = (0, planetaryFoodAssociations_1.calculatePlanetaryBoost)(item, planetaryPositions, currentZodiac, lunarPhase);
        // Scale elemental properties
        const scaledElements = Object.fromEntries(Object.entries(item.elementalProperties).map(([element, value]) => [
            element,
            value * (1 + (planetaryInfluence || 0)),
        ]));
        // Calculate alchemical properties from elemental properties
        // This follows the same relationships as in the alchemical system:
        // - Spirit is related to Fire (transformation) and Air (connection)
        // - Essence is related to Water (fluidity) and Fire (vitality)
        // - Matter is related to Earth (stability) and Water (cohesion)
        // - Substance is related to Air (structure) and Earth (form)
        const spirit = scaledElements.Fire * 0.6 + scaledElements.Air * 0.4;
        const essence = scaledElements.Water * 0.6 + scaledElements.Fire * 0.4;
        const matter = scaledElements.Earth * 0.7 + scaledElements.Water * 0.3;
        const substance = scaledElements.Air * 0.6 + scaledElements.Earth * 0.4;
        // Apply tarot boosts if available
        const boostedSpirit = spirit * ((tarotPlanetaryBoosts === null || tarotPlanetaryBoosts === void 0 ? void 0 : tarotPlanetaryBoosts.Spirit) || 1.0);
        const boostedEssence = essence * ((tarotPlanetaryBoosts === null || tarotPlanetaryBoosts === void 0 ? void 0 : tarotPlanetaryBoosts.Essence) || 1.0);
        const boostedMatter = matter * ((tarotPlanetaryBoosts === null || tarotPlanetaryBoosts === void 0 ? void 0 : tarotPlanetaryBoosts.Matter) || 1.0);
        const boostedSubstance = substance * ((tarotPlanetaryBoosts === null || tarotPlanetaryBoosts === void 0 ? void 0 : tarotPlanetaryBoosts.Substance) || 1.0);
        // Calculate energy metrics using the formulas from alchemicalCalculations.ts
        const fire = scaledElements.Fire;
        const water = scaledElements.Water;
        const air = scaledElements.Air;
        const earth = scaledElements.Earth;
        // Ensure we have non-zero values for denominator
        const safeValue = (val) => Math.max(val, 0.01);
        // Heat formula: (spirit^2 + fire^2) / ((substance || 1) + essence + matter + water + air + earth)^2
        const heat = (Math.pow(safeValue(boostedSpirit), 2) + Math.pow(safeValue(fire), 2)) /
            Math.pow(safeValue(boostedSubstance + boostedEssence + boostedMatter + water + air + earth), 2);
        // Entropy formula: (spirit^2 + substance^2 + fire^2 + air^2) / ((essence || 1) + matter + earth + water)^2
        const entropy = (Math.pow(safeValue(boostedSpirit), 2) + Math.pow(safeValue(boostedSubstance), 2) +
            Math.pow(safeValue(fire), 2) + Math.pow(safeValue(air), 2)) /
            Math.pow(safeValue(boostedEssence + boostedMatter + earth + water), 2);
        // Reactivity formula: (spirit^2 + substance^2 + essence^2 + fire^2 + air^2 + water^2) / ((matter || 1) + earth)^2
        const reactivity = (Math.pow(safeValue(boostedSpirit), 2) + Math.pow(safeValue(boostedSubstance), 2) +
            Math.pow(safeValue(boostedEssence), 2) + Math.pow(safeValue(fire), 2) +
            Math.pow(safeValue(air), 2) + Math.pow(safeValue(water), 2)) /
            Math.pow(safeValue(boostedMatter + earth), 2);
        // Greg's Energy formula with consistent scaling
        const rawGregsEnergy = heat - reactivity * entropy;
        const scaledGregsEnergy = (rawGregsEnergy + 1) / 2; // Convert from range (-1,1) to (0,1)
        const gregsEnergy = Math.max(0.1, Math.min(1.0, scaledGregsEnergy));
        // Normalize all energy values to ensure they're in the 0-1 range
        const normalizedHeat = Math.max(0.1, Math.min(1.0, heat));
        const normalizedEntropy = Math.max(0.1, Math.min(1.0, entropy));
        const normalizedReactivity = Math.max(0.1, Math.min(1.0, reactivity));
        // Calculate dominant element based on scaled elements
        const dominantElement = Object.entries(scaledElements).sort(([_keyA, valueA], [_keyB, valueB]) => valueB - valueA)[0][0];
        // Calculate dominant alchemical property
        const alchemicalProperties = {
            Spirit: boostedSpirit,
            Essence: boostedEssence,
            Matter: boostedMatter,
            Substance: boostedSubstance,
        };
        const dominantAlchemicalProperty = Object.entries(alchemicalProperties).sort(([_keyA, valueA], [_keyB, valueB]) => valueB - valueA)[0][0];
        // Extract dominant planets based on planetary positions if available
        let dominantPlanets = [];
        if (planetaryPositions) {
            // Get top 3 planets with highest values or dignity
            const planetEntries = Object.entries(planetaryPositions).filter(([planet, _]) => planet !== 'isDaytime' && planet !== 'currentZodiac');
            // Handle different position data formats
            dominantPlanets = planetEntries
                .sort(([_, valA], [__, valB]) => {
                // Sort by strength /dignity if available
                if (typeof valA === 'object' && typeof valB === 'object') {
                    const dataA = valA;
                    const dataB = valB;
                    const strengthA = (dataA === null || dataA === void 0 ? void 0 : dataA.strength) || 0;
                    const strengthB = (dataB === null || dataB === void 0 ? void 0 : dataB.strength) || 0;
                    return strengthB - strengthA;
                }
                // Default sort for simple numeric values
                return Number(valB) - Number(valA);
            })
                .slice(0, 3)
                .map(([planet, _]) => planet);
        }
        // Ensure we have planetary dignities data
        const planetaryDignities = {};
        // Handle NaN values or infinity for all properties
        const ensureSafeNumber = (val) => {
            if (isNaN(val) || !isFinite(val))
                return 0.2;
            return val;
        };
        return {
            id: item.id,
            name: item.name,
            elementalProperties: item.elementalProperties,
            transformedElementalProperties: scaledElements,
            alchemicalProperties: {
                Spirit: boostedSpirit,
                Essence: boostedEssence,
                Matter: boostedMatter,
                Substance: boostedSubstance,
            },
            heat: normalizedHeat,
            entropy: normalizedEntropy,
            reactivity: normalizedReactivity,
            gregsEnergy: gregsEnergy,
            dominantElement,
            dominantAlchemicalProperty,
            planetaryBoost: planetaryInfluence,
            dominantPlanets,
            planetaryDignities,
        };
    });
}
exports.transformItemsWithPlanetaryPositions = transformItemsWithPlanetaryPositions;
// New differentiation functions
const applyNonLinearScaling = (props) => ({
    Fire: Math.tanh(props.Fire * 2),
    Water: 1 - Math.exp(-props.Water * 3),
    Earth: props.Earth ** 1.5,
    Air: Math.sin((props.Air * Math.PI) / 2),
});
const calculateUniquenessScore = (item) => {
    const variance = Object.values(item.elementalProperties).reduce((acc, val) => acc + Math.abs(val - 0.5), 0);
    return Math.min(1, variance * 2);
};
// Add or update the normalizeElementalValues function
function normalizeElementalValues(values) {
    const total = Object.values(values).reduce((sum, val) => sum + val, 0);
    // If total is zero or close to zero, return default distribution
    if (total < 0.01) {
        return {
            Fire: 0.25,
            Water: 0.25,
            Earth: 0.25,
            Air: 0.25,
        };
    }
    // Normalize values to sum to 1.0
    return {
        Fire: values.Fire / total,
        Water: values.Water / total,
        Earth: values.Earth / total,
        Air: values.Air / total,
    };
}
exports.normalizeElementalValues = normalizeElementalValues;
// Get the primary element regardless of format
function getPrimaryElement(elementalAffinity) {
    const affinityData = elementalAffinity;
    return ((affinityData === null || affinityData === void 0 ? void 0 : affinityData.base) || (affinityData === null || affinityData === void 0 ? void 0 : affinityData.element) || 'Fire');
}
exports.getPrimaryElement = getPrimaryElement;
// Get element strength if available
function getElementStrength(elementalAffinity) {
    const affinityData = elementalAffinity;
    return (affinityData === null || affinityData === void 0 ? void 0 : affinityData.strength) || 1;
}
exports.getElementStrength = getElementStrength;
/**
 * Ensures all required elemental properties are present
 * @param properties The elemental properties to validate and complete
 * @returns Complete elemental properties
 */
const ensureCompleteElementalProperties = (properties) => {
    var _a, _b, _c, _d;
    return {
        Fire: (_a = properties.Fire) !== null && _a !== void 0 ? _a : 0.25,
        Water: (_b = properties.Water) !== null && _b !== void 0 ? _b : 0.25,
        Earth: (_c = properties.Earth) !== null && _c !== void 0 ? _c : 0.25,
        Air: (_d = properties.Air) !== null && _d !== void 0 ? _d : 0.25,
    };
};
exports.ensureCompleteElementalProperties = ensureCompleteElementalProperties;
/**
 * WARNING: getBalancingElement is legacy and does not comply with current elemental logic principles (no opposing/balancing elements). Review usage and refactor/remove if not needed.
 */
function getBalancingElement(element) {
    // Elements work best with themselves - reinforcing the current energy
    return element;
}
exports.getBalancingElement = getBalancingElement;
/**
 * WARNING: getElementalRelationship is legacy and may not comply with current elemental logic principles.
 * All element combinations are harmonious; avoid using "opposing" or "controlling" logic.
 */
function getElementalRelationship(element1, element2) {
    if (element1 === element2) {
        return 'same';
    }
    // The generating cycle for 4-element system: Fire → Earth → Water → Air → Fire
    const generatingCycle = {
        Fire: 'Earth',
        Earth: 'Water',
        Water: 'Air',
        Air: 'Fire',
    };
    // The controlling cycle for 4-element system: Fire → Air → Earth → Water → Fire
    const controllingCycle = {
        Fire: 'Air',
        Air: 'Earth',
        Earth: 'Water',
        Water: 'Fire',
    };
    if (generatingCycle[element1] === element2) {
        return 'generating'; // element1 generates element2
    }
    else if (generatingCycle[element2] === element1) {
        return 'weakened-by'; // element2 generates element1
    }
    else if (controllingCycle[element1] === element2) {
        return 'controlling'; // element1 controls element2
    }
    else if (controllingCycle[element2] === element1) {
        return 'controlled-by'; // element2 controls element1
    }
    else {
        return 'neutral';
    }
}
exports.getElementalRelationship = getElementalRelationship;
/**
 * Gets the element that strengthens the provided element
 */
function getStrengtheningElement(element) {
    // The element that generates the provided element will strengthen it
    const strengthMap = {
        Fire: 'Air',
        Earth: 'Fire',
        Water: 'Earth',
        Air: 'Water', // Water strengthens Air
    };
    return strengthMap[element];
}
exports.getStrengtheningElement = getStrengtheningElement;
/**
 * Enhance vegetable transformations by adding thermodynamic effects to different cooking methods
 * @param vegetables The collection of vegetables to enhance
 * @returns Enhanced vegetables with complete transformation properties
 */
function enhanceVegetableTransformations(vegetables) {
    return Object.entries(vegetables).reduce((acc, [key, vegetable]) => {
        // Skip if not an object
        if (typeof vegetable !== 'object' || vegetable === null) {
            acc[key] = vegetable;
            return acc;
        }
        const enhanced = { ...vegetable };
        // Create transformation if it doesn't exist
        if (!enhanced.elementalTransformation) {
            // Get the dominant element
            const elementalProps = enhanced.elementalProperties || {
                Earth: 0.3,
                Water: 0.3,
                Air: 0.2,
                Fire: 0.2,
            };
            let dominantElement = 'Earth';
            let highestValue = 0;
            for (const [element, value] of Object.entries(elementalProps)) {
                if (typeof value === 'number' && value > highestValue) {
                    dominantElement = element;
                    highestValue = value;
                }
            }
            // Set default transformations based on dominant element
            enhanced.elementalTransformation = {
                whenCooked: { [dominantElement]: 0.1, Fire: 0.05 },
                whenDried: { Earth: 0.1, Air: 0.05 },
                whenFermented: { Water: 0.1, Air: 0.05 },
            };
        }
        // Add thermodynamic changes if they don't exist
        if (enhanced.elementalTransformation &&
            !enhanced.elementalTransformation.thermodynamicChanges) {
            enhanced.elementalTransformation.thermodynamicChanges = {
                cooked: {
                    heat: 0.1,
                    entropy: 0.05,
                    reactivity: 0.05,
                },
                dried: {
                    heat: -0.05,
                    entropy: -0.1,
                    reactivity: -0.05,
                },
                fermented: {
                    entropy: 0.2,
                    reactivity: 0.15,
                    stabilityIndex: -0.1,
                },
                roasted: {
                    heat: 0.2,
                    entropy: 0.1,
                    energy: 0.15,
                },
                steamed: {
                    heat: 0.05,
                    moisture: 0.2,
                    reactivity: 0.05,
                },
            };
        }
        // Add elementalSignature if it doesn't exist
        if (!enhanced.elementalSignature && enhanced.elementalProperties) {
            enhanced.elementalSignature = Object.entries(enhanced.elementalProperties)
                .sort((a, b) => {
                // Apply Pattern KK-1: Explicit Type Assertion for arithmetic operations
                const valueA = Number(a[1]) || 0;
                const valueB = Number(b[1]) || 0;
                return valueB - valueA;
            })
                .map(([element, value]) => [element, Number(value)]);
        }
        // Add sensory profiles if they don't exist
        if (!enhanced.sensoryProfile) {
            // Default sensory profile based on vegetable subCategory
            const subCategory = enhanced.subCategory || 'vegetable';
            const profiles = {
                'leafy green': {
                    taste: {
                        bitter: 0.6,
                        sweet: 0.2,
                        umami: 0.1,
                        salty: 0.05,
                        sour: 0.05,
                        spicy: 0,
                    },
                    aroma: {
                        herbal: 0.5,
                        earthy: 0.3,
                        floral: 0.1,
                        fruity: 0.05,
                        woody: 0.05,
                        spicy: 0,
                    },
                    texture: {
                        crisp: 0.7,
                        tender: 0.2,
                        silky: 0.1,
                        chewy: 0,
                        creamy: 0,
                        crunchy: 0,
                    },
                },
                root: {
                    taste: {
                        sweet: 0.5,
                        earthy: 0.3,
                        bitter: 0.1,
                        umami: 0.1,
                        salty: 0,
                        spicy: 0,
                    },
                    aroma: {
                        earthy: 0.6,
                        woody: 0.2,
                        herbal: 0.1,
                        fruity: 0.1,
                        floral: 0,
                        spicy: 0,
                    },
                    texture: {
                        crunchy: 0.6,
                        chewy: 0.2,
                        tender: 0.2,
                        crisp: 0,
                        silky: 0,
                        creamy: 0,
                    },
                },
                allium: {
                    taste: {
                        pungent: 0.6,
                        sweet: 0.2,
                        umami: 0.2,
                        bitter: 0,
                        salty: 0,
                        sour: 0,
                    },
                    aroma: {
                        spicy: 0.7,
                        earthy: 0.2,
                        herbal: 0.1,
                        floral: 0,
                        fruity: 0,
                        woody: 0,
                    },
                    texture: {
                        crunchy: 0.5,
                        chewy: 0.3,
                        tender: 0.2,
                        crisp: 0,
                        silky: 0,
                        creamy: 0,
                    },
                },
                cruciferous: {
                    taste: {
                        bitter: 0.5,
                        sweet: 0.2,
                        spicy: 0.2,
                        umami: 0.1,
                        salty: 0,
                        sour: 0,
                    },
                    aroma: {
                        earthy: 0.4,
                        sulfurous: 0.3,
                        woody: 0.2,
                        herbal: 0.1,
                        floral: 0,
                        fruity: 0,
                    },
                    texture: {
                        crunchy: 0.7,
                        crisp: 0.2,
                        tender: 0.1,
                        chewy: 0,
                        silky: 0,
                        creamy: 0,
                    },
                },
                nightshade: {
                    taste: {
                        umami: 0.5,
                        sweet: 0.3,
                        sour: 0.1,
                        bitter: 0.1,
                        salty: 0,
                        spicy: 0,
                    },
                    aroma: {
                        fruity: 0.5,
                        earthy: 0.3,
                        herbal: 0.2,
                        floral: 0,
                        woody: 0,
                        spicy: 0,
                    },
                    texture: {
                        tender: 0.5,
                        juicy: 0.3,
                        chewy: 0.2,
                        crisp: 0,
                        crunchy: 0,
                        silky: 0,
                    },
                },
                squash: {
                    taste: {
                        sweet: 0.6,
                        earthy: 0.2,
                        nutty: 0.2,
                        bitter: 0,
                        salty: 0,
                        sour: 0,
                    },
                    aroma: {
                        earthy: 0.4,
                        sweet: 0.4,
                        woody: 0.1,
                        herbal: 0.1,
                        floral: 0,
                        spicy: 0,
                    },
                    texture: {
                        tender: 0.4,
                        creamy: 0.3,
                        chewy: 0.2,
                        crisp: 0.1,
                        crunchy: 0,
                        silky: 0,
                    },
                },
                legume: {
                    taste: {
                        earthy: 0.5,
                        sweet: 0.3,
                        umami: 0.2,
                        bitter: 0,
                        salty: 0,
                        sour: 0,
                    },
                    aroma: {
                        earthy: 0.6,
                        nutty: 0.3,
                        herbal: 0.1,
                        floral: 0,
                        fruity: 0,
                        spicy: 0,
                    },
                    texture: {
                        tender: 0.4,
                        creamy: 0.3,
                        chewy: 0.3,
                        crisp: 0,
                        crunchy: 0,
                        silky: 0,
                    },
                },
                starchy: {
                    taste: {
                        sweet: 0.5,
                        earthy: 0.3,
                        umami: 0.2,
                        bitter: 0,
                        salty: 0,
                        sour: 0,
                    },
                    aroma: {
                        earthy: 0.7,
                        nutty: 0.2,
                        herbal: 0.1,
                        floral: 0,
                        fruity: 0,
                        spicy: 0,
                    },
                    texture: {
                        starchy: 0.6,
                        tender: 0.2,
                        creamy: 0.2,
                        crisp: 0,
                        crunchy: 0,
                        silky: 0,
                    },
                },
            };
            // Select appropriate profile or use default
            const profile = profiles[subCategory] || {
                taste: {
                    sweet: 0.25,
                    bitter: 0.25,
                    umami: 0.25,
                    salty: 0.15,
                    sour: 0.1,
                    spicy: 0,
                },
                aroma: {
                    earthy: 0.3,
                    herbal: 0.3,
                    woody: 0.2,
                    fruity: 0.1,
                    floral: 0.1,
                    spicy: 0,
                },
                texture: {
                    tender: 0.3,
                    crunchy: 0.3,
                    crisp: 0.2,
                    chewy: 0.1,
                    creamy: 0.1,
                    silky: 0,
                },
            };
            enhanced.sensoryProfile = profile;
        }
        acc[key] = enhanced;
        return acc;
    }, {});
}
exports.enhanceVegetableTransformations = enhanceVegetableTransformations;
/**
 * Enhances oil properties with additional culinary, sensory, and transformation details
 * @param oils Record of oil ingredients
 * @returns Enhanced oil ingredients with complete properties
 */
function enhanceOilProperties(oils) {
    return Object.entries(oils).reduce((acc, [key, oil]) => {
        var _a, _b, _c;
        // Start with the original oil
        const enhancedOil = { ...oil };
        // Ensure basic properties exist
        enhancedOil.category = enhancedOil.category || 'oil';
        enhancedOil.elementalProperties = enhancedOil.elementalProperties || {
            Fire: 0.3,
            Water: 0.2,
            Earth: 0.3,
            Air: 0.2,
        };
        enhancedOil.qualities = Array.isArray(enhancedOil.qualities)
            ? enhancedOil.qualities
            : [];
        // Create default sensory profile if none exists
        if (!enhancedOil.sensoryProfile) {
            const oilType = key.toLowerCase();
            const isFruity = oilType.includes('olive') || oilType.includes('avocado');
            const isNutty = oilType.includes('nut') ||
                oilType.includes('sesame') ||
                oilType.includes('walnut') ||
                oilType.includes('almond') ||
                oilType.includes('peanut');
            const isFloral = oilType.includes('sunflower') || oilType.includes('safflower');
            const isNeutral = oilType.includes('vegetable') ||
                oilType.includes('canola') ||
                oilType.includes('grapeseed');
            const isTropical = oilType.includes('coconut') || oilType.includes('palm');
            enhancedOil.sensoryProfile = {
                taste: {
                    sweet: isFruity || isTropical ? 0.6 : 0.2,
                    bitter: isNutty ? 0.4 : 0.1,
                    umami: isNutty ? 0.5 : 0.2,
                    rich: isNutty || isFruity ? 0.7 : 0.4,
                },
                aroma: {
                    fruity: isFruity ? 0.8 : 0.1,
                    nutty: isNutty ? 0.8 : 0.1,
                    floral: isFloral ? 0.7 : 0.1,
                    neutral: isNeutral ? 0.9 : 0.2,
                    tropical: isTropical ? 0.8 : 0.1,
                },
                texture: {
                    viscosity: isTropical || oilType.includes('olive') ? 0.7 : 0.5,
                    mouthfeel: isFruity || isNutty ? 0.8 : 0.5,
                    richness: isFruity || isNutty || isTropical ? 0.7 : 0.4,
                },
            };
        }
        // Enhance culinary applications if present
        if (enhancedOil.culinaryApplications) {
            // Ensure all application types are properly structured
            Object.entries(enhancedOil.culinaryApplications).forEach(([appType, application]) => {
                if (application && typeof application === 'object') {
                    const appData = application;
                    enhancedOil.culinaryApplications[appType] = {
                        ...application,
                        elementalEffect: (appData === null || appData === void 0 ? void 0 : appData.elementalEffect) || {
                            Fire: appType === 'frying' ||
                                appType === 'cooking' ||
                                appType === 'highHeat'
                                ? 0.2
                                : 0.1,
                            Water: appType === 'dressing' || appType === 'marinade' ? 0.2 : 0.1,
                            Earth: appType === 'baking' || appType === 'roasting' ? 0.2 : 0.1,
                            Air: appType === 'emulsion' || appType === 'whipping' ? 0.2 : 0.1,
                        },
                        alchemicalEffect: (appData === null || appData === void 0 ? void 0 : appData.alchemicalEffect) || {
                            spirit: appType === 'finishing' || appType === 'infusion' ? 0.2 : 0.1,
                            essence: appType === 'dressing' || appType === 'marinade' ? 0.2 : 0.1,
                            matter: appType === 'baking' || appType === 'cooking' ? 0.2 : 0.1,
                            substance: appType === 'frying' || appType === 'highHeat' ? 0.2 : 0.1,
                        },
                    };
                }
            });
        }
        else {
            // Create default culinary applications based on smoke point and oil type
            const smokePoint = ((_a = enhancedOil.smokePoint) === null || _a === void 0 ? void 0 : _a.fahrenheit) || 0;
            const isHighHeat = smokePoint > 400;
            const isMediumHeat = smokePoint > 325 && smokePoint <= 400;
            const isLowHeat = smokePoint <= 325;
            const isFinishing = key.toLowerCase().includes('olive') ||
                key.toLowerCase().includes('walnut') ||
                key.toLowerCase().includes('sesame') ||
                key.toLowerCase().includes('pumpkin');
            enhancedOil.culinaryApplications = {
                ...(isHighHeat
                    ? {
                        frying: {
                            notes: ['Excellent for high-heat cooking'],
                            techniques: ['Deep frying', 'Stir-frying', 'Sautéing'],
                            elementalEffect: { Fire: 0.3, Earth: 0.1 },
                            alchemicalEffect: { substance: 0.3, matter: 0.2 },
                        },
                    }
                    : {}),
                ...(isMediumHeat
                    ? {
                        cooking: {
                            notes: ['Good for medium-heat cooking'],
                            techniques: ['Sautéing', 'Pan frying', 'Roasting'],
                            elementalEffect: { Fire: 0.2, Earth: 0.2 },
                            alchemicalEffect: { matter: 0.3, essence: 0.1 },
                        },
                    }
                    : {}),
                ...(isLowHeat || isFinishing
                    ? {
                        finishing: {
                            notes: ['Best used unheated or low heat'],
                            techniques: ['Drizzling', 'Dressings', 'Dips'],
                            elementalEffect: { Water: 0.3, Air: 0.2 },
                            alchemicalEffect: { spirit: 0.3, essence: 0.2 },
                        },
                    }
                    : {}),
                ...(enhancedOil.subCategory === 'baking' ||
                    key.toLowerCase().includes('coconut')
                    ? {
                        baking: {
                            notes: ['Suitable for baked goods'],
                            techniques: ['Cakes', 'Cookies', 'Breads'],
                            elementalEffect: { Earth: 0.3, Fire: 0.1 },
                            alchemicalEffect: { matter: 0.3, substance: 0.1 },
                        },
                    }
                    : {}),
            };
        }
        // Add cooking transformations if they don't exist
        if (!enhancedOil.elementalTransformation) {
            enhancedOil.elementalTransformation = {
                whenHeated: {
                    Fire: 0.2,
                    Air: 0.1,
                    Water: -0.1,
                    Earth: -0.05,
                },
                whenCooled: {
                    Water: 0.1,
                    Earth: 0.2,
                    Fire: -0.1,
                    Air: -0.05,
                },
                whenMixed: {
                    Air: 0.15,
                    Water: 0.1,
                    Fire: -0.05,
                    Earth: -0.05,
                },
                whenInfused: {
                    Air: 0.2,
                    Fire: 0.1,
                    Earth: -0.05,
                    Water: -0.05,
                },
            };
        }
        // Add thermodynamic properties if they don't exist
        if (!enhancedOil.thermodynamicProperties) {
            // Base on smoke point if available
            const smokePoint = ((_b = enhancedOil.smokePoint) === null || _b === void 0 ? void 0 : _b.fahrenheit) || 350;
            const normalizedSmokePoint = (smokePoint - 300) / 250; // Normalize between 300-550°F
            const heatValue = 0.5 + normalizedSmokePoint * 0.4; // Scale 0.5-0.9
            enhancedOil.thermodynamicProperties = {
                heat: Math.min(Math.max(heatValue, 0.3), 0.9),
                entropy: 0.4,
                reactivity: 0.6,
                energy: 0.7,
            };
        }
        // Add recommended cooking methods if they don't exist
        if (!enhancedOil.recommendedCookingMethods) {
            const smokePoint = ((_c = enhancedOil.smokePoint) === null || _c === void 0 ? void 0 : _c.fahrenheit) || 0;
            const methods = [];
            if (smokePoint > 400) {
                methods.push({ name: 'deepFrying', potency: 0.9 });
                methods.push({ name: 'stirFrying', potency: 0.9 });
                methods.push({ name: 'sautéing', potency: 0.8 });
            }
            if (smokePoint > 350) {
                methods.push({ name: 'roasting', potency: 0.7 });
                methods.push({ name: 'baking', potency: 0.7 });
            }
            if (enhancedOil.subCategory === 'finishing' || smokePoint < 350) {
                methods.push({ name: 'dressing', potency: 0.9 });
                methods.push({ name: 'marinating', potency: 0.8 });
                methods.push({ name: 'drizzling', potency: 1.0 });
            }
            enhancedOil.recommendedCookingMethods = methods;
        }
        acc[key] = enhancedOil;
        return acc;
    }, {});
}
exports.enhanceOilProperties = enhanceOilProperties;
/**
 * Pattern OO-3: Utility Import Alignment - Standalone exports for TS2614 compatibility
 */
function getCurrentElementalState() {
    return ElementalCalculator_1.ElementalCalculator.getCurrentElementalState();
}
exports.getCurrentElementalState = getCurrentElementalState;
function getDefaultElementalProperties() {
    return elementalConstants_1.DEFAULT_ELEMENTAL_PROPERTIES;
}
exports.getDefaultElementalProperties = getDefaultElementalProperties;
function ensureLowercaseFormat(properties) {
    if (!properties || typeof properties !== 'object') {
        return properties;
    }
    const lowercaseProps = {};
    for (const [key, value] of Object.entries(properties)) {
        // Convert capitalized element names to lowercase
        const lowerKey = key.toLowerCase();
        lowercaseProps[lowerKey] = value;
    }
    return lowercaseProps;
}
exports.ensureLowercaseFormat = ensureLowercaseFormat;
/**
 * Ensures the returned object always matches the IngredientMapping interface at runtime.
 */
const fixIngredientMapping = (mapping, key) => {
    // Format key into a readable name if no name is provided
    const formattedName = key
        .split('_')
        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');
    // Ensure all required elements exist in elementalProperties
    const elementalProperties = mapping.elementalProperties
        ? (0, exports.ensureCompleteElementalProperties)(mapping.elementalProperties)
        : elementalConstants_1.DEFAULT_ELEMENTAL_PROPERTIES;
    // Add runtime type guard (minimal, since normalization is already enforced)
    const requiredKeys = ['name', 'category', 'elementalProperties'];
    for (const k of requiredKeys) {
        if (!(k in mapping)) {
            throw new Error(`fixIngredientMapping: Missing required key '${k}' for ingredient '${key}'`);
        }
    }
    // Ensure astrologicalProfile has minimal structure if present but empty
    if (mapping.astrologicalProfile && typeof mapping.astrologicalProfile === 'object' && Object.keys(mapping.astrologicalProfile).length === 0) {
        mapping.astrologicalProfile = {
            rulingPlanets: [],
            favorableZodiac: []
        };
    }
    return {
        ...mapping,
        name: mapping.name || formattedName,
        elementalProperties,
    };
};
exports.fixIngredientMapping = fixIngredientMapping;
/**
 * Normalizes all ingredient mappings and guarantees type safety for downstream usage.
 */
const fixIngredientMappings = (ingredients) => {
    const result = {};
    Object.entries(ingredients).forEach(([key, mapping]) => {
        result[key] = (0, exports.fixIngredientMapping)(mapping, key);
    });
    return result;
};
exports.fixIngredientMappings = fixIngredientMappings;
/**
 * Fixes ingredient mappings by ensuring all required properties are present
 * @param ingredients Raw ingredient mappings
 * @returns Fixed ingredient mappings
 */
function fixRawIngredientMappings(ingredients) {
    return Object.entries(ingredients).reduce((acc, [key, value]) => {
        // Skip null or undefined values
        if (!value)
            return acc;
        const valueData = value;
        // Ensure elemental properties are normalized
        const elementalProperties = (0, exports.normalizeProperties)((valueData === null || valueData === void 0 ? void 0 : valueData.elementalProperties) || {});
        // Create a standardized astrological profile if one doesn't exist
        const astroProfile = (valueData === null || valueData === void 0 ? void 0 : valueData.astrologicalProfile) || {};
        // Determine base elemental affinity if not provided
        if (!astroProfile.elementalAffinity) {
            const strongestElement = Object.entries(elementalProperties)
                .sort(([, a], [, b]) => b - a)[0][0]
                .toLowerCase();
            astroProfile.elementalAffinity = {
                base: strongestElement,
            };
        }
        acc[key] = {
            ...value,
            name: (valueData === null || valueData === void 0 ? void 0 : valueData.name) || key.replace(/_/g, ' '),
            category: (valueData === null || valueData === void 0 ? void 0 : valueData.category) || 'ingredient',
            elementalProperties,
            astrologicalProfile: astroProfile,
        };
        return acc;
    }, {});
}
exports.fixRawIngredientMappings = fixRawIngredientMappings;
/**
 * Calculate the affinity between two elements based on the Five Elements theory
 * Returns a value between 0 and 1, where:
 * - 1.0: Same element (perfect affinity)
 * - 0.8: Element is generated by (child of) the other
 * - 0.6: Element generates (parent of) the other
 * - 0.4: Neutral relationship
 * - 0.2: Element is controlled by the other
 * - 0.0: Element controls the other (weakest affinity)
 */
function calculateElementalAffinity(element1, element2) {
    const relationship = getElementalRelationship(element1, element2);
    switch (relationship) {
        case 'same':
            return 1.0;
        case 'generating':
            return 0.8;
        case 'controlled-by':
            return 0.6;
        case 'neutral':
            return 0.4;
        case 'weakened-by':
            return 0.2;
        case 'controlling':
            return 0.0;
        default:
            return 0.4;
    }
}
exports.calculateElementalAffinity = calculateElementalAffinity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,