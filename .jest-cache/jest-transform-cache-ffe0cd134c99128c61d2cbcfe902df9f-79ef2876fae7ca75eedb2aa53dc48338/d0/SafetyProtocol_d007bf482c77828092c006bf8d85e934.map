{"file":"/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/services/campaign/SafetyProtocol.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/services/campaign/SafetyProtocol.ts"],"sourcesContent":["/**\n * Safety Protocol System\n * Perfect Codebase Campaign - Comprehensive Safety Implementation\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {\n  CorruptionPattern,\n  CorruptionReport,\n  CorruptionSeverity,\n  GitStash,\n  RecoveryAction,\n  SafetyEvent,\n  SafetyEventSeverity,\n  SafetyEventType,\n  SafetySettings,\n  ValidationResult,\n} from '../../types/campaign';\n\nexport class SafetyProtocol {\n  private settings: SafetySettings;\n  private stashes: Map<string, GitStash> = new Map();\n  private safetyEvents: SafetyEvent[] = [];\n  private stashCounter: number = 0;\n\n  constructor(settings: SafetySettings) {\n    this.settings = settings;\n    this.initializeStashTracking();\n  }\n\n  /**\n   * Create a git stash with descriptive naming conventions\n   */\n  async createStash(description: string, phase?: string): Promise<string> {\n    try {\n      this.stashCounter++;\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n      const phasePrefix = phase ? `${phase}-` : '';\n      const stashName = `campaign-${phasePrefix}${this.stashCounter}-${timestamp}`;\n      const fullDescription = `${stashName}: ${description}`;\n\n      // Validate git state before creating stash\n      const gitValidation = await this.validateGitState();\n      if (!gitValidation.success) {\n        throw new Error(`Git validation failed: ${gitValidation.errors.join(', ')}`);\n      }\n\n      // Create the git stash with all files including untracked\n      execSync(`git stash push -u -m \"${fullDescription}\"`, {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      // Get the actual stash reference\n      const stashList = execSync('git stash list --oneline', { encoding: 'utf8' });\n      const stashRef = stashList.split('\\n')[0]?.split(':')[0] || 'stash@{0}';\n\n      // Store stash information\n      const stash: GitStash = {\n        id: stashName,\n        description: fullDescription,\n        timestamp: new Date(),\n        branch: this.getCurrentBranch(),\n        ref: stashRef,\n      };\n\n      this.stashes.set(stashName, stash);\n      this.saveStashTracking();\n\n      this.addSafetyEvent({\n        type: SafetyEventType.CHECKPOINT_CREATED,\n        timestamp: new Date(),\n        description: `Git stash created: ${stashName} (${stashRef})`,\n        severity: SafetyEventSeverity.INFO,\n        action: 'STASH_CREATE',\n      });\n\n      console.log(`📦 Created git stash: ${stashName}`);\n      console.log(`   Reference: ${stashRef}`);\n      console.log(`   Rollback with: git stash apply ${stashRef}`);\n\n      return stashName;\n    } catch (error) {\n      this.addSafetyEvent({\n        type: SafetyEventType.EMERGENCY_RECOVERY,\n        timestamp: new Date(),\n        description: `Failed to create git stash: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n        severity: SafetyEventSeverity.ERROR,\n        action: 'STASH_FAILED',\n      });\n\n      throw new Error(\n        `Failed to create git stash: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n      );\n    }\n  }\n\n  /**\n   * Create a named checkpoint stash for specific operations\n   */\n  async createCheckpointStash(operation: string, phase: string): Promise<string> {\n    const description = `Checkpoint before ${operation} in ${phase}`;\n    return this.createStash(description, phase);\n  }\n\n  /**\n   * Apply a specific git stash with automatic rollback scenarios\n   */\n  async applyStash(stashId: string, validateAfter: boolean = true): Promise<void> {\n    try {\n      const stash = this.stashes.get(stashId);\n      if (!stash) {\n        throw new Error(`Stash not found: ${stashId}`);\n      }\n\n      // Use the stored reference if available, otherwise try to find by message\n      let stashRef = stash.ref;\n      if (!stashRef) {\n        stashRef = await this.findStashByMessage(stash.description);\n      }\n\n      // Apply the stash\n      execSync(`git stash apply ${stashRef}`, {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      // Validate after application if requested\n      if (validateAfter) {\n        const validation = await this.validateGitState();\n        if (!validation.success) {\n          console.warn(\n            `⚠️ Git state validation warnings after stash apply: ${validation.warnings.join(', ')}`,\n          );\n        }\n      }\n\n      this.addSafetyEvent({\n        type: SafetyEventType.ROLLBACK_TRIGGERED,\n        timestamp: new Date(),\n        description: `Git stash applied: ${stashId} (${stashRef})`,\n        severity: SafetyEventSeverity.WARNING,\n        action: 'STASH_APPLY',\n      });\n\n      console.log(`🔄 Applied git stash: ${stashId}`);\n      console.log(`   Reference: ${stashRef}`);\n    } catch (error) {\n      this.addSafetyEvent({\n        type: SafetyEventType.EMERGENCY_RECOVERY,\n        timestamp: new Date(),\n        description: `Failed to apply git stash ${stashId}: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n        severity: SafetyEventSeverity.ERROR,\n        action: 'STASH_APPLY_FAILED',\n      });\n\n      throw new Error(\n        `Failed to apply git stash ${stashId}: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n      );\n    }\n  }\n\n  /**\n   * Automatically apply the most recent stash for rollback scenarios\n   */\n  async autoApplyLatestStash(): Promise<string> {\n    const stashes = Array.from(this.stashes.values()).sort(\n      (a, b) => b.timestamp.getTime() - a.timestamp.getTime(),\n    );\n\n    if (stashes.length === 0) {\n      throw new Error('No stashes available for automatic rollback');\n    }\n\n    const latestStash = stashes[0];\n    await this.applyStash(latestStash.id);\n    return latestStash.id;\n  }\n\n  /**\n   * Apply stash by phase for targeted rollbacks\n   */\n  async applyStashByPhase(phase: string): Promise<string> {\n    const phaseStashes = Array.from(this.stashes.values())\n      .filter(stash => stash.id.includes(`-${phase}-`))\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n    if (phaseStashes.length === 0) {\n      throw new Error(`No stashes found for phase: ${phase}`);\n    }\n\n    const latestPhaseStash = phaseStashes[0];\n    await this.applyStash(latestPhaseStash.id);\n    return latestPhaseStash.id;\n  }\n\n  /**\n   * List all campaign stashes\n   */\n  async listStashes(): Promise<GitStash[]> {\n    return Array.from(this.stashes.values());\n  }\n\n  /**\n   * Detect file corruption using comprehensive syntax validation patterns\n   */\n  async detectCorruption(files: string[]): Promise<CorruptionReport> {\n    const detectedFiles: string[] = [];\n    const corruptionPatterns: CorruptionPattern[] = [];\n    let maxSeverity = CorruptionSeverity.LOW;\n\n    console.log(`🔍 Analyzing ${files.length} files for corruption patterns...`);\n\n    for (const filePath of files) {\n      if (!fs.existsSync(filePath)) {\n        console.warn(`⚠️ File not found: ${filePath}`);\n        continue;\n      }\n\n      try {\n        const content = fs.readFileSync(filePath, 'utf8');\n        const fileCorruption = this.analyzeFileCorruption(filePath, content);\n\n        if (fileCorruption.patterns.length > 0) {\n          detectedFiles.push(filePath);\n          corruptionPatterns.push(...fileCorruption.patterns);\n\n          console.log(\n            `🚨 Corruption detected in ${filePath}: ${fileCorruption.patterns.length} patterns`,\n          );\n\n          // Update max severity\n          if (fileCorruption.severity === CorruptionSeverity.CRITICAL) {\n            maxSeverity = CorruptionSeverity.CRITICAL;\n          } else if (\n            fileCorruption.severity === CorruptionSeverity.HIGH &&\n            maxSeverity !== CorruptionSeverity.CRITICAL\n          ) {\n            maxSeverity = CorruptionSeverity.HIGH;\n          } else if (\n            fileCorruption.severity === CorruptionSeverity.MEDIUM &&\n            maxSeverity === CorruptionSeverity.LOW\n          ) {\n            maxSeverity = CorruptionSeverity.MEDIUM;\n          }\n        }\n      } catch (error) {\n        // File read error might indicate corruption\n        detectedFiles.push(filePath);\n        corruptionPatterns.push({\n          pattern: 'FILE_READ_ERROR',\n          description: `Cannot read file: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n          files: [filePath],\n        });\n        maxSeverity = CorruptionSeverity.HIGH;\n        console.error(\n          `❌ File read error in ${filePath}: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n        );\n      }\n    }\n\n    const recommendedAction = this.determineRecoveryAction(maxSeverity, detectedFiles.length);\n\n    const report: CorruptionReport = {\n      detectedFiles,\n      corruptionPatterns,\n      severity: maxSeverity,\n      recommendedAction,\n    };\n\n    if (detectedFiles.length > 0) {\n      this.addSafetyEvent({\n        type: SafetyEventType.CORRUPTION_DETECTED,\n        timestamp: new Date(),\n        description: `Corruption detected in ${detectedFiles.length} files (${maxSeverity} severity)`,\n        severity: this.mapCorruptionToEventSeverity(maxSeverity),\n        action: 'CORRUPTION_DETECTED',\n      });\n\n      console.log(\n        `📊 Corruption analysis complete: ${detectedFiles.length} files affected, severity: ${maxSeverity}`,\n      );\n    } else {\n      console.log(`✅ No corruption detected in ${files.length} files`);\n    }\n\n    return report;\n  }\n\n  /**\n   * Detect import/export corruption based on existing script knowledge\n   */\n  async detectImportExportCorruption(files: string[]): Promise<CorruptionReport> {\n    const detectedFiles: string[] = [];\n    const corruptionPatterns: CorruptionPattern[] = [];\n    let maxSeverity = CorruptionSeverity.LOW;\n\n    console.log(`🔍 Analyzing import/export corruption in ${files.length} files...`);\n\n    for (const filePath of files) {\n      if (!fs.existsSync(filePath) || !filePath.match(/\\.(ts|tsx|js|jsx)$/)) {\n        continue;\n      }\n\n      try {\n        const content = fs.readFileSync(filePath, 'utf8');\n        const importExportCorruption = this.analyzeImportExportCorruption(filePath, content);\n\n        if (importExportCorruption.patterns.length > 0) {\n          detectedFiles.push(filePath);\n          corruptionPatterns.push(...importExportCorruption.patterns);\n\n          if (importExportCorruption.severity === CorruptionSeverity.CRITICAL) {\n            maxSeverity = CorruptionSeverity.CRITICAL;\n          } else if (\n            importExportCorruption.severity === CorruptionSeverity.HIGH &&\n            maxSeverity !== CorruptionSeverity.CRITICAL\n          ) {\n            maxSeverity = CorruptionSeverity.HIGH;\n          } else if (\n            importExportCorruption.severity === CorruptionSeverity.MEDIUM &&\n            maxSeverity === CorruptionSeverity.LOW\n          ) {\n            maxSeverity = CorruptionSeverity.MEDIUM;\n          }\n        }\n      } catch (error) {\n        console.error(\n          `❌ Error analyzing import/export corruption in ${filePath}: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n        );\n      }\n    }\n\n    const recommendedAction = this.determineRecoveryAction(maxSeverity, detectedFiles.length);\n\n    return {\n      detectedFiles,\n      corruptionPatterns,\n      severity: maxSeverity,\n      recommendedAction,\n    };\n  }\n\n  /**\n   * Real-time monitoring during script execution\n   */\n  async startRealTimeMonitoring(files: string[], intervalMs: number = 5000): Promise<void> {\n    console.log(`🔄 Starting real-time corruption monitoring for ${files.length} files...`);\n\n    const monitoringInterval = setInterval(() => {\n      void (async () => {\n        try {\n          const report = await this.detectCorruption(files);\n\n          if (report.detectedFiles.length > 0) {\n            console.warn(\n              `⚠️ Real-time monitoring detected corruption in ${report.detectedFiles.length} files`,\n            );\n\n            this.addSafetyEvent({\n              type: SafetyEventType.CORRUPTION_DETECTED,\n              timestamp: new Date(),\n              description: `Real-time monitoring detected corruption: ${report.severity}`,\n              severity: this.mapCorruptionToEventSeverity(report.severity),\n              action: 'REALTIME_CORRUPTION_DETECTED',\n            });\n\n            // If critical corruption is detected, trigger emergency rollback\n            if (\n              report.severity === CorruptionSeverity.CRITICAL &&\n              this.settings.automaticRollbackEnabled\n            ) {\n              console.error(`🚨 Critical corruption detected! Triggering emergency rollback...`);\n              clearInterval(monitoringInterval);\n              await this.emergencyRollback();\n              return;\n            }\n          }\n        } catch (error) {\n          console.error(\n            `❌ Error during real-time monitoring: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n          );\n        }\n      })();\n    }, intervalMs);\n\n    // Store the interval ID for cleanup\n    (this as unknown).monitoringInterval = monitoringInterval;\n  }\n\n  /**\n   * Stop real-time monitoring\n   */\n  stopRealTimeMonitoring(): void {\n    if ((this as unknown).monitoringInterval) {\n      clearInterval((this as unknown).monitoringInterval);\n      (this as unknown).monitoringInterval = null;\n      console.log(`⏹️ Real-time corruption monitoring stopped`);\n    }\n  }\n\n  /**\n   * Validate syntax using TypeScript compiler\n   */\n  async validateSyntaxWithTypeScript(files: string[]): Promise<CorruptionReport> {\n    const detectedFiles: string[] = [];\n    const corruptionPatterns: CorruptionPattern[] = [];\n    let maxSeverity = CorruptionSeverity.LOW;\n\n    console.log(`🔍 Validating syntax with TypeScript compiler for ${files.length} files...`);\n\n    try {\n      // Run TypeScript compiler to check for syntax errors\n      const tsFiles = files.filter(f => f.match(/\\.(ts|tsx)$/));\n      if (tsFiles.length === 0) {\n        return {\n          detectedFiles,\n          corruptionPatterns,\n          severity: maxSeverity,\n          recommendedAction: RecoveryAction.CONTINUE,\n        };\n      }\n\n      const tscOutput = execSync('yarn tsc --noEmit --skipLibCheck 2>&1', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      // Parse TypeScript compiler output for syntax errors\n      const lines = tscOutput.split('\\n');\n      for (const line of lines) {\n        if (\n          line.includes('error TS') &&\n          (line.includes('Unexpected token') || line.includes('Expression expected'))\n        ) {\n          const fileMatch = line.match(/^([^(]+)\\(/);\n          if (fileMatch) {\n            const filePath = fileMatch[1];\n            if (files.includes(filePath) && !detectedFiles.includes(filePath)) {\n              detectedFiles.push(filePath);\n              corruptionPatterns.push({\n                pattern: 'TYPESCRIPT_SYNTAX_ERROR',\n                description: line.trim(),\n                files: [filePath],\n              });\n              maxSeverity = CorruptionSeverity.HIGH;\n            }\n          }\n        }\n      }\n    } catch (error) {\n      // TypeScript compiler errors might indicate syntax corruption\n      const errorOutput = (error as unknown).stdout || (error as unknown).message;\n      if (errorOutput.includes('Unexpected token') || errorOutput.includes('Expression expected')) {\n        maxSeverity = CorruptionSeverity.HIGH;\n        corruptionPatterns.push({\n          pattern: 'TYPESCRIPT_COMPILATION_ERROR',\n          description: `TypeScript compilation failed: ${errorOutput}`,\n          files: files.filter(f => f.match(/\\.(ts|tsx)$/)),\n        });\n      }\n    }\n\n    const recommendedAction = this.determineRecoveryAction(maxSeverity, detectedFiles.length);\n\n    return {\n      detectedFiles,\n      corruptionPatterns,\n      severity: maxSeverity,\n      recommendedAction,\n    };\n  }\n\n  /**\n   * Emergency rollback to clean state\n   */\n  async emergencyRollback(): Promise<void> {\n    try {\n      // Get the most recent stash\n      const stashes = Array.from(this.stashes.values()).sort(\n        (a, b) => b.timestamp.getTime() - a.timestamp.getTime(),\n      );\n\n      if (stashes.length === 0) {\n        throw new Error('No stashes available for emergency rollback');\n      }\n\n      const latestStash = stashes[0];\n      await this.applyStash(latestStash.id);\n\n      this.addSafetyEvent({\n        type: SafetyEventType.EMERGENCY_RECOVERY,\n        timestamp: new Date(),\n        description: `Emergency rollback completed using stash: ${latestStash.id}`,\n        severity: SafetyEventSeverity.WARNING,\n        action: 'EMERGENCY_ROLLBACK',\n      });\n\n      console.log(`🚨 Emergency rollback completed using stash: ${latestStash.id}`);\n    } catch (error) {\n      this.addSafetyEvent({\n        type: SafetyEventType.EMERGENCY_RECOVERY,\n        timestamp: new Date(),\n        description: `Emergency rollback failed: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n        severity: SafetyEventSeverity.CRITICAL,\n        action: 'EMERGENCY_ROLLBACK_FAILED',\n      });\n\n      throw new Error(\n        `Emergency rollback failed: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n      );\n    }\n  }\n\n  /**\n   * Validate git repository state\n   */\n  async validateGitState(): Promise<ValidationResult> {\n    try {\n      // Check if git repo exists\n      if (!fs.existsSync('.git')) {\n        return {\n          success: false,\n          errors: ['Not a git repository'],\n          warnings: [],\n        };\n      }\n\n      // Check for uncommitted changes\n      const status = execSync('git status --porcelain', { encoding: 'utf8' });\n      const hasUncommittedChanges = status.trim().length > 0;\n\n      const warnings: string[] = [];\n      if (hasUncommittedChanges && !this.settings.automaticRollbackEnabled) {\n        warnings.push('Uncommitted changes detected - consider creating a stash');\n      }\n\n      return {\n        success: true,\n        errors: [],\n        warnings,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        errors: [\n          `Git validation failed: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n        ],\n        warnings: [],\n      };\n    }\n  }\n\n  /**\n   * Clean up old stashes based on configurable retention policy\n   */\n  async cleanupOldStashes(): Promise<void> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - this.settings.stashRetentionDays);\n\n    const stashesToRemove: string[] = [];\n    let cleanedCount = 0;\n\n    for (const [stashId, stash] of this.stashes.entries()) {\n      if (stash.timestamp < cutoffDate) {\n        stashesToRemove.push(stashId);\n      }\n    }\n\n    for (const stashId of stashesToRemove) {\n      try {\n        const stash = this.stashes.get(stashId);\n        if (stash?.ref) {\n          // Try to drop the actual git stash if we have the reference\n          try {\n            execSync(`git stash drop ${stash.ref}`, {\n              encoding: 'utf8',\n              stdio: 'pipe',\n            });\n          } catch (gitError) {\n            // Stash might already be gone, just log warning\n            console.warn(\n              `⚠️ Could not drop git stash ${stash.ref}: ${(gitError as Record<string, unknown>).message || 'Unknown error'}`,\n            );\n          }\n        }\n\n        // Remove from our tracking\n        this.stashes.delete(stashId);\n        cleanedCount++;\n\n        console.log(`🧹 Cleaned up old stash: ${stashId}`);\n      } catch (error) {\n        console.warn(\n          `⚠️ Failed to cleanup stash ${stashId}: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n        );\n      }\n    }\n\n    if (cleanedCount > 0) {\n      this.saveStashTracking();\n      this.addSafetyEvent({\n        type: SafetyEventType.CHECKPOINT_CREATED,\n        timestamp: new Date(),\n        description: `Cleaned up ${cleanedCount} old stashes`,\n        severity: SafetyEventSeverity.INFO,\n        action: 'STASH_CLEANUP',\n      });\n    }\n  }\n\n  /**\n   * Get stashes by phase for targeted operations\n   */\n  async getStashesByPhase(phase: string): Promise<GitStash[]> {\n    return Array.from(this.stashes.values())\n      .filter(stash => stash.id.includes(`-${phase}-`))\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n  }\n\n  /**\n   * Get stash statistics for reporting\n   */\n  getStashStatistics(): {\n    total: number;\n    byPhase: Record<string, number>;\n    oldestStash?: Date;\n    newestStash?: Date;\n  } {\n    const stashes = Array.from(this.stashes.values());\n    const byPhase: Record<string, number> = {};\n\n    // Count stashes by phase\n    for (const stash of stashes) {\n      const phaseMatch = stash.id.match(/campaign-([^-]+)-/);\n      if (phaseMatch) {\n        const phase = phaseMatch[1];\n        byPhase[phase] = (byPhase[phase] || 0) + 1;\n      }\n    }\n\n    const timestamps = stashes.map(s => s.timestamp);\n    const oldestStash =\n      timestamps.length > 0 ? new Date(Math.min(...timestamps.map(t => t.getTime()))) : undefined;\n    const newestStash =\n      timestamps.length > 0 ? new Date(Math.max(...timestamps.map(t => t.getTime()))) : undefined;\n\n    return {\n      total: stashes.length,\n      byPhase,\n      oldestStash,\n      newestStash,\n    };\n  }\n\n  /**\n   * Get safety events for reporting\n   */\n  getSafetyEvents(): SafetyEvent[] {\n    return [...this.safetyEvents];\n  }\n\n  // Private helper methods\n\n  private analyzeFileCorruption(\n    filePath: string,\n    content: string,\n  ): {\n    patterns: CorruptionPattern[];\n    severity: CorruptionSeverity;\n  } {\n    const patterns: CorruptionPattern[] = [];\n    let severity = CorruptionSeverity.LOW;\n\n    // Check for import corruption patterns (based on existing scripts)\n    const importCorruptionPatterns = [\n      {\n        regex: /import @\\/types\\s+from '[^']*'\\s*;/g,\n        description: 'Corrupted type import statement',\n        severity: CorruptionSeverity.HIGH,\n      },\n      {\n        regex: /import @\\/services\\s+from '[^']*'\\s*;/g,\n        description: 'Corrupted service import statement',\n        severity: CorruptionSeverity.HIGH,\n      },\n      {\n        regex: /<<<<<<|>>>>>>|======/g,\n        description: 'Git merge conflict markers',\n        severity: CorruptionSeverity.CRITICAL,\n      },\n      {\n        regex: /\\bposit:\\s*anyi:\\s*anyo:\\s*anyn:\\s*anys:/g,\n        description: 'Corrupted parameter names',\n        severity: CorruptionSeverity.MEDIUM,\n      },\n      {\n        regex: /\\bcate:\\s*anyg:\\s*anyo:\\s*anyr:\\s*anyy:/g,\n        description: 'Corrupted parameter names',\n        severity: CorruptionSeverity.MEDIUM,\n      },\n    ];\n\n    for (const corruptionPattern of importCorruptionPatterns) {\n      const matches = content.match(corruptionPattern.regex);\n      if (matches) {\n        patterns.push({\n          pattern: corruptionPattern.regex.source,\n          description: corruptionPattern.description,\n          files: [filePath],\n        });\n\n        // Update severity to the highest found\n        if (corruptionPattern.severity === CorruptionSeverity.CRITICAL) {\n          severity = CorruptionSeverity.CRITICAL;\n        } else if (\n          corruptionPattern.severity === CorruptionSeverity.HIGH &&\n          severity !== CorruptionSeverity.CRITICAL\n        ) {\n          severity = CorruptionSeverity.HIGH;\n        } else if (\n          corruptionPattern.severity === CorruptionSeverity.MEDIUM &&\n          severity === CorruptionSeverity.LOW\n        ) {\n          severity = CorruptionSeverity.MEDIUM;\n        }\n      }\n    }\n\n    // Check for syntax corruption\n    if (this.hasSyntaxCorruption(content)) {\n      patterns.push({\n        pattern: 'SYNTAX_CORRUPTION',\n        description: 'Syntax corruption detected',\n        files: [filePath],\n      });\n      severity = CorruptionSeverity.HIGH;\n    }\n\n    return { patterns, severity };\n  }\n\n  private hasSyntaxCorruption(content: string): boolean {\n    // Check for unbalanced brackets (more lenient threshold)\n    const openBrackets = (content.match(/\\{/g) || []).length;\n    const closeBrackets = (content.match(/\\}/g) || []).length;\n    const openParens = (content.match(/\\(/g) || []).length;\n    const closeParens = (content.match(/\\)/g) || []).length;\n\n    if (Math.abs(openBrackets - closeBrackets) > 1 || Math.abs(openParens - closeParens) > 1) {\n      return true;\n    }\n\n    // Check for incomplete statements\n    const incompletePatterns = [\n      /export\\s*$/m,\n      /import\\s*$/m,\n      /function\\s*$/m,\n      /const\\s*$/m,\n      /let\\s*$/m,\n      /var\\s*$/m,\n    ];\n\n    return incompletePatterns.some(pattern => pattern.test(content));\n  }\n\n  /**\n   * Analyze import/export corruption patterns based on existing script knowledge\n   */\n  private analyzeImportExportCorruption(\n    filePath: string,\n    content: string,\n  ): {\n    patterns: CorruptionPattern[];\n    severity: CorruptionSeverity;\n  } {\n    const patterns: CorruptionPattern[] = [];\n    let severity = CorruptionSeverity.LOW;\n\n    // Import/Export corruption patterns based on existing script knowledge\n    const importExportCorruptionPatterns = [\n      {\n        regex: /import\\s+\\{\\s*\\}\\s+from\\s+['\"][^'\"]*['\"];?/g,\n        description: 'Empty import statement',\n        severity: CorruptionSeverity.MEDIUM,\n      },\n      {\n        regex: /import\\s+[^{]*\\s+from\\s+['\"]undefined['\"];?/g,\n        description: 'Import from undefined module',\n        severity: CorruptionSeverity.HIGH,\n      },\n      {\n        regex: /import\\s+[^{]*\\s+from\\s+['\"]['\"]\\s*;?/g,\n        description: 'Import from empty string',\n        severity: CorruptionSeverity.HIGH,\n      },\n      {\n        regex: /export\\s+\\{\\s*\\}\\s*;?/g,\n        description: 'Empty export statement',\n        severity: CorruptionSeverity.MEDIUM,\n      },\n      {\n        regex: /import\\s+[^{]*\\s+from\\s+['\"][^'\"]*['\"]\\s+from\\s+['\"][^'\"]*['\"];?/g,\n        description: 'Duplicate from clause in import',\n        severity: CorruptionSeverity.HIGH,\n      },\n      {\n        regex: /import\\s*\\{\\s*[^}]*,\\s*,\\s*[^}]*\\}\\s*from/g,\n        description: 'Double comma in import destructuring',\n        severity: CorruptionSeverity.HIGH,\n      },\n      {\n        regex: /import\\s*\\{\\s*[^}]*\\s+as\\s+as\\s+[^}]*\\}\\s*from/g,\n        description: 'Duplicate \"as\" keyword in import',\n        severity: CorruptionSeverity.HIGH,\n      },\n      {\n        regex: /export\\s*\\{\\s*[^}]*,\\s*,\\s*[^}]*\\}/g,\n        description: 'Double comma in export destructuring',\n        severity: CorruptionSeverity.HIGH,\n      },\n      {\n        regex: /import\\s+[^{]*\\s+from\\s+['\"]@\\/[^'\"]*\\s+@\\/[^'\"]*['\"];?/g,\n        description: 'Corrupted path alias in import',\n        severity: CorruptionSeverity.HIGH,\n      },\n      {\n        regex: /import\\s+[^{]*\\s+from\\s+['\"][^'\"]*\\.\\.[^'\"]*\\.\\.[^'\"]*['\"];?/g,\n        description: 'Corrupted relative path with multiple ..',\n        severity: CorruptionSeverity.MEDIUM,\n      },\n      {\n        regex: /import\\s*\\{\\s*[^}]*\\s*\\}\\s*\\{\\s*[^}]*\\s*\\}\\s*from/g,\n        description: 'Duplicate destructuring braces in import',\n        severity: CorruptionSeverity.CRITICAL,\n      },\n      {\n        regex: /export\\s+default\\s+default\\s+/g,\n        description: 'Duplicate default keyword in export',\n        severity: CorruptionSeverity.HIGH,\n      },\n      {\n        regex: /import\\s+type\\s+type\\s+/g,\n        description: 'Duplicate type keyword in import',\n        severity: CorruptionSeverity.HIGH,\n      },\n      {\n        regex: /import\\s*\\*\\s+as\\s+\\*\\s+as\\s+/g,\n        description: 'Corrupted namespace import syntax',\n        severity: CorruptionSeverity.CRITICAL,\n      },\n    ];\n\n    for (const corruptionPattern of importExportCorruptionPatterns) {\n      const matches = content.match(corruptionPattern.regex);\n      if (matches) {\n        patterns.push({\n          pattern: corruptionPattern.regex.source,\n          description: `${corruptionPattern.description} (${matches.length} occurrences)`,\n          files: [filePath],\n        });\n\n        // Update severity to the highest found\n        if (corruptionPattern.severity === CorruptionSeverity.CRITICAL) {\n          severity = CorruptionSeverity.CRITICAL;\n        } else if (\n          corruptionPattern.severity === CorruptionSeverity.HIGH &&\n          severity !== CorruptionSeverity.CRITICAL\n        ) {\n          severity = CorruptionSeverity.HIGH;\n        } else if (\n          corruptionPattern.severity === CorruptionSeverity.MEDIUM &&\n          severity === CorruptionSeverity.LOW\n        ) {\n          severity = CorruptionSeverity.MEDIUM;\n        }\n      }\n    }\n\n    // Check for malformed import/export statements\n    const malformedPatterns = [\n      /import\\s+[^{]*\\s+from(?!\\s+['\"])/g, // import without proper from clause\n      /export\\s+[^{]*\\s+from(?!\\s+['\"])/g, // export without proper from clause\n      /import\\s*\\{[^}]*\\s+from\\s+[^'\"]/g, // import with missing quotes\n      /export\\s*\\{[^}]*\\s+from\\s+[^'\"]/g, // export with missing quotes\n    ];\n\n    for (const pattern of malformedPatterns) {\n      const matches = content.match(pattern);\n      if (matches) {\n        patterns.push({\n          pattern: pattern.source,\n          description: 'Malformed import/export statement syntax',\n          files: [filePath],\n        });\n        severity = CorruptionSeverity.HIGH;\n      }\n    }\n\n    return { patterns, severity };\n  }\n\n  private determineRecoveryAction(severity: CorruptionSeverity, fileCount: number): RecoveryAction {\n    if (severity === CorruptionSeverity.CRITICAL) {\n      return RecoveryAction.EMERGENCY_RESTORE;\n    }\n\n    if (severity === CorruptionSeverity.HIGH || fileCount > 10) {\n      return RecoveryAction.ROLLBACK;\n    }\n\n    if (severity === CorruptionSeverity.MEDIUM || fileCount > 5) {\n      return RecoveryAction.RETRY;\n    }\n\n    return RecoveryAction.CONTINUE;\n  }\n\n  private mapCorruptionToEventSeverity(corruption: CorruptionSeverity): SafetyEventSeverity {\n    switch (corruption) {\n      case CorruptionSeverity.CRITICAL:\n        return SafetyEventSeverity.CRITICAL;\n      case CorruptionSeverity.HIGH:\n        return SafetyEventSeverity.ERROR;\n      case CorruptionSeverity.MEDIUM:\n        return SafetyEventSeverity.WARNING;\n      case CorruptionSeverity.LOW:\n      default:\n        return SafetyEventSeverity.INFO;\n    }\n  }\n\n  protected getCurrentBranch(): string {\n    try {\n      return execSync('git branch --show-current', { encoding: 'utf8' }).trim();\n    } catch {\n      return 'unknown';\n    }\n  }\n\n  private addSafetyEvent(event: SafetyEvent): void {\n    this.safetyEvents.push(event);\n\n    // Keep only recent events to prevent memory issues\n    if (this.safetyEvents.length > 1000) {\n      this.safetyEvents = this.safetyEvents.slice(-500);\n    }\n  }\n\n  /**\n   * Initialize stash tracking from persistent storage\n   */\n  private initializeStashTracking(): void {\n    try {\n      const stashTrackingPath = path.join('.kiro', 'campaign-stashes.json');\n      if (fs.existsSync(stashTrackingPath)) {\n        const data = fs.readFileSync(stashTrackingPath, 'utf8');\n        const parsed = JSON.parse(data);\n\n        // Restore stashes with proper Date objects\n        for (const [id, stashData] of Object.entries(parsed.stashes || {})) {\n          const stash = stashData as {\n            id: string;\n            description: string;\n            timestamp: string;\n            branch: string;\n            ref?: string;\n          };\n          this.stashes.set(id, {\n            ...stash,\n            timestamp: new Date(stash.timestamp),\n          });\n        }\n\n        this.stashCounter = parsed.counter || 0;\n      }\n    } catch (error) {\n      console.warn(\n        `⚠️ Could not load stash tracking: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n      );\n      this.stashCounter = 0;\n    }\n  }\n\n  /**\n   * Save stash tracking to persistent storage\n   */\n  private saveStashTracking(): void {\n    try {\n      const stashTrackingPath = path.join('.kiro', 'campaign-stashes.json');\n\n      // Ensure .kiro directory exists\n      const kiroDir = path.dirname(stashTrackingPath);\n      if (!fs.existsSync(kiroDir)) {\n        fs.mkdirSync(kiroDir, { recursive: true });\n      }\n\n      const data = {\n        counter: this.stashCounter,\n        stashes: Object.fromEntries(this.stashes.entries()),\n        lastUpdated: new Date().toISOString(),\n      };\n\n      fs.writeFileSync(stashTrackingPath, JSON.stringify(data, null, 2));\n    } catch (error) {\n      console.warn(\n        `⚠️ Could not save stash tracking: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n      );\n    }\n  }\n\n  /**\n   * Find stash by message when reference is not available\n   */\n  private async findStashByMessage(message: string): Promise<string> {\n    try {\n      const stashList = execSync('git stash list', { encoding: 'utf8' });\n      const lines = stashList.split('\\n');\n\n      for (const line of lines) {\n        if (line.includes(message)) {\n          const match = line.match(/^(stash@\\{\\d+\\})/);\n          if (match) {\n            return match[1];\n          }\n        }\n      }\n\n      throw new Error(`Stash not found with message: ${message}`);\n    } catch (error) {\n      throw new Error(\n        `Failed to find stash by message: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n      );\n    }\n  }\n}\n"],"version":3}