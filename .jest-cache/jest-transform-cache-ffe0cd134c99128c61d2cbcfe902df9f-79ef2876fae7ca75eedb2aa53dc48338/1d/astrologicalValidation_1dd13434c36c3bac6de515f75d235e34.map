{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/astrology/astrologicalValidation.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/astrology/astrologicalValidation.ts"],"sourcesContent":["/**\n * Comprehensive Astrological Validation System\n * \n * Provides a unified interface for validating all astrological calculations,\n * planetary positions, elemental properties, and transit dates.\n */\n\nimport { ElementalProperties } from '@/types/alchemy';\nimport { logger } from '@/utils/logger';\nimport { \n  validateElementalProperties, \n  normalizeElementalProperties,\n  ELEMENTAL_CONSTANTS \n} from './elementalValidation';\nimport { \n  validateTransitDate, \n  validatePlanetaryPosition,\n  TRANSIT_CONSTANTS \n} from './transitValidation';\n\n/**\n * Planetary position structure\n */\nexport interface PlanetaryPosition {\n  sign: string;\n  degree: number;\n  exactLongitude: number;\n  isRetrograde: boolean;\n}\n\n/**\n * Validation result structure\n */\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  correctedData?: unknown;\n}\n\n/**\n * Comprehensive validation options\n */\nexport interface ValidationOptions {\n  strictMode?: boolean;\n  autoCorrect?: boolean;\n  logWarnings?: boolean;\n  validateTransits?: boolean;\n}\n\n/**\n * Validate a complete planetary positions object\n */\nexport function validatePlanetaryPositions(\n  positions: Record<string, unknown>,\n  options: ValidationOptions = {}\n): ValidationResult {\n  const { strictMode = false, autoCorrect = false, logWarnings = true } = options;\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  const correctedData: Record<string, PlanetaryPosition> = {};\n\n  try {\n    if (!positions || typeof positions !== 'object') {\n      errors.push('Planetary positions must be an object');\n      return { isValid: false, errors, warnings };\n    }\n\n    const requiredPlanets = ['sun', 'moon', 'mercury', 'venus', 'mars', 'jupiter', 'saturn'];\n    const optionalPlanets = ['uranus', 'neptune', 'pluto', 'northNode', 'southNode'];\n    const allPlanets = [...requiredPlanets, ...optionalPlanets];\n\n    // Check for required planets\n    for (const planet of requiredPlanets) {\n      if (!(planet in positions)) {\n        errors.push(`Missing required planet: ${planet}`);\n        continue;\n      }\n\n      const position = positions[planet];\n      const validation = validateSinglePlanetaryPosition(planet, position, strictMode);\n      \n      if (!validation.isValid) {\n        errors.push(...validation.errors);\n      }\n      \n      // Always collect warnings, regardless of validity\n      warnings.push(...validation.warnings);\n      \n      if (validation.correctedData && autoCorrect) {\n        correctedData[planet] = validation.correctedData as PlanetaryPosition;\n      }\n    }\n\n    // Check optional planets\n    for (const planet of optionalPlanets) {\n      if (planet in positions) {\n        const position = positions[planet];\n        const validation = validateSinglePlanetaryPosition(planet, position, strictMode);\n        \n        if (!validation.isValid) {\n          if (strictMode) {\n            errors.push(...validation.errors);\n          } else {\n            warnings.push(...validation.errors);\n          }\n        }\n        \n        // Always collect warnings, regardless of validity\n        warnings.push(...validation.warnings);\n        \n        if (validation.correctedData && autoCorrect) {\n          correctedData[planet] = validation.correctedData as PlanetaryPosition;\n        }\n      }\n    }\n\n    // Check for unknown planets\n    const unknownPlanets = Object.keys(positions).filter(planet => !allPlanets.includes(planet));\n    if (unknownPlanets.length > 0) {\n      const message = `Unknown planets found: ${unknownPlanets.join(', ')}`;\n      if (strictMode) {\n        errors.push(message);\n      } else {\n        warnings.push(message);\n      }\n    }\n\n    // Log warnings if requested\n    if (logWarnings && warnings.length > 0) {\n      logger.warn('Planetary position validation warnings:', warnings);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      correctedData: Object.keys(correctedData).length > 0 ? correctedData : undefined\n    };\n  } catch (error) {\n    const errorMessage = `Validation error: ${error instanceof Error ? error.message : 'Unknown error'}`;\n    errors.push(errorMessage);\n    return { isValid: false, errors, warnings };\n  }\n}\n\n/**\n * Validate a single planetary position\n */\nfunction validateSinglePlanetaryPosition(\n  planet: string,\n  position: unknown,\n  strictMode: boolean = false\n): ValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  let correctedData: PlanetaryPosition | undefined;\n\n  try {\n    if (!position || typeof position !== 'object') {\n      errors.push(`${planet} position must be an object`);\n      return { isValid: false, errors, warnings };\n    }\n\n    const pos = position as Record<string, unknown>;\n    const requiredProps = ['sign', 'degree', 'exactLongitude', 'isRetrograde'];\n    \n    // Check required properties\n    for (const prop of requiredProps) {\n      if (!(prop in pos)) {\n        errors.push(`${planet} missing required property: ${prop}`);\n      }\n    }\n\n    if (errors.length > 0) {\n      return { isValid: false, errors, warnings };\n    }\n\n    // Validate sign\n    const sign = pos.sign;\n    if (typeof sign !== 'string' || !TRANSIT_CONSTANTS.VALID_SIGNS.includes(sign.toLowerCase())) {\n      errors.push(`${planet} has invalid sign: ${sign}`);\n    }\n\n    // Validate degree\n    const degree = pos.degree;\n    if (typeof degree !== 'number' || degree < 0 || degree >= TRANSIT_CONSTANTS.DEGREES_PER_SIGN) {\n      const message = `${planet} degree ${degree} must be between 0 and ${TRANSIT_CONSTANTS.DEGREES_PER_SIGN}`;\n      if (strictMode) {\n        errors.push(message);\n      } else {\n        warnings.push(message);\n        // Auto-correct if possible\n        if (typeof degree === 'number') {\n          correctedData = {\n            sign: String(sign),\n            degree: Math.max(0, Math.min(TRANSIT_CONSTANTS.DEGREES_PER_SIGN - 0.01, degree)),\n            exactLongitude: Number(pos.exactLongitude),\n            isRetrograde: Boolean(pos.isRetrograde)\n          };\n        }\n      }\n    }\n\n    // Validate longitude\n    const longitude = pos.exactLongitude;\n    if (typeof longitude !== 'number' || longitude < 0 || longitude >= TRANSIT_CONSTANTS.MAX_LONGITUDE) {\n      const message = `${planet} longitude ${longitude} must be between 0 and ${TRANSIT_CONSTANTS.MAX_LONGITUDE}`;\n      if (strictMode) {\n        errors.push(message);\n      } else {\n        warnings.push(message);\n        // Auto-correct if possible\n        if (typeof longitude === 'number') {\n          const correctedLongitude = ((longitude % TRANSIT_CONSTANTS.MAX_LONGITUDE) + TRANSIT_CONSTANTS.MAX_LONGITUDE) % TRANSIT_CONSTANTS.MAX_LONGITUDE;\n          if (!correctedData) {\n            correctedData = {\n              sign: String(sign),\n              degree: Number(degree),\n              exactLongitude: correctedLongitude,\n              isRetrograde: Boolean(pos.isRetrograde)\n            };\n          } else {\n            correctedData.exactLongitude = correctedLongitude;\n          }\n        }\n      }\n    }\n\n    // Validate retrograde status\n    const isRetrograde = pos.isRetrograde;\n    if (typeof isRetrograde !== 'boolean') {\n      warnings.push(`${planet} isRetrograde should be boolean, got ${typeof isRetrograde}`);\n      if (!correctedData) {\n        correctedData = {\n          sign: String(sign),\n          degree: Number(degree),\n          exactLongitude: Number(longitude),\n          isRetrograde: Boolean(isRetrograde)\n        };\n      } else {\n        correctedData.isRetrograde = Boolean(isRetrograde);\n      }\n    }\n\n    // Validate retrograde logic\n    if (TRANSIT_CONSTANTS.ALWAYS_DIRECT.includes(planet.toLowerCase()) && isRetrograde) {\n      warnings.push(`${planet} cannot be retrograde`);\n      if (correctedData) {\n        correctedData.isRetrograde = false;\n      }\n    }\n\n    if (TRANSIT_CONSTANTS.ALWAYS_RETROGRADE.includes(planet.toLowerCase()) && !isRetrograde) {\n      warnings.push(`${planet} should always be retrograde`);\n      if (correctedData) {\n        correctedData.isRetrograde = true;\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      correctedData\n    };\n  } catch (error) {\n    errors.push(`Error validating ${planet}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    return { isValid: false, errors, warnings };\n  }\n}\n\n/**\n * Validate elemental properties with astrological context\n */\nexport function validateAstrologicalElementalProperties(\n  properties: unknown,\n  context?: string\n): ValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  let correctedData: ElementalProperties | undefined;\n\n  try {\n    if (!validateElementalProperties(properties)) {\n      errors.push(`Invalid elemental properties${context ? ` in ${context}` : ''}`);\n      \n      // Try to normalize the properties\n      if (properties && typeof properties === 'object') {\n        correctedData = normalizeElementalProperties(properties as Partial<ElementalProperties>);\n        warnings.push('Elemental properties were normalized to valid values');\n      }\n      \n      return { isValid: false, errors, warnings, correctedData };\n    }\n\n    const props = properties as ElementalProperties;\n    \n    // Check for elemental balance\n    const total = Object.values(props).reduce((sum, val) => sum + val, 0);\n    if (total > 1.2) {\n      warnings.push(`Elemental properties total ${total.toFixed(2)} exceeds recommended maximum of 1.2`);\n    }\n\n    // Check for self-reinforcement patterns\n    const dominant = Object.entries(props).reduce((max, current) => \n      current[1] > max[1] ? current : max\n    );\n\n    if (dominant[1] < ELEMENTAL_CONSTANTS.SELF_REINFORCEMENT_THRESHOLD) {\n      warnings.push(`No dominant element found (highest: ${dominant[0]} at ${dominant[1].toFixed(2)}). Consider strengthening elemental focus.`);\n    }\n\n    return {\n      isValid: true,\n      errors,\n      warnings\n    };\n  } catch (error) {\n    errors.push(`Elemental validation error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    return { isValid: false, errors, warnings };\n  }\n}\n\n/**\n * Validate mathematical constants used in calculations\n */\nexport function validateMathematicalConstants(constants: Record<string, number>): ValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  try {\n    const expectedConstants = {\n      DEGREES_PER_SIGN: 30,\n      SIGNS_PER_CIRCLE: 12,\n      MAX_LONGITUDE: 360,\n      MIN_ELEMENT_VALUE: 0.05,\n      MAX_ELEMENT_VALUE: 1.0,\n      SELF_REINFORCEMENT_THRESHOLD: 0.3,\n      HARMONY_THRESHOLD: 0.7\n    };\n\n    Object.entries(expectedConstants).forEach(([name, expectedValue]) => {\n      if (name in constants) {\n        const actualValue = constants[name];\n        if (Math.abs(actualValue - expectedValue) > 0.001) {\n          warnings.push(`Constant ${name} has unexpected value: ${actualValue} (expected: ${expectedValue})`);\n        }\n      }\n    });\n\n    // Check for NaN or infinite values\n    Object.entries(constants).forEach(([name, value]) => {\n      if (!Number.isFinite(value)) {\n        errors.push(`Constant ${name} has invalid value: ${value}`);\n      }\n    });\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  } catch (error) {\n    errors.push(`Constants validation error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    return { isValid: false, errors, warnings };\n  }\n}\n\n/**\n * Comprehensive astrological calculation validation\n */\nexport async function validateAstrologicalCalculation(\n  input: {\n    planetaryPositions?: Record<string, unknown>;\n    elementalProperties?: unknown;\n    constants?: Record<string, number>;\n    date?: Date;\n  },\n  options: ValidationOptions = {}\n): Promise<ValidationResult> {\n  const { validateTransits = false } = options;\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  const correctedData: Record<string, unknown> = {};\n\n  try {\n    // Validate planetary positions\n    if (input.planetaryPositions) {\n      const positionValidation = validatePlanetaryPositions(input.planetaryPositions, options);\n      errors.push(...positionValidation.errors);\n      warnings.push(...positionValidation.warnings);\n      \n      if (positionValidation.correctedData) {\n        correctedData.planetaryPositions = positionValidation.correctedData;\n      }\n\n      // Validate against transit dates if requested\n      if (validateTransits && positionValidation.isValid && input.date) {\n        for (const [planet, position] of Object.entries(input.planetaryPositions)) {\n          try {\n            const isValid = await validatePlanetaryPosition(planet, position as any, input.date);\n            if (!isValid) {\n              warnings.push(`Transit validation failed for ${planet}`);\n            }\n          } catch (error) {\n            warnings.push(`Could not validate transit for ${planet}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n          }\n        }\n      }\n    }\n\n    // Validate elemental properties\n    if (input.elementalProperties) {\n      const elementalValidation = validateAstrologicalElementalProperties(\n        input.elementalProperties,\n        'calculation input'\n      );\n      errors.push(...elementalValidation.errors);\n      warnings.push(...elementalValidation.warnings);\n      \n      if (elementalValidation.correctedData) {\n        correctedData.elementalProperties = elementalValidation.correctedData;\n      }\n    }\n\n    // Validate constants\n    if (input.constants) {\n      const constantsValidation = validateMathematicalConstants(input.constants);\n      errors.push(...constantsValidation.errors);\n      warnings.push(...constantsValidation.warnings);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      correctedData: Object.keys(correctedData).length > 0 ? correctedData : undefined\n    };\n  } catch (error) {\n    errors.push(`Comprehensive validation error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    return { isValid: false, errors, warnings };\n  }\n}\n\n/**\n * Quick validation for development use\n */\nexport function quickValidate(data: unknown, type: 'planetary' | 'elemental' | 'constants'): boolean {\n  try {\n    switch (type) {\n      case 'planetary':\n        return validatePlanetaryPositions(data as Record<string, unknown>).isValid;\n      case 'elemental':\n        return validateElementalProperties(data);\n      case 'constants':\n        return validateMathematicalConstants(data as Record<string, number>).isValid;\n      default:\n        return false;\n    }\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Export all validation constants\n */\nexport const VALIDATION_CONSTANTS = {\n  ...ELEMENTAL_CONSTANTS,\n  ...TRANSIT_CONSTANTS,\n  VALIDATION_TIMEOUT: 5000,\n  MAX_VALIDATION_ERRORS: 50,\n  AUTO_CORRECT_THRESHOLD: 0.1\n} as const;"],"version":3}