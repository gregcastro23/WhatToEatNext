5f50ac4dcc3cc3e53d15a81b92736209
"use strict";
/**
 * Comprehensive Astrological Validation System
 *
 * Provides a unified interface for validating all astrological calculations,
 * planetary positions, elemental properties, and transit dates.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.VALIDATION_CONSTANTS = exports.quickValidate = exports.validateAstrologicalCalculation = exports.validateMathematicalConstants = exports.validateAstrologicalElementalProperties = exports.validatePlanetaryPositions = void 0;
const logger_1 = require("@/utils/logger");
const elementalValidation_1 = require("./elementalValidation");
const transitValidation_1 = require("./transitValidation");
/**
 * Validate a complete planetary positions object
 */
function validatePlanetaryPositions(positions, options = {}) {
    const { strictMode = false, autoCorrect = false, logWarnings = true } = options;
    const errors = [];
    const warnings = [];
    const correctedData = {};
    try {
        if (!positions || typeof positions !== 'object') {
            errors.push('Planetary positions must be an object');
            return { isValid: false, errors, warnings };
        }
        const requiredPlanets = ['sun', 'moon', 'mercury', 'venus', 'mars', 'jupiter', 'saturn'];
        const optionalPlanets = ['uranus', 'neptune', 'pluto', 'northNode', 'southNode'];
        const allPlanets = [...requiredPlanets, ...optionalPlanets];
        // Check for required planets
        for (const planet of requiredPlanets) {
            if (!(planet in positions)) {
                errors.push(`Missing required planet: ${planet}`);
                continue;
            }
            const position = positions[planet];
            const validation = validateSinglePlanetaryPosition(planet, position, strictMode);
            if (!validation.isValid) {
                errors.push(...validation.errors);
            }
            // Always collect warnings, regardless of validity
            warnings.push(...validation.warnings);
            if (validation.correctedData && autoCorrect) {
                correctedData[planet] = validation.correctedData;
            }
        }
        // Check optional planets
        for (const planet of optionalPlanets) {
            if (planet in positions) {
                const position = positions[planet];
                const validation = validateSinglePlanetaryPosition(planet, position, strictMode);
                if (!validation.isValid) {
                    if (strictMode) {
                        errors.push(...validation.errors);
                    }
                    else {
                        warnings.push(...validation.errors);
                    }
                }
                // Always collect warnings, regardless of validity
                warnings.push(...validation.warnings);
                if (validation.correctedData && autoCorrect) {
                    correctedData[planet] = validation.correctedData;
                }
            }
        }
        // Check for unknown planets
        const unknownPlanets = Object.keys(positions).filter(planet => !allPlanets.includes(planet));
        if (unknownPlanets.length > 0) {
            const message = `Unknown planets found: ${unknownPlanets.join(', ')}`;
            if (strictMode) {
                errors.push(message);
            }
            else {
                warnings.push(message);
            }
        }
        // Log warnings if requested
        if (logWarnings && warnings.length > 0) {
            logger_1.logger.warn('Planetary position validation warnings:', warnings);
        }
        return {
            isValid: errors.length === 0,
            errors,
            warnings,
            correctedData: Object.keys(correctedData).length > 0 ? correctedData : undefined
        };
    }
    catch (error) {
        const errorMessage = `Validation error: ${error instanceof Error ? error.message : 'Unknown error'}`;
        errors.push(errorMessage);
        return { isValid: false, errors, warnings };
    }
}
exports.validatePlanetaryPositions = validatePlanetaryPositions;
/**
 * Validate a single planetary position
 */
function validateSinglePlanetaryPosition(planet, position, strictMode = false) {
    const errors = [];
    const warnings = [];
    let correctedData;
    try {
        if (!position || typeof position !== 'object') {
            errors.push(`${planet} position must be an object`);
            return { isValid: false, errors, warnings };
        }
        const pos = position;
        const requiredProps = ['sign', 'degree', 'exactLongitude', 'isRetrograde'];
        // Check required properties
        for (const prop of requiredProps) {
            if (!(prop in pos)) {
                errors.push(`${planet} missing required property: ${prop}`);
            }
        }
        if (errors.length > 0) {
            return { isValid: false, errors, warnings };
        }
        // Validate sign
        const sign = pos.sign;
        if (typeof sign !== 'string' || !transitValidation_1.TRANSIT_CONSTANTS.VALID_SIGNS.includes(sign.toLowerCase())) {
            errors.push(`${planet} has invalid sign: ${sign}`);
        }
        // Validate degree
        const degree = pos.degree;
        if (typeof degree !== 'number' || degree < 0 || degree >= transitValidation_1.TRANSIT_CONSTANTS.DEGREES_PER_SIGN) {
            const message = `${planet} degree ${degree} must be between 0 and ${transitValidation_1.TRANSIT_CONSTANTS.DEGREES_PER_SIGN}`;
            if (strictMode) {
                errors.push(message);
            }
            else {
                warnings.push(message);
                // Auto-correct if possible
                if (typeof degree === 'number') {
                    correctedData = {
                        sign: String(sign),
                        degree: Math.max(0, Math.min(transitValidation_1.TRANSIT_CONSTANTS.DEGREES_PER_SIGN - 0.01, degree)),
                        exactLongitude: Number(pos.exactLongitude),
                        isRetrograde: Boolean(pos.isRetrograde)
                    };
                }
            }
        }
        // Validate longitude
        const longitude = pos.exactLongitude;
        if (typeof longitude !== 'number' || longitude < 0 || longitude >= transitValidation_1.TRANSIT_CONSTANTS.MAX_LONGITUDE) {
            const message = `${planet} longitude ${longitude} must be between 0 and ${transitValidation_1.TRANSIT_CONSTANTS.MAX_LONGITUDE}`;
            if (strictMode) {
                errors.push(message);
            }
            else {
                warnings.push(message);
                // Auto-correct if possible
                if (typeof longitude === 'number') {
                    const correctedLongitude = ((longitude % transitValidation_1.TRANSIT_CONSTANTS.MAX_LONGITUDE) + transitValidation_1.TRANSIT_CONSTANTS.MAX_LONGITUDE) % transitValidation_1.TRANSIT_CONSTANTS.MAX_LONGITUDE;
                    if (!correctedData) {
                        correctedData = {
                            sign: String(sign),
                            degree: Number(degree),
                            exactLongitude: correctedLongitude,
                            isRetrograde: Boolean(pos.isRetrograde)
                        };
                    }
                    else {
                        correctedData.exactLongitude = correctedLongitude;
                    }
                }
            }
        }
        // Validate retrograde status
        const isRetrograde = pos.isRetrograde;
        if (typeof isRetrograde !== 'boolean') {
            warnings.push(`${planet} isRetrograde should be boolean, got ${typeof isRetrograde}`);
            if (!correctedData) {
                correctedData = {
                    sign: String(sign),
                    degree: Number(degree),
                    exactLongitude: Number(longitude),
                    isRetrograde: Boolean(isRetrograde)
                };
            }
            else {
                correctedData.isRetrograde = Boolean(isRetrograde);
            }
        }
        // Validate retrograde logic
        if (transitValidation_1.TRANSIT_CONSTANTS.ALWAYS_DIRECT.includes(planet.toLowerCase()) && isRetrograde) {
            warnings.push(`${planet} cannot be retrograde`);
            if (correctedData) {
                correctedData.isRetrograde = false;
            }
        }
        if (transitValidation_1.TRANSIT_CONSTANTS.ALWAYS_RETROGRADE.includes(planet.toLowerCase()) && !isRetrograde) {
            warnings.push(`${planet} should always be retrograde`);
            if (correctedData) {
                correctedData.isRetrograde = true;
            }
        }
        return {
            isValid: errors.length === 0,
            errors,
            warnings,
            correctedData
        };
    }
    catch (error) {
        errors.push(`Error validating ${planet}: ${error instanceof Error ? error.message : 'Unknown error'}`);
        return { isValid: false, errors, warnings };
    }
}
/**
 * Validate elemental properties with astrological context
 */
function validateAstrologicalElementalProperties(properties, context) {
    const errors = [];
    const warnings = [];
    let correctedData;
    try {
        if (!(0, elementalValidation_1.validateElementalProperties)(properties)) {
            errors.push(`Invalid elemental properties${context ? ` in ${context}` : ''}`);
            // Try to normalize the properties
            if (properties && typeof properties === 'object') {
                correctedData = (0, elementalValidation_1.normalizeElementalProperties)(properties);
                warnings.push('Elemental properties were normalized to valid values');
            }
            return { isValid: false, errors, warnings, correctedData };
        }
        const props = properties;
        // Check for elemental balance
        const total = Object.values(props).reduce((sum, val) => sum + val, 0);
        if (total > 1.2) {
            warnings.push(`Elemental properties total ${total.toFixed(2)} exceeds recommended maximum of 1.2`);
        }
        // Check for self-reinforcement patterns
        const dominant = Object.entries(props).reduce((max, current) => current[1] > max[1] ? current : max);
        if (dominant[1] < elementalValidation_1.ELEMENTAL_CONSTANTS.SELF_REINFORCEMENT_THRESHOLD) {
            warnings.push(`No dominant element found (highest: ${dominant[0]} at ${dominant[1].toFixed(2)}). Consider strengthening elemental focus.`);
        }
        return {
            isValid: true,
            errors,
            warnings
        };
    }
    catch (error) {
        errors.push(`Elemental validation error: ${error instanceof Error ? error.message : 'Unknown error'}`);
        return { isValid: false, errors, warnings };
    }
}
exports.validateAstrologicalElementalProperties = validateAstrologicalElementalProperties;
/**
 * Validate mathematical constants used in calculations
 */
function validateMathematicalConstants(constants) {
    const errors = [];
    const warnings = [];
    try {
        const expectedConstants = {
            DEGREES_PER_SIGN: 30,
            SIGNS_PER_CIRCLE: 12,
            MAX_LONGITUDE: 360,
            MIN_ELEMENT_VALUE: 0.05,
            MAX_ELEMENT_VALUE: 1.0,
            SELF_REINFORCEMENT_THRESHOLD: 0.3,
            HARMONY_THRESHOLD: 0.7
        };
        Object.entries(expectedConstants).forEach(([name, expectedValue]) => {
            if (name in constants) {
                const actualValue = constants[name];
                if (Math.abs(actualValue - expectedValue) > 0.001) {
                    warnings.push(`Constant ${name} has unexpected value: ${actualValue} (expected: ${expectedValue})`);
                }
            }
        });
        // Check for NaN or infinite values
        Object.entries(constants).forEach(([name, value]) => {
            if (!Number.isFinite(value)) {
                errors.push(`Constant ${name} has invalid value: ${value}`);
            }
        });
        return {
            isValid: errors.length === 0,
            errors,
            warnings
        };
    }
    catch (error) {
        errors.push(`Constants validation error: ${error instanceof Error ? error.message : 'Unknown error'}`);
        return { isValid: false, errors, warnings };
    }
}
exports.validateMathematicalConstants = validateMathematicalConstants;
/**
 * Comprehensive astrological calculation validation
 */
async function validateAstrologicalCalculation(input, options = {}) {
    const { validateTransits = false } = options;
    const errors = [];
    const warnings = [];
    const correctedData = {};
    try {
        // Validate planetary positions
        if (input.planetaryPositions) {
            const positionValidation = validatePlanetaryPositions(input.planetaryPositions, options);
            errors.push(...positionValidation.errors);
            warnings.push(...positionValidation.warnings);
            if (positionValidation.correctedData) {
                correctedData.planetaryPositions = positionValidation.correctedData;
            }
            // Validate against transit dates if requested
            if (validateTransits && positionValidation.isValid && input.date) {
                for (const [planet, position] of Object.entries(input.planetaryPositions)) {
                    try {
                        const isValid = await (0, transitValidation_1.validatePlanetaryPosition)(planet, position, input.date);
                        if (!isValid) {
                            warnings.push(`Transit validation failed for ${planet}`);
                        }
                    }
                    catch (error) {
                        warnings.push(`Could not validate transit for ${planet}: ${error instanceof Error ? error.message : 'Unknown error'}`);
                    }
                }
            }
        }
        // Validate elemental properties
        if (input.elementalProperties) {
            const elementalValidation = validateAstrologicalElementalProperties(input.elementalProperties, 'calculation input');
            errors.push(...elementalValidation.errors);
            warnings.push(...elementalValidation.warnings);
            if (elementalValidation.correctedData) {
                correctedData.elementalProperties = elementalValidation.correctedData;
            }
        }
        // Validate constants
        if (input.constants) {
            const constantsValidation = validateMathematicalConstants(input.constants);
            errors.push(...constantsValidation.errors);
            warnings.push(...constantsValidation.warnings);
        }
        return {
            isValid: errors.length === 0,
            errors,
            warnings,
            correctedData: Object.keys(correctedData).length > 0 ? correctedData : undefined
        };
    }
    catch (error) {
        errors.push(`Comprehensive validation error: ${error instanceof Error ? error.message : 'Unknown error'}`);
        return { isValid: false, errors, warnings };
    }
}
exports.validateAstrologicalCalculation = validateAstrologicalCalculation;
/**
 * Quick validation for development use
 */
function quickValidate(data, type) {
    try {
        switch (type) {
            case 'planetary':
                return validatePlanetaryPositions(data).isValid;
            case 'elemental':
                return (0, elementalValidation_1.validateElementalProperties)(data);
            case 'constants':
                return validateMathematicalConstants(data).isValid;
            default:
                return false;
        }
    }
    catch {
        return false;
    }
}
exports.quickValidate = quickValidate;
/**
 * Export all validation constants
 */
exports.VALIDATION_CONSTANTS = {
    ...elementalValidation_1.ELEMENTAL_CONSTANTS,
    ...transitValidation_1.TRANSIT_CONSTANTS,
    VALIDATION_TIMEOUT: 5000,
    MAX_VALIDATION_ERRORS: 50,
    AUTO_CORRECT_THRESHOLD: 0.1
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,