{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/CulturalAnalyticsService.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/CulturalAnalyticsService.ts"],"sourcesContent":["// Cultural Analytics and Intelligence Service\n// Implements cross-cultural compatibility analysis, cultural synergy scoring,\n// and fusion cuisine recommendations for the CuisineRecommender component\n\nimport { culturalRules, getCulturalRecommendations } from '@/data/culturalrules';\nimport { culinaryTraditions, CuisineProfile } from '@/data/cuisines/culinaryTraditions';\nimport { ElementalProperties, ZodiacSign, LunarPhase } from '@/types/alchemy';\nimport { logger } from '@/utils/logger';\n\n// ===== INTERFACES =====\n\nexport interface CulturalAnalytics {\n  culturalSynergy: number;\n  culturalCompatibility: number;\n  historicalSignificance: string;\n  culturalContext: string;\n  fusionPotential: number;\n  culturalDiversityScore: number;\n  traditionalPrinciples: string[];\n  modernAdaptations: string[];\n}\n\nexport interface CulturalSynergyScore {\n  score: number;\n  reasoning: string[];\n  culturalGroup: string;\n  proximityBonus: number;\n  diversityBonus: number;\n}\n\nexport interface FusionCuisineRecommendation {\n  name: string;\n  parentCuisines: string[];\n  fusionScore: number;\n  culturalHarmony: number;\n  recommendedDishes: string[];\n  culturalNotes: string[];\n  blendRatio: number;\n  seasonalOptimization: Record<string, number>;\n}\n\nexport interface CulturalContext {\n  origin: string;\n  historicalPeriod: string;\n  culturalInfluences: string[];\n  traditionalOccasions: string[];\n  modernEvolution: string[];\n  globalAdaptations: string[];\n}\n\n// ===== CULTURAL GROUPS AND PROXIMITY =====\n\nconst CULTURAL_GROUPS = {\n  'east_asian': {\n    cuisines: ['chinese', 'japanese', 'korean', 'vietnamese', 'thai', 'sichuanese'],\n    characteristics: ['rice-based', 'umami-focused', 'balance-oriented', 'seasonal'],\n    sharedPrinciples: ['five elements', 'yin-yang balance', 'seasonal harmony']\n  },\n  'south_asian': {\n    cuisines: ['indian'],\n    characteristics: ['spice-complex', 'ayurvedic', 'vegetarian-friendly', 'medicinal'],\n    sharedPrinciples: ['six tastes', 'dosha balance', 'medicinal cooking']\n  },\n  'mediterranean': {\n    cuisines: ['italian', 'greek', 'spanish', 'middle-eastern', 'mediterranean'],\n    characteristics: ['olive oil-based', 'herb-rich', 'seafood-focused', 'communal'],\n    sharedPrinciples: ['simplicity', 'fresh ingredients', 'social dining']\n  },\n  'european': {\n    cuisines: ['french', 'italian', 'spanish', 'greek'],\n    characteristics: ['technique-focused', 'wine-paired', 'seasonal', 'refined'],\n    sharedPrinciples: ['culinary artistry', 'terroir', 'classical techniques']\n  },\n  'latin_american': {\n    cuisines: ['mexican'],\n    characteristics: ['corn-based', 'chili-focused', 'indigenous-influenced', 'festive'],\n    sharedPrinciples: ['indigenous wisdom', 'celebration food', 'heat balance']\n  },\n  'african': {\n    cuisines: ['african'],\n    characteristics: ['grain-based', 'communal', 'spice-rich', 'preservation-focused'],\n    sharedPrinciples: ['community sharing', 'spice mastery', 'resourcefulness']\n  }\n};\n\nconst HISTORICAL_CONTEXTS: Record<string, CulturalContext> = {\n  japanese: {\n    origin: 'Japan',\n    historicalPeriod: '8th century - present',\n    culturalInfluences: ['Buddhist philosophy', 'Shinto traditions', 'Chinese techniques', 'Portuguese tempura'],\n    traditionalOccasions: ['tea ceremony', 'seasonal festivals', 'New Year celebrations'],\n    modernEvolution: ['kaiseki refinement', 'bento culture', 'fusion innovations'],\n    globalAdaptations: ['sushi worldwide', 'ramen culture', 'Japanese-French fusion']\n  },\n  chinese: {\n    origin: 'China',\n    historicalPeriod: '3000 BCE - present',\n    culturalInfluences: ['Confucian philosophy', 'Taoist principles', 'Silk Road trade'],\n    traditionalOccasions: ['Chinese New Year', 'Mid-Autumn Festival', 'family gatherings'],\n    modernEvolution: ['regional specialization', 'Cantonese refinement', 'Sichuan popularity'],\n    globalAdaptations: ['American Chinese', 'fusion techniques', 'dim sum culture']\n  },\n  indian: {\n    origin: 'Indian subcontinent',\n    historicalPeriod: '3000 BCE - present',\n    culturalInfluences: ['Ayurvedic medicine', 'Mughal empire', 'British colonial', 'regional kingdoms'],\n    traditionalOccasions: ['Diwali feasts', 'wedding celebrations', 'religious festivals'],\n    modernEvolution: ['regional cuisine recognition', 'health-conscious adaptations', 'global spice trade'],\n    globalAdaptations: ['curry houses worldwide', 'Indian-British fusion', 'vegetarian influence']\n  },\n  italian: {\n    origin: 'Italy',\n    historicalPeriod: 'Roman Empire - present',\n    culturalInfluences: ['Roman traditions', 'Arab Sicily', 'Renaissance refinement', 'regional diversity'],\n    traditionalOccasions: ['Sunday family meals', 'harvest festivals', 'religious celebrations'],\n    modernEvolution: ['pasta perfection', 'pizza globalization', 'slow food movement'],\n    globalAdaptations: ['Italian-American', 'pizza worldwide', 'pasta culture']\n  },\n  french: {\n    origin: 'France',\n    historicalPeriod: 'Medieval - present',\n    culturalInfluences: ['Roman Gaul', 'Medieval guilds', 'Royal court cuisine', 'Revolutionary changes'],\n    traditionalOccasions: ['harvest celebrations', 'religious feasts', 'family gatherings'],\n    modernEvolution: ['haute cuisine development', 'nouvelle cuisine', 'bistro culture'],\n    globalAdaptations: ['French technique worldwide', 'culinary schools', 'fine dining standards']\n  },\n  mexican: {\n    origin: 'Mexico',\n    historicalPeriod: 'Pre-Columbian - present',\n    culturalInfluences: ['Aztec traditions', 'Mayan cuisine', 'Spanish colonization', 'indigenous wisdom'],\n    traditionalOccasions: ['Day of the Dead', 'harvest festivals', 'family celebrations'],\n    modernEvolution: ['regional cuisine recognition', 'street food culture', 'modern Mexican movement'],\n    globalAdaptations: ['Tex-Mex fusion', 'taco culture', 'Mexican-American cuisine']\n  },\n  thai: {\n    origin: 'Thailand',\n    historicalPeriod: '13th century - present',\n    culturalInfluences: ['Khmer empire', 'Chinese immigration', 'Indian spices', 'Royal court refinement'],\n    traditionalOccasions: ['Songkran festival', 'Buddhist ceremonies', 'royal celebrations'],\n    modernEvolution: ['street food culture', 'royal cuisine preservation', 'global popularity'],\n    globalAdaptations: ['Thai restaurants worldwide', 'pad thai popularity', 'curry adaptations']\n  },\n  'middle-eastern': {\n    origin: 'Middle East',\n    historicalPeriod: 'Ancient civilizations - present',\n    culturalInfluences: ['Persian empire', 'Ottoman rule', 'Arab traditions', 'Spice route trade'],\n    traditionalOccasions: ['Ramadan iftar', 'wedding feasts', 'hospitality traditions'],\n    modernEvolution: ['regional specialization', 'health consciousness', 'diaspora influence'],\n    globalAdaptations: ['Mediterranean diet', 'hummus popularity', 'Middle Eastern fusion']\n  }\n};\n\n// ===== CULTURAL ANALYTICS SERVICE =====\n\nexport class CulturalAnalyticsService {\n  \n  /**\n   * Calculate cultural synergy score between cuisines (5% weight in 7-factor algorithm)\n   */\n  static calculateCulturalSynergy(\n    primaryCuisine: string,\n    secondaryCuisines: string[] = [],\n    options: {\n      includeHistoricalContext?: boolean;\n      includeFusionPotential?: boolean;\n      season?: string;\n    } = {}\n  ): CulturalSynergyScore {\n    try {\n      const primaryGroup = this.getCulturalGroup(primaryCuisine);\n      const allCuisines = [primaryCuisine, ...secondaryCuisines];\n      \n      // Base synergy calculation\n      let synergyScore = 0.7; // Base score\n      let proximityBonus = 0;\n      let diversityBonus = 0;\n      const reasoning: string[] = [];\n      \n      // Calculate proximity bonus (same cultural group)\n      const sameGroupCuisines = secondaryCuisines.filter(cuisine => \n        this.getCulturalGroup(cuisine) === primaryGroup\n      );\n      \n      if (sameGroupCuisines.length > 0) {\n        proximityBonus = 0.15;\n        synergyScore += proximityBonus;\n        reasoning.push(`High cultural proximity within ${primaryGroup} group (+${proximityBonus})`);\n      }\n      \n      // Calculate diversity bonus (different but compatible groups)\n      const uniqueGroups = new Set(allCuisines.map(c => this.getCulturalGroup(c)));\n      if (uniqueGroups.size > 1 && uniqueGroups.size <= 3) {\n        diversityBonus = 0.1;\n        synergyScore += diversityBonus;\n        reasoning.push(`Cultural diversity bonus for ${uniqueGroups.size} cultural groups (+${diversityBonus})`);\n      }\n      \n      // Apply seasonal cultural preferences\n      if (options.season) {\n        const seasonalBonus = this.calculateSeasonalCulturalBonus(primaryCuisine, options.season);\n        synergyScore += seasonalBonus;\n        if (seasonalBonus > 0) {\n          reasoning.push(`Seasonal cultural alignment for ${options.season} (+${seasonalBonus.toFixed(2)})`);\n        }\n      }\n      \n      // Cap the score at 1.0\n      synergyScore = Math.min(1.0, synergyScore);\n      \n      return {\n        score: synergyScore,\n        reasoning,\n        culturalGroup: primaryGroup,\n        proximityBonus,\n        diversityBonus\n      };\n      \n    } catch (error) {\n      logger.error('Error calculating cultural synergy:', error);\n      return {\n        score: 0.7,\n        reasoning: ['Default cultural synergy applied due to calculation error'],\n        culturalGroup: 'unknown',\n        proximityBonus: 0,\n        diversityBonus: 0\n      };\n    }\n  }\n  \n  /**\n   * Generate comprehensive cultural analytics for a cuisine\n   */\n  static generateCulturalAnalytics(\n    cuisineName: string,\n    elementalProfile: ElementalProperties,\n    astrologicalState: {\n      zodiacSign: ZodiacSign;\n      lunarPhase: LunarPhase;\n    }\n  ): CulturalAnalytics {\n    try {\n      const culturalRulesData = culturalRules[cuisineName];\n      const culinaryTradition = culinaryTraditions[cuisineName];\n      const historicalContext = HISTORICAL_CONTEXTS[cuisineName];\n      \n      // Calculate cultural compatibility with current astrological state\n      const culturalCompatibility = this.calculateAstrologicalCulturalCompatibility(\n        cuisineName,\n        astrologicalState\n      );\n      \n      // Calculate cultural synergy\n      const synergyData = this.calculateCulturalSynergy(cuisineName);\n      \n      // Generate historical significance\n      const historicalSignificance = this.generateHistoricalSignificance(cuisineName, historicalContext);\n      \n      // Generate cultural context\n      const culturalContext = this.generateCulturalContext(cuisineName, historicalContext);\n      \n      // Calculate fusion potential\n      const fusionPotential = this.calculateFusionPotential(cuisineName, elementalProfile);\n      \n      // Calculate cultural diversity score\n      const culturalDiversityScore = this.calculateCulturalDiversityScore(cuisineName);\n      \n      // Extract traditional principles\n      const traditionalPrinciples = culturalRulesData?.principles || [];\n      \n      // Generate modern adaptations\n      const modernAdaptations = this.generateModernAdaptations(cuisineName, historicalContext);\n      \n      return {\n        culturalSynergy: synergyData.score,\n        culturalCompatibility,\n        historicalSignificance,\n        culturalContext,\n        fusionPotential,\n        culturalDiversityScore,\n        traditionalPrinciples,\n        modernAdaptations\n      };\n      \n    } catch (error) {\n      logger.error('Error generating cultural analytics:', error);\n      return this.getDefaultCulturalAnalytics(cuisineName);\n    }\n  }\n  \n  /**\n   * Generate fusion cuisine recommendations\n   */\n  static generateFusionRecommendations(\n    primaryCuisine: string,\n    availableCuisines: string[],\n    maxRecommendations: number = 3\n  ): FusionCuisineRecommendation[] {\n    try {\n      const fusionRecommendations: FusionCuisineRecommendation[] = [];\n      \n      // Filter out the primary cuisine and evaluate fusion potential\n      const candidateCuisines = availableCuisines.filter(c => c !== primaryCuisine);\n      \n      for (const secondaryCuisine of candidateCuisines) {\n        const fusionData = this.calculateFusionCompatibility(primaryCuisine, secondaryCuisine);\n        \n        if (fusionData.fusionScore > 0.6) { // Only recommend good fusion potential\n          const fusionRecommendation: FusionCuisineRecommendation = {\n            name: this.generateFusionName(primaryCuisine, secondaryCuisine),\n            parentCuisines: [primaryCuisine, secondaryCuisine],\n            fusionScore: fusionData.fusionScore,\n            culturalHarmony: fusionData.culturalHarmony,\n            recommendedDishes: this.generateFusionDishes(primaryCuisine, secondaryCuisine),\n            culturalNotes: this.generateFusionCulturalNotes(primaryCuisine, secondaryCuisine),\n            blendRatio: fusionData.blendRatio,\n            seasonalOptimization: this.calculateSeasonalFusionOptimization(primaryCuisine, secondaryCuisine)\n          };\n          \n          fusionRecommendations.push(fusionRecommendation);\n        }\n      }\n      \n      // Sort by fusion score and return top recommendations\n      return fusionRecommendations\n        .sort((a, b) => b.fusionScore - a.fusionScore)\n        .slice(0, maxRecommendations);\n        \n    } catch (error) {\n      logger.error('Error generating fusion recommendations:', error);\n      return [];\n    }\n  }\n  \n  // ===== PRIVATE HELPER METHODS =====\n  \n  private static getCulturalGroup(cuisine: string): string {\n    for (const [groupName, groupData] of Object.entries(CULTURAL_GROUPS)) {\n      if (groupData.cuisines.includes(cuisine)) {\n        return groupName;\n      }\n    }\n    return 'other';\n  }\n  \n  private static calculateSeasonalCulturalBonus(cuisine: string, season: string): number {\n    const culinaryTradition = culinaryTraditions[cuisine];\n    if (!culinaryTradition?.astrologicalProfile?.seasonalPreference) {\n      return 0;\n    }\n    \n    const seasonalPrefs = culinaryTradition.astrologicalProfile.seasonalPreference;\n    if (seasonalPrefs.includes(season) || seasonalPrefs.includes('all')) {\n      return 0.05;\n    }\n    \n    return 0;\n  }\n  \n  private static calculateAstrologicalCulturalCompatibility(\n    cuisine: string,\n    astrologicalState: { zodiacSign: ZodiacSign; lunarPhase: LunarPhase }\n  ): number {\n    const culinaryTradition = culinaryTraditions[cuisine];\n    if (!culinaryTradition?.astrologicalProfile) {\n      return 0.7; // Default compatibility\n    }\n    \n    const { favorableZodiac } = culinaryTradition.astrologicalProfile;\n    const isZodiacFavorable = favorableZodiac.includes(astrologicalState.zodiacSign.toLowerCase());\n    \n    return isZodiacFavorable ? 0.9 : 0.7;\n  }\n  \n  private static generateHistoricalSignificance(cuisine: string, context?: CulturalContext): string {\n    if (!context) {\n      return `${cuisine} cuisine has deep cultural roots and represents centuries of culinary evolution.`;\n    }\n    \n    return `${cuisine} cuisine originated in ${context.origin} during ${context.historicalPeriod}, ` +\n           `influenced by ${context.culturalInfluences.slice(0, 2).join(' and ')}. ` +\n           `It has evolved through ${context.modernEvolution[0]} and adapted globally through ${context.globalAdaptations[0]}.`;\n  }\n  \n  private static generateCulturalContext(cuisine: string, context?: CulturalContext): string {\n    if (!context) {\n      return `${cuisine} cuisine reflects the cultural values and traditions of its region.`;\n    }\n    \n    return `Traditionally served during ${context.traditionalOccasions[0]} and other cultural celebrations, ` +\n           `${cuisine} cuisine embodies the principles of ${context.culturalInfluences[0]}. ` +\n           `Modern adaptations include ${context.modernEvolution.slice(0, 2).join(' and ')}.`;\n  }\n  \n  private static calculateFusionPotential(cuisine: string, elementalProfile: ElementalProperties): number {\n    const culinaryTradition = culinaryTraditions[cuisine];\n    if (!culinaryTradition) return 0.7;\n    \n    // Calculate based on elemental balance - more balanced = higher fusion potential\n    const elementalValues = Object.values(elementalProfile);\n    const balance = 1 - (Math.max(...elementalValues) - Math.min(...elementalValues));\n    \n    return Math.max(0.5, Math.min(1.0, balance + 0.3));\n  }\n  \n  private static calculateCulturalDiversityScore(cuisine: string): number {\n    const historicalContext = HISTORICAL_CONTEXTS[cuisine];\n    if (!historicalContext) return 0.5;\n    \n    // Score based on number of cultural influences\n    const influenceCount = historicalContext.culturalInfluences.length;\n    const adaptationCount = historicalContext.globalAdaptations.length;\n    \n    return Math.min(1.0, (influenceCount * 0.1) + (adaptationCount * 0.15) + 0.3);\n  }\n  \n  private static generateModernAdaptations(cuisine: string, context?: CulturalContext): string[] {\n    if (!context) {\n      return [`Modern ${cuisine} cuisine adaptations`, `Contemporary ${cuisine} techniques`];\n    }\n    \n    return [\n      ...context.modernEvolution,\n      ...context.globalAdaptations.map(adaptation => `Global: ${adaptation}`)\n    ];\n  }\n  \n  private static calculateFusionCompatibility(cuisine1: string, cuisine2: string): {\n    fusionScore: number;\n    culturalHarmony: number;\n    blendRatio: number;\n  } {\n    const group1 = this.getCulturalGroup(cuisine1);\n    const group2 = this.getCulturalGroup(cuisine2);\n    \n    let fusionScore = 0.7; // Base fusion potential\n    let culturalHarmony = 0.7;\n    let blendRatio = 0.5; // Default 50/50\n    \n    // Same cultural group - high harmony, moderate fusion potential\n    if (group1 === group2) {\n      culturalHarmony = 0.9;\n      fusionScore = 0.75;\n    }\n    // Different but compatible groups - high fusion potential\n    else if ((group1 === 'mediterranean' && group2 === 'european') ||\n             (group1 === 'european' && group2 === 'mediterranean') ||\n             (group1 === 'east_asian' && ['south_asian', 'mediterranean'].includes(group2))) {\n      fusionScore = 0.85;\n      culturalHarmony = 0.8;\n    }\n    // Very different groups - moderate fusion potential but interesting diversity\n    else {\n      fusionScore = 0.8;\n      culturalHarmony = 0.7;\n    }\n    \n    return { fusionScore, culturalHarmony, blendRatio };\n  }\n  \n  private static generateFusionName(cuisine1: string, cuisine2: string): string {\n    const combinations: Record<string, string> = {\n      'japanese-italian': 'Nikkei-Italian',\n      'chinese-french': 'Sino-French',\n      'indian-mexican': 'Indo-Mexican',\n      'thai-mediterranean': 'Thai-Mediterranean',\n      'korean-mexican': 'K-Mex',\n      'vietnamese-french': 'Franco-Vietnamese'\n    };\n    \n    const key1 = `${cuisine1}-${cuisine2}`;\n    const key2 = `${cuisine2}-${cuisine1}`;\n    \n    return combinations[key1] || combinations[key2] || `${cuisine1}-${cuisine2} Fusion`;\n  }\n  \n  private static generateFusionDishes(cuisine1: string, cuisine2: string): string[] {\n    const fusionDishes: Record<string, string[]> = {\n      'japanese-italian': ['Ramen Carbonara', 'Sushi Pizza', 'Miso Risotto'],\n      'chinese-french': ['Five-Spice Duck Confit', 'Dim Sum Quiche', 'Soy-Glazed Coq au Vin'],\n      'indian-mexican': ['Curry Tacos', 'Tandoori Quesadillas', 'Masala Burritos'],\n      'thai-mediterranean': ['Tom Yum Pasta', 'Pad Thai Paella', 'Green Curry Risotto'],\n      'korean-mexican': ['Kimchi Tacos', 'Bulgogi Burritos', 'Korean BBQ Quesadillas']\n    };\n    \n    const key1 = `${cuisine1}-${cuisine2}`;\n    const key2 = `${cuisine2}-${cuisine1}`;\n    \n    return fusionDishes[key1] || fusionDishes[key2] || [\n      `${cuisine1}-style ${cuisine2} dish`,\n      `${cuisine2}-inspired ${cuisine1} creation`,\n      `Fusion ${cuisine1}-${cuisine2} specialty`\n    ];\n  }\n  \n  private static generateFusionCulturalNotes(cuisine1: string, cuisine2: string): string[] {\n    return [\n      `Combines the traditional techniques of ${cuisine1} with the flavors of ${cuisine2}`,\n      `Represents a harmonious blend of two distinct culinary traditions`,\n      `Modern fusion approach respecting both cultural heritages`,\n      `Innovative interpretation suitable for contemporary dining`\n    ];\n  }\n  \n  private static calculateSeasonalFusionOptimization(cuisine1: string, cuisine2: string): Record<string, number> {\n    // Simple seasonal optimization based on cuisine characteristics\n    const optimization: Record<string, number> = {\n      spring: 0.8,\n      summer: 0.8,\n      autumn: 0.8,\n      winter: 0.8\n    };\n    \n    // Adjust based on cuisine seasonal preferences\n    const tradition1 = culinaryTraditions[cuisine1];\n    const tradition2 = culinaryTraditions[cuisine2];\n    \n    if (tradition1?.seasonalPreferences?.includes('all') || tradition2?.seasonalPreferences?.includes('all')) {\n      Object.keys(optimization).forEach(season => {\n        optimization[season] = 0.9;\n      });\n    }\n    \n    return optimization;\n  }\n  \n  private static getDefaultCulturalAnalytics(cuisineName: string): CulturalAnalytics {\n    return {\n      culturalSynergy: 0.7,\n      culturalCompatibility: 0.7,\n      historicalSignificance: `${cuisineName} cuisine has rich cultural traditions and historical significance.`,\n      culturalContext: `${cuisineName} cuisine reflects the cultural values and culinary heritage of its region.`,\n      fusionPotential: 0.7,\n      culturalDiversityScore: 0.6,\n      traditionalPrinciples: ['Traditional cooking methods', 'Cultural food combinations', 'Seasonal ingredients'],\n      modernAdaptations: ['Contemporary techniques', 'Global influences', 'Modern presentations']\n    };\n  }\n}"],"version":3}