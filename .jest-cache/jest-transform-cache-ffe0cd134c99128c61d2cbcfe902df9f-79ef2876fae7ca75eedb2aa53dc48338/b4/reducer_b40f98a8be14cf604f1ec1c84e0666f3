bb472a437c34a4769d0dc2615071f850
"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.alchemicalReducer = void 0;
/**
 * Reducer for the AlchemicalContext
 */
const alchemicalReducer = (state, action) => {
    switch (action.type) {
        case 'SET_SEASONAL_STATE':
            return {
                ...state,
                currentSeason: action.payload.season,
                lastUpdated: new Date()
            };
        case 'SET_ELEMENTAL_PREFERENCE':
            return {
                ...state,
                elementalPreference: {
                    ...state.elementalPreference,
                    [action.payload.element]: action.payload.value
                },
                lastUpdated: new Date()
            };
        case 'SET_ELEMENTAL_STATE':
            return {
                ...state,
                elementalState: action.payload,
                lastUpdated: new Date()
            };
        case 'SET_ZODIAC_ENERGY':
            return {
                ...state,
                zodiacEnergy: action.payload,
                currentEnergy: {
                    ...state.currentEnergy,
                    zodiacEnergy: action.payload
                },
                lastUpdated: new Date()
            };
        case 'SET_LUNAR_ENERGY':
            return {
                ...state,
                lunarEnergy: action.payload,
                currentEnergy: {
                    ...state.currentEnergy,
                    lunarEnergy: action.payload
                },
                lastUpdated: new Date()
            };
        case 'SET_PLANETARY_ENERGY':
            return {
                ...state,
                planetaryEnergy: action.payload,
                currentEnergy: {
                    ...state.currentEnergy,
                    planetaryEnergy: action.payload
                },
                lastUpdated: new Date()
            };
        case 'SET_ASTROLOGICAL_STATE':
            return {
                ...state,
                astrologicalState: {
                    currentZodiac: 'aries',
                    sunSign: 'aries',
                    lunarPhase: 'new moon',
                    moonPhase: 'new moon',
                    activePlanets: ['sun', 'moon'],
                    ...(action.payload && typeof action.payload === 'object' ? action.payload : {})
                },
                lastUpdated: new Date()
            };
        case 'SET_ERROR':
            return {
                ...state,
                error: true,
                errorMessage: action.payload.message,
                errors: [...state.errors, action.payload.message],
                lastUpdated: new Date()
            };
        case 'CLEAR_ERROR':
            return {
                ...state,
                error: false,
                errorMessage: '',
                lastUpdated: new Date()
            };
        case 'ADD_ERROR':
            return {
                ...state,
                errors: [...state.errors, action.payload],
                lastUpdated: new Date()
            };
        case 'UPDATE_STATE':
            return {
                ...state,
                ...action.payload,
                lastUpdated: new Date()
            };
        case 'SET_ALCHEMICAL_VALUES':
            return {
                ...state,
                alchemicalValues: action.payload,
                lastUpdated: new Date()
            };
        case 'SET_LUNAR_PHASE':
            return {
                ...state,
                lunarPhase: action.payload,
                lastUpdated: new Date()
            };
        default:
            return state;
    }
};
exports.alchemicalReducer = alchemicalReducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,