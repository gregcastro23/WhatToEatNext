18e3767951a63785089e5a4e893ec10d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformationMethods = exports.rawCookingMethods = exports.traditionalCookingMethods = exports.molecularCookingMethods = exports.wetCookingMethods = exports.dryCookingMethods = exports.getMethodsByPlanet = exports.getMethodsForIngredientType = exports.getMethodsByElement = exports.getMethodsForZodiacSign = exports.allCookingMethods = void 0;
const dry_1 = require("./dry");
Object.defineProperty(exports, "dryCookingMethods", { enumerable: true, get: function () { return dry_1.dryCookingMethods; } });
const wet_1 = require("./wet");
Object.defineProperty(exports, "wetCookingMethods", { enumerable: true, get: function () { return wet_1.wetCookingMethods; } });
const molecular_1 = require("./molecular");
Object.defineProperty(exports, "molecularCookingMethods", { enumerable: true, get: function () { return molecular_1.molecularCookingMethods; } });
const traditional_1 = require("./traditional");
Object.defineProperty(exports, "traditionalCookingMethods", { enumerable: true, get: function () { return traditional_1.traditionalCookingMethods; } });
const raw_1 = require("./raw");
Object.defineProperty(exports, "rawCookingMethods", { enumerable: true, get: function () { return raw_1.rawCookingMethods; } });
// Import other method categories as they are added
const transformation_1 = require("./transformation");
Object.defineProperty(exports, "transformationMethods", { enumerable: true, get: function () { return transformation_1.transformationMethods; } });
/**
 * Collection of all cooking methods from all categories
 */
exports.allCookingMethods = {
    ...dry_1.dryCookingMethods,
    ...wet_1.wetCookingMethods,
    ...molecular_1.molecularCookingMethods,
    ...traditional_1.traditionalCookingMethods,
    ...raw_1.rawCookingMethods,
    // Add other method categories as they are implemented
    ...transformation_1.transformationMethods,
};
/**
 * Get cooking methods that are favorable for a specific zodiac sign
 * @param sign The zodiac sign to check
 * @returns Object containing cooking methods favorable for the sign
 */
const getMethodsForZodiacSign = (sign) => {
    return Object.entries(exports.allCookingMethods)
        .filter(([_, method]) => {
        var _a, _b;
        // Apply safe type casting for method property access
        const methodData = method;
        return (_b = (_a = methodData === null || methodData === void 0 ? void 0 : methodData.astrologicalInfluences) === null || _a === void 0 ? void 0 : _a.favorableZodiac) === null || _b === void 0 ? void 0 : _b.includes(sign);
    })
        .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
};
exports.getMethodsForZodiacSign = getMethodsForZodiacSign;
/**
 * Get cooking methods that have a specific dominant element
 * @param element The element to check for (Fire, Water, Earth, Air)
 * @param threshold The minimum value for that element (0.0-1.0)
 * @returns Object containing cooking methods with that elemental dominance
 */
const getMethodsByElement = (element, threshold = 0.4) => {
    return Object.entries(exports.allCookingMethods)
        .filter(([_, method]) => {
        var _a;
        // Apply safe type casting for method property access
        const methodData = method;
        return (((_a = methodData === null || methodData === void 0 ? void 0 : methodData.elementalEffect) === null || _a === void 0 ? void 0 : _a[element]) || 0) >= threshold;
    })
        .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
};
exports.getMethodsByElement = getMethodsByElement;
/**
 * Get cooking methods suitable for a specific ingredient type
 * @param ingredientType The type of ingredient (e.g., 'meat', 'vegetables')
 * @returns Object containing suitable cooking methods
 */
const getMethodsForIngredientType = (ingredientType) => {
    return Object.entries(exports.allCookingMethods)
        .filter(([_, method]) => {
        // Apply safe type casting for method property access
        const methodData = method;
        return ((methodData === null || methodData === void 0 ? void 0 : methodData.suitable_for) || []).some((type) => { var _a; return (_a = type === null || type === void 0 ? void 0 : type.toLowerCase()) === null || _a === void 0 ? void 0 : _a.includes(ingredientType.toLowerCase()); });
    })
        .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
};
exports.getMethodsForIngredientType = getMethodsForIngredientType;
/**
 * Get cooking methods influenced by a specific planet
 * @param planet The planet to check for influence
 * @returns Object containing methods influenced by the planet
 */
const getMethodsByPlanet = (planet) => {
    return Object.entries(exports.allCookingMethods)
        .filter(([_, method]) => {
        var _a, _b, _c, _d;
        // Apply safe type casting for method property access
        const methodData = method;
        return ((_b = (_a = methodData === null || methodData === void 0 ? void 0 : methodData.astrologicalInfluences) === null || _a === void 0 ? void 0 : _a.dominantPlanets) === null || _b === void 0 ? void 0 : _b.includes(planet)) ||
            ((_d = (_c = methodData === null || methodData === void 0 ? void 0 : methodData.astrologicalInfluences) === null || _c === void 0 ? void 0 : _c.rulingPlanets) === null || _d === void 0 ? void 0 : _d.includes(planet));
    })
        .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
};
exports.getMethodsByPlanet = getMethodsByPlanet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,