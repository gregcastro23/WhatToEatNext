{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/cuisineResolver.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/cuisineResolver.test.ts"],"sourcesContent":["/**\n * Cuisine Resolver Test Suite\n * \n * Tests the cuisine alias system to ensure regional cuisines\n * are properly unified under their primary cuisine types.\n */\n\nimport { \n  standardizeCuisine,\n  getCuisineVariants,\n  areCuisinesRelated,\n  groupCuisinesByType,\n  filterPrimaryCuisines,\n  getCuisineDisplayName,\n  isSupportedCuisine,\n  getCuisineSuggestions,\n  type PrimaryCuisineType\n} from './cuisineResolver';\n\ndescribe('Cuisine Resolver', () => {\n  describe('standardizeCuisine', () => {\n    it('should resolve sichuanese to Chinese', () => {\n      expect(standardizeCuisine('sichuanese')).toBe('Chinese');\n    });\n\n    it('should resolve cantonese to Chinese', () => {\n      expect(standardizeCuisine('cantonese')).toBe('Chinese');\n    });\n\n    it('should resolve shanghainese to Chinese', () => {\n      expect(standardizeCuisine('shanghainese')).toBe('Chinese');\n    });\n\n    it('should resolve hunanese to Chinese', () => {\n      expect(standardizeCuisine('hunanese')).toBe('Chinese');\n    });\n\n    it('should keep primary cuisines unchanged', () => {\n      expect(standardizeCuisine('Chinese')).toBe('Chinese');\n      expect(standardizeCuisine('Italian')).toBe('Italian');\n      expect(standardizeCuisine('Japanese')).toBe('Japanese');\n    });\n\n    it('should handle case variations', () => {\n      expect(standardizeCuisine('SICHUANESE')).toBe('Chinese');\n      expect(standardizeCuisine('Cantonese')).toBe('Chinese');\n      expect(standardizeCuisine('sichuan')).toBe('Chinese');\n    });\n  });\n\n  describe('getCuisineVariants', () => {\n    it('should return all Chinese regional variants', () => {\n      const variants = getCuisineVariants('Chinese');\n      expect(variants).toContain('sichuanese');\n      expect(variants).toContain('cantonese');\n      expect(variants).toContain('shanghainese');\n      expect(variants).toContain('hunanese');\n    });\n\n    it('should return empty array for cuisines without variants', () => {\n      const variants = getCuisineVariants('Fusion');\n      expect(variants).toEqual([]);\n    });\n  });\n\n  describe('areCuisinesRelated', () => {\n    it('should identify related Chinese cuisines', () => {\n      expect(areCuisinesRelated('sichuanese', 'cantonese')).toBe(true);\n      expect(areCuisinesRelated('sichuanese', 'Chinese')).toBe(true);\n      expect(areCuisinesRelated('cantonese', 'shanghainese')).toBe(true);\n    });\n\n    it('should identify unrelated cuisines', () => {\n      expect(areCuisinesRelated('sichuanese', 'Italian')).toBe(false);\n      expect(areCuisinesRelated('Chinese', 'Japanese')).toBe(false);\n    });\n  });\n\n  describe('groupCuisinesByType', () => {\n    it('should group Chinese regional cuisines together', () => {\n      const cuisines = ['sichuanese', 'cantonese', 'Italian', 'shanghainese'];\n      const groups = groupCuisinesByType(cuisines);\n      \n      expect(groups.Chinese).toContain('sichuanese');\n      expect(groups.Chinese).toContain('cantonese');\n      expect(groups.Chinese).toContain('shanghainese');\n      expect(groups.Italian).toContain('Italian');\n    });\n  });\n\n  describe('filterPrimaryCuisines', () => {\n    it('should return only primary cuisine types', () => {\n      const cuisines = ['sichuanese', 'cantonese', 'Italian', 'shanghainese'];\n      const primary = filterPrimaryCuisines(cuisines);\n      \n      expect(primary).toContain('Chinese');\n      expect(primary).toContain('Italian');\n      expect(primary).not.toContain('sichuanese');\n      expect(primary).not.toContain('cantonese');\n    });\n\n    it('should remove duplicates', () => {\n      const cuisines = ['sichuanese', 'cantonese', 'shanghainese'];\n      const primary = filterPrimaryCuisines(cuisines);\n      \n      expect(primary).toEqual(['Chinese']);\n    });\n  });\n\n  describe('getCuisineDisplayName', () => {\n    it('should show regional cuisine with primary type', () => {\n      expect(getCuisineDisplayName('sichuanese')).toBe('Sichuanese (Chinese)');\n      expect(getCuisineDisplayName('cantonese')).toBe('Cantonese (Chinese)');\n    });\n\n    it('should show primary cuisines without modification', () => {\n      expect(getCuisineDisplayName('Chinese')).toBe('Chinese');\n      expect(getCuisineDisplayName('Italian')).toBe('Italian');\n    });\n  });\n\n  describe('isSupportedCuisine', () => {\n    it('should support regional cuisines', () => {\n      expect(isSupportedCuisine('sichuanese')).toBe(true);\n      expect(isSupportedCuisine('cantonese')).toBe(true);\n    });\n\n    it('should support primary cuisines', () => {\n      expect(isSupportedCuisine('Chinese')).toBe(true);\n      expect(isSupportedCuisine('Italian')).toBe(true);\n    });\n\n    it('should not support unknown cuisines', () => {\n      expect(isSupportedCuisine('unknown-cuisine')).toBe(false);\n    });\n  });\n\n  describe('getCuisineSuggestions', () => {\n    it('should suggest Chinese variants for \"sich\"', () => {\n      const suggestions = getCuisineSuggestions('sich');\n      expect(suggestions).toContain('sichuanese');\n    });\n\n    it('should suggest Chinese variants for \"cant\"', () => {\n      const suggestions = getCuisineSuggestions('cant');\n      expect(suggestions).toContain('cantonese');\n    });\n\n    it('should suggest primary cuisines', () => {\n      const suggestions = getCuisineSuggestions('chi');\n      expect(suggestions).toContain('Chinese');\n    });\n  });\n\n  describe('Integration Tests', () => {\n    it('should handle mixed cuisine lists correctly', () => {\n      const mixedCuisines = [\n        'sichuanese',\n        'cantonese', \n        'Italian',\n        'shanghainese',\n        'Japanese',\n        'hunanese'\n      ];\n      \n      const primaryCuisines = filterPrimaryCuisines(mixedCuisines);\n      expect(primaryCuisines).toContain('Chinese');\n      expect(primaryCuisines).toContain('Italian');\n      expect(primaryCuisines).toContain('Japanese');\n      expect(primaryCuisines).not.toContain('sichuanese');\n    });\n\n    it('should maintain consistency across all resolver functions', () => {\n      const testCuisine = 'sichuanese';\n      \n      // All functions should agree on the primary cuisine\n      const standardized = standardizeCuisine(testCuisine);\n      const displayName = getCuisineDisplayName(testCuisine);\n      const isSupported = isSupportedCuisine(testCuisine);\n      \n      expect(standardized).toBe('Chinese');\n      expect(displayName).toBe('Sichuanese (Chinese)');\n      expect(isSupported).toBe(true);\n    });\n  });\n}); "],"version":3}