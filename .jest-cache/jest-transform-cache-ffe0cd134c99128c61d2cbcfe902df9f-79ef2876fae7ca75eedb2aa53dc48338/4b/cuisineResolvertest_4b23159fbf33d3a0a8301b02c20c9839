5e6a3c52ff4c4be7f1cf45e9ac70fc16
"use strict";
/**
 * Cuisine Resolver Test Suite
 *
 * Tests the cuisine alias system to ensure regional cuisines
 * are properly unified under their primary cuisine types.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const cuisineResolver_1 = require("./cuisineResolver");
describe('Cuisine Resolver', () => {
    describe('standardizeCuisine', () => {
        it('should resolve sichuanese to Chinese', () => {
            expect((0, cuisineResolver_1.standardizeCuisine)('sichuanese')).toBe('Chinese');
        });
        it('should resolve cantonese to Chinese', () => {
            expect((0, cuisineResolver_1.standardizeCuisine)('cantonese')).toBe('Chinese');
        });
        it('should resolve shanghainese to Chinese', () => {
            expect((0, cuisineResolver_1.standardizeCuisine)('shanghainese')).toBe('Chinese');
        });
        it('should resolve hunanese to Chinese', () => {
            expect((0, cuisineResolver_1.standardizeCuisine)('hunanese')).toBe('Chinese');
        });
        it('should keep primary cuisines unchanged', () => {
            expect((0, cuisineResolver_1.standardizeCuisine)('Chinese')).toBe('Chinese');
            expect((0, cuisineResolver_1.standardizeCuisine)('Italian')).toBe('Italian');
            expect((0, cuisineResolver_1.standardizeCuisine)('Japanese')).toBe('Japanese');
        });
        it('should handle case variations', () => {
            expect((0, cuisineResolver_1.standardizeCuisine)('SICHUANESE')).toBe('Chinese');
            expect((0, cuisineResolver_1.standardizeCuisine)('Cantonese')).toBe('Chinese');
            expect((0, cuisineResolver_1.standardizeCuisine)('sichuan')).toBe('Chinese');
        });
    });
    describe('getCuisineVariants', () => {
        it('should return all Chinese regional variants', () => {
            const variants = (0, cuisineResolver_1.getCuisineVariants)('Chinese');
            expect(variants).toContain('sichuanese');
            expect(variants).toContain('cantonese');
            expect(variants).toContain('shanghainese');
            expect(variants).toContain('hunanese');
        });
        it('should return empty array for cuisines without variants', () => {
            const variants = (0, cuisineResolver_1.getCuisineVariants)('Fusion');
            expect(variants).toEqual([]);
        });
    });
    describe('areCuisinesRelated', () => {
        it('should identify related Chinese cuisines', () => {
            expect((0, cuisineResolver_1.areCuisinesRelated)('sichuanese', 'cantonese')).toBe(true);
            expect((0, cuisineResolver_1.areCuisinesRelated)('sichuanese', 'Chinese')).toBe(true);
            expect((0, cuisineResolver_1.areCuisinesRelated)('cantonese', 'shanghainese')).toBe(true);
        });
        it('should identify unrelated cuisines', () => {
            expect((0, cuisineResolver_1.areCuisinesRelated)('sichuanese', 'Italian')).toBe(false);
            expect((0, cuisineResolver_1.areCuisinesRelated)('Chinese', 'Japanese')).toBe(false);
        });
    });
    describe('groupCuisinesByType', () => {
        it('should group Chinese regional cuisines together', () => {
            const cuisines = ['sichuanese', 'cantonese', 'Italian', 'shanghainese'];
            const groups = (0, cuisineResolver_1.groupCuisinesByType)(cuisines);
            expect(groups.Chinese).toContain('sichuanese');
            expect(groups.Chinese).toContain('cantonese');
            expect(groups.Chinese).toContain('shanghainese');
            expect(groups.Italian).toContain('Italian');
        });
    });
    describe('filterPrimaryCuisines', () => {
        it('should return only primary cuisine types', () => {
            const cuisines = ['sichuanese', 'cantonese', 'Italian', 'shanghainese'];
            const primary = (0, cuisineResolver_1.filterPrimaryCuisines)(cuisines);
            expect(primary).toContain('Chinese');
            expect(primary).toContain('Italian');
            expect(primary).not.toContain('sichuanese');
            expect(primary).not.toContain('cantonese');
        });
        it('should remove duplicates', () => {
            const cuisines = ['sichuanese', 'cantonese', 'shanghainese'];
            const primary = (0, cuisineResolver_1.filterPrimaryCuisines)(cuisines);
            expect(primary).toEqual(['Chinese']);
        });
    });
    describe('getCuisineDisplayName', () => {
        it('should show regional cuisine with primary type', () => {
            expect((0, cuisineResolver_1.getCuisineDisplayName)('sichuanese')).toBe('Sichuanese (Chinese)');
            expect((0, cuisineResolver_1.getCuisineDisplayName)('cantonese')).toBe('Cantonese (Chinese)');
        });
        it('should show primary cuisines without modification', () => {
            expect((0, cuisineResolver_1.getCuisineDisplayName)('Chinese')).toBe('Chinese');
            expect((0, cuisineResolver_1.getCuisineDisplayName)('Italian')).toBe('Italian');
        });
    });
    describe('isSupportedCuisine', () => {
        it('should support regional cuisines', () => {
            expect((0, cuisineResolver_1.isSupportedCuisine)('sichuanese')).toBe(true);
            expect((0, cuisineResolver_1.isSupportedCuisine)('cantonese')).toBe(true);
        });
        it('should support primary cuisines', () => {
            expect((0, cuisineResolver_1.isSupportedCuisine)('Chinese')).toBe(true);
            expect((0, cuisineResolver_1.isSupportedCuisine)('Italian')).toBe(true);
        });
        it('should not support unknown cuisines', () => {
            expect((0, cuisineResolver_1.isSupportedCuisine)('unknown-cuisine')).toBe(false);
        });
    });
    describe('getCuisineSuggestions', () => {
        it('should suggest Chinese variants for "sich"', () => {
            const suggestions = (0, cuisineResolver_1.getCuisineSuggestions)('sich');
            expect(suggestions).toContain('sichuanese');
        });
        it('should suggest Chinese variants for "cant"', () => {
            const suggestions = (0, cuisineResolver_1.getCuisineSuggestions)('cant');
            expect(suggestions).toContain('cantonese');
        });
        it('should suggest primary cuisines', () => {
            const suggestions = (0, cuisineResolver_1.getCuisineSuggestions)('chi');
            expect(suggestions).toContain('Chinese');
        });
    });
    describe('Integration Tests', () => {
        it('should handle mixed cuisine lists correctly', () => {
            const mixedCuisines = [
                'sichuanese',
                'cantonese',
                'Italian',
                'shanghainese',
                'Japanese',
                'hunanese'
            ];
            const primaryCuisines = (0, cuisineResolver_1.filterPrimaryCuisines)(mixedCuisines);
            expect(primaryCuisines).toContain('Chinese');
            expect(primaryCuisines).toContain('Italian');
            expect(primaryCuisines).toContain('Japanese');
            expect(primaryCuisines).not.toContain('sichuanese');
        });
        it('should maintain consistency across all resolver functions', () => {
            const testCuisine = 'sichuanese';
            // All functions should agree on the primary cuisine
            const standardized = (0, cuisineResolver_1.standardizeCuisine)(testCuisine);
            const displayName = (0, cuisineResolver_1.getCuisineDisplayName)(testCuisine);
            const isSupported = (0, cuisineResolver_1.isSupportedCuisine)(testCuisine);
            expect(standardized).toBe('Chinese');
            expect(displayName).toBe('Sichuanese (Chinese)');
            expect(isSupported).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,