cfa2936852412234967fab7c316e9154
"use strict";
// Create or update a utility function to calculate proper alchemical properties
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeElementalProperties = exports.ingredientToRecipeIngredient = exports.mapToIngredient = exports.getDominantElement = exports.mergeElementalProperties = exports.validateRecipeIngredient = exports.validateIngredient = exports.isFullIngredient = exports.isRecipeIngredient = exports.determineIngredientModality = exports.calculateThermodynamicProperties = exports.calculateAlchemicalProperties = void 0;
/**
 * Calculate alchemical properties based on elemental properties
 * Following the core alchemizer engine formula patterns
 */
function calculateAlchemicalProperties(ingredient) {
    // Extract elemental properties
    const elementals = ingredient.elementalProperties || {
        Fire: 0.25,
        Water: 0.25,
        Earth: 0.25,
        Air: 0.25
    };
    // Base values derived from planetary influences in the alchemizer
    // Sun (Spirit), Moon/Venus (Essence), Saturn/Mars (Matter), Mercury/Neptune (Substance)
    // The ratios below approximate the original alchemizer calculations
    const spirit = (elementals.Fire * 0.7) + (elementals.Air * 0.3);
    const essence = (elementals.Water * 0.6) + (elementals.Fire * 0.2) + (elementals.Air * 0.2);
    const matter = (elementals.Earth * 0.7) + (elementals.Water * 0.3);
    const substance = (elementals.Earth * 0.5) + (elementals.Water * 0.3) + (elementals.Air * 0.2);
    return {
        spirit,
        essence,
        matter,
        substance
    };
}
exports.calculateAlchemicalProperties = calculateAlchemicalProperties;
/**
 * Calculate thermodynamic properties based on alchemical and elemental properties
 * Using the exact formulas from the alchemizer engine
 */
function calculateThermodynamicProperties(alchemicalProps, elementalProps) {
    const { spirit, essence, matter, substance } = alchemicalProps;
    // Use provided elemental props or create defaults
    const elements = elementalProps || {
        Fire: 0.25,
        Water: 0.25,
        Earth: 0.25,
        Air: 0.25
    };
    // Extract elemental values
    const fire = elements.Fire;
    const water = elements.Water;
    const air = elements.Air;
    const earth = elements.Earth;
    // Using the exact formulas from the alchemizer engine
    const heat = (spirit ** 2 + fire ** 2) /
        ((substance + essence + matter + water + air + earth) ** 2 || 1);
    const entropy = (spirit ** 2 + substance ** 2 + fire ** 2 + air ** 2) /
        ((essence + matter + earth + water) ** 2 || 1);
    const reactivity = (spirit ** 2 + substance ** 2 + essence ** 2 + fire ** 2 + air ** 2 + water ** 2) /
        ((matter + earth) ** 2 || 1);
    const energy = heat - (reactivity * entropy);
    return {
        heat,
        entropy,
        reactivity,
        energy
    };
}
exports.calculateThermodynamicProperties = calculateThermodynamicProperties;
// Helper functions to calculate individual properties
function _calculateSpiritValue(flavorProfile) {
    // Implement logic based on flavor profile attributes
    // Example: spirit might be higher for aromatic, fragrant ingredients
    return flavorProfile.intensity || 0.5; // Default to 0.5 if intensity not provided
}
// Implement similar helper functions for essence, matter, and substance 
/**
 * Determines the modality of an ingredient based on its qualities and elemental properties
 * Using the hierarchical affinities:
 * - Mutability: Air > Water > Fire > Earth
 * - Fixed: Earth > Water > Fire > Air
 * - Cardinal: Equal for all elements
 *
 * @param qualities Array of quality descriptors
 * @param elementalProperties Optional elemental properties for more accurate determination
 * @returns The modality (Cardinal, Fixed, or Mutable)
 */
function determineIngredientModality(qualities = [], elementalProperties) {
    // Ensure qualities is an array
    const qualitiesArray = Array.isArray(qualities) ? qualities : [];
    // Create normalized arrays of qualities for easier matching
    const normalizedQualities = qualitiesArray.map(q => q.toLowerCase());
    // Look for explicit quality indicators in the ingredients
    const cardinalKeywords = ['initiating', 'spicy', 'pungent', 'stimulating', 'invigorating', 'activating'];
    const fixedKeywords = ['grounding', 'stabilizing', 'nourishing', 'sustaining', 'foundational'];
    const mutableKeywords = ['adaptable', 'flexible', 'versatile', 'balancing', 'harmonizing'];
    const hasCardinalQuality = normalizedQualities.some(q => cardinalKeywords.includes(q));
    const hasFixedQuality = normalizedQualities.some(q => fixedKeywords.includes(q));
    const hasMutableQuality = normalizedQualities.some(q => mutableKeywords.includes(q));
    // If there's a clear quality indicator, use that
    if (hasCardinalQuality && !hasFixedQuality && !hasMutableQuality) {
        return 'Cardinal';
    }
    if (hasFixedQuality && !hasCardinalQuality && !hasMutableQuality) {
        return 'Fixed';
    }
    if (hasMutableQuality && !hasCardinalQuality && !hasFixedQuality) {
        return 'Mutable';
    }
    // If elemental properties are provided, use them to determine modality
    if (elementalProperties) {
        const { Fire, Water, Earth, Air } = elementalProperties;
        // Determine dominant element
        const dominantElement = getDominantElement(elementalProperties);
        // Use hierarchical element-modality affinities
        switch (dominantElement) {
            case 'Air':
                // Air has strongest affinity with Mutable, then Cardinal, then Fixed
                if (Air > 0.4) {
                    return 'Mutable';
                }
                break;
            case 'Earth':
                // Earth has strongest affinity with Fixed, then Cardinal, then Mutable
                if (Earth > 0.4) {
                    return 'Fixed';
                }
                break;
            case 'Fire':
                // Fire has balanced affinities but leans Cardinal
                if (Fire > 0.4) {
                    return 'Cardinal';
                }
                break;
            case 'Water':
                // Water is balanced between Fixed and Mutable
                if (Water > 0.4) {
                    // Slightly favor Mutable for Water, as per our hierarchy
                    return Water > 0.6 ? 'Mutable' : 'Fixed';
                }
                break;
        }
        // Calculate modality scores based on hierarchical affinities
        const mutableScore = (Air * 0.9) + (Water * 0.8) + (Fire * 0.7) + (Earth * 0.5);
        const fixedScore = (Earth * 0.9) + (Water * 0.8) + (Fire * 0.6) + (Air * 0.5);
        const cardinalScore = (Fire * 0.8) + (Earth * 0.8) + (Water * 0.8) + (Air * 0.8);
        // Return the modality with the highest score
        if (mutableScore > fixedScore && mutableScore > cardinalScore) {
            return 'Mutable';
        }
        else if (fixedScore > mutableScore && fixedScore > cardinalScore) {
            return 'Fixed';
        }
        else {
            return 'Cardinal';
        }
    }
    // Default to Mutable if no clear indicators are found
    return 'Mutable';
}
exports.determineIngredientModality = determineIngredientModality;
/**
 * Type guard to check if an object is a RecipeIngredient
 */
function isRecipeIngredient(ingredient) {
    const ingredientData = ingredient;
    return (ingredient &&
        typeof (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.name) === 'string' &&
        typeof (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.amount) === 'number' &&
        typeof (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.unit) === 'string');
}
exports.isRecipeIngredient = isRecipeIngredient;
/**
 * Type guard to check if an object is a full Ingredient
 */
function isFullIngredient(ingredient) {
    const ingredientData = ingredient;
    return (ingredient &&
        typeof (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.name) === 'string' &&
        typeof (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.category) === 'string' &&
        (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.elementalProperties) &&
        Array.isArray(ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.qualities) &&
        (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.storage) &&
        typeof (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.storage) === 'object');
}
exports.isFullIngredient = isFullIngredient;
/**
 * Validates that an ingredient object has all required properties
 */
function validateIngredient(ingredient) {
    const errors = [];
    // Required fields
    if (!ingredient.name || typeof ingredient.name !== 'string') {
        errors.push('Name is required and must be a string');
    }
    if (!ingredient.category) {
        errors.push('Category is required');
    }
    if (!ingredient.elementalProperties) {
        errors.push('Elemental properties are required');
    }
    // Optional validations
    if (ingredient.qualities && !Array.isArray(ingredient.qualities)) {
        errors.push('Qualities must be an array');
    }
    // Fix specific property access errors
    if (ingredient.qualities && Array.isArray(ingredient.qualities)) {
        // Check each quality is a string
        const invalidQualities = ingredient.qualities.filter((q) => typeof q !== 'string');
        if (invalidQualities.length > 0) {
            errors.push('All qualities must be strings');
        }
    }
    // Storage validation
    if (ingredient.storage && typeof ingredient.storage !== 'object') {
        errors.push('Storage must be an object');
    }
    if (ingredient.storage && typeof ingredient.storage === 'object') {
        // Additional storage property validations could go here
    }
    // Elemental properties validation
    if (ingredient.elementalProperties) {
        const elements = ['Fire', 'Water', 'Earth', 'Air'];
        const props = ingredient.elementalProperties;
        for (const element of elements) {
            if (typeof props[element] !== 'number') {
                errors.push(`Elemental property ${element} must be a number`);
            }
        }
    }
    return {
        isValid: errors.length === 0,
        errors
    };
}
exports.validateIngredient = validateIngredient;
/**
 * Validates a recipe ingredient
 */
function validateRecipeIngredient(ingredient) {
    const errors = [];
    // Check required fields
    if (!ingredient.name) {
        errors.push('Name is required');
    }
    if (typeof ingredient.amount !== 'number') {
        errors.push('Amount must be a number');
    }
    if (!ingredient.unit) {
        errors.push('Unit is required');
    }
    // If elemental properties are provided, validate them
    if (ingredient.elementalProperties) {
        const { Fire, Water, Earth, Air } = ingredient.elementalProperties;
        if (typeof Fire !== 'number' || Fire < 0 || Fire > 1) {
            errors.push('Fire elemental property must be a number between 0 and 1');
        }
        if (typeof Water !== 'number' || Water < 0 || Water > 1) {
            errors.push('Water elemental property must be a number between 0 and 1');
        }
        if (typeof Earth !== 'number' || Earth < 0 || Earth > 1) {
            errors.push('Earth elemental property must be a number between 0 and 1');
        }
        if (typeof Air !== 'number' || Air < 0 || Air > 1) {
            errors.push('Air elemental property must be a number between 0 and 1');
        }
    }
    return {
        isValid: errors.length === 0,
        errors
    };
}
exports.validateRecipeIngredient = validateRecipeIngredient;
/**
 * Merges two sets of elemental properties with optional weighting
 */
function mergeElementalProperties(base, addition, weight = 0.5) {
    return {
        Fire: base.Fire * (1 - weight) + addition.Fire * weight,
        Water: base.Water * (1 - weight) + addition.Water * weight,
        Earth: base.Earth * (1 - weight) + addition.Earth * weight,
        Air: base.Air * (1 - weight) + addition.Air * weight
    };
}
exports.mergeElementalProperties = mergeElementalProperties;
/**
 * Gets the dominant element from an ElementalProperties object
 */
function getDominantElement(elementalProperties) {
    const { Fire, Water, Earth, Air } = elementalProperties;
    const max = Math.max(Fire, Water, Earth, Air);
    if (max === Fire)
        return 'Fire';
    if (max === Water)
        return 'Water';
    if (max === Earth)
        return 'Earth';
    if (max === Air)
        return 'Air';
    return 'Balanced';
}
exports.getDominantElement = getDominantElement;
/**
 * Converts an ingredient mapping to a full ingredient
 */
function mapToIngredient(mapping) {
    // Set default values for required properties
    const ingredient = {
        name: mapping.name || '',
        category: mapping.category || 'culinary_herb',
        elementalProperties: mapping.elementalProperties || { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 },
        qualities: mapping.qualities || [],
        storage: mapping.storage || {
            duration: 'unknown'
        },
        // Add missing required properties for Ingredient interface
        amount: mapping.amount || 1,
        astrologicalProfile: mapping.astrologicalProfile || {
            elementalAffinity: { base: 'Earth' },
            rulingPlanets: [],
            zodiacAffinity: []
        }
    };
    // Add any additional properties from the mapping
    for (const key in mapping) {
        if (key !== 'name' && key !== 'category' && key !== 'elementalProperties' && key !== 'qualities') {
            ingredient[key] = mapping[key];
        }
    }
    return ingredient;
}
exports.mapToIngredient = mapToIngredient;
/**
 * Converts a full ingredient to a recipe ingredient
 */
function ingredientToRecipeIngredient(ingredient, amount = 1, unit = 'item') {
    return {
        name: ingredient.name,
        amount,
        unit,
        category: ingredient.category || 'culinary_herb',
        elementalProperties: ingredient.elementalProperties,
        qualities: (ingredient === null || ingredient === void 0 ? void 0 : ingredient.qualities) || [],
        astrologicalProfile: ingredient.astrologicalProfile,
        // Include other relevant properties that exist in RecipeIngredient - safe property access
        origin: (ingredient === null || ingredient === void 0 ? void 0 : ingredient.origin) || undefined,
        seasonality: (ingredient === null || ingredient === void 0 ? void 0 : ingredient.seasonality) || undefined
    };
}
exports.ingredientToRecipeIngredient = ingredientToRecipeIngredient;
/**
 * Normalizes elemental properties to ensure they sum to 1
 */
function normalizeElementalProperties(properties) {
    const { Fire, Water, Earth, Air } = properties;
    const sum = Fire + Water + Earth + Air;
    if (sum === 0) {
        // If all values are 0, return an evenly balanced set
        return { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 };
    }
    return {
        Fire: Fire / sum,
        Water: Water / sum,
        Earth: Earth / sum,
        Air: Air / sum
    };
}
exports.normalizeElementalProperties = normalizeElementalProperties;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,