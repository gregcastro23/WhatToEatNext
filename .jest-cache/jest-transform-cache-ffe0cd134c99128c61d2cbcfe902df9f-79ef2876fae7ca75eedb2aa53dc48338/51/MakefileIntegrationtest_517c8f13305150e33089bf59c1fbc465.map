{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/MakefileIntegration.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/MakefileIntegration.test.ts"],"sourcesContent":["/**\n * Tests for Makefile Integration System\n */\n\nimport { MakefileIntegration, MakeTarget } from './MakefileIntegration';\nimport fs from 'fs';\nimport { execSync } from 'child_process';\n\n// Mock fs and execSync\njest.mock('fs');\njest.mock('child_process');\n\nconst mockFs = fs as jest.Mocked<typeof fs>;\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\n\ndescribe('MakefileIntegration', () => {\n  let makefileIntegration: MakefileIntegration;\n\n  beforeEach(() => {\n    makefileIntegration = new MakefileIntegration();\n    jest.clearAllMocks();\n  });\n\n  describe('constructor', () => {\n    it('should initialize with default Makefile path', () => {\n      const integration = new MakefileIntegration();\n      expect(integration).toBeInstanceOf(MakefileIntegration);\n    });\n\n    it('should initialize with custom Makefile path', () => {\n      const integration = new MakefileIntegration('/custom/Makefile');\n      expect(integration).toBeInstanceOf(MakefileIntegration);\n    });\n  });\n\n  describe('getCampaignTargets', () => {\n    it('should return list of campaign targets', () => {\n      const targets = makefileIntegration.getCampaignTargets();\n\n      expect(targets.length).toBeGreaterThan(0);\n\n      const targetNames = targets.map(t => t.name);\n      expect(targetNames).toContain('campaign-phase1');\n      expect(targetNames).toContain('campaign-phase2');\n      expect(targetNames).toContain('campaign-phase3');\n      expect(targetNames).toContain('campaign-phase4');\n      expect(targetNames).toContain('campaign-status');\n      expect(targetNames).toContain('campaign-execute-next');\n    });\n\n    it('should return targets with correct structure', () => {\n      const targets = makefileIntegration.getCampaignTargets();\n      const phase1Target = targets.find(t => t.name === 'campaign-phase1');\n\n      expect(phase1Target).toBeDefined();\n      expect(phase1Target!.description).toContain('Phase 1');\n      expect(phase1Target!.commands).toHaveLength(4);\n      expect(phase1Target!.phony).toBe(true);\n    });\n\n    it('should have validation targets for each phase', () => {\n      const targets = makefileIntegration.getCampaignTargets();\n      const targetNames = targets.map(t => t.name);\n\n      expect(targetNames).toContain('campaign-validate-phase1');\n      expect(targetNames).toContain('campaign-validate-phase2');\n      expect(targetNames).toContain('campaign-validate-phase3');\n      expect(targetNames).toContain('campaign-validate-phase4');\n    });\n\n    it('should have safety and recovery targets', () => {\n      const targets = makefileIntegration.getCampaignTargets();\n      const targetNames = targets.map(t => t.name);\n\n      expect(targetNames).toContain('campaign-safety-check');\n      expect(targetNames).toContain('campaign-emergency-rollback');\n    });\n  });\n\n  describe('executeMakeTarget', () => {\n    beforeEach(() => {\n      mockExecSync.mockReturnValue('Make target executed successfully');\n    });\n\n    it('should execute make target successfully', async () => {\n      const result = await makefileIntegration.executeMakeTarget('test-target');\n\n      expect(mockExecSync).toHaveBeenCalledWith(\n        'make test-target',\n        expect.any(Object)\n      );\n      expect(result.success).toBe(true);\n      expect(result.exitCode).toBe(0);\n      expect(result.target).toBe('test-target');\n      expect(result.executionTime).toBeGreaterThan(0);\n    });\n\n    it('should handle make target execution failure', async () => {\n      const error = new Error('Make failed') as any;\n      error.status = 2;\n      error.stdout = 'Error output';\n      mockExecSync.mockImplementation(() => {\n        throw error;\n      });\n\n      const result =\n        await makefileIntegration.executeMakeTarget('failing-target');\n\n      expect(result.success).toBe(false);\n      expect(result.exitCode).toBe(2);\n      expect(result.target).toBe('failing-target');\n    });\n\n    it('should support dry run mode', async () => {\n      const result = await makefileIntegration.executeMakeTarget(\n        'test-target',\n        { dryRun: true }\n      );\n\n      expect(mockExecSync).not.toHaveBeenCalled();\n      expect(result.success).toBe(true);\n      expect(result.output).toContain('DRY RUN');\n      expect(result.executionTime).toBe(0);\n    });\n\n    it('should support silent mode', async () => {\n      await makefileIntegration.executeMakeTarget('test-target', {\n        silent: true,\n      });\n\n      expect(mockExecSync).toHaveBeenCalledWith(\n        'make test-target',\n        expect.objectContaining({ stdio: 'pipe' })\n      );\n    });\n\n    it('should respect timeout option', async () => {\n      await makefileIntegration.executeMakeTarget('test-target', {\n        timeout: 5000,\n      });\n\n      expect(mockExecSync).toHaveBeenCalledWith(\n        'make test-target',\n        expect.objectContaining({ timeout: 5000 })\n      );\n    });\n  });\n\n  describe('getCampaignProgress', () => {\n    beforeEach(() => {\n      // Mock successful make errors execution\n      mockExecSync\n        .mockReturnValueOnce('5') // TypeScript errors\n        .mockReturnValueOnce('10') // Linting warnings\n        .mockReturnValueOnce('150') // Enterprise systems\n        .mockReturnValueOnce(''); // Build (successful)\n    });\n\n    it('should return campaign progress with correct phase determination', async () => {\n      const progress = await makefileIntegration.getCampaignProgress();\n\n      expect(progress.currentPhase).toBe(1); // Has TS errors, so phase 1\n      expect(progress.totalPhases).toBe(4);\n      expect(progress.typeScriptErrors).toBe(5);\n      expect(progress.lintingWarnings).toBe(10);\n      expect(progress.enterpriseSystems).toBe(150);\n      expect(progress.lastUpdate).toBeInstanceOf(Date);\n    });\n\n    it('should determine phase 2 when TS errors are zero', async () => {\n      mockExecSync\n        .mockReturnValueOnce('0') // No TypeScript errors\n        .mockReturnValueOnce('10') // Still has linting warnings\n        .mockReturnValueOnce('150')\n        .mockReturnValueOnce('');\n\n      const progress = await makefileIntegration.getCampaignProgress();\n\n      expect(progress.currentPhase).toBe(2);\n      expect(progress.typeScriptErrors).toBe(0);\n    });\n\n    it('should determine phase 3 when TS errors and linting warnings are zero', async () => {\n      mockExecSync\n        .mockReturnValueOnce('0') // No TypeScript errors\n        .mockReturnValueOnce('0') // No linting warnings\n        .mockReturnValueOnce('150') // Not enough enterprise systems\n        .mockReturnValueOnce('');\n\n      const progress = await makefileIntegration.getCampaignProgress();\n\n      expect(progress.currentPhase).toBe(3);\n    });\n\n    it('should determine phase 4 when first three phases are complete', async () => {\n      mockExecSync\n        .mockReturnValueOnce('0') // No TypeScript errors\n        .mockReturnValueOnce('0') // No linting warnings\n        .mockReturnValueOnce('250') // Enough enterprise systems\n        .mockReturnValueOnce(''); // Build successful but need to check time\n\n      const progress = await makefileIntegration.getCampaignProgress();\n\n      expect(progress.currentPhase).toBe(4);\n    });\n\n    it('should handle errors gracefully', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Command failed');\n      });\n\n      const progress = await makefileIntegration.getCampaignProgress();\n\n      expect(progress.currentPhase).toBe(1);\n      expect(progress.typeScriptErrors).toBe(-1);\n      expect(progress.lintingWarnings).toBe(-1);\n      expect(progress.buildTime).toBe(-1);\n      expect(progress.enterpriseSystems).toBe(-1);\n    });\n  });\n\n  describe('addCampaignTargetsToMakefile', () => {\n    beforeEach(() => {\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(\n        '# Existing Makefile content\\nhelp:\\n\\t@echo \"Help\"'\n      );\n    });\n\n    it('should add campaign targets to existing Makefile', async () => {\n      const result = await makefileIntegration.addCampaignTargetsToMakefile();\n\n      expect(result).toBe(true);\n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        'Makefile',\n        expect.stringContaining('# Campaign Execution Framework'),\n        'utf8'\n      );\n    });\n\n    it('should not add targets if they already exist', async () => {\n      mockFs.readFileSync.mockReturnValue(\n        '# Campaign Execution Framework\\nexisting content'\n      );\n\n      const result = await makefileIntegration.addCampaignTargetsToMakefile();\n\n      expect(result).toBe(true);\n      expect(mockFs.writeFileSync).not.toHaveBeenCalled();\n    });\n\n    it('should handle missing Makefile', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      const result = await makefileIntegration.addCampaignTargetsToMakefile();\n\n      expect(result).toBe(false);\n      expect(mockFs.writeFileSync).not.toHaveBeenCalled();\n    });\n\n    it('should handle file system errors', async () => {\n      mockFs.readFileSync.mockImplementation(() => {\n        throw new Error('File read error');\n      });\n\n      const result = await makefileIntegration.addCampaignTargetsToMakefile();\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('validateExistingTargets', () => {\n    it('should validate that required targets exist', async () => {\n      mockExecSync.mockReturnValue('Target executed successfully');\n\n      const validation = await makefileIntegration.validateExistingTargets();\n\n      expect(validation.valid).toBe(true);\n      expect(validation.missing).toHaveLength(0);\n    });\n\n    it('should identify missing targets', async () => {\n      mockExecSync.mockImplementation(command => {\n        if (command.includes('make errors')) {\n          throw new Error('Target not found');\n        }\n        return 'Success';\n      });\n\n      const validation = await makefileIntegration.validateExistingTargets();\n\n      expect(validation.valid).toBe(false);\n      expect(validation.missing).toContain('errors');\n    });\n\n    it('should check all required targets', async () => {\n      const requiredTargets = [\n        'errors',\n        'errors-by-type',\n        'errors-by-file',\n        'check',\n        'build',\n        'test',\n        'lint',\n      ];\n\n      await makefileIntegration.validateExistingTargets();\n\n      // Should have called execSync for each required target\n      expect(mockExecSync).toHaveBeenCalledTimes(requiredTargets.length);\n\n      requiredTargets.forEach(target => {\n        expect(mockExecSync).toHaveBeenCalledWith(\n          `make ${target}`,\n          expect.any(Object)\n        );\n      });\n    });\n  });\n\n  describe('generateCampaignMakefileSection', () => {\n    it('should generate valid Makefile syntax', async () => {\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue('# Existing content');\n\n      await makefileIntegration.addCampaignTargetsToMakefile();\n\n      const writtenContent = mockFs.writeFileSync.mock.calls[0][1] as string;\n\n      // Check for proper Makefile syntax\n      expect(writtenContent).toContain('.PHONY:');\n      expect(writtenContent).toContain('campaign-phase1:');\n      expect(writtenContent).toContain('\\t@echo'); // Commands should be indented with tabs\n\n      // Check that all campaign targets are included\n      const targets = makefileIntegration.getCampaignTargets();\n      targets.forEach(target => {\n        expect(writtenContent).toContain(`${target.name}:`);\n        expect(writtenContent).toContain(target.description);\n      });\n    });\n\n    it('should include phony targets declaration', async () => {\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue('# Existing content');\n\n      await makefileIntegration.addCampaignTargetsToMakefile();\n\n      const writtenContent = mockFs.writeFileSync.mock.calls[0][1] as string;\n      const phonyLine = writtenContent\n        .split('\\n')\n        .find(line => line.startsWith('.PHONY:'));\n\n      expect(phonyLine).toBeDefined();\n      expect(phonyLine).toContain('campaign-phase1');\n      expect(phonyLine).toContain('campaign-status');\n    });\n\n    it('should include target dependencies', async () => {\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue('# Existing content');\n\n      await makefileIntegration.addCampaignTargetsToMakefile();\n\n      const writtenContent = mockFs.writeFileSync.mock.calls[0][1] as string;\n\n      // Phase 2 should depend on phase 1 validation\n      expect(writtenContent).toContain(\n        'campaign-phase2: campaign-validate-phase1'\n      );\n    });\n  });\n});\n"],"version":3}