{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/ingredientUtils.ts","mappings":";AAAA,gFAAgF;;;AAYhF;;;GAGG;AACH,SAAgB,6BAA6B,CAAC,UAAsB;IAClE,+BAA+B;IAC/B,MAAM,UAAU,GAAG,UAAU,CAAC,mBAAmB,IAAI;QACnD,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,IAAI;QACX,GAAG,EAAE,IAAI;KACV,CAAC;IAEF,kEAAkE;IAClE,wFAAwF;IACxF,oEAAoE;IACpE,MAAM,MAAM,GAAG,CAAC,UAAU,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;IAChE,MAAM,OAAO,GAAG,CAAC,UAAU,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;IAC5F,MAAM,MAAM,GAAG,CAAC,UAAU,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;IACnE,MAAM,SAAS,GAAG,CAAC,UAAU,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;IAE/F,OAAO;QACL,MAAM;QACN,OAAO;QACP,MAAM;QACN,SAAS;KACV,CAAC;AACJ,CAAC;AAvBD,sEAuBC;AAED;;;GAGG;AACH,SAAgB,gCAAgC,CAC9C,eAAqC,EACrC,cAAoC;IAEpC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,eAAe,CAAC;IAE/D,kDAAkD;IAClD,MAAM,QAAQ,GAAG,cAAc,IAAI;QACjC,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,IAAI;QACX,GAAG,EAAE,IAAI;KACV,CAAC;IAEF,2BAA2B;IAC3B,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;IAC3B,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;IAC7B,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;IACzB,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;IAE7B,sDAAsD;IACtD,MAAM,IAAI,GAAG,CAAC,MAAM,IAAE,CAAC,GAAG,IAAI,IAAE,CAAC,CAAC;QAChC,CAAC,CAAC,SAAS,GAAG,OAAO,GAAG,MAAM,GAAG,KAAK,GAAG,GAAG,GAAG,KAAK,CAAC,IAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEjE,MAAM,OAAO,GAAG,CAAC,MAAM,IAAE,CAAC,GAAG,SAAS,IAAE,CAAC,GAAG,IAAI,IAAE,CAAC,GAAG,GAAG,IAAE,CAAC,CAAC;QAC3D,CAAC,CAAC,OAAO,GAAG,MAAM,GAAG,KAAK,GAAG,KAAK,CAAC,IAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAE/C,MAAM,UAAU,GAAG,CAAC,MAAM,IAAE,CAAC,GAAG,SAAS,IAAE,CAAC,GAAG,OAAO,IAAE,CAAC,GAAG,IAAI,IAAE,CAAC,GAAG,GAAG,IAAE,CAAC,GAAG,KAAK,IAAE,CAAC,CAAC;QACtF,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,IAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAE7B,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,OAAO,CAAC,CAAC;IAE7C,OAAO;QACL,IAAI;QACJ,OAAO;QACP,UAAU;QACV,MAAM;KACP,CAAC;AACJ,CAAC;AAtCD,4EAsCC;AAED,sDAAsD;AACtD,SAAS,qBAAqB,CAAC,aAA4B;IACzD,qDAAqD;IACrD,qEAAqE;IACrE,OAAO,aAAa,CAAC,SAAS,IAAI,GAAG,CAAC,CAAC,2CAA2C;AACpF,CAAC;AAED,yEAAyE;AAEzE;;;;;;;;;;GAUG;AACH,SAAgB,2BAA2B,CACzC,YAAsB,EAAE,EACxB,mBAAyC;IAEzC,+BAA+B;IAC/B,MAAM,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC;IAEjE,4DAA4D;IAC5D,MAAM,mBAAmB,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;IAErE,0DAA0D;IAC1D,MAAM,gBAAgB,GAAG,CAAC,YAAY,EAAE,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;IACzG,MAAM,aAAa,GAAG,CAAC,WAAW,EAAE,aAAa,EAAE,YAAY,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;IAC/F,MAAM,eAAe,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;IAE3F,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IACvF,MAAM,eAAe,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IACjF,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAErF,iDAAiD;IACjD,IAAI,kBAAkB,IAAI,CAAC,eAAe,IAAI,CAAC,iBAAiB,EAAE;QAChE,OAAO,UAAU,CAAC;KACnB;IACD,IAAI,eAAe,IAAI,CAAC,kBAAkB,IAAI,CAAC,iBAAiB,EAAE;QAChE,OAAO,OAAO,CAAC;KAChB;IACD,IAAI,iBAAiB,IAAI,CAAC,kBAAkB,IAAI,CAAC,eAAe,EAAE;QAChE,OAAO,SAAS,CAAC;KAClB;IAED,uEAAuE;IACvE,IAAI,mBAAmB,EAAE;QACvB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,mBAAmB,CAAC;QAExD,6BAA6B;QAC7B,MAAM,eAAe,GAAG,kBAAkB,CAAC,mBAAmB,CAAC,CAAC;QAEhE,+CAA+C;QAC/C,QAAQ,eAAe,EAAE;YACvB,KAAK,KAAK;gBACR,qEAAqE;gBACrE,IAAI,GAAG,GAAG,GAAG,EAAE;oBACb,OAAO,SAAS,CAAC;iBAClB;gBACD,MAAM;YACR,KAAK,OAAO;gBACV,uEAAuE;gBACvE,IAAI,KAAK,GAAG,GAAG,EAAE;oBACf,OAAO,OAAO,CAAC;iBAChB;gBACD,MAAM;YACR,KAAK,MAAM;gBACT,kDAAkD;gBAClD,IAAI,IAAI,GAAG,GAAG,EAAE;oBACd,OAAO,UAAU,CAAC;iBACnB;gBACD,MAAM;YACR,KAAK,OAAO;gBACV,8CAA8C;gBAC9C,IAAI,KAAK,GAAG,GAAG,EAAE;oBACf,yDAAyD;oBACzD,OAAO,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC;iBAC1C;gBACD,MAAM;SACT;QAED,6DAA6D;QAC7D,MAAM,YAAY,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;QAChF,MAAM,UAAU,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC9E,MAAM,aAAa,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAEjF,6CAA6C;QAC7C,IAAI,YAAY,GAAG,UAAU,IAAI,YAAY,GAAG,aAAa,EAAE;YAC7D,OAAO,SAAS,CAAC;SAClB;aAAM,IAAI,UAAU,GAAG,YAAY,IAAI,UAAU,GAAG,aAAa,EAAE;YAClE,OAAO,OAAO,CAAC;SAChB;aAAM;YACL,OAAO,UAAU,CAAC;SACnB;KACF;IAED,sDAAsD;IACtD,OAAO,SAAS,CAAC;AACnB,CAAC;AAnFD,kEAmFC;AAED;;GAEG;AACH,SAAgB,kBAAkB,CAAC,UAAmB;IACpD,MAAM,cAAc,GAAG,UAAqC,CAAC;IAC7D,OAAO,CACL,UAAU;QACV,OAAO,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,IAAI,CAAA,KAAK,QAAQ;QACxC,OAAO,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,MAAM,CAAA,KAAK,QAAQ;QAC1C,OAAO,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,IAAI,CAAA,KAAK,QAAQ,CACzC,CAAC;AACJ,CAAC;AARD,gDAQC;AAED;;GAEG;AACH,SAAgB,gBAAgB,CAAC,UAAmB;IAClD,MAAM,cAAc,GAAG,UAAqC,CAAC;IAC7D,OAAO,CACL,UAAU;QACV,OAAO,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,IAAI,CAAA,KAAK,QAAQ;QACxC,OAAO,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,QAAQ,CAAA,KAAK,QAAQ;SAC5C,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,mBAAmB,CAAA;QACnC,KAAK,CAAC,OAAO,CAAC,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,SAAS,CAAC;SACxC,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,OAAO,CAAA;QACvB,OAAO,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,OAAO,CAAA,KAAK,QAAQ,CAC5C,CAAC;AACJ,CAAC;AAXD,4CAWC;AAED;;GAEG;AACH,SAAgB,kBAAkB,CAAC,UAGlC;IAIC,MAAM,MAAM,GAAa,EAAE,CAAC;IAE5B,kBAAkB;IAClB,IAAI,CAAC,UAAU,CAAC,IAAI,IAAI,OAAO,UAAU,CAAC,IAAI,KAAK,QAAQ,EAAE;QAC3D,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;KACtD;IAED,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE;QACxB,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;KACrC;IAED,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE;QACnC,MAAM,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;KAClD;IAED,uBAAuB;IACvB,IAAI,UAAU,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;QAChE,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;KAC3C;IAED,sCAAsC;IACtC,IAAI,UAAU,CAAC,SAAS,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;QAC/D,iCAAiC;QACjC,MAAM,gBAAgB,GAAG,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAU,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAC;QAC5F,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/B,MAAM,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;SAC9C;KACF;IAED,qBAAqB;IACrB,IAAI,UAAU,CAAC,OAAO,IAAI,OAAO,UAAU,CAAC,OAAO,KAAK,QAAQ,EAAE;QAChE,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;KAC1C;IAED,IAAI,UAAU,CAAC,OAAO,IAAI,OAAO,UAAU,CAAC,OAAO,KAAK,QAAQ,EAAE;QAChE,wDAAwD;KACzD;IAED,kCAAkC;IAClC,IAAI,UAAU,CAAC,mBAAmB,EAAE;QAClC,MAAM,QAAQ,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QACnD,MAAM,KAAK,GAAG,UAAU,CAAC,mBAAmB,CAAC;QAE7C,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC9B,IAAI,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,QAAQ,EAAE;gBACtC,MAAM,CAAC,IAAI,CAAC,sBAAsB,OAAO,mBAAmB,CAAC,CAAC;aAC/D;SACF;KACF;IAED,OAAO;QACL,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC;QAC5B,MAAM;KACP,CAAC;AACJ,CAAC;AA7DD,gDA6DC;AAED;;GAEG;AACH,SAAgB,wBAAwB,CAAC,UAAqC;IAI5E,MAAM,MAAM,GAAa,EAAE,CAAC;IAE5B,wBAAwB;IACxB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;QACpB,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;KACjC;IAED,IAAI,OAAO,UAAU,CAAC,MAAM,KAAK,QAAQ,EAAE;QACzC,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;KACxC;IAED,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;QACpB,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;KACjC;IAED,sDAAsD;IACtD,IAAI,UAAU,CAAC,mBAAmB,EAAE;QAClC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,UAAU,CAAC,mBAAmB,CAAC;QAEnE,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,EAAE;YACpD,MAAM,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;SACzE;QACD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE;YACvD,MAAM,CAAC,IAAI,CAAC,2DAA2D,CAAC,CAAC;SAC1E;QACD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE;YACvD,MAAM,CAAC,IAAI,CAAC,2DAA2D,CAAC,CAAC;SAC1E;QACD,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE;YACjD,MAAM,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;SACxE;KACF;IAED,OAAO;QACL,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC;QAC5B,MAAM;KACP,CAAC;AACJ,CAAC;AAzCD,4DAyCC;AAED;;GAEG;AACH,SAAgB,wBAAwB,CACtC,IAAyB,EACzB,QAA6B,EAC7B,MAAM,GAAG,GAAG;IAEZ,OAAO;QACL,IAAI,EAAE,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,QAAQ,CAAC,IAAI,GAAG,MAAM;QACvD,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,GAAG,MAAM;QAC1D,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,GAAG,MAAM;QAC1D,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,GAAG,MAAM;KACrD,CAAC;AACJ,CAAC;AAXD,4DAWC;AAED;;GAEG;AACH,SAAgB,kBAAkB,CAAC,mBAAwC;IACzE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,mBAAmB,CAAC;IACxD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IAE9C,IAAI,GAAG,KAAK,IAAI;QAAE,OAAO,MAAM,CAAC;IAChC,IAAI,GAAG,KAAK,KAAK;QAAE,OAAO,OAAO,CAAC;IAClC,IAAI,GAAG,KAAK,KAAK;QAAE,OAAO,OAAO,CAAC;IAClC,IAAI,GAAG,KAAK,GAAG;QAAE,OAAO,KAAK,CAAC;IAE9B,OAAO,UAAU,CAAC;AACpB,CAAC;AAVD,gDAUC;AAED;;GAEG;AACH,SAAgB,eAAe,CAAC,OAA0B;IACxD,6CAA6C;IAC7C,MAAM,UAAU,GAAG;QACjB,IAAI,EAAG,OAAO,CAAC,IAA0B,IAAI,EAAE;QAC/C,QAAQ,EAAG,OAAO,CAAC,QAA0C,IAAI,eAAe;QAChF,mBAAmB,EAAG,OAAO,CAAC,mBAAsD,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE;QAC3I,SAAS,EAAG,OAAO,CAAC,SAAiC,IAAI,EAAE;QAC3D,OAAO,EAAG,OAAO,CAAC,OAAmC,IAAI;YACvD,QAAQ,EAAE,SAAS;SACpB;QACD,2DAA2D;QAC3D,MAAM,EAAG,OAAmC,CAAC,MAAM,IAAI,CAAC;QACxD,mBAAmB,EAAG,OAAmC,CAAC,mBAAmB,IAAI;YAC/E,iBAAiB,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;YACpC,aAAa,EAAE,EAAE;YACjB,cAAc,EAAE,EAAE;SACnB;KACY,CAAC;IAEhB,iDAAiD;IACjD,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE;QACzB,IAAI,GAAG,KAAK,MAAM,IAAI,GAAG,KAAK,UAAU,IAAI,GAAG,KAAK,qBAAqB,IAAI,GAAG,KAAK,WAAW,EAAE;YAC/F,UAAsC,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;SAC7D;KACF;IAED,OAAO,UAAU,CAAC;AACpB,CAAC;AA3BD,0CA2BC;AAED;;GAEG;AACH,SAAgB,4BAA4B,CAC1C,UAAsB,EACtB,MAAM,GAAG,CAAC,EACV,IAAI,GAAG,MAAM;IAEb,OAAO;QACL,IAAI,EAAE,UAAU,CAAC,IAAI;QACrB,MAAM;QACN,IAAI;QACJ,QAAQ,EAAG,UAAU,CAAC,QAAmB,IAAI,eAAe;QAC5D,mBAAmB,EAAE,UAAU,CAAC,mBAA8C;QAC9E,SAAS,EAAE,CAAC,UAAsC,aAAtC,UAAU,uBAAV,UAAU,CAA8B,SAAS,KAAI,EAAE;QACnE,mBAAmB,EAAE,UAAU,CAAC,mBAAmB;QACnD,0FAA0F;QAC1F,MAAM,EAAE,CAAC,UAAsC,aAAtC,UAAU,uBAAV,UAAU,CAA8B,MAAM,KAAI,SAAS;QACpE,WAAW,EAAE,CAAC,UAAsC,aAAtC,UAAU,uBAAV,UAAU,CAA8B,WAAW,KAAI,SAAS;KAC3D,CAAC;AACxB,CAAC;AAjBD,oEAiBC;AAED;;GAEG;AACH,SAAgB,4BAA4B,CAAC,UAA+B;IAC1E,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,UAAU,CAAC;IAC/C,MAAM,GAAG,GAAG,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG,GAAG,CAAC;IAEvC,IAAI,GAAG,KAAK,CAAC,EAAE;QACb,qDAAqD;QACrD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;KAC5D;IAED,OAAO;QACL,IAAI,EAAE,IAAI,GAAG,GAAG;QAChB,KAAK,EAAE,KAAK,GAAG,GAAG;QAClB,KAAK,EAAE,KAAK,GAAG,GAAG;QAClB,GAAG,EAAE,GAAG,GAAG,GAAG;KACf,CAAC;AACJ,CAAC;AAfD,oEAeC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/ingredientUtils.ts"],"sourcesContent":["// Create or update a utility function to calculate proper alchemical properties\n\nimport type { AlchemicalProperties, ThermodynamicProperties, Modality , IngredientCategory } from '@/data/ingredients/types';\nimport type { ElementalProperties } from '@/types/alchemy';\nimport { FlavorProfile } from '@/types/alchemy';\nimport type { \n  Ingredient,\n  RecipeIngredient, \n  IngredientMapping\n} from '@/types';\nimport type { SimpleIngredient } from '@/types/recipeIngredient';\n\n/**\n * Calculate alchemical properties based on elemental properties\n * Following the core alchemizer engine formula patterns\n */\nexport function calculateAlchemicalProperties(ingredient: Ingredient): AlchemicalProperties {\n  // Extract elemental properties\n  const elementals = ingredient.elementalProperties || {\n    Fire: 0.25,\n    Water: 0.25,\n    Earth: 0.25,\n    Air: 0.25\n  };\n  \n  // Base values derived from planetary influences in the alchemizer\n  // Sun (Spirit), Moon/Venus (Essence), Saturn/Mars (Matter), Mercury/Neptune (Substance)\n  // The ratios below approximate the original alchemizer calculations\n  const spirit = (elementals.Fire * 0.7) + (elementals.Air * 0.3);\n  const essence = (elementals.Water * 0.6) + (elementals.Fire * 0.2) + (elementals.Air * 0.2);\n  const matter = (elementals.Earth * 0.7) + (elementals.Water * 0.3);\n  const substance = (elementals.Earth * 0.5) + (elementals.Water * 0.3) + (elementals.Air * 0.2);\n  \n  return {\n    spirit,\n    essence,\n    matter,\n    substance\n  };\n}\n\n/**\n * Calculate thermodynamic properties based on alchemical and elemental properties\n * Using the exact formulas from the alchemizer engine\n */\nexport function calculateThermodynamicProperties(\n  alchemicalProps: AlchemicalProperties,\n  elementalProps?: ElementalProperties\n): ThermodynamicProperties {\n  const { spirit, essence, matter, substance } = alchemicalProps;\n  \n  // Use provided elemental props or create defaults\n  const elements = elementalProps || {\n    Fire: 0.25,\n    Water: 0.25,\n    Earth: 0.25,\n    Air: 0.25\n  };\n  \n  // Extract elemental values\n  const fire = elements.Fire;\n  const water = elements.Water;\n  const air = elements.Air;\n  const earth = elements.Earth;\n  \n  // Using the exact formulas from the alchemizer engine\n  const heat = (spirit**2 + fire**2) / \n    ((substance + essence + matter + water + air + earth)**2 || 1);\n    \n  const entropy = (spirit**2 + substance**2 + fire**2 + air**2) / \n    ((essence + matter + earth + water)**2 || 1);\n    \n  const reactivity = (spirit**2 + substance**2 + essence**2 + fire**2 + air**2 + water**2) / \n    ((matter + earth)**2 || 1);\n  \n  const energy = heat - (reactivity * entropy);\n  \n  return {\n    heat,\n    entropy,\n    reactivity,\n    energy\n  };\n}\n\n// Helper functions to calculate individual properties\nfunction _calculateSpiritValue(flavorProfile: FlavorProfile): number {\n  // Implement logic based on flavor profile attributes\n  // Example: spirit might be higher for aromatic, fragrant ingredients\n  return flavorProfile.intensity || 0.5; // Default to 0.5 if intensity not provided\n}\n\n// Implement similar helper functions for essence, matter, and substance \n\n/**\n * Determines the modality of an ingredient based on its qualities and elemental properties\n * Using the hierarchical affinities:\n * - Mutability: Air > Water > Fire > Earth\n * - Fixed: Earth > Water > Fire > Air\n * - Cardinal: Equal for all elements\n * \n * @param qualities Array of quality descriptors\n * @param elementalProperties Optional elemental properties for more accurate determination\n * @returns The modality (Cardinal, Fixed, or Mutable)\n */\nexport function determineIngredientModality(\n  qualities: string[] = [],\n  elementalProperties?: ElementalProperties\n): Modality {\n  // Ensure qualities is an array\n  const qualitiesArray = Array.isArray(qualities) ? qualities : [];\n  \n  // Create normalized arrays of qualities for easier matching\n  const normalizedQualities = qualitiesArray.map(q => q.toLowerCase());\n  \n  // Look for explicit quality indicators in the ingredients\n  const cardinalKeywords = ['initiating', 'spicy', 'pungent', 'stimulating', 'invigorating', 'activating'];\n  const fixedKeywords = ['grounding', 'stabilizing', 'nourishing', 'sustaining', 'foundational'];\n  const mutableKeywords = ['adaptable', 'flexible', 'versatile', 'balancing', 'harmonizing'];\n  \n  const hasCardinalQuality = normalizedQualities.some(q => cardinalKeywords.includes(q));\n  const hasFixedQuality = normalizedQualities.some(q => fixedKeywords.includes(q));\n  const hasMutableQuality = normalizedQualities.some(q => mutableKeywords.includes(q));\n  \n  // If there's a clear quality indicator, use that\n  if (hasCardinalQuality && !hasFixedQuality && !hasMutableQuality) {\n    return 'Cardinal';\n  }\n  if (hasFixedQuality && !hasCardinalQuality && !hasMutableQuality) {\n    return 'Fixed';\n  }\n  if (hasMutableQuality && !hasCardinalQuality && !hasFixedQuality) {\n    return 'Mutable';\n  }\n  \n  // If elemental properties are provided, use them to determine modality\n  if (elementalProperties) {\n    const { Fire, Water, Earth, Air } = elementalProperties;\n    \n    // Determine dominant element\n    const dominantElement = getDominantElement(elementalProperties);\n    \n    // Use hierarchical element-modality affinities\n    switch (dominantElement) {\n      case 'Air':\n        // Air has strongest affinity with Mutable, then Cardinal, then Fixed\n        if (Air > 0.4) {\n          return 'Mutable';\n        }\n        break;\n      case 'Earth':\n        // Earth has strongest affinity with Fixed, then Cardinal, then Mutable\n        if (Earth > 0.4) {\n          return 'Fixed';\n        }\n        break;\n      case 'Fire':\n        // Fire has balanced affinities but leans Cardinal\n        if (Fire > 0.4) {\n          return 'Cardinal';\n        }\n        break;\n      case 'Water':\n        // Water is balanced between Fixed and Mutable\n        if (Water > 0.4) {\n          // Slightly favor Mutable for Water, as per our hierarchy\n          return Water > 0.6 ? 'Mutable' : 'Fixed';\n        }\n        break;\n    }\n    \n    // Calculate modality scores based on hierarchical affinities\n    const mutableScore = (Air * 0.9) + (Water * 0.8) + (Fire * 0.7) + (Earth * 0.5);\n    const fixedScore = (Earth * 0.9) + (Water * 0.8) + (Fire * 0.6) + (Air * 0.5);\n    const cardinalScore = (Fire * 0.8) + (Earth * 0.8) + (Water * 0.8) + (Air * 0.8);\n    \n    // Return the modality with the highest score\n    if (mutableScore > fixedScore && mutableScore > cardinalScore) {\n      return 'Mutable';\n    } else if (fixedScore > mutableScore && fixedScore > cardinalScore) {\n      return 'Fixed';\n    } else {\n      return 'Cardinal';\n    }\n  }\n  \n  // Default to Mutable if no clear indicators are found\n  return 'Mutable';\n}\n\n/**\n * Type guard to check if an object is a RecipeIngredient\n */\nexport function isRecipeIngredient(ingredient: unknown): ingredient is RecipeIngredient {\n  const ingredientData = ingredient as Record<string, unknown>;\n  return (\n    ingredient &&\n    typeof ingredientData?.name === 'string' &&\n    typeof ingredientData?.amount === 'number' &&\n    typeof ingredientData?.unit === 'string'\n  );\n}\n\n/**\n * Type guard to check if an object is a full Ingredient\n */\nexport function isFullIngredient(ingredient: unknown): ingredient is Ingredient {\n  const ingredientData = ingredient as Record<string, unknown>;\n  return (\n    ingredient &&\n    typeof ingredientData?.name === 'string' &&\n    typeof ingredientData?.category === 'string' &&\n    ingredientData?.elementalProperties &&\n    Array.isArray(ingredientData?.qualities) &&\n    ingredientData?.storage &&\n    typeof ingredientData?.storage === 'object'\n  );\n}\n\n/**\n * Validates that an ingredient object has all required properties\n */\nexport function validateIngredient(ingredient: Partial<Ingredient> & { \n  qualities?: string[]; \n  storage?: { temperature?: string; humidity?: string } \n}): { \n  isValid: boolean; \n  errors: string[] \n} {\n  const errors: string[] = [];\n  \n  // Required fields\n  if (!ingredient.name || typeof ingredient.name !== 'string') {\n    errors.push('Name is required and must be a string');\n  }\n  \n  if (!ingredient.category) {\n    errors.push('Category is required');\n  }\n  \n  if (!ingredient.elementalProperties) {\n    errors.push('Elemental properties are required');\n  }\n  \n  // Optional validations\n  if (ingredient.qualities && !Array.isArray(ingredient.qualities)) {\n    errors.push('Qualities must be an array');\n  }\n  \n  // Fix specific property access errors\n  if (ingredient.qualities && Array.isArray(ingredient.qualities)) {\n    // Check each quality is a string\n    const invalidQualities = ingredient.qualities.filter((q: unknown) => typeof q !== 'string');\n    if (invalidQualities.length > 0) {\n      errors.push('All qualities must be strings');\n    }\n  }\n  \n  // Storage validation\n  if (ingredient.storage && typeof ingredient.storage !== 'object') {\n    errors.push('Storage must be an object');\n  }\n  \n  if (ingredient.storage && typeof ingredient.storage === 'object') {\n    // Additional storage property validations could go here\n  }\n  \n  // Elemental properties validation\n  if (ingredient.elementalProperties) {\n    const elements = ['Fire', 'Water', 'Earth', 'Air'];\n    const props = ingredient.elementalProperties;\n    \n    for (const element of elements) {\n      if (typeof props[element] !== 'number') {\n        errors.push(`Elemental property ${element} must be a number`);\n      }\n    }\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\n/**\n * Validates a recipe ingredient\n */\nexport function validateRecipeIngredient(ingredient: Partial<RecipeIngredient>): {\n  isValid: boolean;\n  errors: string[];\n} {\n  const errors: string[] = [];\n\n  // Check required fields\n  if (!ingredient.name) {\n    errors.push('Name is required');\n  }\n\n  if (typeof ingredient.amount !== 'number') {\n    errors.push('Amount must be a number');\n  }\n\n  if (!ingredient.unit) {\n    errors.push('Unit is required');\n  }\n\n  // If elemental properties are provided, validate them\n  if (ingredient.elementalProperties) {\n    const { Fire, Water, Earth, Air } = ingredient.elementalProperties;\n    \n    if (typeof Fire !== 'number' || Fire < 0 || Fire > 1) {\n      errors.push('Fire elemental property must be a number between 0 and 1');\n    }\n    if (typeof Water !== 'number' || Water < 0 || Water > 1) {\n      errors.push('Water elemental property must be a number between 0 and 1');\n    }\n    if (typeof Earth !== 'number' || Earth < 0 || Earth > 1) {\n      errors.push('Earth elemental property must be a number between 0 and 1');\n    }\n    if (typeof Air !== 'number' || Air < 0 || Air > 1) {\n      errors.push('Air elemental property must be a number between 0 and 1');\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\n/**\n * Merges two sets of elemental properties with optional weighting\n */\nexport function mergeElementalProperties(\n  base: ElementalProperties,\n  addition: ElementalProperties,\n  weight = 0.5\n): ElementalProperties {\n  return {\n    Fire: base.Fire * (1 - weight) + addition.Fire * weight,\n    Water: base.Water * (1 - weight) + addition.Water * weight,\n    Earth: base.Earth * (1 - weight) + addition.Earth * weight,\n    Air: base.Air * (1 - weight) + addition.Air * weight\n  };\n}\n\n/**\n * Gets the dominant element from an ElementalProperties object\n */\nexport function getDominantElement(elementalProperties: ElementalProperties): string {\n  const { Fire, Water, Earth, Air } = elementalProperties;\n  const max = Math.max(Fire, Water, Earth, Air);\n  \n  if (max === Fire) return 'Fire';\n  if (max === Water) return 'Water';\n  if (max === Earth) return 'Earth';\n  if (max === Air) return 'Air';\n  \n  return 'Balanced';\n}\n\n/**\n * Converts an ingredient mapping to a full ingredient\n */\nexport function mapToIngredient(mapping: IngredientMapping): Ingredient {\n  // Set default values for required properties\n  const ingredient = {\n    name: (mapping.name as unknown as string) || '',\n    category: (mapping.category as unknown as IngredientCategory) || 'culinary_herb',\n    elementalProperties: (mapping.elementalProperties as unknown as ElementalProperties) || { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 },\n    qualities: (mapping.qualities as unknown as string[]) || [],\n    storage: (mapping.storage as Record<string, unknown>) || {\n      duration: 'unknown'\n    },\n    // Add missing required properties for Ingredient interface\n    amount: (mapping as Record<string, unknown>).amount || 1,\n    astrologicalProfile: (mapping as Record<string, unknown>).astrologicalProfile || {\n      elementalAffinity: { base: 'Earth' },\n      rulingPlanets: [],\n      zodiacAffinity: []\n    }\n  } as Ingredient;\n\n  // Add any additional properties from the mapping\n  for (const key in mapping) {\n    if (key !== 'name' && key !== 'category' && key !== 'elementalProperties' && key !== 'qualities') {\n      (ingredient as Record<string, unknown>)[key] = mapping[key];\n    }\n  }\n\n  return ingredient;\n}\n\n/**\n * Converts a full ingredient to a recipe ingredient\n */\nexport function ingredientToRecipeIngredient(\n  ingredient: Ingredient,\n  amount = 1,\n  unit = 'item'\n): RecipeIngredient {\n  return {\n    name: ingredient.name,\n    amount,\n    unit,\n    category: (ingredient.category as string) || 'culinary_herb',\n    elementalProperties: ingredient.elementalProperties as Record<string, unknown>,\n    qualities: (ingredient as Record<string, unknown>)?.qualities || [],\n    astrologicalProfile: ingredient.astrologicalProfile,\n    // Include other relevant properties that exist in RecipeIngredient - safe property access\n    origin: (ingredient as Record<string, unknown>)?.origin || undefined,\n    seasonality: (ingredient as Record<string, unknown>)?.seasonality || undefined\n  } as RecipeIngredient;\n}\n\n/**\n * Normalizes elemental properties to ensure they sum to 1\n */\nexport function normalizeElementalProperties(properties: ElementalProperties): ElementalProperties {\n  const { Fire, Water, Earth, Air } = properties;\n  const sum = Fire + Water + Earth + Air;\n  \n  if (sum === 0) {\n    // If all values are 0, return an evenly balanced set\n    return { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 };\n  }\n  \n  return {\n    Fire: Fire / sum,\n    Water: Water / sum,\n    Earth: Earth / sum,\n    Air: Air / sum\n  };\n} "],"version":3}