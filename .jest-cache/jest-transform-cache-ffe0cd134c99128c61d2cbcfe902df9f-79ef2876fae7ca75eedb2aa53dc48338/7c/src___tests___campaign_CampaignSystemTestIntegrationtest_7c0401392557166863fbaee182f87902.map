{"file":"/Users/GregCastro/Desktop/WhatToEatNext/.resilient-eslint-backup-1757951693100/src___tests___campaign_CampaignSystemTestIntegration.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/.resilient-eslint-backup-1757951693100/src___tests___campaign_CampaignSystemTestIntegration.test.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any, no-console, @typescript-eslint/no-unused-vars, max-lines-per-function -- Campaign/test file with intentional patterns */\n/**\n * Campaign System Test Integration Tests\n *\n * Comprehensive tests for campaign system test integration functionality,\n * including mocking, isolation, and memory management.\n */\n\nimport {\n    SafetyEventType\n} from '../../types/campaign';\nimport { campaignTestController } from '../utils/CampaignTestController';\nimport {\n    campaignTestAssertions,\n    campaignTestData,\n    cleanupCampaignTest,\n    createMockCampaignConfig,\n    executeCampaignTestScenario,\n    setupCampaignTest,\n    validateCampaignTestIsolation,\n    withCampaignTestIsolation\n} from '../utils/campaignTestUtils';\n\ndescribe('Campaign System Test Integration', () => {\n  // Test isolation and cleanup\n  afterEach(async () => {\n    // Ensure cleanup after each test\n    try {\n      void campaignTestController.cleanupAfterTest('test-cleanup');\n    } catch (error: any) {\n      console.warn('Cleanup warning:', error);\n    }\n  });\n\n  afterAll(async () => {\n    // Force cleanup of singleton instances\n    const { CampaignTestController } = await import('../utils/CampaignTestController');\n    void CampaignTestController.forceCleanup();\n  });\n\n  describe('Campaign System Mocking', () => {\n    it('should initialize mock campaign system without running actual builds', async () => {\n      const context: any = await setupCampaignTest({\n        testName: 'mock-initialization-test',\n        preventActualBuilds: true,\n        preventGitOperations: true\n      });\n\n      try {\n        // Verify mock instances are created\n        expect(context.controller).toBeDefined();\n        expect(context.tracker).toBeDefined();\n        expect(context.safety).toBeDefined();\n\n        // Verify test isolation is active\n        void campaignTestAssertions.testIsolationActive(context);\n\n        // Verify environment variables are set for test isolation\n        expect(process.env.NODE_ENV).toBe('test');\n        expect(process.env.DISABLE_ACTUAL_BUILDS).toBe('true');\n        expect(process.env.DISABLE_GIT_OPERATIONS).toBe('true');\n\n        // Test that mock controller doesn't run actual scripts\n        const mockPhase: any = createMockCampaignConfig().phases[0];\n        const result: any = await context.controller.executePhase(mockPhase);\n\n        expect(result.success).toBe(true);\n        expect(result.executionTime).toBeGreaterThan(0);\n        expect(result.safetyEvents).toBeDefined();\n\n        // Verify no actual build processes were triggered\n        expect(result.filesProcessed).toBeGreaterThan(0); // Mock processing\n        expect(result.errorsFixed).toBeGreaterThan(0); // Mock fixes\n      } finally {\n        cleanupCampaignTest('mock-initialization-test');\n      }\n    });\n\n    it('should prevent actual TypeScript compilation during tests', async () => {\n      const context: any = await setupCampaignTest({\n        testName: 'prevent-tsc-test',\n        preventActualBuilds: true\n      });\n\n      try {\n        // Mock TypeScript error count should not run actual tsc\n        const errorCount: any = context.tracker.getTypeScriptErrorCount();\n        expect(typeof errorCount).toBe('number');\n        expect(errorCount).toBeGreaterThanOrEqual(0);\n\n        // Mock error breakdown should not run actual analysis\n        const breakdown: any = context.tracker.getTypeScriptErrorBreakdown();\n        expect(typeof breakdown).toBe('object');\n        expect(Object.keys(breakdown).length).toBeGreaterThan(0);\n\n        // Verify that actual tsc command was not executed\n        // (This is ensured by the mock implementation)\n        expect(breakdown['TS2352']).toBeDefined();\n        expect(breakdown['TS2339']).toBeDefined();\n      } finally {\n        cleanupCampaignTest('prevent-tsc-test');\n      }\n    });\n\n    it('should prevent actual git operations during tests', async () => {\n      const context: any = await setupCampaignTest({\n        testName: 'prevent-git-test',\n        preventGitOperations: true\n      });\n\n      try {\n        // Mock stash creation should not run actual git commands\n        const stashId: any = context.safety.createStash('checkpoint', 'test');\n        expect(typeof stashId).toBe('string');\n        expect(stashId).toContain('mock_stash_');\n\n        // Mock stash application should not run actual git commands\n        const stashResult: any = context.safety.applyStash(String(stashId));\n        expect(stashResult).toBeDefined();\n\n        // Mock git state validation should not run actual git commands\n        const validation: any = await context.safety.validateGitState();\n        expect(validation.success).toBe(true);\n\n        // Verify safety events were recorded\n        const safetyEvents: any = context.safety.getSafetyEvents();\n        expect(safetyEvents.length).toBeGreaterThan(0);\n        expect(safetyEvents.some(e => e.type === SafetyEventType.CHECKPOINT_CREATED)).toBe(true);\n      } finally {\n        cleanupCampaignTest('prevent-git-test');\n      }\n    });\n  });\n\n  describe('Test-Safe Progress Tracking', () => {\n    it('should track progress without memory leaks', async () => {\n      const context: any = await setupCampaignTest({\n        testName: 'memory-safe-tracking-test',\n        enableMemoryMonitoring: true,\n        mockProgressTracking: true\n      });\n\n      try {\n        expect(context.testSafeTracker).toBeDefined();\n\n        if (context.testSafeTracker) {\n          // Start tracking\n          context.testSafeTracker.startTracking('memory-test');\n\n          // Simulate multiple progress updates\n          for (let i: any = 0; i < 10; i++) {\n            context.testSafeTracker.updateMetrics(\n              {\n                typeScriptErrors: { current: 86 - i * 5,\n                  target: 0,\n                  reduction: i * 5,\n                  percentage: Math.round(((i * 5) / 86) * 100)\n                }\n              },\n              `update-${i}`,\n            );\n          }\n\n          // Get progress history\n          const history: any = context.testSafeTracker.getProgressHistory();\n          expect(history.length).toBeGreaterThan(0);\n          expect(history.length).toBeLessThanOrEqual(20); // Should be limited to prevent memory issues\n\n          // Validate memory usage\n          const memoryStats: any = context.testSafeTracker.getMemoryStatistics();\n          if (memoryStats != null) {\n            expect(memoryStats.memoryEfficient).toBe(true);\n          }\n\n          // Stop tracking\n          context.testSafeTracker.stopTracking('memory-test');\n        }\n      } finally {\n        cleanupCampaignTest('memory-safe-tracking-test');\n      }\n    });\n\n    it('should simulate realistic progress over time', async () => {\n      const context: any = await setupCampaignTest({\n        testName: 'progress-simulation-test',\n        mockProgressTracking: true\n      });\n\n      try {\n        if (context.testSafeTracker) {\n          const initialMetrics: any = await context.testSafeTracker.getProgressMetrics();\n          // Simulate progress to target metrics\n          const targetMetrics: any = {\n            typeScriptErrors: { curren, t: 0, target: 0, reduction: 86, percentage: 100 },\n            lintingWarnings: { curren, t: 0, target: 0, reduction: 4506, percentage: 100 }\n          };\n\n          context.testSafeTracker.simulateProgress(targetMetrics, 1000, 'simulation-test');\n\n          const finalMetrics: any = await context.testSafeTracker.getProgressMetrics();\n\n          // Verify progress was made\n          expect(finalMetrics.typeScriptErrors.current).toBeLessThanOrEqual(initialMetrics.typeScriptErrors.current);\n          expect(finalMetrics.lintingWarnings.current).toBeLessThanOrEqual(initialMetrics.lintingWarnings.current);\n        }\n      } finally {\n        cleanupCampaignTest('progress-simulation-test');\n      }\n    });\n\n    it('should generate comprehensive progress reports', async () => {\n      const context: any = await setupCampaignTest({\n        testName: 'progress-report-test',\n        mockProgressTracking: true\n      });\n\n      try {\n        // Generate progress report\n        const report: any = await context.tracker.generateProgressReport();\n\n        expect(report).toBeDefined();\n        expect(report.campaignId).toBe('mock-campaign');\n        expect(report.overallProgress).toBeGreaterThanOrEqual(0);\n        expect(report.overallProgress).toBeLessThanOrEqual(100);\n        expect(report.phases).toBeDefined();\n        expect(report.phases.length).toBeGreaterThan(0);\n        expect(report.currentMetrics).toBeDefined();\n        expect(report.targetMetrics).toBeDefined();\n        expect(report.estimatedCompletion).toBeInstanceOf(Date);\n\n        // Verify phase reports\n        const phase: any = (await report).phases[0];\n        expect(phase.phaseId).toBeDefined();\n        expect(phase.phaseName).toBeDefined();\n        expect(phase.status).toBeDefined();\n        expect(phase.metrics).toBeDefined();\n        expect(Array.isArray(phase.achievements)).toBe(true);\n        expect(Array.isArray(phase.issues)).toBe(true);\n        expect(Array.isArray(phase.recommendations)).toBe(true);\n      } finally {\n        cleanupCampaignTest('progress-report-test');\n      }\n    });\n  });\n\n  describe('Campaign Pause/Resume Functionality', () => {\n    it('should pause campaign operations for test isolation', async () => {\n      const context: any = await setupCampaignTest({\n        testName: 'pause-resume-test'\n      });\n\n      try {\n        // Verify campaign is paused\n        expect(context.testController.isPaused()).toBe(true);\n        expect(context.controller.isPaused()).toBe(true);\n\n        // Attempt to execute phase while paused should handle gracefully\n        const mockPhase: any = createMockCampaignConfig().phases[0];\n        await expect(context.controller.executePhase(mockPhase)).rejects.toThrow('Campaign is paused');\n\n        // Resume campaign\n        context.testController.resumeCampaignAfterTest('pause-resume-test');\n        expect(context.testController.isPaused()).toBe(false);\n        expect(context.controller.isPaused()).toBe(false);\n\n        // Should be able to execute phase after resume\n        const result: any = await context.controller.executePhase(mockPhase);\n        expect(result.success).toBe(true);\n      } finally {\n        cleanupCampaignTest('pause-resume-test');\n      }\n    });\n\n    it('should maintain test isolation across multiple tests', async () => {\n      // First test\n      const context1: any = await setupCampaignTest({\n        testName: 'isolation-test-1'\n      });\n\n      try {\n        context1.testController.updateMockMetrics(\n          {\n            typeScriptErrors: { curren, t: 10, target: 0, reduction: 76, percentage: 88 }\n          },\n          'isolation-test-1',\n        );\n        const metrics1: any = await context1.tracker.getProgressMetrics();\n        expect(metrics1.typeScriptErrors.current).toBe(10);\n      } finally {\n        cleanupCampaignTest('isolation-test-1');\n      }\n\n      // Second test should have clean state\n      const context2: any = await setupCampaignTest({\n        testName: 'isolation-test-2'\n      });\n\n      try {\n        const metrics2: any = await context2.tracker.getProgressMetrics();\n        // Should not have the modified metrics from test 1\n        expect(metrics2.typeScriptErrors.current).not.toBe(10);\n        expect(metrics2.typeScriptErrors.current).toBeGreaterThan(10); // Should be initial value\n      } finally {\n        cleanupCampaignTest('isolation-test-2');\n      }\n    });\n\n    it('should handle concurrent test isolation', async () => {\n      // This test verifies that the singleton pattern works correctly\n      // and doesn't cause conflicts between concurrent test setups\n\n      const testPromises: any = [\n        withCampaignTestIsolation('concurrent-test-1', async context => {\n          context.testController.updateMockMetrics(\n            {\n              typeScriptErrors: { curren, t: 20, target: 0, reduction: 66, percentage: 77 }\n            },\n            'concurrent-test-1',\n          );\n          const metrics: any = await context.tracker.getProgressMetrics();\n          expect(metrics.typeScriptErrors.current).toBe(20);\n          return 'test-1-complete';\n        }),\n\n        withCampaignTestIsolation('concurrent-test-2', async context => {\n          context.testController.updateMockMetrics(\n            {\n              typeScriptErrors: { curren, t: 30, target: 0, reduction: 56, percentage: 65 }\n            },\n            'concurrent-test-2',\n          );\n          const metrics: any = await context.tracker.getProgressMetrics();\n          expect(metrics.typeScriptErrors.current).toBe(30);\n          return 'test-2-complete';\n        })\n      ];\n\n      const results: any = await Promise.all(testPromises);\n      expect(results).toEqual(['test-1-complete', 'test-2-complete']);\n    });\n  });\n\n  describe('Memory Management', () => {\n    it('should prevent memory leaks during campaign operations', async () => {\n      const context: any = await setupCampaignTest({\n        testName: 'memory-leak-prevention-test',\n        enableMemoryMonitoring: true\n      });\n\n      try {\n        // Perform multiple operations that could cause memory leaks\n        for (let i: any = 0; i < 20; i++) {\n          const mockPhase: any = createMockCampaignConfig().phases[0];\n          context.controller.executePhase(mockPhase);\n\n          // Update metrics\n          context.testController.updateMockMetrics(\n            {\n              typeScriptErrors: { curren, t: 86 - i, target: 0, reduction: i, percentage: Math.round((i / 86) * 100) }\n            },\n            `iteration-${i}`,\n          );\n\n          // Create safety checkpoints\n          context.safety.createStash(`Checkpoint ${i}`, 'test-phase');\n        }\n\n        // Validate memory usage\n        void campaignTestAssertions.memoryUsageAcceptable(context);\n\n        // Verify that safety events are properly managed (not accumulating indefinitely)\n        const safetyEvents: any = context.controller.getSafetyEvents();\n        expect(safetyEvents.length).toBeLessThan(100); // Should be limited to prevent memory issues\n      } finally {\n        cleanupCampaignTest('memory-leak-prevention-test');\n      }\n    });\n\n    it('should cleanup resources properly after test completion', async () => {\n      // Setup and use campaign test\n      const context: any = await setupCampaignTest({\n        testName: 'resource-cleanup-test',\n        enableMemoryMonitoring: true\n      });\n\n      // Perform some operations\n      const mockPhase: any = createMockCampaignConfig().phases[0];\n      context.controller.executePhase(mockPhase);\n\n      if (context.testSafeTracker) {\n        context.testSafeTracker.startTracking('cleanup-test');\n        context.testSafeTracker.updateMetrics(\n          {\n            typeScriptErrors: { curren, t: 50, target: 0, reduction: 50, percentage: 50 }\n          },\n          'cleanup-test',\n        );\n      }\n\n      // Cleanup\n      cleanupCampaignTest('resource-cleanup-test');\n\n      // Verify cleanup was effective\n      expect(context.testController.isPaused()).toBe(false);\n      expect(context.testController.isIsolated()).toBe(false);\n\n      // Test-safe tracker should be cleaned up\n      if (context.testSafeTracker) {\n        const validation: any = context.testSafeTracker.validateTrackingState();\n        // Should not be tracking anymore\n        expect(validation.success).toBe(true);\n      }\n    });\n  });\n\n  describe('Complete Campaign Test Scenarios', () => {\n    it('should execute TypeScript error reduction scenario', async () => {\n      const scenario: any = campaignTestData.typeScriptErrorReduction();\n      const _config: any = createMockCampaignConfig();\n      const {\n        context: _context,\n        results,\n        finalMetrics,\n        safetyEvents: _safetyEvents\n      } = await executeCampaignTestScenario(scenario, _config);\n      try {\n        // Verify phase execution\n        expect(results.length).toBe(1);\n        void campaignTestAssertions.phaseCompletedSuccessfully(results[0]);\n\n        // Verify progress improvement\n        void campaignTestAssertions.progressImproved(scenario.initialMetrics, finalMetrics);\n\n        // Verify safety events\n        campaignTestAssertions.safetyEventsRecorded(_safetyEvents, scenario.expectedSafetyEvents);\n\n        // Verify final state\n        expect(finalMetrics.typeScriptErrors.current).toBeLessThanOrEqual(\n          scenario.initialMetrics.typeScriptErrors.current,\n        );\n      } finally {\n        cleanupCampaignTest(scenario.name);\n      }\n    });\n\n    it('should execute linting warning cleanup scenario', async () => {\n      const scenario: any = campaignTestData.lintingWarningCleanup();\n      const _config: any = createMockCampaignConfig();\n      const {\n        context: _context,\n        results,\n        finalMetrics,\n        safetyEvents: _safetyEvents\n      } = await executeCampaignTestScenario(scenario, _config);\n      try {\n        // Verify phase execution\n        expect(results.length).toBe(1);\n        void campaignTestAssertions.phaseCompletedSuccessfully(results[0]);\n\n        // Verify progress improvement\n        void campaignTestAssertions.progressImproved(scenario.initialMetrics, finalMetrics);\n\n        // Verify linting-specific improvements\n        expect(finalMetrics.lintingWarnings.current).toBeLessThanOrEqual(\n          scenario.initialMetrics.lintingWarnings.current,\n        );\n      } finally {\n        cleanupCampaignTest(scenario.name);\n      }\n    });\n\n    it('should handle campaign failures gracefully', async () => {\n      const context: any = await setupCampaignTest({\n        testName: 'failure-handling-test'\n      });\n\n      try {\n        // Create a phase that will fail\n        const failingPhase: any = {\n          ...createMockCampaignConfig().phases[0],\n          successCriteria: { typeScriptErrors: -1, // Impossible criteria\n          }\n        };\n\n        // Mock the controller to simulate failure\n        void jest.spyOn(context.controller, 'executePhase').mockRejectedValueOnce(new Error('Mock failure'));\n\n        // Execute phase and expect it to handle failure\n        await expect(context.controller.executePhase(failingPhase)).rejects.toThrow('Mock failure');\n\n        // Verify safety events were recorded for the failure\n        const safetyEvents: any = context.controller.getSafetyEvents();\n        expect(safetyEvents.length).toBeGreaterThan(0);\n      } finally {\n        cleanupCampaignTest('failure-handling-test');\n      }\n    });\n  });\n\n  describe('Integration Validation', () => {\n    it('should validate complete campaign system integration', async () => {\n      const context: any = await setupCampaignTest({\n        testName: 'integration-validation-test',\n        enableMemoryMonitoring: true,\n        preventActualBuilds: true,\n        preventGitOperations: true,\n        mockProgressTracking: true\n      });\n\n      try {\n        // Validate test isolation\n        const isolation: any = validateCampaignTestIsolation(await context);\n        expect(isolation.isValid).toBe(true);\n        expect(isolation.issues).toHaveLength(0);\n\n        // Test all major components\n        const mockPhase: any = createMockCampaignConfig().phases[0];\n\n        // 1. Execute campaign phase\n        const resolvedContext: any = await context;\n        const phaseResult: any = await resolvedContext.controller.executePhase(mockPhase);\n        void campaignTestAssertions.phaseCompletedSuccessfully(phaseResult);\n\n        // 2. Track progress\n        const initialMetrics: any = await (await context).tracker.getProgressMetrics();\n        context.testController.updateMockMetrics(\n          {\n            typeScriptErrors: { curren, t: 25, target: 0, reduction: 61, percentage: 71 }\n          },\n          'integration-test',\n        );\n        const updatedMetrics: any = await (await context).tracker.getProgressMetrics();\n        void campaignTestAssertions.progressImproved(initialMetrics, updatedMetrics);\n\n        // 3. Safety operations\n        const stashId: any = (await context).safety.createStash('Integration test stash', 'test-phase');\n        expect(stashId).toBeDefined();\n        (await context).safety.applyStash(String(stashId));\n\n        // 4. Generate reports\n        const report: any = await context.tracker.generateProgressReport();\n        expect(report).toBeDefined();\n        expect(report.phases.length).toBeGreaterThan(0);\n\n        // 5. Validate memory usage\n        void campaignTestAssertions.memoryUsageAcceptable(context);\n\n        // 6. Verify all safety events\n        const safetyEvents: any = (await context).controller.getSafetyEvents();\n        expect(safetyEvents.length).toBeGreaterThan(0);\n        campaignTestAssertions.safetyEventsRecorded(safetyEvents, [SafetyEventType.CHECKPOINT_CREATED]);\n      } finally {\n        cleanupCampaignTest('integration-validation-test');\n      }\n    });\n  });\n});\n"],"version":3}