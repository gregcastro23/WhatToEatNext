{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ValidationFramework.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ValidationFramework.test.ts"],"sourcesContent":["/**\n * Tests for Validation Framework\n */\n\nimport {\n  ValidationFramework,\n  ValidationResult,\n  MilestoneValidationResult,\n} from './ValidationFramework';\nimport { execSync } from 'child_process';\nimport fs from 'fs';\n\n// Mock execSync and fs\njest.mock('child_process');\njest.mock('fs');\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('ValidationFramework', () => {\n  let validationFramework: ValidationFramework;\n\n  beforeEach(() => {\n    validationFramework = new ValidationFramework();\n    jest.clearAllMocks();\n  });\n\n  describe('constructor', () => {\n    it('should initialize with phase validations', () => {\n      const phases = validationFramework.getAvailablePhases();\n\n      expect(phases).toHaveLength(4);\n      expect(phases.map(p => p.id)).toEqual([\n        'phase1',\n        'phase2',\n        'phase3',\n        'phase4',\n      ]);\n    });\n  });\n\n  describe('getAvailablePhases', () => {\n    it('should return all available phases with correct structure', () => {\n      const phases = validationFramework.getAvailablePhases();\n\n      expect(phases).toEqual([\n        {\n          id: 'phase1',\n          name: 'TypeScript Error Elimination',\n          criteriaCount: 3,\n        },\n        {\n          id: 'phase2',\n          name: 'Linting Excellence Achievement',\n          criteriaCount: 4,\n        },\n        {\n          id: 'phase3',\n          name: 'Enterprise Intelligence Transformation',\n          criteriaCount: 3,\n        },\n        {\n          id: 'phase4',\n          name: 'Performance Optimization Maintenance',\n          criteriaCount: 4,\n        },\n      ]);\n    });\n  });\n\n  describe('validatePhase', () => {\n    beforeEach(() => {\n      // Mock successful executions by default\n      mockExecSync.mockReturnValue('');\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.statSync.mockReturnValue({ size: 400 * 1024 } as any); // 400KB\n    });\n\n    it('should throw error for unknown phase', async () => {\n      await expect(\n        validationFramework.validatePhase('unknown-phase')\n      ).rejects.toThrow('Unknown phase ID: unknown-phase');\n    });\n\n    it('should validate Phase 1 successfully with zero TypeScript errors', async () => {\n      // Mock zero TypeScript errors\n      mockExecSync.mockReturnValue('No errors found');\n\n      const result = await validationFramework.validatePhase('phase1');\n\n      expect(result.phaseId).toBe('phase1');\n      expect(result.success).toBe(true);\n      expect(result.score).toBeGreaterThan(0.9); // Should be high score\n      expect(result.passedCriteria).toBeGreaterThan(0);\n      expect(result.results).toHaveLength(3); // 3 criteria for phase 1\n    });\n\n    it('should validate Phase 1 as failed with TypeScript errors present', async () => {\n      // Mock TypeScript errors present\n      mockExecSync\n        .mockReturnValueOnce(\n          'error TS2322: Type error\\nerror TS2345: Another error'\n        )\n        .mockReturnValueOnce(''); // Build succeeds\n\n      const result = await validationFramework.validatePhase('phase1');\n\n      expect(result.success).toBe(false);\n      expect(result.failedCriteria).toBeGreaterThan(0);\n\n      // Should have recommendations\n      expect(result.recommendations.length).toBeGreaterThan(0);\n      expect(result.recommendations[0]).toContain(\n        'Enhanced TypeScript Error Fixer'\n      );\n    });\n\n    it('should validate Phase 2 successfully with zero linting warnings', async () => {\n      // Mock zero linting warnings\n      mockExecSync.mockReturnValue('✓ No warnings found');\n\n      const result = await validationFramework.validatePhase('phase2');\n\n      expect(result.phaseId).toBe('phase2');\n      expect(result.success).toBe(true);\n      expect(result.results).toHaveLength(4); // 4 criteria for phase 2\n    });\n\n    it('should validate Phase 2 as failed with linting warnings present', async () => {\n      // Mock linting warnings present\n      mockExecSync.mockReturnValue(`\n        warning: @typescript-eslint/no-explicit-any found\n        warning: no-unused-vars found\n        warning: no-console found\n      `);\n\n      const result = await validationFramework.validatePhase('phase2');\n\n      expect(result.success).toBe(false);\n      expect(result.recommendations.length).toBeGreaterThan(0);\n    });\n\n    it('should validate Phase 3 successfully with sufficient enterprise systems', async () => {\n      // Mock 250 enterprise systems\n      mockExecSync\n        .mockReturnValueOnce('250') // Enterprise systems count\n        .mockReturnValueOnce('0') // No unused exports\n        .mockReturnValueOnce(''); // Build succeeds\n\n      const result = await validationFramework.validatePhase('phase3');\n\n      expect(result.success).toBe(true);\n      expect(result.results[0].result.value).toBe(250);\n      expect(result.results[0].result.success).toBe(true);\n    });\n\n    it('should validate Phase 3 as failed with insufficient enterprise systems', async () => {\n      // Mock only 150 enterprise systems (below 200 target)\n      mockExecSync\n        .mockReturnValueOnce('150')\n        .mockReturnValueOnce('0')\n        .mockReturnValueOnce('');\n\n      const result = await validationFramework.validatePhase('phase3');\n\n      expect(result.success).toBe(false);\n      expect(result.results[0].result.value).toBe(150);\n      expect(result.results[0].result.success).toBe(false);\n    });\n\n    it('should validate Phase 4 successfully with good performance metrics', async () => {\n      // Mock fast build and test execution\n      mockExecSync.mockImplementation(command => {\n        if (command.includes('yarn build')) {\n          // Simulate 5 second build\n          return new Promise(resolve =>\n            setTimeout(() => resolve(''), 100)\n          ) as any;\n        }\n        if (command.includes('yarn test')) {\n          // Simulate 30 second test run\n          return new Promise(resolve =>\n            setTimeout(() => resolve(''), 100)\n          ) as any;\n        }\n        return '';\n      });\n\n      const result = await validationFramework.validatePhase('phase4');\n\n      expect(result.phaseId).toBe('phase4');\n      // Build time should be under 10 seconds (mocked to be fast)\n      expect(\n        result.results.some(r => r.criteriaId === 'build-time-target')\n      ).toBe(true);\n    });\n\n    it('should handle validation errors gracefully', async () => {\n      // Mock command that throws error\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Command failed');\n      });\n\n      const result = await validationFramework.validatePhase('phase1');\n\n      expect(result.success).toBe(false);\n      expect(result.results.every(r => !r.result.success)).toBe(true);\n    });\n\n    it('should store validation results in history', async () => {\n      mockExecSync.mockReturnValue('');\n\n      await validationFramework.validatePhase('phase1');\n\n      const history = validationFramework.getValidationHistory();\n      expect(history).toHaveLength(1);\n      expect(history[0].phaseId).toBe('phase1');\n    });\n\n    it('should generate appropriate recommendations for failed criteria', async () => {\n      // Mock TypeScript errors\n      mockExecSync.mockReturnValueOnce('error TS2322: Type error');\n\n      const result = await validationFramework.validatePhase('phase1');\n\n      expect(result.recommendations).toContain(\n        expect.stringContaining('Enhanced TypeScript Error Fixer')\n      );\n    });\n  });\n\n  describe('detectFailures', () => {\n    it('should detect build failures', async () => {\n      // Mock build failure\n      const buildError = new Error('Build failed') as any;\n      buildError.status = 1;\n      mockExecSync.mockImplementation(command => {\n        if (command.includes('yarn build')) {\n          throw buildError;\n        }\n        return '';\n      });\n\n      const failures = await validationFramework.detectFailures();\n\n      expect(failures.length).toBeGreaterThan(0);\n      const buildFailure = failures.find(f => f.category === 'build');\n      expect(buildFailure).toBeDefined();\n      expect(buildFailure!.severity).toBe('critical');\n      expect(buildFailure!.recoveryActions.length).toBeGreaterThan(0);\n    });\n\n    it('should detect test failures', async () => {\n      // Mock test failure\n      mockExecSync.mockImplementation(command => {\n        if (command.includes('yarn test')) {\n          throw new Error('Tests failed');\n        }\n        if (command.includes('yarn build')) {\n          return '';\n        }\n        return '';\n      });\n\n      const failures = await validationFramework.detectFailures();\n\n      const testFailure = failures.find(f => f.category === 'test');\n      expect(testFailure).toBeDefined();\n      expect(testFailure!.severity).toBe('high');\n    });\n\n    it('should detect high TypeScript error count', async () => {\n      // Mock high number of TypeScript errors\n      const manyErrors = Array(150).fill('error TS2322: Type error').join('\\n');\n      mockExecSync.mockImplementation(command => {\n        if (command.includes('tsc --noEmit')) {\n          return manyErrors;\n        }\n        return '';\n      });\n\n      const failures = await validationFramework.detectFailures();\n\n      const tsFailure = failures.find(f => f.category === 'typescript');\n      expect(tsFailure).toBeDefined();\n      expect(tsFailure!.severity).toBe('high');\n      expect(tsFailure!.automaticRecovery).toBe(true);\n    });\n\n    it('should detect performance degradation', async () => {\n      // Mock slow build (simulate by making execSync take time)\n      mockExecSync.mockImplementation(command => {\n        if (command.includes('yarn build')) {\n          // Simulate slow build by delaying\n          const start = Date.now();\n          while (Date.now() - start < 100) {\n            // Busy wait to simulate slow build\n          }\n          return '';\n        }\n        return '';\n      });\n\n      const failures = await validationFramework.detectFailures();\n\n      // Note: This test might be flaky due to timing, but demonstrates the concept\n      const perfFailure = failures.find(f => f.category === 'performance');\n      if (perfFailure) {\n        expect(perfFailure.severity).toBe('medium');\n        expect(perfFailure.automaticRecovery).toBe(true);\n      }\n    });\n\n    it('should return empty array when no failures detected', async () => {\n      // Mock all successful executions\n      mockExecSync.mockReturnValue('');\n\n      const failures = await validationFramework.detectFailures();\n\n      expect(failures).toHaveLength(0);\n    });\n  });\n\n  describe('getValidationHistory', () => {\n    it('should return empty history initially', () => {\n      const history = validationFramework.getValidationHistory();\n      expect(history).toHaveLength(0);\n    });\n\n    it('should return validation history after validations', async () => {\n      mockExecSync.mockReturnValue('');\n\n      await validationFramework.validatePhase('phase1');\n      await validationFramework.validatePhase('phase2');\n\n      const history = validationFramework.getValidationHistory();\n      expect(history).toHaveLength(2);\n      expect(history[0].phaseId).toBe('phase1');\n      expect(history[1].phaseId).toBe('phase2');\n    });\n\n    it('should return copy of history (not reference)', () => {\n      const history1 = validationFramework.getValidationHistory();\n      const history2 = validationFramework.getValidationHistory();\n\n      expect(history1).not.toBe(history2); // Different objects\n      expect(history1).toEqual(history2); // Same content\n    });\n  });\n\n  describe('validation criteria', () => {\n    it('should have required criteria marked correctly', () => {\n      const phases = validationFramework.getAvailablePhases();\n\n      // All phases should have at least one required criteria\n      phases.forEach(phase => {\n        expect(phase.criteriaCount).toBeGreaterThan(0);\n      });\n    });\n\n    it('should have appropriate weights for criteria', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const result = await validationFramework.validatePhase('phase1');\n\n      // Weights should sum to approximately 1.0 for each phase\n      const totalWeight = result.results.reduce((sum, r) => {\n        // This is a simplified check - in real implementation we'd access the weights\n        return sum + (r.result.success ? 0.33 : 0); // Assuming equal weights for test\n      }, 0);\n\n      expect(totalWeight).toBeGreaterThan(0);\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle timeout errors in validation', async () => {\n      const timeoutError = new Error('Command timed out') as any;\n      timeoutError.code = 'ETIMEDOUT';\n      mockExecSync.mockImplementation(() => {\n        throw timeoutError;\n      });\n\n      const result = await validationFramework.validatePhase('phase1');\n\n      expect(result.success).toBe(false);\n      expect(result.results.every(r => !r.result.success)).toBe(true);\n    });\n\n    it('should handle file system errors gracefully', async () => {\n      mockFs.existsSync.mockImplementation(() => {\n        throw new Error('File system error');\n      });\n\n      const result = await validationFramework.validatePhase('phase4');\n\n      // Should still complete validation even with FS errors\n      expect(result).toBeDefined();\n      expect(result.phaseId).toBe('phase4');\n    });\n  });\n});\n"],"version":3}