f46113805b6c6f4a935f687ea7f0c96b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock implementation of getRecommendedIngredients
jest.mock('@/utils/ingredientRecommender', () => {
    return {
        getRecommendedIngredients: () => [
            {
                name: 'Rosemary',
                category: 'culinary_herb',
                qualities: ['aromatic', 'warming'],
                elementalProperties: { Fire: 0.6, Air: 0.3, Earth: 0.1, Water: 0 },
                astrologicalProfile: {
                    rulingPlanets: ['Sun', 'Mercury']
                }
            },
            {
                name: 'Thyme',
                category: 'culinary_herb',
                qualities: ['aromatic', 'warming'],
                elementalProperties: { Fire: 0.4, Air: 0.4, Earth: 0.2, Water: 0 },
                astrologicalProfile: {
                    rulingPlanets: ['Mercury']
                }
            }
        ]
    };
});
const ingredientRecommender_1 = require("@/utils/ingredientRecommender");
describe('getRecommendedIngredients', () => {
    it('should return ingredients matching the current elemental state', () => {
        const astroState = {
            currentZodiac: 'leo',
            moonPhase: 'full moon',
            currentPlanetaryAlignment: {
                Sun: { sign: 'leo', degree: 15 },
                Moon: { sign: 'cancer', degree: 5 }
            },
            activePlanets: ['sun', 'moon'],
            planetaryPositions: {
                Sun: { sign: 'leo', degree: 15 },
                Moon: { sign: 'cancer', degree: 5 }
            },
            lunarPhase: 'full moon',
            planetaryHour: 'Sun',
            planetaryAlignment: {
                Sun: { sign: 'leo', degree: 15 },
                Moon: { sign: 'cancer', degree: 5 }
            },
            aspects: [],
            tarotElementBoosts: { Fire: 0.2, Water: 0.1, Air: 0, Earth: 0 },
            tarotPlanetaryBoosts: { Sun: 0.2, Moon: 0.1 }
        };
        const ingredients = (0, ingredientRecommender_1.getRecommendedIngredients)(astroState);
        expect(ingredients).toBeInstanceOf(Array);
        ingredients.forEach(ingredient => {
            expect(ingredient).toHaveProperty('elementalProperties');
            expect(ingredient).toHaveProperty('astrologicalProfile');
            const astroProfile = ingredient.astrologicalProfile;
            expect(astroProfile).toHaveProperty('rulingPlanets');
            expect(astroProfile.rulingPlanets.some((planet) => ['Sun', 'Mercury', 'Saturn'].includes(planet))).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9fX3Rlc3RzX18vaW5ncmVkaWVudFJlY29tbWVuZGVyLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFJQSxtREFBbUQ7QUFDbkQsSUFBSSxDQUFDLElBQUksQ0FBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUU7SUFDOUMsT0FBTztRQUNMLHlCQUF5QixFQUFFLEdBQWlCLEVBQUUsQ0FBQztZQUM3QztnQkFDRSxJQUFJLEVBQUUsVUFBVTtnQkFDaEIsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLFNBQVMsRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUM7Z0JBQ2xDLG1CQUFtQixFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtnQkFDbEUsbUJBQW1CLEVBQUU7b0JBQ25CLGFBQWEsRUFBRSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUM7aUJBQ2xDO2FBQ1k7WUFDZjtnQkFDRSxJQUFJLEVBQUUsT0FBTztnQkFDYixRQUFRLEVBQUUsZUFBZTtnQkFDekIsU0FBUyxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQztnQkFDbEMsbUJBQW1CLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO2dCQUNsRSxtQkFBbUIsRUFBRTtvQkFDbkIsYUFBYSxFQUFFLENBQUMsU0FBUyxDQUFDO2lCQUMzQjthQUNZO1NBQ2hCO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBNUJILHlFQUEwRTtBQThCMUUsUUFBUSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtJQUN6QyxFQUFFLENBQUMsZ0VBQWdFLEVBQUUsR0FBRyxFQUFFO1FBQ3hFLE1BQU0sVUFBVSxHQUFzQjtZQUNwQyxhQUFhLEVBQUUsS0FBSztZQUNwQixTQUFTLEVBQUUsV0FBVztZQUN0Qix5QkFBeUIsRUFBRTtnQkFDekIsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFO2dCQUNoQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUU7YUFDcEM7WUFDRCxhQUFhLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDO1lBQzlCLGtCQUFrQixFQUFFO2dCQUNsQixHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUU7Z0JBQ2hDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRTthQUNwQztZQUNELFVBQVUsRUFBRSxXQUFXO1lBQ3ZCLGFBQWEsRUFBRSxLQUFLO1lBQ3BCLGtCQUFrQixFQUFFO2dCQUNsQixHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUU7Z0JBQ2hDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRTthQUNwQztZQUNELE9BQU8sRUFBRSxFQUFFO1lBQ1gsa0JBQWtCLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO1lBQy9ELG9CQUFvQixFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFO1NBQzlDLENBQUM7UUFFRixNQUFNLFdBQVcsR0FBRyxJQUFBLGlEQUF5QixFQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTFELE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUMvQixNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDekQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ3pELE1BQU0sWUFBWSxHQUFJLFVBQW1FLENBQUMsbUJBQW1CLENBQUM7WUFDOUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUNyRCxNQUFNLENBQ0osWUFBWSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQzdCLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUNsRSxDQUNGLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9HcmVnQ2FzdHJvL0Rlc2t0b3AvV2hhdFRvRWF0TmV4dC9zcmMvX190ZXN0c19fL2luZ3JlZGllbnRSZWNvbW1lbmRlci50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFJlY29tbWVuZGVkSW5ncmVkaWVudHMgfSBmcm9tICdAL3V0aWxzL2luZ3JlZGllbnRSZWNvbW1lbmRlcic7XG5pbXBvcnQgeyBBc3Ryb2xvZ2ljYWxTdGF0ZSB9IGZyb20gJ0AvdHlwZXMvYWxjaGVteSc7XG5pbXBvcnQgeyBJbmdyZWRpZW50IH0gZnJvbSAnQC90eXBlcy9pbmdyZWRpZW50JztcblxuLy8gTW9jayBpbXBsZW1lbnRhdGlvbiBvZiBnZXRSZWNvbW1lbmRlZEluZ3JlZGllbnRzXG5qZXN0Lm1vY2soJ0AvdXRpbHMvaW5ncmVkaWVudFJlY29tbWVuZGVyJywgKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIGdldFJlY29tbWVuZGVkSW5ncmVkaWVudHM6ICgpOiBJbmdyZWRpZW50W10gPT4gW1xuICAgICAge1xuICAgICAgICBuYW1lOiAnUm9zZW1hcnknLFxuICAgICAgICBjYXRlZ29yeTogJ2N1bGluYXJ5X2hlcmInLFxuICAgICAgICBxdWFsaXRpZXM6IFsnYXJvbWF0aWMnLCAnd2FybWluZyddLFxuICAgICAgICBlbGVtZW50YWxQcm9wZXJ0aWVzOiB7IEZpcmU6IDAuNiwgQWlyOiAwLjMsIEVhcnRoOiAwLjEsIFdhdGVyOiAwIH0sXG4gICAgICAgIGFzdHJvbG9naWNhbFByb2ZpbGU6IHtcbiAgICAgICAgICBydWxpbmdQbGFuZXRzOiBbJ1N1bicsICdNZXJjdXJ5J11cbiAgICAgICAgfVxuICAgICAgfSBhcyBJbmdyZWRpZW50LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnVGh5bWUnLFxuICAgICAgICBjYXRlZ29yeTogJ2N1bGluYXJ5X2hlcmInLFxuICAgICAgICBxdWFsaXRpZXM6IFsnYXJvbWF0aWMnLCAnd2FybWluZyddLFxuICAgICAgICBlbGVtZW50YWxQcm9wZXJ0aWVzOiB7IEZpcmU6IDAuNCwgQWlyOiAwLjQsIEVhcnRoOiAwLjIsIFdhdGVyOiAwIH0sXG4gICAgICAgIGFzdHJvbG9naWNhbFByb2ZpbGU6IHtcbiAgICAgICAgICBydWxpbmdQbGFuZXRzOiBbJ01lcmN1cnknXVxuICAgICAgICB9XG4gICAgICB9IGFzIEluZ3JlZGllbnRcbiAgICBdXG4gIH07XG59KTtcblxuZGVzY3JpYmUoJ2dldFJlY29tbWVuZGVkSW5ncmVkaWVudHMnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcmV0dXJuIGluZ3JlZGllbnRzIG1hdGNoaW5nIHRoZSBjdXJyZW50IGVsZW1lbnRhbCBzdGF0ZScsICgpID0+IHtcbiAgICBjb25zdCBhc3Ryb1N0YXRlOiBBc3Ryb2xvZ2ljYWxTdGF0ZSA9IHtcbiAgICAgIGN1cnJlbnRab2RpYWM6ICdsZW8nLFxuICAgICAgbW9vblBoYXNlOiAnZnVsbCBtb29uJyxcbiAgICAgIGN1cnJlbnRQbGFuZXRhcnlBbGlnbm1lbnQ6IHtcbiAgICAgICAgU3VuOiB7IHNpZ246ICdsZW8nLCBkZWdyZWU6IDE1IH0sXG4gICAgICAgIE1vb246IHsgc2lnbjogJ2NhbmNlcicsIGRlZ3JlZTogNSB9XG4gICAgICB9LFxuICAgICAgYWN0aXZlUGxhbmV0czogWydzdW4nLCAnbW9vbiddLFxuICAgICAgcGxhbmV0YXJ5UG9zaXRpb25zOiB7XG4gICAgICAgIFN1bjogeyBzaWduOiAnbGVvJywgZGVncmVlOiAxNSB9LFxuICAgICAgICBNb29uOiB7IHNpZ246ICdjYW5jZXInLCBkZWdyZWU6IDUgfVxuICAgICAgfSxcbiAgICAgIGx1bmFyUGhhc2U6ICdmdWxsIG1vb24nLFxuICAgICAgcGxhbmV0YXJ5SG91cjogJ1N1bicsXG4gICAgICBwbGFuZXRhcnlBbGlnbm1lbnQ6IHtcbiAgICAgICAgU3VuOiB7IHNpZ246ICdsZW8nLCBkZWdyZWU6IDE1IH0sXG4gICAgICAgIE1vb246IHsgc2lnbjogJ2NhbmNlcicsIGRlZ3JlZTogNSB9XG4gICAgICB9LFxuICAgICAgYXNwZWN0czogW10sXG4gICAgICB0YXJvdEVsZW1lbnRCb29zdHM6IHsgRmlyZTogMC4yLCBXYXRlcjogMC4xLCBBaXI6IDAsIEVhcnRoOiAwIH0sXG4gICAgICB0YXJvdFBsYW5ldGFyeUJvb3N0czogeyBTdW46IDAuMiwgTW9vbjogMC4xIH1cbiAgICB9O1xuXG4gICAgY29uc3QgaW5ncmVkaWVudHMgPSBnZXRSZWNvbW1lbmRlZEluZ3JlZGllbnRzKGFzdHJvU3RhdGUpO1xuICAgIFxuICAgIGV4cGVjdChpbmdyZWRpZW50cykudG9CZUluc3RhbmNlT2YoQXJyYXkpO1xuICAgIGluZ3JlZGllbnRzLmZvckVhY2goaW5ncmVkaWVudCA9PiB7XG4gICAgICBleHBlY3QoaW5ncmVkaWVudCkudG9IYXZlUHJvcGVydHkoJ2VsZW1lbnRhbFByb3BlcnRpZXMnKTtcbiAgICAgIGV4cGVjdChpbmdyZWRpZW50KS50b0hhdmVQcm9wZXJ0eSgnYXN0cm9sb2dpY2FsUHJvZmlsZScpO1xuICAgICAgY29uc3QgYXN0cm9Qcm9maWxlID0gKGluZ3JlZGllbnQgYXMgeyBhc3Ryb2xvZ2ljYWxQcm9maWxlOiB7IHJ1bGluZ1BsYW5ldHM6IHN0cmluZ1tdIH0gfSkuYXN0cm9sb2dpY2FsUHJvZmlsZTtcbiAgICAgIGV4cGVjdChhc3Ryb1Byb2ZpbGUpLnRvSGF2ZVByb3BlcnR5KCdydWxpbmdQbGFuZXRzJyk7XG4gICAgICBleHBlY3QoXG4gICAgICAgIGFzdHJvUHJvZmlsZS5ydWxpbmdQbGFuZXRzLnNvbWUoXG4gICAgICAgICAgKHBsYW5ldDogc3RyaW5nKSA9PiBbJ1N1bicsICdNZXJjdXJ5JywgJ1NhdHVybiddLmluY2x1ZGVzKHBsYW5ldClcbiAgICAgICAgKVxuICAgICAgKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcbn0pOyAiXSwidmVyc2lvbiI6M30=