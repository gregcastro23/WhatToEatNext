{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/ingredientRecommender.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/ingredientRecommender.test.ts"],"sourcesContent":["import { getRecommendedIngredients } from '@/utils/ingredientRecommender';\nimport { AstrologicalState } from '@/types/alchemy';\nimport { Ingredient } from '@/types/ingredient';\n\n// Mock implementation of getRecommendedIngredients\njest.mock('@/utils/ingredientRecommender', () => {\n  return {\n    getRecommendedIngredients: (): Ingredient[] => [\n      {\n        name: 'Rosemary',\n        category: 'culinary_herb',\n        qualities: ['aromatic', 'warming'],\n        elementalProperties: { Fire: 0.6, Air: 0.3, Earth: 0.1, Water: 0 },\n        astrologicalProfile: {\n          rulingPlanets: ['Sun', 'Mercury']\n        }\n      } as Ingredient,\n      {\n        name: 'Thyme',\n        category: 'culinary_herb',\n        qualities: ['aromatic', 'warming'],\n        elementalProperties: { Fire: 0.4, Air: 0.4, Earth: 0.2, Water: 0 },\n        astrologicalProfile: {\n          rulingPlanets: ['Mercury']\n        }\n      } as Ingredient\n    ]\n  };\n});\n\ndescribe('getRecommendedIngredients', () => {\n  it('should return ingredients matching the current elemental state', () => {\n    const astroState: AstrologicalState = {\n      currentZodiac: 'leo',\n      moonPhase: 'full moon',\n      currentPlanetaryAlignment: {\n        Sun: { sign: 'leo', degree: 15 },\n        Moon: { sign: 'cancer', degree: 5 }\n      },\n      activePlanets: ['sun', 'moon'],\n      planetaryPositions: {\n        Sun: { sign: 'leo', degree: 15 },\n        Moon: { sign: 'cancer', degree: 5 }\n      },\n      lunarPhase: 'full moon',\n      planetaryHour: 'Sun',\n      planetaryAlignment: {\n        Sun: { sign: 'leo', degree: 15 },\n        Moon: { sign: 'cancer', degree: 5 }\n      },\n      aspects: [],\n      tarotElementBoosts: { Fire: 0.2, Water: 0.1, Air: 0, Earth: 0 },\n      tarotPlanetaryBoosts: { Sun: 0.2, Moon: 0.1 }\n    };\n\n    const ingredients = getRecommendedIngredients(astroState);\n    \n    expect(ingredients).toBeInstanceOf(Array);\n    ingredients.forEach(ingredient => {\n      expect(ingredient).toHaveProperty('elementalProperties');\n      expect(ingredient).toHaveProperty('astrologicalProfile');\n      const astroProfile = (ingredient as { astrologicalProfile: { rulingPlanets: string[] } }).astrologicalProfile;\n      expect(astroProfile).toHaveProperty('rulingPlanets');\n      expect(\n        astroProfile.rulingPlanets.some(\n          (planet: string) => ['Sun', 'Mercury', 'Saturn'].includes(planet)\n        )\n      ).toBe(true);\n    });\n  });\n}); "],"version":3}