{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/PerformanceMonitoringSystem.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/PerformanceMonitoringSystem.test.ts"],"sourcesContent":["/**\n * Performance Monitoring System Tests\n * Perfect Codebase Campaign - Phase 4 Implementation Tests\n */\n\nimport { PerformanceMonitoringSystem, PerformanceMetrics, PerformanceAlert } from './PerformanceMonitoringSystem';\nimport * as fs from 'fs';\nimport { execSync } from 'child_process';\n\n// Mock external dependencies\njest.mock('child_process');\njest.mock('fs');\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('PerformanceMonitoringSystem', () => {\n  let performanceMonitor: PerformanceMonitoringSystem;\n\n  beforeEach(() => {\n    performanceMonitor = new PerformanceMonitoringSystem();\n    jest.clearAllMocks();\n    \n    // Mock process.hrtime.bigint for build time measurement\n    const mockHrtime = jest.fn();\n    mockHrtime.mockReturnValueOnce(BigInt(1000000000)); // 1 second in nanoseconds\n    mockHrtime.mockReturnValueOnce(BigInt(9000000000)); // 9 seconds in nanoseconds\n    (process.hrtime as any) = { bigint: mockHrtime };\n    \n    // Mock process.memoryUsage\n    (process.memoryUsage as jest.Mock) = jest.fn().mockReturnValue({\n      heapUsed: 40 * 1024 * 1024, // 40MB\n      heapTotal: 50 * 1024 * 1024, // 50MB\n      external: 5 * 1024 * 1024,\n      arrayBuffers: 1 * 1024 * 1024\n    });\n  });\n\n  afterEach(() => {\n    performanceMonitor.stopMonitoring();\n  });\n\n  describe('measureBuildTime', () => {\n    it('should measure build time using time command', async () => {\n      mockExecSync.mockReturnValue('real 8.50\\nuser 7.20\\nsys 1.30\\n');\n      \n      const buildTime = await performanceMonitor.measureBuildTime();\n      \n      expect(buildTime).toBe(8.50);\n      expect(mockExecSync).toHaveBeenCalledWith('time -p yarn build 2>&1', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n    });\n\n    it('should fallback to simple timing if time command fails', async () => {\n      mockExecSync\n        .mockImplementationOnce(() => {\n          throw new Error('time command not found');\n        })\n        .mockReturnValueOnce('Build completed successfully');\n      \n      // Mock Date.now for timing\n      const mockDateNow = jest.spyOn(Date, 'now');\n      mockDateNow.mockReturnValueOnce(1000).mockReturnValueOnce(9000); // 8 second difference\n      \n      const buildTime = await performanceMonitor.measureBuildTime();\n      \n      expect(buildTime).toBe(8); // 8 seconds\n      expect(mockExecSync).toHaveBeenCalledWith('yarn build', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n      \n      mockDateNow.mockRestore();\n    });\n\n    it('should return -1 if build fails', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Build failed');\n      });\n      \n      const buildTime = await performanceMonitor.measureBuildTime();\n      \n      expect(buildTime).toBe(-1);\n    });\n  });\n\n  describe('monitorCacheHitRate', () => {\n    it('should estimate cache hit rate from Next.js cache', async () => {\n      mockFs.existsSync.mockImplementation((path: string) => {\n        return path === '.next' || path === '.next/cache';\n      });\n      \n      mockExecSync.mockReturnValue('150\\n'); // 150 cache files\n      \n      const cacheHitRate = await performanceMonitor.monitorCacheHitRate();\n      \n      expect(cacheHitRate).toBeGreaterThan(0);\n      expect(cacheHitRate).toBeLessThanOrEqual(1);\n    });\n\n    it('should estimate cache hit rate from other cache directories', async () => {\n      mockFs.existsSync.mockImplementation((path: string) => {\n        return path === '.yarn/cache';\n      });\n      \n      mockExecSync.mockReturnValue('15000\\n'); // 15MB cache size\n      \n      const cacheHitRate = await performanceMonitor.monitorCacheHitRate();\n      \n      expect(cacheHitRate).toBe(0.8); // Should return high hit rate for large cache\n    });\n\n    it('should return default estimate if cache monitoring fails', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Cache monitoring failed');\n      });\n      \n      const cacheHitRate = await performanceMonitor.monitorCacheHitRate();\n      \n      expect(cacheHitRate).toBe(0.6); // Default estimate for small cache\n    });\n  });\n\n  describe('trackMemoryUsage', () => {\n    it('should track Node.js process memory usage', async () => {\n      const memoryUsage = await performanceMonitor.trackMemoryUsage();\n      \n      expect(memoryUsage.current).toBe(40); // 40MB from mock\n      expect(memoryUsage.peak).toBe(50); // 50MB from mock\n    });\n\n    it('should include system memory if available', async () => {\n      mockExecSync.mockReturnValue('  1234  100000  51200  node\\n'); // 50MB RSS\n      \n      const memoryUsage = await performanceMonitor.trackMemoryUsage();\n      \n      expect(memoryUsage.current).toBe(50); // Should use system memory (higher)\n      expect(memoryUsage.peak).toBe(50);\n    });\n\n    it('should handle memory tracking errors gracefully', async () => {\n      (process.memoryUsage as jest.Mock).mockImplementation(() => {\n        throw new Error('Memory tracking failed');\n      });\n      \n      const memoryUsage = await performanceMonitor.trackMemoryUsage();\n      \n      expect(memoryUsage.current).toBe(0);\n      expect(memoryUsage.peak).toBe(0);\n    });\n  });\n\n  describe('detectPerformanceRegression', () => {\n    it('should detect build time regression', async () => {\n      // Add performance history with increasing build times\n      const mockMetrics1: PerformanceMetrics = {\n        buildTime: { current: 5, target: 10, average: 5, trend: 'stable' },\n        cacheHitRate: { current: 0.8, target: 0.8, average: 0.8, trend: 'stable' },\n        memoryUsage: { current: 40, target: 50, peak: 45, average: 40 },\n        bundleSize: { current: 400, target: 420, compressed: 280, trend: 'stable' }\n      };\n      \n      const mockMetrics2: PerformanceMetrics = {\n        ...mockMetrics1,\n        buildTime: { current: 7, target: 10, average: 6, trend: 'degrading' }\n      };\n      \n      const mockMetrics3: PerformanceMetrics = {\n        ...mockMetrics1,\n        buildTime: { current: 9, target: 10, average: 7, trend: 'degrading' }\n      };\n      \n      // Manually add to history\n      (performanceMonitor as any).performanceHistory = [mockMetrics1, mockMetrics2, mockMetrics3];\n      \n      const regressionDetected = await performanceMonitor.detectPerformanceRegression();\n      \n      expect(regressionDetected).toBe(true);\n      \n      const alerts = performanceMonitor.getCurrentAlerts();\n      expect(alerts).toHaveLength(1);\n      expect(alerts[0].type).toBe('build_time');\n      expect(alerts[0].severity).toBe('warning');\n    });\n\n    it('should detect cache hit rate regression', async () => {\n      const mockMetrics1: PerformanceMetrics = {\n        buildTime: { current: 8, target: 10, average: 8, trend: 'stable' },\n        cacheHitRate: { current: 0.9, target: 0.8, average: 0.9, trend: 'stable' },\n        memoryUsage: { current: 40, target: 50, peak: 45, average: 40 },\n        bundleSize: { current: 400, target: 420, compressed: 280, trend: 'stable' }\n      };\n      \n      const mockMetrics2: PerformanceMetrics = {\n        ...mockMetrics1,\n        cacheHitRate: { current: 0.75, target: 0.8, average: 0.825, trend: 'degrading' }\n      };\n      \n      const mockMetrics3: PerformanceMetrics = {\n        ...mockMetrics1,\n        cacheHitRate: { current: 0.6, target: 0.8, average: 0.75, trend: 'degrading' }\n      };\n      \n      (performanceMonitor as any).performanceHistory = [mockMetrics1, mockMetrics2, mockMetrics3];\n      \n      const regressionDetected = await performanceMonitor.detectPerformanceRegression();\n      \n      expect(regressionDetected).toBe(true);\n      \n      const alerts = performanceMonitor.getCurrentAlerts();\n      expect(alerts).toHaveLength(1);\n      expect(alerts[0].type).toBe('cache_hit_rate');\n    });\n\n    it('should detect memory usage regression', async () => {\n      const mockMetrics1: PerformanceMetrics = {\n        buildTime: { current: 8, target: 10, average: 8, trend: 'stable' },\n        cacheHitRate: { current: 0.8, target: 0.8, average: 0.8, trend: 'stable' },\n        memoryUsage: { current: 30, target: 50, peak: 35, average: 30 },\n        bundleSize: { current: 400, target: 420, compressed: 280, trend: 'stable' }\n      };\n      \n      const mockMetrics2: PerformanceMetrics = {\n        ...mockMetrics1,\n        memoryUsage: { current: 40, target: 50, peak: 45, average: 35 }\n      };\n      \n      const mockMetrics3: PerformanceMetrics = {\n        ...mockMetrics1,\n        memoryUsage: { current: 55, target: 50, peak: 60, average: 42 }\n      };\n      \n      (performanceMonitor as any).performanceHistory = [mockMetrics1, mockMetrics2, mockMetrics3];\n      \n      const regressionDetected = await performanceMonitor.detectPerformanceRegression();\n      \n      expect(regressionDetected).toBe(true);\n      \n      const alerts = performanceMonitor.getCurrentAlerts();\n      expect(alerts).toHaveLength(1);\n      expect(alerts[0].type).toBe('memory_usage');\n      expect(alerts[0].severity).toBe('critical');\n    });\n\n    it('should not detect regression with insufficient data', async () => {\n      const regressionDetected = await performanceMonitor.detectPerformanceRegression();\n      \n      expect(regressionDetected).toBe(false);\n    });\n  });\n\n  describe('getPerformanceMetrics', () => {\n    it('should return comprehensive performance metrics', async () => {\n      mockExecSync\n        .mockReturnValueOnce('real 8.50\\nuser 7.20\\nsys 1.30\\n') // build time\n        .mockReturnValueOnce('150\\n') // cache files\n        .mockReturnValueOnce('400\\n'); // bundle size\n      \n      mockFs.existsSync.mockImplementation((path: string) => {\n        return path === '.next' || path === '.next/cache';\n      });\n      \n      const metrics = await performanceMonitor.getPerformanceMetrics();\n      \n      expect(metrics).toHaveProperty('buildTime');\n      expect(metrics).toHaveProperty('cacheHitRate');\n      expect(metrics).toHaveProperty('memoryUsage');\n      expect(metrics).toHaveProperty('bundleSize');\n      \n      expect(metrics.buildTime.current).toBe(8.50);\n      expect(metrics.buildTime.target).toBe(10);\n      expect(metrics.memoryUsage.current).toBe(40);\n      expect(metrics.memoryUsage.target).toBe(50);\n    });\n\n    it('should calculate trends correctly', async () => {\n      // First measurement\n      mockExecSync.mockReturnValue('real 8.00\\n');\n      mockFs.existsSync.mockReturnValue(false);\n      \n      const metrics1 = await performanceMonitor.getPerformanceMetrics();\n      \n      // Add more measurements to establish trend (need at least 3 for trend calculation)\n      mockExecSync.mockReturnValue('real 7.50\\n');\n      const metrics2 = await performanceMonitor.getPerformanceMetrics();\n      \n      // Third measurement with significant improvement\n      mockExecSync.mockReturnValue('real 6.00\\n');\n      const metrics3 = await performanceMonitor.getPerformanceMetrics();\n      \n      expect(metrics3.buildTime.trend).toBe('improving');\n    });\n  });\n\n  describe('generatePerformanceReport', () => {\n    it('should generate comprehensive performance report', async () => {\n      mockExecSync.mockReturnValue('real 8.50\\n');\n      mockFs.existsSync.mockReturnValue(false);\n      \n      const report = await performanceMonitor.generatePerformanceReport();\n      \n      expect(report).toHaveProperty('timestamp');\n      expect(report).toHaveProperty('metrics');\n      expect(report).toHaveProperty('alerts');\n      expect(report).toHaveProperty('regressionDetected');\n      expect(report).toHaveProperty('overallScore');\n      expect(report).toHaveProperty('recommendations');\n      \n      expect(typeof report.overallScore).toBe('number');\n      expect(report.overallScore).toBeGreaterThanOrEqual(0);\n      expect(report.overallScore).toBeLessThanOrEqual(100);\n    });\n\n    it('should include recommendations for performance issues', async () => {\n      mockExecSync.mockReturnValue('real 15.00\\n'); // Exceeds 10s target\n      mockFs.existsSync.mockReturnValue(false);\n      \n      const report = await performanceMonitor.generatePerformanceReport();\n      \n      expect(report.recommendations.length).toBeGreaterThan(0);\n      expect(report.recommendations[0]).toContain('Build time');\n      expect(report.recommendations[0]).toContain('exceeds target');\n    });\n  });\n\n  describe('monitoring lifecycle', () => {\n    it('should start and stop continuous monitoring', () => {\n      jest.useFakeTimers();\n      \n      // Mock setInterval and clearInterval\n      const mockSetInterval = jest.spyOn(global, 'setInterval');\n      const mockClearInterval = jest.spyOn(global, 'clearInterval');\n      \n      performanceMonitor.startMonitoring(1); // 1 minute interval\n      \n      expect(mockSetInterval).toHaveBeenCalledWith(expect.any(Function), 60000);\n      \n      performanceMonitor.stopMonitoring();\n      \n      expect(mockClearInterval).toHaveBeenCalled();\n      \n      mockSetInterval.mockRestore();\n      mockClearInterval.mockRestore();\n      jest.useRealTimers();\n    });\n  });\n\n  describe('data export', () => {\n    it('should export performance data to file', async () => {\n      mockFs.writeFileSync.mockImplementation(() => {});\n      mockExecSync.mockReturnValue('real 8.50\\n');\n      mockFs.existsSync.mockReturnValue(false);\n      \n      await performanceMonitor.exportPerformanceData('./test-performance-data.json');\n      \n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        './test-performance-data.json',\n        expect.stringContaining('\"timestamp\"')\n      );\n    });\n\n    it('should handle export errors gracefully', async () => {\n      mockFs.writeFileSync.mockImplementation(() => {\n        throw new Error('Write failed');\n      });\n      \n      await expect(\n        performanceMonitor.exportPerformanceData('./test-performance-data.json')\n      ).rejects.toThrow('Failed to export performance data');\n    });\n  });\n\n  describe('alert management', () => {\n    it('should manage alerts correctly', () => {\n      const initialAlerts = performanceMonitor.getCurrentAlerts();\n      expect(initialAlerts).toHaveLength(0);\n      \n      // Add alert through private method (simulate regression detection)\n      const mockAlert: PerformanceAlert = {\n        type: 'build_time',\n        severity: 'warning',\n        message: 'Test alert',\n        currentValue: 15,\n        targetValue: 10,\n        timestamp: new Date(),\n        recommendations: ['Test recommendation']\n      };\n      \n      (performanceMonitor as any).addAlert(mockAlert);\n      \n      const alertsAfterAdd = performanceMonitor.getCurrentAlerts();\n      expect(alertsAfterAdd).toHaveLength(1);\n      expect(alertsAfterAdd[0]).toEqual(mockAlert);\n      \n      performanceMonitor.clearAlerts();\n      \n      const alertsAfterClear = performanceMonitor.getCurrentAlerts();\n      expect(alertsAfterClear).toHaveLength(0);\n    });\n  });\n});"],"version":3}