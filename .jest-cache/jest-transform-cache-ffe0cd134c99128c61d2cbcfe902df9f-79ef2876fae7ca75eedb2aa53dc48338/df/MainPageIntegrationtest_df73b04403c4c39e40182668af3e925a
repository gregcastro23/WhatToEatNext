d35abe2f664a6a9800a556633b43a864
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock all dependencies
jest.mock('next/navigation', () => ({
    useRouter: () => ({
        push: jest.fn(),
        back: jest.fn(),
        forward: jest.fn(),
        refresh: jest.fn(),
        replace: jest.fn(),
    }),
}));
jest.mock('@/contexts/AlchemicalContext/hooks');
jest.mock('@/hooks/useStatePreservation');
jest.mock('@/utils/logger', () => ({
    logger: {
        debug: jest.fn(),
        info: jest.fn(),
        warn: jest.fn(),
        error: jest.fn(),
    },
}));
// Mock components with realistic behavior
jest.mock('@/components/CuisineRecommender', () => {
    return function MockCuisineRecommender() {
        const [selectedCuisine, setSelectedCuisine] = react_1.default.useState(null);
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'cuisine-recommender', children: [(0, jsx_runtime_1.jsx)("h3", { children: "Cuisine Recommendations" }), (0, jsx_runtime_1.jsx)("div", { className: 'cuisine-list', children: ['Italian', 'Chinese', 'Mexican', 'Indian'].map(cuisine => ((0, jsx_runtime_1.jsx)("button", { onClick: () => setSelectedCuisine(cuisine), className: selectedCuisine === cuisine ? 'selected' : '', "data-testid": `cuisine-${cuisine.toLowerCase()}`, children: cuisine }, cuisine))) }), selectedCuisine && ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'selected-cuisine', children: ["Selected: ", selectedCuisine] }))] }));
    };
});
jest.mock('@/components/IngredientRecommender', () => {
    return function MockIngredientRecommender({ maxDisplayed = 8, }) {
        const [selectedIngredients, setSelectedIngredients] = react_1.default.useState([]);
        const ingredients = [
            'Tomatoes',
            'Onions',
            'Garlic',
            'Basil',
            'Olive Oil',
            'Cheese',
            'Pasta',
            'Chicken',
        ];
        const displayedIngredients = ingredients.slice(0, maxDisplayed);
        const toggleIngredient = (ingredient) => {
            setSelectedIngredients(prev => prev.includes(ingredient)
                ? prev.filter(i => i !== ingredient)
                : [...prev, ingredient]);
        };
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'ingredient-recommender', children: [(0, jsx_runtime_1.jsx)("h3", { children: "Ingredient Recommendations" }), (0, jsx_runtime_1.jsx)("div", { className: 'ingredient-list', children: displayedIngredients.map(ingredient => ((0, jsx_runtime_1.jsx)("button", { onClick: () => toggleIngredient(ingredient), className: selectedIngredients.includes(ingredient) ? 'selected' : '', "data-testid": `ingredient-${ingredient.toLowerCase()}`, children: ingredient }, ingredient))) }), (0, jsx_runtime_1.jsxs)("div", { "data-testid": 'selected-ingredients', children: ["Selected: ", selectedIngredients.join(', ')] })] }));
    };
});
jest.mock('@/components/CookingMethodsSection', () => {
    return function MockCookingMethodsSection({ maxDisplayed = 6, onViewMore, }) {
        const [selectedMethod, setSelectedMethod] = react_1.default.useState(null);
        const methods = [
            'Sauté',
            'Roast',
            'Grill',
            'Steam',
            'Braise',
            'Stir-fry',
            'Bake',
            'Poach',
        ];
        const displayedMethods = methods.slice(0, maxDisplayed);
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'cooking-methods', children: [(0, jsx_runtime_1.jsx)("h3", { children: "Cooking Methods" }), (0, jsx_runtime_1.jsx)("div", { className: 'methods-list', children: displayedMethods.map(method => ((0, jsx_runtime_1.jsx)("button", { onClick: () => setSelectedMethod(method), className: selectedMethod === method ? 'selected' : '', "data-testid": `method-${method.toLowerCase()}`, children: method }, method))) }), selectedMethod && ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'selected-method', children: ["Selected: ", selectedMethod] })), (0, jsx_runtime_1.jsx)("button", { onClick: onViewMore, "data-testid": 'view-more-methods', children: "View More Methods" })] }));
    };
});
jest.mock('@/components/recipes/RecipeBuilderSimple', () => {
    return function MockRecipeBuilderSimple() {
        const [recipeName, setRecipeName] = react_1.default.useState('');
        const [ingredients, setIngredients] = react_1.default.useState([]);
        const [steps, setSteps] = react_1.default.useState([]);
        const addIngredient = () => {
            setIngredients(prev => [...prev, `Ingredient ${prev.length + 1}`]);
        };
        const addStep = () => {
            setSteps(prev => [...prev, `Step ${prev.length + 1}`]);
        };
        const canSave = recipeName.trim() && ingredients.length > 0 && steps.length > 0;
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'recipe-builder', children: [(0, jsx_runtime_1.jsx)("h3", { children: "Recipe Builder" }), (0, jsx_runtime_1.jsx)("input", { type: 'text', placeholder: 'Recipe Name', value: recipeName, onChange: e => setRecipeName(e.target.value), "data-testid": 'recipe-name-input' }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { onClick: addIngredient, "data-testid": 'add-ingredient', children: "Add Ingredient" }), (0, jsx_runtime_1.jsxs)("div", { "data-testid": 'ingredients-count', children: ["Ingredients: ", ingredients.length] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { onClick: addStep, "data-testid": 'add-step', children: "Add Step" }), (0, jsx_runtime_1.jsxs)("div", { "data-testid": 'steps-count', children: ["Steps: ", steps.length] })] }), (0, jsx_runtime_1.jsx)("button", { disabled: !canSave, "data-testid": 'save-recipe', children: "Save Recipe" })] }));
    };
});
jest.mock('@/components/debug/ConsolidatedDebugInfo', () => {
    return function MockConsolidatedDebugInfo() {
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'debug-info', children: [(0, jsx_runtime_1.jsx)("h4", { children: "Debug Panel" }), (0, jsx_runtime_1.jsx)("div", { children: "Performance: OK" }), (0, jsx_runtime_1.jsx)("div", { children: "Astrological State: Active" })] }));
    };
});
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const MainPageLayout_1 = __importDefault(require("@/components/layout/MainPageLayout"));
const hooks_1 = require("@/contexts/AlchemicalContext/hooks");
const useStatePreservation_1 = require("@/hooks/useStatePreservation");
describe('Main Page Integration Tests', () => {
    const mockAlchemicalContext = {
        state: {
            astrologicalState: {
                sunSign: 'aries',
            },
            elementalState: {
                Fire: 0.3,
                Water: 0.2,
                Earth: 0.3,
                Air: 0.2,
            },
        },
        planetaryPositions: {
            sun: { sign: 'aries' },
        },
        isDaytime: true,
    };
    const mockNavigationState = {
        saveState: jest.fn(),
        getState: jest.fn(() => ({})),
    };
    const mockScrollPreservation = {
        restoreScrollPosition: jest.fn(),
    };
    beforeEach(() => {
        jest.clearAllMocks();
        hooks_1.useAlchemical.mockReturnValue(mockAlchemicalContext);
        useStatePreservation_1.useNavigationState.mockReturnValue(mockNavigationState);
        useStatePreservation_1.useScrollPreservation.mockReturnValue(mockScrollPreservation);
        useStatePreservation_1.useAutoStateCleanup.mockReturnValue(undefined);
        // Mock window.scrollY
        Object.defineProperty(window, 'scrollY', {
            value: 0,
            writable: true,
        });
        // Mock getElementById for navigation
        jest.spyOn(document, 'getElementById').mockImplementation(id => ({
            scrollIntoView: jest.fn(),
            style: {},
            classList: {
                add: jest.fn(),
                remove: jest.fn(),
            },
        }));
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
    it('renders all main sections and they interact correctly', async () => {
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        // Wait for all components to load
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByTestId('cuisine-recommender')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('ingredient-recommender')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('cooking-methods')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('recipe-builder')).toBeInTheDocument();
        });
        // Test cuisine selection
        const italianButton = react_2.screen.getByTestId('cuisine-italian');
        await (0, react_2.act)(async () => {
            react_2.fireEvent.click(italianButton);
        });
        expect(react_2.screen.getByText('Selected: Italian')).toBeInTheDocument();
        // Test ingredient selection
        const tomatoButton = react_2.screen.getByTestId('ingredient-tomatoes');
        await (0, react_2.act)(async () => {
            react_2.fireEvent.click(tomatoButton);
        });
        expect(react_2.screen.getByText('Selected: Tomatoes')).toBeInTheDocument();
        // Test cooking method selection
        const sauteButton = react_2.screen.getByTestId('method-sauté');
        await (0, react_2.act)(async () => {
            react_2.fireEvent.click(sauteButton);
        });
        expect(react_2.screen.getByText('Selected: Sauté')).toBeInTheDocument();
    });
    it('handles navigation between sections correctly', async () => {
        const mockOnSectionNavigate = jest.fn();
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { onSectionNavigate: mockOnSectionNavigate }));
        });
        // Test navigation to cuisine section
        const cuisineNavButton = react_2.screen.getByText('Cuisine Recommendations');
        await (0, react_2.act)(async () => {
            react_2.fireEvent.click(cuisineNavButton);
        });
        expect(mockOnSectionNavigate).toHaveBeenCalledWith('cuisine');
        // Test navigation to ingredients section
        const ingredientsNavButton = react_2.screen.getByText('Ingredient Recommendations');
        await (0, react_2.act)(async () => {
            react_2.fireEvent.click(ingredientsNavButton);
        });
        expect(mockOnSectionNavigate).toHaveBeenCalledWith('ingredients');
    });
    it('preserves state across component interactions', async () => {
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByTestId('cuisine-recommender')).toBeInTheDocument();
        });
        // Make selections in different components
        const italianButton = react_2.screen.getByTestId('cuisine-italian');
        const tomatoButton = react_2.screen.getByTestId('ingredient-tomatoes');
        const sauteButton = react_2.screen.getByTestId('method-sauté');
        await (0, react_2.act)(async () => {
            react_2.fireEvent.click(italianButton);
            react_2.fireEvent.click(tomatoButton);
            react_2.fireEvent.click(sauteButton);
        });
        // Verify selections are maintained
        expect(react_2.screen.getByText('Selected: Italian')).toBeInTheDocument();
        expect(react_2.screen.getByText('Selected: Tomatoes')).toBeInTheDocument();
        expect(react_2.screen.getByText('Selected: Sauté')).toBeInTheDocument();
        // Verify state saving was called
        await (0, react_2.waitFor)(() => {
            expect(mockNavigationState.saveState).toHaveBeenCalled();
        });
    });
    it('handles recipe building workflow', async () => {
        const user = user_event_1.default.setup();
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByTestId('recipe-builder')).toBeInTheDocument();
        });
        // Enter recipe name
        const recipeNameInput = react_2.screen.getByTestId('recipe-name-input');
        await user.type(recipeNameInput, 'Test Recipe');
        // Add ingredients and steps
        const addIngredientButton = react_2.screen.getByTestId('add-ingredient');
        const addStepButton = react_2.screen.getByTestId('add-step');
        await user.click(addIngredientButton);
        await user.click(addIngredientButton);
        await user.click(addStepButton);
        // Verify counts
        expect(react_2.screen.getByText('Ingredients: 2')).toBeInTheDocument();
        expect(react_2.screen.getByText('Steps: 1')).toBeInTheDocument();
        // Save button should be enabled
        const saveButton = react_2.screen.getByTestId('save-recipe');
        expect(saveButton).toBeEnabled();
    });
    it('handles error states gracefully', async () => {
        // Mock console.error to avoid noise in test output
        const consoleSpy = jest
            .spyOn(console, 'error')
            .mockImplementation(() => { });
        // Create a component that throws an error
        const ErrorComponent = () => {
            throw new Error('Test integration error');
        };
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { children: (0, jsx_runtime_1.jsx)(ErrorComponent, {}) }));
        });
        // Main page should still render despite the error
        expect(react_2.screen.getByText('What to Eat Next')).toBeInTheDocument();
        consoleSpy.mockRestore();
    });
    it('displays debug information when enabled', async () => {
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: true }));
        });
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByTestId('debug-info')).toBeInTheDocument();
        });
        expect(react_2.screen.getByText('Debug Panel')).toBeInTheDocument();
        expect(react_2.screen.getByText('Performance: OK')).toBeInTheDocument();
        expect(react_2.screen.getByText('Astrological State: Active')).toBeInTheDocument();
    });
    it('handles component loading states', async () => {
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        // Initially should show loading states
        expect(react_2.screen.getByText('Loading Cuisine Recommender...')).toBeInTheDocument();
        expect(react_2.screen.getByText('Loading Ingredient Recommender...')).toBeInTheDocument();
        expect(react_2.screen.getByText('Loading Cooking Methods...')).toBeInTheDocument();
        expect(react_2.screen.getByText('Loading Recipe Builder...')).toBeInTheDocument();
        // Wait for components to load
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByTestId('cuisine-recommender')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('ingredient-recommender')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('cooking-methods')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('recipe-builder')).toBeInTheDocument();
        });
    });
    it('handles cross-component data flow', async () => {
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByTestId('ingredient-recommender')).toBeInTheDocument();
        });
        // Select multiple ingredients
        const tomatoButton = react_2.screen.getByTestId('ingredient-tomatoes');
        const onionButton = react_2.screen.getByTestId('ingredient-onions');
        const garlicButton = react_2.screen.getByTestId('ingredient-garlic');
        await (0, react_2.act)(async () => {
            react_2.fireEvent.click(tomatoButton);
            react_2.fireEvent.click(onionButton);
            react_2.fireEvent.click(garlicButton);
        });
        // Verify multiple selections
        expect(react_2.screen.getByText('Selected: Tomatoes, Onions, Garlic')).toBeInTheDocument();
        // This should trigger state preservation
        await (0, react_2.waitFor)(() => {
            expect(mockNavigationState.saveState).toHaveBeenCalled();
        });
    });
    it('handles view more navigation', async () => {
        const mockRouter = {
            push: jest.fn(),
        };
        // We need to mock the router for this specific test
        jest.doMock('next/navigation', () => ({
            useRouter: () => mockRouter,
        }));
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByTestId('cooking-methods')).toBeInTheDocument();
        });
        const viewMoreButton = react_2.screen.getByTestId('view-more-methods');
        await (0, react_2.act)(async () => {
            react_2.fireEvent.click(viewMoreButton);
        });
        expect(mockRouter.push).toHaveBeenCalledWith('/cooking-methods');
    });
    it('maintains responsive behavior', async () => {
        // Mock window.innerWidth for responsive testing
        Object.defineProperty(window, 'innerWidth', {
            writable: true,
            configurable: true,
            value: 768,
        });
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        // The layout should adapt to different screen sizes
        // This is more of a visual test, but we can verify the structure is present
        expect(react_2.screen.getByText('What to Eat Next')).toBeInTheDocument();
        expect(react_2.screen.getByRole('main')).toBeInTheDocument();
        expect(react_2.screen.getByRole('navigation')).toBeInTheDocument();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,