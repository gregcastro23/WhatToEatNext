{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/__tests__/CulturalAnalyticsService.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/__tests__/CulturalAnalyticsService.test.ts"],"sourcesContent":["// Test file for Cultural Analytics Service\nimport { CulturalAnalyticsService } from '../CulturalAnalyticsService';\nimport { ElementalProperties } from '@/types/alchemy';\n\ndescribe('CulturalAnalyticsService', () => {\n  const mockElementalProfile: ElementalProperties = {\n    Fire: 0.3,\n    Water: 0.2,\n    Earth: 0.3,\n    Air: 0.2\n  };\n\n  const mockAstrologicalState = {\n    zodiacSign: 'aries' as const,\n    lunarPhase: 'new moon' as const\n  };\n\n  describe('calculateCulturalSynergy', () => {\n    it('should calculate cultural synergy for a single cuisine', () => {\n      const result = CulturalAnalyticsService.calculateCulturalSynergy('japanese');\n      \n      expect(result.score).toBeGreaterThanOrEqual(0.7);\n      expect(result.score).toBeLessThanOrEqual(1.0);\n      expect(result.culturalGroup).toBe('east_asian');\n      expect(Array.isArray(result.reasoning)).toBe(true);\n    });\n\n    it('should provide proximity bonus for same cultural group cuisines', () => {\n      const result = CulturalAnalyticsService.calculateCulturalSynergy(\n        'japanese',\n        ['chinese', 'korean']\n      );\n      \n      expect(result.proximityBonus).toBeGreaterThan(0);\n      expect(result.score).toBeGreaterThan(0.7);\n    });\n\n    it('should provide diversity bonus for different cultural groups', () => {\n      const result = CulturalAnalyticsService.calculateCulturalSynergy(\n        'japanese',\n        ['italian', 'mexican']\n      );\n      \n      expect(result.diversityBonus).toBeGreaterThan(0);\n      expect(result.score).toBeGreaterThan(0.7);\n    });\n  });\n\n  describe('generateCulturalAnalytics', () => {\n    it('should generate comprehensive cultural analytics', () => {\n      const result = CulturalAnalyticsService.generateCulturalAnalytics(\n        'japanese',\n        mockElementalProfile,\n        mockAstrologicalState\n      );\n      \n      expect(result.culturalSynergy).toBeGreaterThanOrEqual(0.5);\n      expect(result.culturalCompatibility).toBeGreaterThanOrEqual(0.5);\n      expect(result.historicalSignificance).toContain('japanese');\n      expect(result.culturalContext).toContain('japanese');\n      expect(result.fusionPotential).toBeGreaterThanOrEqual(0.5);\n      expect(result.culturalDiversityScore).toBeGreaterThanOrEqual(0.3);\n      expect(Array.isArray(result.traditionalPrinciples)).toBe(true);\n      expect(Array.isArray(result.modernAdaptations)).toBe(true);\n    });\n\n    it('should handle unknown cuisines gracefully', () => {\n      const result = CulturalAnalyticsService.generateCulturalAnalytics(\n        'unknown_cuisine',\n        mockElementalProfile,\n        mockAstrologicalState\n      );\n      \n      expect(result.culturalSynergy).toBe(0.7);\n      expect(result.culturalCompatibility).toBe(0.7);\n      expect(result.historicalSignificance).toContain('unknown_cuisine');\n    });\n  });\n\n  describe('generateFusionRecommendations', () => {\n    it('should generate fusion recommendations', () => {\n      const availableCuisines = ['japanese', 'italian', 'mexican', 'chinese'];\n      const result = CulturalAnalyticsService.generateFusionRecommendations(\n        'japanese',\n        availableCuisines,\n        2\n      );\n      \n      expect(Array.isArray(result)).toBe(true);\n      expect(result.length).toBeLessThanOrEqual(2);\n      \n      if (result.length > 0) {\n        const fusion = result[0];\n        expect(fusion.name).toBeDefined();\n        expect(fusion.parentCuisines).toContain('japanese');\n        expect(fusion.fusionScore).toBeGreaterThanOrEqual(0.6);\n        expect(fusion.culturalHarmony).toBeGreaterThanOrEqual(0.6);\n        expect(Array.isArray(fusion.recommendedDishes)).toBe(true);\n        expect(Array.isArray(fusion.culturalNotes)).toBe(true);\n      }\n    });\n\n    it('should return empty array for poor fusion potential', () => {\n      const result = CulturalAnalyticsService.generateFusionRecommendations(\n        'japanese',\n        ['japanese'], // Same cuisine only\n        3\n      );\n      \n      expect(result).toEqual([]);\n    });\n  });\n});"],"version":3}