9e88f667506caa7fb033d9060ef2cbee
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock logger
jest.mock('@/utils/logger', () => ({
    logger: {
        info: jest.fn(),
        warn: jest.fn(),
        error: jest.fn(),
        debug: jest.fn()
    }
}));
const errorHandling_1 = require("../errorHandling");
describe('Error Classification', () => {
    it('classifies network errors correctly', () => {
        expect((0, errorHandling_1.classifyError)('Network error occurred')).toBe(errorHandling_1.ErrorType.NETWORK);
        expect((0, errorHandling_1.classifyError)('Failed to fetch')).toBe(errorHandling_1.ErrorType.NETWORK);
        expect((0, errorHandling_1.classifyError)('Connection timeout')).toBe(errorHandling_1.ErrorType.NETWORK);
    });
    it('classifies validation errors correctly', () => {
        expect((0, errorHandling_1.classifyError)('Validation failed')).toBe(errorHandling_1.ErrorType.VALIDATION);
        expect((0, errorHandling_1.classifyError)('Invalid input provided')).toBe(errorHandling_1.ErrorType.VALIDATION);
    });
    it('classifies authentication errors correctly', () => {
        expect((0, errorHandling_1.classifyError)('Unauthorized access')).toBe(errorHandling_1.ErrorType.AUTHENTICATION);
        expect((0, errorHandling_1.classifyError)('Authentication required')).toBe(errorHandling_1.ErrorType.AUTHENTICATION);
    });
    it('classifies authorization errors correctly', () => {
        expect((0, errorHandling_1.classifyError)('Forbidden resource')).toBe(errorHandling_1.ErrorType.AUTHORIZATION);
        expect((0, errorHandling_1.classifyError)('Permission denied')).toBe(errorHandling_1.ErrorType.AUTHORIZATION);
    });
    it('classifies not found errors correctly', () => {
        expect((0, errorHandling_1.classifyError)('Resource not found')).toBe(errorHandling_1.ErrorType.NOT_FOUND);
        expect((0, errorHandling_1.classifyError)('404 error')).toBe(errorHandling_1.ErrorType.NOT_FOUND);
    });
    it('classifies server errors correctly', () => {
        expect((0, errorHandling_1.classifyError)('Internal server error')).toBe(errorHandling_1.ErrorType.SERVER_ERROR);
        expect((0, errorHandling_1.classifyError)('500 error occurred')).toBe(errorHandling_1.ErrorType.SERVER_ERROR);
        expect((0, errorHandling_1.classifyError)('Service unavailable 503')).toBe(errorHandling_1.ErrorType.SERVER_ERROR);
    });
    it('classifies astrological errors correctly', () => {
        expect((0, errorHandling_1.classifyError)('Planetary calculation failed')).toBe(errorHandling_1.ErrorType.ASTROLOGICAL_CALCULATION);
        expect((0, errorHandling_1.classifyError)('Astrological data unavailable')).toBe(errorHandling_1.ErrorType.ASTROLOGICAL_CALCULATION);
        expect((0, errorHandling_1.classifyError)('Zodiac sign error')).toBe(errorHandling_1.ErrorType.ASTROLOGICAL_CALCULATION);
    });
    it('classifies component errors correctly', () => {
        expect((0, errorHandling_1.classifyError)('Component failed to render')).toBe(errorHandling_1.ErrorType.COMPONENT_ERROR);
        expect((0, errorHandling_1.classifyError)('Render error occurred')).toBe(errorHandling_1.ErrorType.COMPONENT_ERROR);
    });
    it('defaults to unknown for unclassified errors', () => {
        expect((0, errorHandling_1.classifyError)('Some random error')).toBe(errorHandling_1.ErrorType.UNKNOWN);
        expect((0, errorHandling_1.classifyError)('')).toBe(errorHandling_1.ErrorType.UNKNOWN);
    });
});
describe('Enhanced Error Creation', () => {
    it('creates enhanced error with all properties', () => {
        const context = { userId: '123', action: 'test' };
        const error = (0, errorHandling_1.createEnhancedError)('Test error message', errorHandling_1.ErrorType.VALIDATION, errorHandling_1.ErrorSeverity.HIGH, context);
        expect(error.message).toBe('Test error message');
        expect(error.type).toBe(errorHandling_1.ErrorType.VALIDATION);
        expect(error.severity).toBe(errorHandling_1.ErrorSeverity.HIGH);
        expect(error.context).toEqual(context);
        expect(error.userMessage).toBe('Please check your input and try again.');
        expect(error.recoverable).toBe(false);
        expect(error.retryable).toBe(false);
        expect(error.timestamp).toBeInstanceOf(Date);
        expect(error.errorId).toMatch(/^error_\d+_[a-z0-9]+$/);
    });
    it('sets recoverable flag correctly for different error types', () => {
        const networkError = (0, errorHandling_1.createEnhancedError)('Network error', errorHandling_1.ErrorType.NETWORK);
        const astroError = (0, errorHandling_1.createEnhancedError)('Astro error', errorHandling_1.ErrorType.ASTROLOGICAL_CALCULATION);
        const validationError = (0, errorHandling_1.createEnhancedError)('Validation error', errorHandling_1.ErrorType.VALIDATION);
        expect(networkError.recoverable).toBe(true);
        expect(astroError.recoverable).toBe(true);
        expect(validationError.recoverable).toBe(false);
    });
    it('sets retryable flag correctly for different error types', () => {
        const networkError = (0, errorHandling_1.createEnhancedError)('Network error', errorHandling_1.ErrorType.NETWORK);
        const serverError = (0, errorHandling_1.createEnhancedError)('Server error', errorHandling_1.ErrorType.SERVER_ERROR);
        const validationError = (0, errorHandling_1.createEnhancedError)('Validation error', errorHandling_1.ErrorType.VALIDATION);
        expect(networkError.retryable).toBe(true);
        expect(serverError.retryable).toBe(true);
        expect(validationError.retryable).toBe(false);
    });
    it('preserves original error stack', () => {
        const originalError = new Error('Original error');
        const enhancedError = (0, errorHandling_1.createEnhancedError)('Enhanced error', errorHandling_1.ErrorType.UNKNOWN, errorHandling_1.ErrorSeverity.MEDIUM, {}, originalError);
        expect(enhancedError.stack).toBe(originalError.stack);
        expect(enhancedError.cause).toBe(originalError);
    });
});
describe('ErrorHandler', () => {
    let errorHandler;
    beforeEach(() => {
        errorHandler = new errorHandling_1.ErrorHandler();
        jest.clearAllMocks();
    });
    it('handles errors and logs them correctly', async () => {
        const testError = new Error('Test error');
        try {
            await errorHandler.handleError(testError);
        }
        catch (enhancedError) {
            expect(enhancedError.message).toBe('Test error');
            expect(enhancedError.type).toBe(errorHandling_1.ErrorType.UNKNOWN);
            expect(enhancedError.errorId).toBeDefined();
        }
    });
    it('attempts recovery with registered strategies', async () => {
        const mockRecoveryStrategy = {
            canRecover: jest.fn(() => true),
            recover: jest.fn(() => Promise.resolve('recovered data')),
            fallback: jest.fn(() => 'fallback data')
        };
        errorHandler.addRecoveryStrategy(mockRecoveryStrategy);
        const testError = new Error('Test error');
        const result = await errorHandler.handleError(testError);
        expect(mockRecoveryStrategy.canRecover).toHaveBeenCalled();
        expect(mockRecoveryStrategy.recover).toHaveBeenCalled();
        expect(result).toBe('recovered data');
    });
    it('uses fallback when recovery fails', async () => {
        const mockRecoveryStrategy = {
            canRecover: jest.fn(() => true),
            recover: jest.fn(() => Promise.reject(new Error('Recovery failed'))),
            fallback: jest.fn(() => 'fallback data')
        };
        errorHandler.addRecoveryStrategy(mockRecoveryStrategy);
        const testError = new Error('Test error');
        const result = await errorHandler.handleError(testError);
        expect(mockRecoveryStrategy.canRecover).toHaveBeenCalled();
        expect(mockRecoveryStrategy.recover).toHaveBeenCalled();
        expect(mockRecoveryStrategy.fallback).toHaveBeenCalled();
        expect(result).toBe('fallback data');
    });
    it('throws enhanced error when no recovery is possible', async () => {
        const testError = new Error('Test error');
        await expect(errorHandler.handleError(testError)).rejects.toThrow('Test error');
    });
    it('tracks error statistics correctly', async () => {
        const errors = [
            new Error('Network error'),
            new Error('Validation failed'),
            new Error('Network timeout')
        ];
        for (const error of errors) {
            try {
                await errorHandler.handleError(error);
            }
            catch (_a) {
                // Expected to throw
            }
        }
        const stats = errorHandler.getErrorStats();
        expect(stats.total).toBe(3);
        expect(stats.byType[errorHandling_1.ErrorType.NETWORK]).toBe(2);
        expect(stats.byType[errorHandling_1.ErrorType.VALIDATION]).toBe(1);
        expect(stats.recent).toHaveLength(3);
    });
    it('maintains error queue size limit', async () => {
        // Create more errors than the max queue size (50)
        const promises = [];
        for (let i = 0; i < 60; i++) {
            promises.push(errorHandler.handleError(new Error(`Error ${i}`)).catch(() => { }));
        }
        await Promise.all(promises);
        const stats = errorHandler.getErrorStats();
        expect(stats.total).toBe(50); // Should be capped at max size
    });
    it('clears error queue', async () => {
        try {
            await errorHandler.handleError(new Error('Test error'));
        }
        catch (_a) {
            // Expected to throw
        }
        let stats = errorHandler.getErrorStats();
        expect(stats.total).toBe(1);
        errorHandler.clearErrorQueue();
        stats = errorHandler.getErrorStats();
        expect(stats.total).toBe(0);
    });
});
describe('Global Error Handler', () => {
    beforeEach(() => {
        errorHandling_1.globalErrorHandler.clearErrorQueue();
        jest.clearAllMocks();
    });
    it('has default recovery strategies', async () => {
        // Test astrological calculation recovery
        const astroError = (0, errorHandling_1.createEnhancedError)('Planetary calculation failed', errorHandling_1.ErrorType.ASTROLOGICAL_CALCULATION);
        // Mock localStorage
        const mockLocalStorage = {
            getItem: jest.fn(() => JSON.stringify({ zodiacSign: 'aries' })),
            setItem: jest.fn()
        };
        Object.defineProperty(window, 'localStorage', { value: mockLocalStorage });
        const result = await errorHandling_1.globalErrorHandler.handleError(astroError);
        expect(result).toEqual({ zodiacSign: 'aries' });
    });
    it('uses fallback when cached data is not available', async () => {
        const astroError = (0, errorHandling_1.createEnhancedError)('Planetary calculation failed', errorHandling_1.ErrorType.ASTROLOGICAL_CALCULATION);
        // Mock localStorage with no cached data
        const mockLocalStorage = {
            getItem: jest.fn(() => null),
            setItem: jest.fn()
        };
        Object.defineProperty(window, 'localStorage', { value: mockLocalStorage });
        const result = await errorHandling_1.globalErrorHandler.handleError(astroError);
        expect(result).toEqual({
            zodiacSign: 'aries',
            lunarPhase: 'new moon',
            elementalState: { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 }
        });
    });
});
describe('Utility Functions', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('handleAsyncError wraps promises with error handling', async () => {
        const successPromise = Promise.resolve('success');
        const result = await (0, errorHandling_1.handleAsyncError)(successPromise);
        expect(result).toBe('success');
        const failurePromise = Promise.reject(new Error('async error'));
        await expect((0, errorHandling_1.handleAsyncError)(failurePromise)).rejects.toThrow();
    });
    it('handleSyncError wraps synchronous functions with error handling', () => {
        const successFn = () => 'success';
        const result = (0, errorHandling_1.handleSyncError)(successFn);
        expect(result).toBe('success');
        const failureFn = () => {
            throw new Error('sync error');
        };
        expect(() => (0, errorHandling_1.handleSyncError)(failureFn)).toThrow();
    });
    it('handleAsyncError passes context to error handler', async () => {
        const context = { operation: 'test' };
        const failurePromise = Promise.reject(new Error('async error'));
        try {
            await (0, errorHandling_1.handleAsyncError)(failurePromise, context);
        }
        catch (error) {
            expect(error.context).toEqual(context);
        }
    });
    it('handleSyncError passes context to error handler', () => {
        const context = { operation: 'test' };
        const failureFn = () => {
            throw new Error('sync error');
        };
        try {
            (0, errorHandling_1.handleSyncError)(failureFn, context);
        }
        catch (error) {
            expect(error.context).toEqual(context);
        }
    });
});
describe('Error Severity Determination', () => {
    it('assigns correct severity levels', () => {
        const authError = (0, errorHandling_1.createEnhancedError)('Auth error', errorHandling_1.ErrorType.AUTHENTICATION);
        const networkError = (0, errorHandling_1.createEnhancedError)('Network error', errorHandling_1.ErrorType.NETWORK);
        const validationError = (0, errorHandling_1.createEnhancedError)('Validation error', errorHandling_1.ErrorType.VALIDATION);
        const serverError = (0, errorHandling_1.createEnhancedError)('Server error', errorHandling_1.ErrorType.SERVER_ERROR);
        expect(authError.severity).toBe(errorHandling_1.ErrorSeverity.HIGH);
        expect(networkError.severity).toBe(errorHandling_1.ErrorSeverity.MEDIUM);
        expect(validationError.severity).toBe(errorHandling_1.ErrorSeverity.LOW);
        expect(serverError.severity).toBe(errorHandling_1.ErrorSeverity.HIGH);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,