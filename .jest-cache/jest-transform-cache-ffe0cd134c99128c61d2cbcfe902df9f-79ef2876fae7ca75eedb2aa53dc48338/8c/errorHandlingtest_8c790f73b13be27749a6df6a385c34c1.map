{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/__tests__/errorHandling.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/__tests__/errorHandling.test.ts"],"sourcesContent":["import {\n  ErrorType,\n  ErrorSeverity,\n  createEnhancedError,\n  classifyError,\n  ErrorHandler,\n  globalErrorHandler,\n  handleAsyncError,\n  handleSyncError\n} from '../errorHandling';\n\n// Mock logger\njest.mock('@/utils/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    debug: jest.fn()\n  }\n}));\n\ndescribe('Error Classification', () => {\n  it('classifies network errors correctly', () => {\n    expect(classifyError('Network error occurred')).toBe(ErrorType.NETWORK);\n    expect(classifyError('Failed to fetch')).toBe(ErrorType.NETWORK);\n    expect(classifyError('Connection timeout')).toBe(ErrorType.NETWORK);\n  });\n\n  it('classifies validation errors correctly', () => {\n    expect(classifyError('Validation failed')).toBe(ErrorType.VALIDATION);\n    expect(classifyError('Invalid input provided')).toBe(ErrorType.VALIDATION);\n  });\n\n  it('classifies authentication errors correctly', () => {\n    expect(classifyError('Unauthorized access')).toBe(ErrorType.AUTHENTICATION);\n    expect(classifyError('Authentication required')).toBe(ErrorType.AUTHENTICATION);\n  });\n\n  it('classifies authorization errors correctly', () => {\n    expect(classifyError('Forbidden resource')).toBe(ErrorType.AUTHORIZATION);\n    expect(classifyError('Permission denied')).toBe(ErrorType.AUTHORIZATION);\n  });\n\n  it('classifies not found errors correctly', () => {\n    expect(classifyError('Resource not found')).toBe(ErrorType.NOT_FOUND);\n    expect(classifyError('404 error')).toBe(ErrorType.NOT_FOUND);\n  });\n\n  it('classifies server errors correctly', () => {\n    expect(classifyError('Internal server error')).toBe(ErrorType.SERVER_ERROR);\n    expect(classifyError('500 error occurred')).toBe(ErrorType.SERVER_ERROR);\n    expect(classifyError('Service unavailable 503')).toBe(ErrorType.SERVER_ERROR);\n  });\n\n  it('classifies astrological errors correctly', () => {\n    expect(classifyError('Planetary calculation failed')).toBe(ErrorType.ASTROLOGICAL_CALCULATION);\n    expect(classifyError('Astrological data unavailable')).toBe(ErrorType.ASTROLOGICAL_CALCULATION);\n    expect(classifyError('Zodiac sign error')).toBe(ErrorType.ASTROLOGICAL_CALCULATION);\n  });\n\n  it('classifies component errors correctly', () => {\n    expect(classifyError('Component failed to render')).toBe(ErrorType.COMPONENT_ERROR);\n    expect(classifyError('Render error occurred')).toBe(ErrorType.COMPONENT_ERROR);\n  });\n\n  it('defaults to unknown for unclassified errors', () => {\n    expect(classifyError('Some random error')).toBe(ErrorType.UNKNOWN);\n    expect(classifyError('')).toBe(ErrorType.UNKNOWN);\n  });\n});\n\ndescribe('Enhanced Error Creation', () => {\n  it('creates enhanced error with all properties', () => {\n    const context = { userId: '123', action: 'test' };\n    const error = createEnhancedError(\n      'Test error message',\n      ErrorType.VALIDATION,\n      ErrorSeverity.HIGH,\n      context\n    );\n\n    expect(error.message).toBe('Test error message');\n    expect(error.type).toBe(ErrorType.VALIDATION);\n    expect(error.severity).toBe(ErrorSeverity.HIGH);\n    expect(error.context).toEqual(context);\n    expect(error.userMessage).toBe('Please check your input and try again.');\n    expect(error.recoverable).toBe(false);\n    expect(error.retryable).toBe(false);\n    expect(error.timestamp).toBeInstanceOf(Date);\n    expect(error.errorId).toMatch(/^error_\\d+_[a-z0-9]+$/);\n  });\n\n  it('sets recoverable flag correctly for different error types', () => {\n    const networkError = createEnhancedError('Network error', ErrorType.NETWORK);\n    const astroError = createEnhancedError('Astro error', ErrorType.ASTROLOGICAL_CALCULATION);\n    const validationError = createEnhancedError('Validation error', ErrorType.VALIDATION);\n\n    expect(networkError.recoverable).toBe(true);\n    expect(astroError.recoverable).toBe(true);\n    expect(validationError.recoverable).toBe(false);\n  });\n\n  it('sets retryable flag correctly for different error types', () => {\n    const networkError = createEnhancedError('Network error', ErrorType.NETWORK);\n    const serverError = createEnhancedError('Server error', ErrorType.SERVER_ERROR);\n    const validationError = createEnhancedError('Validation error', ErrorType.VALIDATION);\n\n    expect(networkError.retryable).toBe(true);\n    expect(serverError.retryable).toBe(true);\n    expect(validationError.retryable).toBe(false);\n  });\n\n  it('preserves original error stack', () => {\n    const originalError = new Error('Original error');\n    const enhancedError = createEnhancedError(\n      'Enhanced error',\n      ErrorType.UNKNOWN,\n      ErrorSeverity.MEDIUM,\n      {},\n      originalError\n    );\n\n    expect(enhancedError.stack).toBe(originalError.stack);\n    expect(enhancedError.cause).toBe(originalError);\n  });\n});\n\ndescribe('ErrorHandler', () => {\n  let errorHandler: ErrorHandler;\n\n  beforeEach(() => {\n    errorHandler = new ErrorHandler();\n    jest.clearAllMocks();\n  });\n\n  it('handles errors and logs them correctly', async () => {\n    const testError = new Error('Test error');\n    \n    try {\n      await errorHandler.handleError(testError);\n    } catch (enhancedError: any) {\n      expect(enhancedError.message).toBe('Test error');\n      expect(enhancedError.type).toBe(ErrorType.UNKNOWN);\n      expect(enhancedError.errorId).toBeDefined();\n    }\n  });\n\n  it('attempts recovery with registered strategies', async () => {\n    const mockRecoveryStrategy = {\n      canRecover: jest.fn(() => true),\n      recover: jest.fn(() => Promise.resolve('recovered data')),\n      fallback: jest.fn(() => 'fallback data')\n    };\n\n    errorHandler.addRecoveryStrategy(mockRecoveryStrategy);\n\n    const testError = new Error('Test error');\n    const result = await errorHandler.handleError(testError);\n\n    expect(mockRecoveryStrategy.canRecover).toHaveBeenCalled();\n    expect(mockRecoveryStrategy.recover).toHaveBeenCalled();\n    expect(result).toBe('recovered data');\n  });\n\n  it('uses fallback when recovery fails', async () => {\n    const mockRecoveryStrategy = {\n      canRecover: jest.fn(() => true),\n      recover: jest.fn(() => Promise.reject(new Error('Recovery failed'))),\n      fallback: jest.fn(() => 'fallback data')\n    };\n\n    errorHandler.addRecoveryStrategy(mockRecoveryStrategy);\n\n    const testError = new Error('Test error');\n    const result = await errorHandler.handleError(testError);\n\n    expect(mockRecoveryStrategy.canRecover).toHaveBeenCalled();\n    expect(mockRecoveryStrategy.recover).toHaveBeenCalled();\n    expect(mockRecoveryStrategy.fallback).toHaveBeenCalled();\n    expect(result).toBe('fallback data');\n  });\n\n  it('throws enhanced error when no recovery is possible', async () => {\n    const testError = new Error('Test error');\n    \n    await expect(errorHandler.handleError(testError)).rejects.toThrow('Test error');\n  });\n\n  it('tracks error statistics correctly', async () => {\n    const errors = [\n      new Error('Network error'),\n      new Error('Validation failed'),\n      new Error('Network timeout')\n    ];\n\n    for (const error of errors) {\n      try {\n        await errorHandler.handleError(error);\n      } catch {\n        // Expected to throw\n      }\n    }\n\n    const stats = errorHandler.getErrorStats();\n    expect(stats.total).toBe(3);\n    expect(stats.byType[ErrorType.NETWORK]).toBe(2);\n    expect(stats.byType[ErrorType.VALIDATION]).toBe(1);\n    expect(stats.recent).toHaveLength(3);\n  });\n\n  it('maintains error queue size limit', async () => {\n    // Create more errors than the max queue size (50)\n    const promises = [];\n    for (let i = 0; i < 60; i++) {\n      promises.push(\n        errorHandler.handleError(new Error(`Error ${i}`)).catch(() => {})\n      );\n    }\n\n    await Promise.all(promises);\n\n    const stats = errorHandler.getErrorStats();\n    expect(stats.total).toBe(50); // Should be capped at max size\n  });\n\n  it('clears error queue', async () => {\n    try {\n      await errorHandler.handleError(new Error('Test error'));\n    } catch {\n      // Expected to throw\n    }\n\n    let stats = errorHandler.getErrorStats();\n    expect(stats.total).toBe(1);\n\n    errorHandler.clearErrorQueue();\n\n    stats = errorHandler.getErrorStats();\n    expect(stats.total).toBe(0);\n  });\n});\n\ndescribe('Global Error Handler', () => {\n  beforeEach(() => {\n    globalErrorHandler.clearErrorQueue();\n    jest.clearAllMocks();\n  });\n\n  it('has default recovery strategies', async () => {\n    // Test astrological calculation recovery\n    const astroError = createEnhancedError(\n      'Planetary calculation failed',\n      ErrorType.ASTROLOGICAL_CALCULATION\n    );\n\n    // Mock localStorage\n    const mockLocalStorage = {\n      getItem: jest.fn(() => JSON.stringify({ zodiacSign: 'aries' })),\n      setItem: jest.fn()\n    };\n    Object.defineProperty(window, 'localStorage', { value: mockLocalStorage });\n\n    const result = await globalErrorHandler.handleError(astroError);\n    expect(result).toEqual({ zodiacSign: 'aries' });\n  });\n\n  it('uses fallback when cached data is not available', async () => {\n    const astroError = createEnhancedError(\n      'Planetary calculation failed',\n      ErrorType.ASTROLOGICAL_CALCULATION\n    );\n\n    // Mock localStorage with no cached data\n    const mockLocalStorage = {\n      getItem: jest.fn(() => null),\n      setItem: jest.fn()\n    };\n    Object.defineProperty(window, 'localStorage', { value: mockLocalStorage });\n\n    const result = await globalErrorHandler.handleError(astroError);\n    expect(result).toEqual({\n      zodiacSign: 'aries',\n      lunarPhase: 'new moon',\n      elementalState: { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 }\n    });\n  });\n});\n\ndescribe('Utility Functions', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('handleAsyncError wraps promises with error handling', async () => {\n    const successPromise = Promise.resolve('success');\n    const result = await handleAsyncError(successPromise);\n    expect(result).toBe('success');\n\n    const failurePromise = Promise.reject(new Error('async error'));\n    await expect(handleAsyncError(failurePromise)).rejects.toThrow();\n  });\n\n  it('handleSyncError wraps synchronous functions with error handling', () => {\n    const successFn = () => 'success';\n    const result = handleSyncError(successFn);\n    expect(result).toBe('success');\n\n    const failureFn = () => {\n      throw new Error('sync error');\n    };\n    expect(() => handleSyncError(failureFn)).toThrow();\n  });\n\n  it('handleAsyncError passes context to error handler', async () => {\n    const context = { operation: 'test' };\n    const failurePromise = Promise.reject(new Error('async error'));\n    \n    try {\n      await handleAsyncError(failurePromise, context);\n    } catch (error: any) {\n      expect(error.context).toEqual(context);\n    }\n  });\n\n  it('handleSyncError passes context to error handler', () => {\n    const context = { operation: 'test' };\n    const failureFn = () => {\n      throw new Error('sync error');\n    };\n    \n    try {\n      handleSyncError(failureFn, context);\n    } catch (error: any) {\n      expect(error.context).toEqual(context);\n    }\n  });\n});\n\ndescribe('Error Severity Determination', () => {\n  it('assigns correct severity levels', () => {\n    const authError = createEnhancedError('Auth error', ErrorType.AUTHENTICATION);\n    const networkError = createEnhancedError('Network error', ErrorType.NETWORK);\n    const validationError = createEnhancedError('Validation error', ErrorType.VALIDATION);\n    const serverError = createEnhancedError('Server error', ErrorType.SERVER_ERROR);\n\n    expect(authError.severity).toBe(ErrorSeverity.HIGH);\n    expect(networkError.severity).toBe(ErrorSeverity.MEDIUM);\n    expect(validationError.severity).toBe(ErrorSeverity.LOW);\n    expect(serverError.severity).toBe(ErrorSeverity.HIGH);\n  });\n});"],"version":3}