{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/statePreservation.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/statePreservation.ts"],"sourcesContent":["/**\n * State Preservation Utility\n * Handles saving and restoring component state across navigation\n */\n\nexport interface ComponentState {\n  timestamp: number;\n  data: any;\n}\n\nexport interface NavigationState {\n  activeSection: string | null;\n  navigationHistory: string[];\n  selectedIngredients: string[];\n  selectedCuisine: string | null;\n  selectedCookingMethods: string[];\n  currentRecipe: any | null;\n  selectedIngredientCategory: string | null;\n  selectedIngredient: string | null;\n  selectedCookingMethod: any | null;\n  scrollPosition: number;\n}\n\nconst STATE_KEYS = {\n  MAIN_PAGE_STATE: 'mainPageState',\n  NAVIGATION_STATE: 'navigationState',\n  COMPONENT_STATES: 'componentStates',\n  SCROLL_POSITIONS: 'scrollPositions',\n} as const;\n\n// State expiration time (1 hour)\nconst STATE_EXPIRATION_TIME = 60 * 60 * 1000;\n\n/**\n * Check if stored state is still valid (not expired)\n */\nfunction isStateValid(timestamp: number): boolean {\n  return Date.now() - timestamp < STATE_EXPIRATION_TIME;\n}\n\n/**\n * Safely get item from storage with error handling\n */\nfunction safeGetItem(key: string): string | null {\n  try {\n    return sessionStorage.getItem(key);\n  } catch (error) {\n    console.warn(`Failed to get item from sessionStorage: ${key}`, error);\n    return null;\n  }\n}\n\n/**\n * Safely set item in storage with error handling\n */\nfunction safeSetItem(key: string, value: string): boolean {\n  try {\n    sessionStorage.setItem(key, value);\n    return true;\n  } catch (error) {\n    console.warn(`Failed to set item in sessionStorage: ${key}`, error);\n    return false;\n  }\n}\n\n/**\n * Save navigation state\n */\nexport function saveNavigationState(state: Partial<NavigationState>): void {\n  const currentState = getNavigationState();\n  const updatedState: NavigationState = {\n    ...currentState,\n    ...state,\n  };\n\n  const stateWithTimestamp: ComponentState = {\n    timestamp: Date.now(),\n    data: updatedState,\n  };\n\n  safeSetItem(STATE_KEYS.NAVIGATION_STATE, JSON.stringify(stateWithTimestamp));\n}\n\n/**\n * Get navigation state\n */\nexport function getNavigationState(): NavigationState {\n  const defaultState: NavigationState = {\n    activeSection: null,\n    navigationHistory: [],\n    selectedIngredients: [],\n    selectedCuisine: null,\n    selectedCookingMethods: [],\n    currentRecipe: null,\n    selectedIngredientCategory: null,\n    selectedIngredient: null,\n    selectedCookingMethod: null,\n    scrollPosition: 0,\n  };\n\n  const stored = safeGetItem(STATE_KEYS.NAVIGATION_STATE);\n  if (!stored) return defaultState;\n\n  try {\n    const parsed: ComponentState = JSON.parse(stored);\n    if (!isStateValid(parsed.timestamp)) {\n      return defaultState;\n    }\n    return { ...defaultState, ...parsed.data };\n  } catch (error) {\n    console.warn('Failed to parse navigation state:', error);\n    return defaultState;\n  }\n}\n\n/**\n * Save component-specific state\n */\nexport function saveComponentState(componentId: string, state: any): void {\n  const allStates = getComponentStates();\n  allStates[componentId] = {\n    timestamp: Date.now(),\n    data: state,\n  };\n\n  safeSetItem(STATE_KEYS.COMPONENT_STATES, JSON.stringify(allStates));\n}\n\n/**\n * Get component-specific state\n */\nexport function getComponentState(componentId: string): any {\n  const allStates = getComponentStates();\n  const componentState = allStates[componentId];\n\n  if (!componentState || !isStateValid(componentState.timestamp)) {\n    return null;\n  }\n\n  return componentState.data;\n}\n\n/**\n * Get all component states\n */\nfunction getComponentStates(): Record<string, ComponentState> {\n  const stored = safeGetItem(STATE_KEYS.COMPONENT_STATES);\n  if (!stored) return {};\n\n  try {\n    return JSON.parse(stored);\n  } catch (error) {\n    console.warn('Failed to parse component states:', error);\n    return {};\n  }\n}\n\n/**\n * Save scroll position for a specific section\n */\nexport function saveScrollPosition(sectionId: string, position: number): void {\n  const positions = getScrollPositions();\n  positions[sectionId] = {\n    timestamp: Date.now(),\n    data: position,\n  };\n\n  safeSetItem(STATE_KEYS.SCROLL_POSITIONS, JSON.stringify(positions));\n}\n\n/**\n * Get scroll position for a specific section\n */\nexport function getScrollPosition(sectionId: string): number {\n  const positions = getScrollPositions();\n  const position = positions[sectionId];\n\n  if (!position || !isStateValid(position.timestamp)) {\n    return 0;\n  }\n\n  return position.data;\n}\n\n/**\n * Get all scroll positions\n */\nfunction getScrollPositions(): Record<string, ComponentState> {\n  const stored = safeGetItem(STATE_KEYS.SCROLL_POSITIONS);\n  if (!stored) return {};\n\n  try {\n    return JSON.parse(stored);\n  } catch (error) {\n    console.warn('Failed to parse scroll positions:', error);\n    return {};\n  }\n}\n\n/**\n * Clear all stored state (useful for cleanup)\n */\nexport function clearAllState(): void {\n  Object.values(STATE_KEYS).forEach(key => {\n    try {\n      sessionStorage.removeItem(key);\n    } catch (error) {\n      console.warn(`Failed to remove item from sessionStorage: ${key}`, error);\n    }\n  });\n}\n\n/**\n * Clear expired state entries\n */\nexport function clearExpiredState(): void {\n  // Clear expired navigation state\n  const navState = safeGetItem(STATE_KEYS.NAVIGATION_STATE);\n  if (navState) {\n    try {\n      const parsed: ComponentState = JSON.parse(navState);\n      if (!isStateValid(parsed.timestamp)) {\n        sessionStorage.removeItem(STATE_KEYS.NAVIGATION_STATE);\n      }\n    } catch (error) {\n      sessionStorage.removeItem(STATE_KEYS.NAVIGATION_STATE);\n    }\n  }\n\n  // Clear expired component states\n  const componentStates = getComponentStates();\n  const validStates: Record<string, ComponentState> = {};\n  let hasChanges = false;\n\n  Object.entries(componentStates).forEach(([key, state]) => {\n    if (isStateValid(state.timestamp)) {\n      validStates[key] = state;\n    } else {\n      hasChanges = true;\n    }\n  });\n\n  if (hasChanges) {\n    safeSetItem(STATE_KEYS.COMPONENT_STATES, JSON.stringify(validStates));\n  }\n\n  // Clear expired scroll positions\n  const scrollPositions = getScrollPositions();\n  const validPositions: Record<string, ComponentState> = {};\n  hasChanges = false;\n\n  Object.entries(scrollPositions).forEach(([key, position]) => {\n    if (isStateValid(position.timestamp)) {\n      validPositions[key] = position;\n    } else {\n      hasChanges = true;\n    }\n  });\n\n  if (hasChanges) {\n    safeSetItem(STATE_KEYS.SCROLL_POSITIONS, JSON.stringify(validPositions));\n  }\n}\n\n/**\n * Hook for automatic state cleanup on page load\n */\nexport function useStateCleanup(): void {\n  if (typeof window !== 'undefined') {\n    // Clear expired state on page load\n    clearExpiredState();\n\n    // Set up periodic cleanup (every 10 minutes)\n    const interval = setInterval(clearExpiredState, 10 * 60 * 1000);\n\n    // Cleanup on page unload\n    const cleanup = () => {\n      clearInterval(interval);\n      clearExpiredState();\n    };\n\n    window.addEventListener('beforeunload', cleanup);\n\n    // Return cleanup function\n    return cleanup;\n  }\n}\n\n/**\n * Create a state preservation hook for components\n */\nexport function createStatePreservationHook(componentId: string) {\n  return {\n    saveState: (state: any) => saveComponentState(componentId, state),\n    getState: () => getComponentState(componentId),\n    clearState: () => {\n      const allStates = getComponentStates();\n      delete allStates[componentId];\n      safeSetItem(STATE_KEYS.COMPONENT_STATES, JSON.stringify(allStates));\n    },\n  };\n}\n"],"version":3}