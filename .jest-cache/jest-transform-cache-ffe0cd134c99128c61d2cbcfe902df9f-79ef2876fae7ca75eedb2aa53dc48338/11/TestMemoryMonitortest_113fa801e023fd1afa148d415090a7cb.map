{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/TestMemoryMonitor.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/TestMemoryMonitor.test.ts"],"sourcesContent":["/**\n * Tests for TestMemoryMonitor class\n * \n * These tests verify that the memory management system works correctly\n * and can detect memory issues, perform cleanup, and track usage.\n */\n\nimport { TestMemoryMonitor } from './TestMemoryMonitor';\n\ndescribe('TestMemoryMonitor', () => {\n  let monitor: TestMemoryMonitor;\n\n  beforeEach(() => {\n    monitor = new TestMemoryMonitor({\n      warningThreshold: 50, // Reasonable thresholds for testing\n      errorThreshold: 200,\n      leakThreshold: 25\n    });\n  });\n\n  afterEach(() => {\n    if (monitor) {\n      monitor.cleanup('test-cleanup');\n    }\n  });\n\n  describe('Memory Snapshot Management', () => {\n    it('should take initial memory snapshot', () => {\n      const snapshot = monitor.takeSnapshot('test-snapshot');\n      \n      expect(snapshot).toBeDefined();\n      expect(snapshot.heapUsed).toBeGreaterThan(0);\n      expect(snapshot.heapTotal).toBeGreaterThan(0);\n      expect(snapshot.timestamp).toBeGreaterThan(0);\n      expect(snapshot.testName).toBe('test-snapshot');\n    });\n\n    it('should track multiple snapshots', () => {\n      monitor.takeSnapshot('snapshot-1');\n      monitor.takeSnapshot('snapshot-2');\n      monitor.takeSnapshot('snapshot-3');\n      \n      const summary = monitor.getMemorySummary();\n      expect(summary.snapshotCount).toBeGreaterThanOrEqual(4); // Including initial snapshot\n    });\n  });\n\n  describe('Memory Usage Checking', () => {\n    it('should check memory usage against thresholds', () => {\n      const result = monitor.checkMemoryUsage('threshold-test');\n      \n      expect(result).toBeDefined();\n      expect(result.isWithinLimits).toBeDefined();\n      expect(result.warnings).toBeInstanceOf(Array);\n      expect(result.errors).toBeInstanceOf(Array);\n      expect(result.currentUsage).toBeDefined();\n    });\n\n    it('should detect when memory usage is within limits', () => {\n      // For normal test execution, memory should be within limits\n      const result = monitor.checkMemoryUsage('normal-test');\n      \n      expect(result.isWithinLimits).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should generate warnings for high memory usage', () => {\n      // Create a monitor with very low thresholds to trigger warnings\n      const strictMonitor = new TestMemoryMonitor({\n        warningThreshold: 1, // 1MB - very low to trigger warning\n        errorThreshold: 1000,\n        leakThreshold: 1\n      });\n\n      const result = strictMonitor.checkMemoryUsage('warning-test');\n      \n      // Should generate warnings due to low threshold\n      expect(result.warnings.length).toBeGreaterThan(0);\n      \n      strictMonitor.cleanup('strict-cleanup');\n    });\n  });\n\n  describe('Memory Leak Detection', () => {\n    it('should detect potential memory leaks', () => {\n      // Take initial snapshot\n      monitor.takeSnapshot('leak-test-start');\n      \n      // Simulate memory allocation (create large array)\n      const largeArray = new Array(100000).fill('test-data');\n      \n      // Take another snapshot\n      monitor.takeSnapshot('leak-test-after-allocation');\n      \n      const leakAnalysis = monitor.detectMemoryLeaks();\n      \n      expect(leakAnalysis).toBeDefined();\n      expect(leakAnalysis.hasLeaks).toBeDefined();\n      expect(leakAnalysis.leakDetails).toBeInstanceOf(Array);\n      \n      // Clean up the large array\n      largeArray.length = 0;\n    });\n\n    it('should not detect leaks for normal memory usage', () => {\n      monitor.takeSnapshot('normal-1');\n      monitor.takeSnapshot('normal-2');\n      \n      const leakAnalysis = monitor.detectMemoryLeaks();\n      \n      // Should not detect significant leaks for normal test operations\n      expect(leakAnalysis.hasLeaks).toBe(false);\n    });\n  });\n\n  describe('Garbage Collection', () => {\n    it('should attempt garbage collection when available', () => {\n      const gcResult = monitor.forceGarbageCollection();\n      \n      // Result depends on whether --expose-gc flag is set\n      expect(typeof gcResult).toBe('boolean');\n    });\n\n    it('should perform cleanup operations', () => {\n      const memoryBefore = process.memoryUsage().heapUsed;\n      \n      const cleanupResult = monitor.cleanup('cleanup-test');\n      \n      expect(cleanupResult).toBeDefined();\n      expect(cleanupResult.memoryBefore).toBeGreaterThan(0);\n      expect(cleanupResult.memoryAfter).toBeGreaterThan(0);\n      expect(typeof cleanupResult.gcPerformed).toBe('boolean');\n      expect(typeof cleanupResult.cleanupEffective).toBe('boolean');\n    });\n  });\n\n  describe('Memory Summary and Reporting', () => {\n    it('should generate memory summary', async () => {\n      // Take a few snapshots to have data\n      monitor.takeSnapshot('summary-test-1');\n      \n      // Add a small delay to ensure test duration > 0\n      await new Promise(resolve => setTimeout(resolve, 10));\n      \n      monitor.takeSnapshot('summary-test-2');\n      \n      const summary = monitor.getMemorySummary();\n      \n      expect(summary).toBeDefined();\n      expect(summary.initialMemory).toBeGreaterThan(0);\n      expect(summary.currentMemory).toBeGreaterThan(0);\n      expect(summary.peakMemory).toBeGreaterThan(0);\n      expect(summary.snapshotCount).toBeGreaterThan(0);\n      expect(summary.testDuration).toBeGreaterThanOrEqual(0);\n    });\n\n    it('should generate detailed memory report', () => {\n      monitor.takeSnapshot('report-test');\n      \n      const report = monitor.generateReport();\n      \n      expect(typeof report).toBe('string');\n      expect(report).toContain('Memory Usage Report');\n      expect(report).toContain('Initial Memory:');\n      expect(report).toContain('Current Memory:');\n      expect(report).toContain('Peak Memory:');\n    });\n  });\n\n  describe('Static Factory Methods', () => {\n    it('should create default monitor', () => {\n      const defaultMonitor = TestMemoryMonitor.createDefault();\n      \n      expect(defaultMonitor).toBeInstanceOf(TestMemoryMonitor);\n      \n      defaultMonitor.cleanup('default-cleanup');\n    });\n\n    it('should create CI monitor with stricter settings', () => {\n      const ciMonitor = TestMemoryMonitor.createForCI();\n      \n      expect(ciMonitor).toBeInstanceOf(TestMemoryMonitor);\n      \n      ciMonitor.cleanup('ci-cleanup');\n    });\n  });\n\n  describe('Integration with Global Test Utilities', () => {\n    it('should work with global memory utilities', () => {\n      // Test global memory checking utility\n      const memoryUsage = global.testUtils.checkMemory();\n      \n      expect(memoryUsage).toBeDefined();\n      expect(memoryUsage.heapUsed).toMatch(/\\d+\\.\\d+MB/);\n      expect(memoryUsage.heapTotal).toMatch(/\\d+\\.\\d+MB/);\n    });\n\n    it('should work with global cleanup utility', () => {\n      const cleanupResult = global.testUtils.cleanupMemory();\n      \n      // Should not throw and should return some result\n      expect(cleanupResult).toBeDefined();\n    });\n\n    it('should work with global garbage collection utility', () => {\n      if (global.forceGC) {\n        const gcResult = global.forceGC();\n        expect(typeof gcResult).toBe('boolean');\n      }\n    });\n  });\n\n  describe('Memory Thresholds and Limits', () => {\n    it('should respect custom memory thresholds', () => {\n      const customMonitor = new TestMemoryMonitor({\n        warningThreshold: 25,\n        errorThreshold: 100,\n        leakThreshold: 10\n      });\n\n      const result = customMonitor.checkMemoryUsage('custom-threshold-test');\n      \n      expect(result).toBeDefined();\n      \n      customMonitor.cleanup('custom-cleanup');\n    });\n\n    it('should handle edge cases in memory calculations', () => {\n      // Test with zero or negative values (shouldn't happen in practice)\n      const snapshot = monitor.takeSnapshot('edge-case-test');\n      \n      expect(snapshot.heapUsed).toBeGreaterThan(0);\n      expect(snapshot.heapTotal).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle errors gracefully during cleanup', () => {\n      // This test ensures the monitor doesn't crash on cleanup errors\n      expect(() => {\n        monitor.cleanup('error-handling-test');\n      }).not.toThrow();\n    });\n\n    it('should handle missing global.gc gracefully', () => {\n      // Temporarily remove global.gc if it exists\n      const originalGC = global.gc;\n      \n      try {\n        // Set gc to undefined instead of deleting\n        (global as any).gc = undefined;\n        \n        const gcResult = monitor.forceGarbageCollection();\n        expect(gcResult).toBe(false);\n      } finally {\n        // Restore global.gc if it existed\n        if (originalGC) {\n          global.gc = originalGC;\n        }\n      }\n    });\n  });\n});\n\n// Integration test for memory management setup\ndescribe('Memory Management Integration', () => {\n  it('should have memory management utilities available globally', () => {\n    expect(global.testUtils).toBeDefined();\n    expect(global.testUtils.checkMemory).toBeDefined();\n    expect(global.testUtils.cleanupMemory).toBeDefined();\n  });\n\n  it('should track memory usage across test execution', () => {\n    const initialMemory = global.testUtils.checkMemory();\n    \n    // Simulate some memory allocation\n    const testData = new Array(1000).fill('test');\n    \n    const afterAllocationMemory = global.testUtils.checkMemory();\n    \n    // Clean up\n    testData.length = 0;\n    global.testUtils.cleanupMemory();\n    \n    expect(initialMemory).toBeDefined();\n    expect(afterAllocationMemory).toBeDefined();\n  });\n\n  it('should handle memory cleanup without errors', () => {\n    expect(() => {\n      global.testUtils.cleanupMemory();\n    }).not.toThrow();\n  });\n});"],"version":3}