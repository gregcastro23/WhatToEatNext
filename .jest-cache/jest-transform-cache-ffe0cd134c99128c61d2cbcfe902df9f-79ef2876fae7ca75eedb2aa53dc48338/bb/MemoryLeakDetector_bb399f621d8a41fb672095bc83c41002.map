{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/MemoryLeakDetector.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/MemoryLeakDetector.ts"],"sourcesContent":["/**\n * Memory Leak Detector for Test Environment\n * \n * Detects common memory leak patterns in tests and provides\n * specific recommendations for fixing them.\n */\n\ninterface MemoryLeakPattern {\n  name: string;\n  detector: () => boolean;\n  description: string;\n  fix: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n}\n\ninterface MemoryLeakReport {\n  leaksDetected: MemoryLeakPattern[];\n  recommendations: string[];\n  memoryUsage: {\n    current: number;\n    baseline: number;\n    increase: number;\n  };\n  timestamp: string;\n}\n\nexport class MemoryLeakDetector {\n  private baseline: number;\n  private patterns: MemoryLeakPattern[];\n\n  constructor() {\n    this.baseline = process.memoryUsage().heapUsed;\n    this.patterns = this.initializePatterns();\n  }\n\n  private initializePatterns(): MemoryLeakPattern[] {\n    return [\n      {\n        name: 'Excessive Event Listeners',\n        detector: () => {\n          if (typeof window !== 'undefined' && (window as any)._eventListeners) {\n            const totalListeners = Object.values((window as any)._eventListeners)\n              .reduce((sum: number, listeners: any) => sum + (listeners?.length || 0), 0);\n            return totalListeners > 50;\n          }\n          return false;\n        },\n        description: 'Too many event listeners attached to DOM elements',\n        fix: 'Remove event listeners in test cleanup or use cleanup utilities',\n        severity: 'high'\n      },\n      {\n        name: 'Unclosed Timers',\n        detector: () => {\n          // Check for active timers (this is a simplified check)\n          const activeTimers = (global as any)._activeTimers || [];\n          return activeTimers.length > 10;\n        },\n        description: 'Active timers not cleared after tests',\n        fix: 'Clear all timers in afterEach hooks using clearTimeout/clearInterval',\n        severity: 'medium'\n      },\n      {\n        name: 'Large Test Cache',\n        detector: () => {\n          if (global.__TEST_CACHE__ && global.__TEST_CACHE__ instanceof Map) {\n            return global.__TEST_CACHE__.size > 100;\n          }\n          return false;\n        },\n        description: 'Test cache has grown too large',\n        fix: 'Clear test cache regularly or implement cache size limits',\n        severity: 'medium'\n      },\n      {\n        name: 'Memory Growth Pattern',\n        detector: () => {\n          const current = process.memoryUsage().heapUsed;\n          const growth = (current - this.baseline) / (1024 * 1024);\n          return growth > 200; // 200MB growth\n        },\n        description: 'Significant memory growth detected during test execution',\n        fix: 'Review test setup/teardown and ensure proper cleanup',\n        severity: 'critical'\n      },\n      {\n        name: 'Jest Module Cache Bloat',\n        detector: () => {\n          if (typeof require !== 'undefined' && require.cache) {\n            const cacheSize = Object.keys(require.cache).length;\n            return cacheSize > 500;\n          }\n          return false;\n        },\n        description: 'Jest module cache has grown excessively large',\n        fix: 'Use jest.resetModules() in test cleanup',\n        severity: 'medium'\n      },\n      {\n        name: 'DOM Node Accumulation',\n        detector: () => {\n          if (typeof document !== 'undefined') {\n            const nodeCount = document.querySelectorAll('*').length;\n            return nodeCount > 1000;\n          }\n          return false;\n        },\n        description: 'Too many DOM nodes accumulated during testing',\n        fix: 'Clear document.body.innerHTML in afterEach hooks',\n        severity: 'high'\n      },\n      {\n        name: 'Global Reference Accumulation',\n        detector: () => {\n          if (global.__TEST_REFS__) {\n            return global.__TEST_REFS__.length > 50;\n          }\n          return false;\n        },\n        description: 'Too many global test references accumulated',\n        fix: 'Clear global.__TEST_REFS__ in test cleanup',\n        severity: 'medium'\n      }\n    ];\n  }\n\n  /**\n   * Scan for memory leaks and return detailed report\n   */\n  scanForLeaks(): MemoryLeakReport {\n    const currentMemory = process.memoryUsage().heapUsed;\n    const memoryIncrease = currentMemory - this.baseline;\n\n    const leaksDetected = this.patterns.filter(pattern => {\n      try {\n        return pattern.detector();\n      } catch (error) {\n        console.warn(`Error checking pattern ${pattern.name}:`, error);\n        return false;\n      }\n    });\n\n    const recommendations = this.generateRecommendations(leaksDetected, memoryIncrease);\n\n    return {\n      leaksDetected,\n      recommendations,\n      memoryUsage: {\n        current: currentMemory / (1024 * 1024), // MB\n        baseline: this.baseline / (1024 * 1024), // MB\n        increase: memoryIncrease / (1024 * 1024) // MB\n      },\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  private generateRecommendations(leaks: MemoryLeakPattern[], memoryIncrease: number): string[] {\n    const recommendations: string[] = [];\n\n    // Memory-specific recommendations\n    const memoryIncreaseMB = memoryIncrease / (1024 * 1024);\n    if (memoryIncreaseMB > 100) {\n      recommendations.push('Consider reducing test complexity or splitting large test suites');\n    }\n    if (memoryIncreaseMB > 200) {\n      recommendations.push('Implement more aggressive cleanup strategies');\n    }\n\n    // Pattern-specific recommendations\n    const criticalLeaks = leaks.filter(leak => leak.severity === 'critical');\n    const highLeaks = leaks.filter(leak => leak.severity === 'high');\n\n    if (criticalLeaks.length > 0) {\n      recommendations.push('CRITICAL: Address critical memory leaks immediately');\n      criticalLeaks.forEach(leak => recommendations.push(`- ${leak.fix}`));\n    }\n\n    if (highLeaks.length > 0) {\n      recommendations.push('HIGH PRIORITY: Fix high-severity memory leaks');\n      highLeaks.forEach(leak => recommendations.push(`- ${leak.fix}`));\n    }\n\n    // General recommendations\n    if (leaks.length > 3) {\n      recommendations.push('Consider implementing a comprehensive test cleanup strategy');\n    }\n\n    if (recommendations.length === 0) {\n      recommendations.push('No significant memory leaks detected');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Apply automatic fixes for detected leaks\n   */\n  applyAutomaticFixes(): { fixed: string[], failed: string[] } {\n    const fixed: string[] = [];\n    const failed: string[] = [];\n\n    try {\n      // Fix 1: Clear excessive event listeners\n      if (typeof window !== 'undefined' && (window as any)._eventListeners) {\n        Object.keys((window as any)._eventListeners).forEach(eventType => {\n          const listeners = (window as any)._eventListeners[eventType] || [];\n          listeners.forEach((listener: any) => {\n            try {\n              window.removeEventListener(eventType, listener);\n            } catch (error) {\n              // Ignore errors for already removed listeners\n            }\n          });\n        });\n        (window as any)._eventListeners = {};\n        fixed.push('Cleared excessive event listeners');\n      }\n    } catch (error) {\n      failed.push('Failed to clear event listeners');\n    }\n\n    try {\n      // Fix 2: Clear test cache\n      if (global.__TEST_CACHE__) {\n        if (typeof global.__TEST_CACHE__.clear === 'function') {\n          global.__TEST_CACHE__.clear();\n        } else {\n          global.__TEST_CACHE__ = new Map();\n        }\n        fixed.push('Cleared test cache');\n      }\n    } catch (error) {\n      failed.push('Failed to clear test cache');\n    }\n\n    try {\n      // Fix 3: Clear DOM nodes\n      if (typeof document !== 'undefined') {\n        document.body.innerHTML = '';\n        fixed.push('Cleared DOM nodes');\n      }\n    } catch (error) {\n      failed.push('Failed to clear DOM nodes');\n    }\n\n    try {\n      // Fix 4: Clear global references\n      if (global.__TEST_REFS__) {\n        global.__TEST_REFS__.length = 0;\n        fixed.push('Cleared global test references');\n      }\n    } catch (error) {\n      failed.push('Failed to clear global references');\n    }\n\n    try {\n      // Fix 5: Reset Jest modules\n      if (jest && jest.resetModules) {\n        jest.resetModules();\n        fixed.push('Reset Jest modules');\n      }\n    } catch (error) {\n      failed.push('Failed to reset Jest modules');\n    }\n\n    try {\n      // Fix 6: Force garbage collection\n      if (global.gc) {\n        global.gc();\n        fixed.push('Forced garbage collection');\n      }\n    } catch (error) {\n      failed.push('Failed to force garbage collection');\n    }\n\n    return { fixed, failed };\n  }\n\n  /**\n   * Generate detailed memory leak report\n   */\n  generateDetailedReport(): string {\n    const report = this.scanForLeaks();\n    \n    let output = `\nMemory Leak Detection Report\n============================\nGenerated: ${report.timestamp}\n\nMemory Usage:\n- Current: ${report.memoryUsage.current.toFixed(2)}MB\n- Baseline: ${report.memoryUsage.baseline.toFixed(2)}MB\n- Increase: ${report.memoryUsage.increase.toFixed(2)}MB\n\n`;\n\n    if (report.leaksDetected.length > 0) {\n      output += `Detected Memory Leaks (${report.leaksDetected.length}):\\n`;\n      report.leaksDetected.forEach((leak, index) => {\n        output += `${index + 1}. ${leak.name} (${leak.severity.toUpperCase()})\\n`;\n        output += `   Description: ${leak.description}\\n`;\n        output += `   Fix: ${leak.fix}\\n\\n`;\n      });\n    } else {\n      output += 'No memory leaks detected.\\n\\n';\n    }\n\n    output += 'Recommendations:\\n';\n    report.recommendations.forEach((rec, index) => {\n      output += `${index + 1}. ${rec}\\n`;\n    });\n\n    return output;\n  }\n\n  /**\n   * Reset baseline for new test suite\n   */\n  resetBaseline(): void {\n    this.baseline = process.memoryUsage().heapUsed;\n  }\n\n  /**\n   * Static method to create detector and run quick scan\n   */\n  static quickScan(): MemoryLeakReport {\n    const detector = new MemoryLeakDetector();\n    return detector.scanForLeaks();\n  }\n\n  /**\n   * Static method to apply emergency fixes\n   */\n  static emergencyCleanup(): { fixed: string[], failed: string[] } {\n    const detector = new MemoryLeakDetector();\n    return detector.applyAutomaticFixes();\n  }\n}\n\nexport default MemoryLeakDetector;"],"version":3}