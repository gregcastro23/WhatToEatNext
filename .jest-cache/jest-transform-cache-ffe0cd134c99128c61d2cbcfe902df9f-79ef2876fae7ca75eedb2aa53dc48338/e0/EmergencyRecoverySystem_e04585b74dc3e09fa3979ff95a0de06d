465d99bfe2e7e3e04d54d425800fcd67
"use strict";
/**
 * Emergency Recovery System
 * Perfect Codebase Campaign - Task 6.3 Implementation
 *
 * Provides comprehensive emergency recovery procedures with multiple recovery options,
 * nuclear option reset with complete metrics clearing, and recovery validation system.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmergencyRecoverySystem = void 0;
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const campaign_1 = require("../../types/campaign");
const SafetyProtocol_1 = require("./SafetyProtocol");
class EmergencyRecoverySystem extends SafetyProtocol_1.SafetyProtocol {
    recoveryEvents = [];
    backupDirectory;
    constructor(settings) {
        super(settings);
        this.backupDirectory = path.join('.kiro', 'emergency-backups');
        this.ensureBackupDirectory();
    }
    /**
     * Emergency rollback with multiple recovery options
     * Requirements: 5.7, 5.8
     */
    async emergencyRollbackWithOptions(options = {}) {
        console.log('üö® Initiating emergency rollback with advanced options...');
        try {
            // Create backup before recovery if requested
            let backupPath;
            if (options.createBackupBeforeReset) {
                backupPath = await this.createEmergencyBackup('pre-rollback');
            }
            // Perform the rollback
            await this.emergencyRollback();
            // Validate recovery if requested
            const validationResult = options.validateAfterRecovery
                ? await this.validateRecoverySuccess('emergency-rollback')
                : this.createBasicValidationResult('emergency-rollback');
            this.addRecoveryEvent({
                type: campaign_1.SafetyEventType.EMERGENCY_RECOVERY,
                timestamp: new Date(),
                description: `Emergency rollback completed with options: ${JSON.stringify(options)}`,
                severity: campaign_1.SafetyEventSeverity.WARNING,
                action: 'EMERGENCY_ROLLBACK_WITH_OPTIONS'
            });
            console.log('‚úÖ Emergency rollback completed successfully');
            return validationResult;
        }
        catch (error) {
            const errorMessage = `Emergency rollback failed: ${error.message || 'Unknown error'}`;
            console.error(`‚ùå ${errorMessage}`);
            this.addRecoveryEvent({
                type: campaign_1.SafetyEventType.EMERGENCY_RECOVERY,
                timestamp: new Date(),
                description: errorMessage,
                severity: campaign_1.SafetyEventSeverity.CRITICAL,
                action: 'EMERGENCY_ROLLBACK_FAILED'
            });
            throw new Error(errorMessage);
        }
    }
    /**
     * Rollback to specific commit with validation
     * Requirements: 5.7, 5.8
     */
    async rollbackToCommit(commitHash, options = {}) {
        console.log(`üîÑ Rolling back to commit: ${commitHash}`);
        try {
            // Validate commit exists
            const commitExists = await this.validateCommitExists(commitHash);
            if (!commitExists) {
                throw new Error(`Commit ${commitHash} does not exist`);
            }
            // Create backup if requested
            if (options.createBackupBeforeReset) {
                await this.createEmergencyBackup(`pre-commit-rollback-${commitHash.substring(0, 8)}`);
            }
            // Perform hard reset to commit
            (0, child_process_1.execSync)(`git reset --hard ${commitHash}`, {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            // Clean untracked files
            (0, child_process_1.execSync)('git clean -fd', {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            const validationResult = await this.validateRecoverySuccess('commit-rollback');
            this.addRecoveryEvent({
                type: campaign_1.SafetyEventType.EMERGENCY_RECOVERY,
                timestamp: new Date(),
                description: `Rollback to commit ${commitHash} completed`,
                severity: campaign_1.SafetyEventSeverity.WARNING,
                action: 'COMMIT_ROLLBACK'
            });
            console.log(`‚úÖ Successfully rolled back to commit: ${commitHash}`);
            return validationResult;
        }
        catch (error) {
            const errorMessage = `Commit rollback failed: ${error.message || 'Unknown error'}`;
            console.error(`‚ùå ${errorMessage}`);
            this.addRecoveryEvent({
                type: campaign_1.SafetyEventType.EMERGENCY_RECOVERY,
                timestamp: new Date(),
                description: errorMessage,
                severity: campaign_1.SafetyEventSeverity.CRITICAL,
                action: 'COMMIT_ROLLBACK_FAILED'
            });
            throw new Error(errorMessage);
        }
    }
    /**
     * Nuclear option reset with complete metrics clearing
     * Requirements: 5.7, 5.8
     */
    async nuclearReset(options = {}) {
        console.log('‚ò¢Ô∏è Initiating NUCLEAR RESET - This will reset everything!');
        console.log('‚ö†Ô∏è This operation will:');
        console.log('   - Reset all files to clean state');
        console.log('   - Clear all campaign metrics');
        console.log('   - Remove all stashes (unless preserved)');
        console.log('   - Reset git repository to clean state');
        try {
            const result = {
                success: false,
                filesReset: 0,
                metricsCleared: false,
                stashesCleared: 0,
                validationResult: this.createBasicValidationResult('nuclear-reset'),
                errors: []
            };
            // Create comprehensive backup before nuclear reset
            if (options.createBackupBeforeReset !== false) { // Default to true for nuclear reset
                result.backupCreated = await this.createEmergencyBackup('pre-nuclear-reset');
                console.log(`üì¶ Emergency backup created: ${result.backupCreated}`);
            }
            // Step 1: Reset git repository to clean state
            console.log('üîÑ Step 1: Resetting git repository...');
            const resetCommit = options.resetToCommit || await this.findLastCleanCommit();
            (0, child_process_1.execSync)(`git reset --hard ${resetCommit}`, {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            (0, child_process_1.execSync)('git clean -fd', {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            result.filesReset = await this.countResetFiles();
            // Step 2: Clear all campaign metrics
            console.log('üßπ Step 2: Clearing campaign metrics...');
            if (!options.preserveMetrics) {
                await this.clearAllMetrics();
                result.metricsCleared = true;
            }
            // Step 3: Clear stashes (unless preserved)
            console.log('üóëÔ∏è Step 3: Managing stashes...');
            if (!options.preserveStashes) {
                result.stashesCleared = await this.clearAllStashes();
            }
            // Step 4: Reset campaign infrastructure
            console.log('üèóÔ∏è Step 4: Resetting campaign infrastructure...');
            await this.resetCampaignInfrastructure();
            // Step 5: Validate nuclear reset success
            console.log('‚úÖ Step 5: Validating nuclear reset...');
            if (options.validateAfterRecovery !== false) { // Default to true for nuclear reset
                result.validationResult = await this.validateNuclearResetSuccess();
            }
            result.success = true;
            this.addRecoveryEvent({
                type: campaign_1.SafetyEventType.EMERGENCY_RECOVERY,
                timestamp: new Date(),
                description: `Nuclear reset completed successfully`,
                severity: campaign_1.SafetyEventSeverity.CRITICAL,
                action: 'NUCLEAR_RESET_SUCCESS'
            });
            console.log('‚ò¢Ô∏è NUCLEAR RESET COMPLETED SUCCESSFULLY');
            console.log(`   Files reset: ${result.filesReset}`);
            console.log(`   Metrics cleared: ${result.metricsCleared}`);
            console.log(`   Stashes cleared: ${result.stashesCleared}`);
            return result;
        }
        catch (error) {
            const errorMessage = `Nuclear reset failed: ${error.message || 'Unknown error'}`;
            console.error(`‚ùå ${errorMessage}`);
            this.addRecoveryEvent({
                type: campaign_1.SafetyEventType.EMERGENCY_RECOVERY,
                timestamp: new Date(),
                description: errorMessage,
                severity: campaign_1.SafetyEventSeverity.CRITICAL,
                action: 'NUCLEAR_RESET_FAILED'
            });
            return {
                success: false,
                filesReset: 0,
                metricsCleared: false,
                stashesCleared: 0,
                validationResult: this.createBasicValidationResult('nuclear-reset'),
                errors: [errorMessage]
            };
        }
    }
    /**
     * Selective recovery - restore specific files or directories
     * Requirements: 5.7, 5.8
     */
    async selectiveRecovery(targets, fromStash) {
        console.log(`üéØ Initiating selective recovery for ${targets.length} targets...`);
        try {
            // If no stash specified, use the most recent one
            const stashToUse = fromStash || (await this.listStashes())[0]?.id;
            if (!stashToUse) {
                throw new Error('No stashes available for selective recovery');
            }
            // Create temporary branch for selective recovery
            const tempBranch = `temp-recovery-${Date.now()}`;
            (0, child_process_1.execSync)(`git checkout -b ${tempBranch}`, {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            try {
                // Apply stash to temporary branch
                await this.applyStash(stashToUse, false);
                // Selectively checkout files from stash
                for (const target of targets) {
                    if (fs.existsSync(target)) {
                        (0, child_process_1.execSync)(`git checkout HEAD -- "${target}"`, {
                            encoding: 'utf8',
                            stdio: 'pipe'
                        });
                        console.log(`‚úÖ Restored: ${target}`);
                    }
                    else {
                        console.warn(`‚ö†Ô∏è Target not found: ${target}`);
                    }
                }
                // Return to original branch
                const originalBranch = this.getCurrentBranch();
                (0, child_process_1.execSync)(`git checkout ${originalBranch}`, {
                    encoding: 'utf8',
                    stdio: 'pipe'
                });
                // Delete temporary branch
                (0, child_process_1.execSync)(`git branch -D ${tempBranch}`, {
                    encoding: 'utf8',
                    stdio: 'pipe'
                });
            }
            catch (error) {
                // Cleanup: return to original branch and delete temp branch
                try {
                    const originalBranch = this.getCurrentBranch();
                    if (originalBranch !== tempBranch) {
                        (0, child_process_1.execSync)(`git checkout ${originalBranch}`, { encoding: 'utf8', stdio: 'pipe' });
                    }
                    (0, child_process_1.execSync)(`git branch -D ${tempBranch}`, { encoding: 'utf8', stdio: 'pipe' });
                }
                catch (cleanupError) {
                    console.warn(`‚ö†Ô∏è Cleanup warning: ${cleanupError.message || 'Unknown error'}`);
                }
                throw error;
            }
            const validationResult = await this.validateRecoverySuccess('selective-recovery');
            this.addRecoveryEvent({
                type: campaign_1.SafetyEventType.EMERGENCY_RECOVERY,
                timestamp: new Date(),
                description: `Selective recovery completed for ${targets.length} targets`,
                severity: campaign_1.SafetyEventSeverity.INFO,
                action: 'SELECTIVE_RECOVERY'
            });
            console.log(`‚úÖ Selective recovery completed for ${targets.length} targets`);
            return validationResult;
        }
        catch (error) {
            const errorMessage = `Selective recovery failed: ${error.message || 'Unknown error'}`;
            console.error(`‚ùå ${errorMessage}`);
            this.addRecoveryEvent({
                type: campaign_1.SafetyEventType.EMERGENCY_RECOVERY,
                timestamp: new Date(),
                description: errorMessage,
                severity: campaign_1.SafetyEventSeverity.ERROR,
                action: 'SELECTIVE_RECOVERY_FAILED'
            });
            throw new Error(errorMessage);
        }
    }
    /**
     * Recovery validation system ensuring successful restoration
     * Requirements: 5.7, 5.8
     */
    async validateRecoverySuccess(recoveryMethod) {
        console.log(`üîç Validating recovery success for method: ${recoveryMethod}`);
        const result = {
            success: true,
            errors: [],
            warnings: [],
            recoveryMethod,
            filesRestored: 0,
            metricsCleared: false,
            stashesPreserved: false,
            buildValidation: false,
            testValidation: false
        };
        try {
            // 1. Validate git repository state
            console.log('üîç Validating git repository state...');
            const gitValidation = await this.validateGitState();
            if (!gitValidation.success) {
                result.errors.push(...gitValidation.errors);
                result.success = false;
            }
            result.warnings.push(...gitValidation.warnings);
            // 2. Count restored files
            result.filesRestored = await this.countTrackedFiles();
            // 3. Validate build system
            console.log('üîç Validating build system...');
            try {
                (0, child_process_1.execSync)('yarn build', {
                    encoding: 'utf8',
                    stdio: 'pipe',
                    timeout: 30000 // 30 second timeout
                });
                result.buildValidation = true;
                console.log('‚úÖ Build validation passed');
            }
            catch (buildError) {
                result.errors.push(`Build validation failed: ${buildError.message || 'Unknown error'}`);
                result.buildValidation = false;
                console.error('‚ùå Build validation failed');
            }
            // 4. Validate test system
            console.log('üîç Validating test system...');
            try {
                (0, child_process_1.execSync)('yarn test --run --reporter=basic', {
                    encoding: 'utf8',
                    stdio: 'pipe',
                    timeout: 60000 // 60 second timeout
                });
                result.testValidation = true;
                console.log('‚úÖ Test validation passed');
            }
            catch (testError) {
                result.warnings.push(`Test validation warning: ${testError.message || 'Unknown error'}`);
                result.testValidation = false;
                console.warn('‚ö†Ô∏è Test validation had issues');
            }
            // 5. Check corruption after recovery
            console.log('üîç Checking for corruption after recovery...');
            const corruptionReport = await this.detectCorruption(['src/**/*.ts', 'src/**/*.tsx']);
            if (corruptionReport.detectedFiles.length > 0) {
                result.errors.push(`Corruption detected after recovery: ${corruptionReport.detectedFiles.length} files`);
                result.success = false;
            }
            // 6. Validate metrics state
            result.metricsCleared = await this.areMetricsCleared();
            result.stashesPreserved = (await this.listStashes()).length > 0;
            // Final success determination
            result.success = result.errors.length === 0 && result.buildValidation;
            this.addRecoveryEvent({
                type: campaign_1.SafetyEventType.EMERGENCY_RECOVERY,
                timestamp: new Date(),
                description: `Recovery validation completed: ${result.success ? 'SUCCESS' : 'FAILED'}`,
                severity: result.success ? campaign_1.SafetyEventSeverity.INFO : campaign_1.SafetyEventSeverity.ERROR,
                action: 'RECOVERY_VALIDATION'
            });
            console.log(`${result.success ? '‚úÖ' : '‚ùå'} Recovery validation ${result.success ? 'passed' : 'failed'}`);
            return result;
        }
        catch (error) {
            result.success = false;
            result.errors.push(`Recovery validation error: ${error.message || 'Unknown error'}`);
            console.error(`‚ùå Recovery validation error: ${error.message || 'Unknown error'}`);
            return result;
        }
    }
    /**
     * Get recovery statistics and history
     */
    getRecoveryStatistics() {
        const recoveryEvents = this.recoveryEvents.filter(e => e.action.includes('RECOVERY') || e.action.includes('ROLLBACK') || e.action.includes('RESET'));
        const successfulRecoveries = recoveryEvents.filter(e => e.action.includes('SUCCESS') || e.severity === campaign_1.SafetyEventSeverity.INFO).length;
        const failedRecoveries = recoveryEvents.filter(e => e.action.includes('FAILED') || e.severity === campaign_1.SafetyEventSeverity.CRITICAL).length;
        const nuclearResets = recoveryEvents.filter(e => e.action.includes('NUCLEAR_RESET')).length;
        const recoveryMethods = {};
        for (const event of recoveryEvents) {
            const method = event.action.split('_')[0];
            recoveryMethods[method] = (recoveryMethods[method] || 0) + 1;
        }
        const lastRecovery = recoveryEvents.length > 0
            ? recoveryEvents[recoveryEvents.length - 1].timestamp
            : undefined;
        return {
            totalRecoveries: recoveryEvents.length,
            successfulRecoveries,
            failedRecoveries,
            nuclearResets,
            lastRecovery,
            recoveryMethods
        };
    }
    /**
     * Get all recovery events for reporting
     */
    getRecoveryEvents() {
        return [...this.recoveryEvents];
    }
    // Private helper methods
    ensureBackupDirectory() {
        if (!fs.existsSync(this.backupDirectory)) {
            fs.mkdirSync(this.backupDirectory, { recursive: true });
        }
    }
    async createEmergencyBackup(description) {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const backupName = `emergency-backup-${description}-${timestamp}`;
        const backupPath = path.join(this.backupDirectory, backupName);
        // Create backup using git archive
        (0, child_process_1.execSync)(`git archive --format=tar.gz --output="${backupPath}.tar.gz" HEAD`, {
            encoding: 'utf8',
            stdio: 'pipe'
        });
        console.log(`üì¶ Emergency backup created: ${backupPath}.tar.gz`);
        return `${backupPath}.tar.gz`;
    }
    async validateCommitExists(commitHash) {
        try {
            (0, child_process_1.execSync)(`git cat-file -e ${commitHash}`, {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            return true;
        }
        catch {
            return false;
        }
    }
    async findLastCleanCommit() {
        try {
            // Find the last commit that doesn't contain campaign-related changes
            const commits = (0, child_process_1.execSync)('git log --oneline -20', { encoding: 'utf8' })
                .split('\n')
                .filter(line => line.trim())
                .map(line => line.split(' ')[0]);
            // Return the most recent commit (HEAD)
            return commits[0] || 'HEAD';
        }
        catch {
            return 'HEAD';
        }
    }
    async countResetFiles() {
        try {
            const output = (0, child_process_1.execSync)('git ls-files | wc -l', { encoding: 'utf8' });
            return parseInt(output.trim(), 10) || 0;
        }
        catch {
            return 0;
        }
    }
    async countTrackedFiles() {
        try {
            const output = (0, child_process_1.execSync)('git ls-files | wc -l', { encoding: 'utf8' });
            return parseInt(output.trim(), 10) || 0;
        }
        catch {
            return 0;
        }
    }
    async clearAllMetrics() {
        const metricsFiles = [
            '.typescript-errors-metrics.json',
            '.linting-analysis-metrics.json',
            '.explicit-any-metrics.json',
            '.unused-variables-metrics.json',
            '.api-response-metrics.json',
            '.enhanced-unused-variables-metrics.json',
            '.import-cleaner-metrics.json',
            '.unicode-validation-metrics.json',
            '.unified-safety-metrics.json'
        ];
        for (const file of metricsFiles) {
            if (fs.existsSync(file)) {
                fs.unlinkSync(file);
                console.log(`üóëÔ∏è Cleared metrics file: ${file}`);
            }
        }
        // Clear campaign-specific metrics
        const campaignMetricsPath = path.join('.kiro', 'campaign-metrics.json');
        if (fs.existsSync(campaignMetricsPath)) {
            fs.unlinkSync(campaignMetricsPath);
            console.log(`üóëÔ∏è Cleared campaign metrics: ${campaignMetricsPath}`);
        }
    }
    async clearAllStashes() {
        try {
            const stashes = await this.listStashes();
            let clearedCount = 0;
            // Clear git stashes
            try {
                (0, child_process_1.execSync)('git stash clear', {
                    encoding: 'utf8',
                    stdio: 'pipe'
                });
                clearedCount = stashes.length;
            }
            catch (error) {
                console.warn(`‚ö†Ô∏è Could not clear git stashes: ${error.message || 'Unknown error'}`);
            }
            // Clear our stash tracking
            const stashTrackingPath = path.join('.kiro', 'campaign-stashes.json');
            if (fs.existsSync(stashTrackingPath)) {
                fs.unlinkSync(stashTrackingPath);
            }
            console.log(`üóëÔ∏è Cleared ${clearedCount} stashes`);
            return clearedCount;
        }
        catch {
            return 0;
        }
    }
    async resetCampaignInfrastructure() {
        // Reset campaign-specific directories and files
        const campaignPaths = [
            path.join('.kiro', 'campaign-progress.json'),
            path.join('.kiro', 'campaign-checkpoints.json'),
            path.join('.kiro', 'phase-reports')
        ];
        for (const campaignPath of campaignPaths) {
            if (fs.existsSync(campaignPath)) {
                if (fs.statSync(campaignPath).isDirectory()) {
                    fs.rmSync(campaignPath, { recursive: true, force: true });
                }
                else {
                    fs.unlinkSync(campaignPath);
                }
                console.log(`üóëÔ∏è Reset campaign infrastructure: ${campaignPath}`);
            }
        }
    }
    async validateNuclearResetSuccess() {
        const result = await this.validateRecoverySuccess('nuclear-reset');
        // Additional nuclear reset specific validations
        const metricsCleared = await this.areMetricsCleared();
        const stashesCleared = (await this.listStashes()).length === 0;
        result.metricsCleared = metricsCleared;
        result.stashesPreserved = !stashesCleared;
        if (!metricsCleared) {
            result.warnings.push('Some metrics files may still exist');
        }
        return result;
    }
    async areMetricsCleared() {
        const metricsFiles = [
            '.typescript-errors-metrics.json',
            '.linting-analysis-metrics.json',
            '.explicit-any-metrics.json',
            '.unused-variables-metrics.json'
        ];
        return !metricsFiles.some(file => fs.existsSync(file));
    }
    createBasicValidationResult(recoveryMethod) {
        return {
            success: true,
            errors: [],
            warnings: [],
            recoveryMethod,
            filesRestored: 0,
            metricsCleared: false,
            stashesPreserved: false,
            buildValidation: false,
            testValidation: false
        };
    }
    addRecoveryEvent(event) {
        this.recoveryEvents.push(event);
        // Keep only recent events to prevent memory issues
        if (this.recoveryEvents.length > 500) {
            this.recoveryEvents = this.recoveryEvents.slice(-250);
        }
    }
}
exports.EmergencyRecoverySystem = EmergencyRecoverySystem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,