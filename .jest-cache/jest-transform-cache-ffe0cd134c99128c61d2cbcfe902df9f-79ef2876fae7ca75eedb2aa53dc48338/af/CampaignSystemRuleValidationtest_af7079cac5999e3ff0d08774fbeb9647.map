{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/linting/CampaignSystemRuleValidation.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/linting/CampaignSystemRuleValidation.test.ts"],"sourcesContent":["/**\n * Campaign System Rule Validation Test Suite\n *\n * Tests the domain-specific ESLint rules for campaign system files\n * to ensure enterprise patterns and extensive logging are allowed.\n *\n * Requirements: 4.3\n */\n\nimport { execSync } from 'child_process';\nimport { existsSync, writeFileSync } from 'fs';\nimport { join } from 'path';\n\ndescribe('Campaign System Rule Validation', () => {\n  const projectRoot = process.cwd();\n  const tempFiles: string[] = [];\n\n  afterEach(() => {\n    // Clean up temporary test files\n    tempFiles.forEach(file => {\n      try {\n        execSync(`rm -f \"${file}\"`);\n      } catch {}\n    });\n    tempFiles.length = 0;\n  });\n\n  describe('Enterprise Patterns Allowance', () => {\n    test('should allow high complexity in campaign files', async () => {\n      const testContent = `\n        class CampaignController {\n          private executeComplexCampaign(config: unknown) {\n            // High complexity enterprise logic\n            let result = 0;\n\n            for (let phase = 0; phase < 10; phase++) {\n              for (let batch = 0; batch < 20; batch++) {\n                for (let file = 0; file < 50; file++) {\n                  if (phase < 3) {\n                    if (batch % 2 === 0) {\n                      if (file < 10) {\n                        result += this.processFile(phase, batch, file);\n                      } else if (file < 30) {\n                        result += this.validateFile(phase, batch, file);\n                      } else {\n                        result += this.optimizeFile(phase, batch, file);\n                      }\n                    } else {\n                      if (file % 3 === 0) {\n                        result += this.analyzeFile(phase, batch, file);\n                      } else {\n                        result += this.transformFile(phase, batch, file);\n                      }\n                    }\n                  } else if (phase < 7) {\n                    result += this.advancedProcessing(phase, batch, file);\n                  } else {\n                    result += this.finalizeProcessing(phase, batch, file);\n                  }\n                }\n              }\n            }\n\n            return result;\n          }\n\n          private processFile(phase: number, batch: number, file: number): number {\n            return phase + batch + file;\n          }\n\n          private validateFile(phase: number, batch: number, file: number): number {\n            return phase * batch * file;\n          }\n\n          private optimizeFile(phase: number, batch: number, file: number): number {\n            return Math.max(phase, batch, file);\n          }\n\n          private analyzeFile(phase: number, batch: number, file: number): number {\n            return Math.min(phase, batch, file);\n          }\n\n          private transformFile(phase: number, batch: number, file: number): number {\n            return (phase + batch + file) / 3;\n          }\n\n          private advancedProcessing(phase: number, batch: number, file: number): number {\n            return phase ** 2 + batch ** 2 + file ** 2;\n          }\n\n          private finalizeProcessing(phase: number, batch: number, file: number): number {\n            return Math.sqrt(phase * batch * file);\n          }\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/services/campaign/temp-complex-enterprise.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const complexityErrors = result[0].messages.filter(\n            (msg: unknown) => (msg as any).ruleId === 'complexity' && msg.severity === 2, // error level\n          );\n\n          // Campaign files should allow high complexity\n          expect(complexityErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const complexityErrors = result[0].messages.filter(\n              (msg: unknown) => (msg as any).ruleId === 'complexity' && msg.severity === 2,\n            );\n\n            expect(complexityErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow long functions in campaign files', async () => {\n      const testContent = `\n        class ProgressTracker {\n          public generateComprehensiveReport(): string {\n            // Long function with extensive reporting logic\n            let report = 'Campaign Progress Report\\\\n';\n            report += '========================\\\\n\\\\n';\n\n            // Phase 1 Analysis\n            report += 'Phase 1: Initial Analysis\\\\n';\n            report += 'Status: Completed\\\\n';\n            report += 'Duration: 2.5 hours\\\\n';\n            report += 'Files Processed: 1,250\\\\n';\n            report += 'Errors Found: 4,310\\\\n';\n            report += 'Errors Fixed: 3,890\\\\n';\n            report += 'Success Rate: 90.2%\\\\n\\\\n';\n\n            // Phase 2 Analysis\n            report += 'Phase 2: Error Elimination\\\\n';\n            report += 'Status: In Progress\\\\n';\n            report += 'Duration: 4.1 hours\\\\n';\n            report += 'Files Processed: 2,100\\\\n';\n            report += 'Errors Found: 2,566\\\\n';\n            report += 'Errors Fixed: 2,200\\\\n';\n            report += 'Success Rate: 85.7%\\\\n\\\\n';\n\n            // Phase 3 Analysis\n            report += 'Phase 3: Optimization\\\\n';\n            report += 'Status: Pending\\\\n';\n            report += 'Estimated Duration: 3.0 hours\\\\n';\n            report += 'Estimated Files: 1,800\\\\n';\n            report += 'Estimated Errors: 1,500\\\\n';\n            report += 'Target Success Rate: 95%\\\\n\\\\n';\n\n            // Safety Metrics\n            report += 'Safety Metrics:\\\\n';\n            report += 'Build Failures: 0\\\\n';\n            report += 'Rollbacks Triggered: 2\\\\n';\n            report += 'Corruption Events: 0\\\\n';\n            report += 'Safety Score: 98.5%\\\\n\\\\n';\n\n            // Performance Metrics\n            report += 'Performance Metrics:\\\\n';\n            report += 'Average Processing Speed: 125 files/hour\\\\n';\n            report += 'Memory Usage: 2.1GB peak\\\\n';\n            report += 'CPU Usage: 65% average\\\\n';\n            report += 'Cache Hit Rate: 87%\\\\n\\\\n';\n\n            // Quality Metrics\n            report += 'Quality Metrics:\\\\n';\n            report += 'Code Quality Score: 92/100\\\\n';\n            report += 'Type Safety Score: 89/100\\\\n';\n            report += 'Linting Score: 94/100\\\\n';\n            report += 'Overall Quality: 91.7/100\\\\n\\\\n';\n\n            // Recommendations\n            report += 'Recommendations:\\\\n';\n            report += '1. Increase batch size for Phase 3\\\\n';\n            report += '2. Enable parallel processing\\\\n';\n            report += '3. Implement additional safety checks\\\\n';\n            report += '4. Optimize memory usage patterns\\\\n';\n            report += '5. Enhance error categorization\\\\n\\\\n';\n\n            // Next Steps\n            report += 'Next Steps:\\\\n';\n            report += '1. Complete Phase 2 error elimination\\\\n';\n            report += '2. Begin Phase 3 optimization\\\\n';\n            report += '3. Implement performance improvements\\\\n';\n            report += '4. Conduct comprehensive validation\\\\n';\n            report += '5. Prepare for production deployment\\\\n\\\\n';\n\n            report += 'Report Generated: ' + new Date().toISOString() + '\\\\n';\n            report += 'Campaign ID: typescript-elimination-2024\\\\n';\n            report += 'Report Version: 1.2.3\\\\n';\n\n            return report;\n          }\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/services/campaign/temp-long-function.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const functionLengthErrors = result[0].messages.filter(\n            (msg: unknown) => (msg as any).ruleId === 'max-lines-per-function' && msg.severity === 2, // error level\n          );\n\n          // Campaign files should allow long functions\n          expect(functionLengthErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const functionLengthErrors = result[0].messages.filter(\n              (msg: unknown) => (msg as any).ruleId === 'max-lines-per-function' && msg.severity === 2,\n            );\n\n            expect(functionLengthErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow explicit any types in campaign files', async () => {\n      const testContent = `\n        class CampaignIntelligenceSystem {\n          private analyzeErrorPatterns(data: unknown): unknown {\n            // Enterprise intelligence requires flexible typing\n            const patterns: unknown = {};\n            const metrics: unknown = data.metrics || {};\n            const config: unknown = data.config || {};\n\n            // Dynamic analysis based on campaign type\n            if (config.type === 'typescript-elimination') {\n              patterns.errorTypes = this.analyzeTypeScriptErrors(data);\n            } else if (config.type === 'linting-excellence') {\n              patterns.lintingIssues = this.analyzeLintingIssues(data);\n            }\n\n            // Flexible return structure\n            return {\n              patterns,\n              confidence: this.calculateConfidence(patterns),\n              recommendations: this.generateRecommendations(patterns),\n              metadata: {\n                analysisTime: Date.now(),\n                dataSize: JSON.stringify(data).length,\n                complexity: this.calculateComplexity(data)\n              }\n            };\n          }\n\n          private analyzeTypeScriptErrors(data: unknown): unknown {\n            return data.errors || [];\n          }\n\n          private analyzeLintingIssues(data: unknown): unknown {\n            return data.warnings || [];\n          }\n\n          private calculateConfidence(patterns: unknown): number {\n            return Math.random() * 100;\n          }\n\n          private generateRecommendations(patterns: unknown): unknown[] {\n            return [];\n          }\n\n          private calculateComplexity(data: unknown): number {\n            return Object.keys(data).length;\n          }\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/services/campaign/temp-any-types.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const anyTypeErrors = result[0].messages.filter(\n            (msg: unknown) => (msg as any).ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2, // error level\n          );\n\n          // Campaign files should allow explicit any types (warn level is OK);\n          expect(anyTypeErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const anyTypeErrors = result[0].messages.filter(\n              (msg: unknown) => (msg as any).ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2,\n            );\n\n            expect(anyTypeErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow deep nesting in campaign files', async () => {\n      const testContent = `\n        class SafetyProtocolSystem {\n          private executeEmergencyProtocol_(event: unknown): void {\n            // Deep nesting for comprehensive safety checks\n            if (event.type === 'corruption') {\n              if (event.severity === 'critical') {\n                if (event.affectedFiles > 10) {\n                  if (event.buildStatus === 'failed') {\n                    if (event.rollbackAvailable) {\n                      if (event.backupIntegrity === 'verified') {\n                        this.executeEmergencyRollback_(event);\n                      } else {\n                        this.createEmergencyBackup_(event);\n                      }\n                    } else {\n                      this.initiateManualRecovery_(event);\n                    }\n                  } else {\n                    this.monitorBuildStatus_(event);\n                  }\n                } else {\n                  this.isolateAffectedFiles_(event);\n                }\n              } else {\n                this.logSafetyEvent_(event);\n              }\n            }\n          }\n\n          private executeEmergencyRollback_(event: unknown): void {\n            console.log('Executing emergency rollback');\n          }\n\n          private createEmergencyBackup_(event: unknown): void {\n            console.log('Creating emergency backup');\n          }\n\n          private initiateManualRecovery_(event: unknown): void {\n            console.log('Initiating manual recovery');\n          }\n\n          private monitorBuildStatus_(event: unknown): void {\n            console.log('Monitoring build status');\n          }\n\n          private isolateAffectedFiles_(event: unknown): void {\n            console.log('Isolating affected files');\n          }\n\n          private logSafetyEvent_(event: unknown): void {\n            console.log('Logging safety event');\n          }\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/services/campaign/temp-deep-nesting.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const depthErrors = result[0].messages.filter(\n            (msg: unknown) => (msg as any).ruleId === 'max-depth' && msg.severity === 2, // error level\n          );\n\n          // Campaign files should allow deep nesting\n          expect(depthErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const depthErrors = result[0].messages.filter(\n              (msg: unknown) => (msg as any).ruleId === 'max-depth' && msg.severity === 2,\n            );\n\n            expect(depthErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n  });\n\n  describe('Extensive Logging Allowance', () => {\n    test('should allow all console methods in campaign files', async () => {\n      const testContent = `\n        class CampaignLogger {\n          public logCampaignProgress(): void {\n            console.log('Campaign progress update: 75% complete');\n            console.info('Processing batch 15 of 20');\n            console.warn('Memory usage approaching 80% threshold');\n            console.error('Failed to process 3 files in current batch');\n            console.debug('Detailed timing: parse=125ms, analyze=89ms, fix=234ms');\n            console.trace('Call stack for debugging complex issue');\n            console.table([\n              { phase: 'Analysis', duration: '2.5h', files: 1250 },\n              { phase: 'Fixing', duration: '4.1h', files: 2100 }\n            ]);\n            console.group('Safety Protocol Status');\n            console.log('Build validation: PASSED');\n            console.log('Corruption detection: ACTIVE');\n            console.log('Rollback readiness: READY');\n            console.groupEnd();\n            console.time('batch-processing');\n            // Simulate batch processing\n            console.timeEnd('batch-processing');\n            console.count('safety-checks');\n            console.assert(true, 'Safety assertion passed');\n          }\n\n          public logMetrics(metrics: unknown): void {\n            console.log('=== CAMPAIGN METRICS ===');\n            console.log('Total errors found:', metrics.totalErrors);\n            console.log('Errors fixed:', metrics.errorsFixed);\n            console.log('Success rate:', metrics.successRate + '%');\n            console.log('Processing speed:', metrics.speed + ' files/hour');\n            console.log('Memory usage:', metrics.memoryUsage + 'MB');\n            console.log('CPU usage:', metrics.cpuUsage + '%');\n            console.log('Cache hit rate:', metrics.cacheHitRate + '%');\n            console.log('========================');\n          }\n\n          public logSafetyEvents(events: unknown[]): void {\n            console.warn('=== SAFETY EVENTS ===');\n            events.forEach((event, index) => {\n              console.warn(\\`Event \\${index + 1}: \\${event.type}\\`);\n              console.warn(\\`Severity: \\${event.severity}\\`);\n              console.warn(\\`Timestamp: \\${event.timestamp}\\`);\n              console.warn(\\`Action taken: \\${event.action}\\`);\n            });\n            console.warn('=====================');\n          }\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/services/campaign/temp-extensive-logging.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const consoleErrors = result[0].messages.filter(\n            (msg: unknown) => (msg as any).ruleId === 'no-console' && msg.severity === 2, // error level\n          );\n\n          // Campaign files should allow all console methods\n          expect(consoleErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const consoleErrors = result[0].messages.filter(\n              (msg: unknown) => (msg as any).ruleId === 'no-console' && msg.severity === 2,\n            );\n\n            expect(consoleErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow process.exit in emergency protocols', async () => {\n      const testContent = `\n        class EmergencyProtocol {\n          public executeEmergencyShutdown(reason: string): void {\n            console.error('EMERGENCY SHUTDOWN INITIATED:', reason);\n            console.error('Saving current state...');\n            this.saveEmergencyState();\n            console.error('Creating emergency backup...');\n            this.createEmergencyBackup();\n            console.error('Notifying administrators...');\n            this.notifyAdministrators(reason);\n            console.error('Emergency shutdown complete. Exiting process.');\n            process.exit(1); // Should be allowed in campaign emergency protocols\n          }\n\n          private saveEmergencyState(): void {\n            console.log('Emergency state saved');\n          }\n\n          private createEmergencyBackup(): void {\n            console.log('Emergency backup created');\n          }\n\n          private notifyAdministrators(reason: string): void {\n            console.log('Administrators notified:', reason);\n          }\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/services/campaign/temp-process-exit.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const processExitErrors = result[0].messages.filter(\n            (msg: unknown) => (msg as any).ruleId === 'no-process-exit' && msg.severity === 2, // error level\n          );\n\n          // Campaign files should allow process.exit\n          expect(processExitErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const processExitErrors = result[0].messages.filter(\n              (msg: unknown) => (msg as any).ruleId === 'no-process-exit' && msg.severity === 2,\n            );\n\n            expect(processExitErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n  });\n\n  describe('Campaign Variable Patterns', () => {\n    test('should ignore unused campaign variables', async () => {\n      const testContent = `\n        class CampaignManager {\n          private initializeCampaign(): void {\n            const campaign = 'typescript-elimination';\n            const progress = 0.75;\n            const metrics = { errors: 100, fixed: 85 };\n            const safety = true;\n            const UNUSED_CAMPAIGN_ID = 'ts-elim-2024';\n            const UNUSED_PROGRESS_THRESHOLD = 0.8;\n            const UNUSED_METRICS_INTERVAL = 5000;\n            const UNUSED_SAFETY_ENABLED = true;\n            const UNUSED_ERROR_THRESHOLD = 1000;\n            const UNUSED_campaign = 'unused-campaign';\n            const UNUSED_progress = 0.0;\n            const UNUSED_metrics = {};\n            const UNUSED_safety = false;\n          }\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/services/campaign/temp-campaign-variables.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const unusedVarErrors = result[0].messages.filter(\n            (msg: unknown) =>\n              msg.ruleId === '@typescript-eslint/no-unused-vars' &&\n              (msg.message.includes('campaign') ||\n                msg.message.includes('progress') ||\n                msg.message.includes('metrics') ||\n                msg.message.includes('safety')),\n          );\n\n          // Campaign variable patterns should be ignored\n          expect(unusedVarErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const unusedVarErrors = result[0].messages.filter(\n              (msg: unknown) =>\n                msg.ruleId === '@typescript-eslint/no-unused-vars' &&\n                (msg.message.includes('campaign') ||\n                  msg.message.includes('progress') ||\n                  msg.message.includes('metrics') ||\n                  msg.message.includes('safety')),\n            );\n\n            expect(unusedVarErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should recognize campaign constant patterns', async () => {\n      const testContent = `\n        class CampaignConstants {\n          private static readonly CAMPAIGN_TYPES = {\n            TYPESCRIPT_ELIMINATION: 'typescript-elimination',\n            LINTING_EXCELLENCE: 'linting-excellence',\n            PERFORMANCE_OPTIMIZATION: 'performance-optimization'\n          };\n\n          private static readonly PROGRESS_THRESHOLDS = {\n            WARNING: 0.2,\n            CRITICAL: 0.5,\n            SUCCESS: 0.9\n          };\n\n          private static readonly METRICS_CONFIG = {\n            COLLECTION_INTERVAL: 5000,\n            RETENTION_PERIOD: 86400000,\n            MAX_ENTRIES: 10000\n          };\n\n          private static readonly SAFETY_LIMITS = {\n            MAX_ERRORS: 1000,\n            MAX_BATCH_SIZE: 50,\n            MAX_MEMORY_USAGE: 4096\n          };\n\n          private static readonly ERROR_CATEGORIES = {\n            TYPESCRIPT: 'typescript',\n            LINTING: 'linting',\n            BUILD: 'build',\n            RUNTIME: 'runtime'\n          };\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/services/campaign/temp-campaign-constants.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const unusedVarErrors = result[0].messages.filter(\n            (msg: unknown) => (msg as any).ruleId === '@typescript-eslint/no-unused-vars',\n          );\n\n          // Campaign constants should be allowed even if unused\n          expect(unusedVarErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const unusedVarErrors = result[0].messages.filter(\n              (msg: unknown) => (msg as any).ruleId === '@typescript-eslint/no-unused-vars',\n            );\n\n            expect(unusedVarErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n  });\n\n  describe('Dynamic Import Allowance', () => {\n    test('should allow dynamic imports for campaign tools', async () => {\n      const testContent = `\n        class CampaignToolLoader {\n          public async loadCampaignTool(toolName: string): Promise<any> {\n            // Dynamic imports for campaign tools should be allowed\n            const toolPath = \\`./tools/\\${toolName}\\`;\n            const tool = import(toolPath);\n            return tool.default || tool;\n          }\n\n          public async loadConfigBasedTool(config: unknown): Promise<any> {\n            const toolModule = config.toolModule;\n            const dynamicTool = import(toolModule);\n            return dynamicTool;\n          }\n\n          public loadSynchronousTool(toolName: string): any {\n            // Dynamic require should also be allowed\n            const toolPath = \\`./tools/\\${toolName}\\`;\n            return require(toolPath);\n          }\n\n          public loadEnvironmentTool(): any {\n            const toolModule = process.env.CAMPAIGN_TOOL_MODULE;\n            if (toolModule) {\n              return require(toolModule);\n            }\n            return null;\n          }\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/services/campaign/temp-dynamic-imports.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const dynamicImportErrors = result[0].messages.filter(\n            (msg: unknown) => (msg as any).ruleId === 'import/no-dynamic-require' && msg.severity === 2, // error level\n          );\n\n          // Campaign files should allow dynamic imports\n          expect(dynamicImportErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const dynamicImportErrors = result[0].messages.filter(\n              (msg: unknown) => (msg as any).ruleId === 'import/no-dynamic-require' && msg.severity === 2,\n            );\n\n            expect(dynamicImportErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n  });\n\n  describe('File Pattern Matching', () => {\n    test('should apply campaign rules to correct file patterns', () => {\n      // Test that campaign files are properly matched by ESLint config\n      const campaignFiles = [\n        'src/services/campaign/CampaignController.ts',\n        'src/services/campaign/ProgressTracker.ts',\n        'src/services/campaign/SafetyProtocol.ts',\n        'src/types/campaign.ts',\n        'src/utils/CampaignUtils.ts',\n        'src/utils/ProgressUtils.ts',\n      ];\n\n      campaignFiles.forEach(file => {\n        // Check if file would match campaign patterns in ESLint config\n        const matchesCampaignPattern =\n          file.includes('/services/campaign/') ||\n          file.includes('/types/campaign.ts') ||\n          file.includes('Campaign') ||\n          file.includes('Progress');\n\n        expect(matchesCampaignPattern).toBe(true);\n      });\n    });\n\n    test('should not apply campaign rules to non-campaign files', () => {\n      const nonCampaignFiles = [\n        'src/components/FoodRecommender.tsx',\n        'src/calculations/culinaryAstrology.ts',\n        'src/utils/reliableAstronomy.ts',\n        'src/data/ingredients/vegetables.ts',\n      ];\n\n      nonCampaignFiles.forEach(file => {\n        // Check that file would NOT match campaign patterns\n        const matchesCampaignPattern =\n          file.includes('/services/campaign/') ||\n          file.includes('/types/campaign.ts') ||\n          (file.includes('Campaign') && !file.includes('components')) ||\n          (file.includes('Progress') && !file.includes('components'));\n\n        expect(matchesCampaignPattern).toBe(false);\n      });\n    });\n  });\n\n  describe('Integration with Existing Campaign Files', () => {\n    test('should validate existing CampaignController if present', async () => {\n      const campaignControllerPath = join(projectRoot, 'src/services/campaign/CampaignController.ts');\n\n      if (existsSync(campaignControllerPath)) {\n        try {\n          const output = execSync(\n            'yarn eslint --format json --no-eslintrc --config eslint.config.cjs ' + campaignControllerPath,\n            { encoding: 'utf8' },\n          );\n          const result = JSON.parse(output);\n\n          if (result.length > 0 && result[0].messages) {\n            const restrictiveErrors = result[0].messages.filter(\n              (msg: unknown) =>\n                (msg.ruleId === 'complexity' && msg.severity === 2) ||\n                (msg.ruleId === 'max-lines-per-function' && msg.severity === 2) ||\n                (msg.ruleId === 'no-console' && msg.severity === 2),\n            );\n\n            // Existing campaign files should not have restrictive errors\n            expect(restrictiveErrors.length).toBe(0);\n          }\n        } catch (error) {\n          const output = (error as any).stdout?.toString() || '';\n          if (output) {\n            const result = JSON.parse(output);\n            if (result.length > 0 && result[0].messages) {\n              const restrictiveErrors = result[0].messages.filter(\n                (msg: unknown) =>\n                  (msg.ruleId === 'complexity' && msg.severity === 2) ||\n                  (msg.ruleId === 'max-lines-per-function' && msg.severity === 2) ||\n                  (msg.ruleId === 'no-console' && msg.severity === 2),\n              );\n\n              expect(restrictiveErrors.length).toBe(0);\n            }\n          }\n        }\n      } else {\n        // If file doesn't exist, test passes\n        expect(true).toBe(true);\n      }\n    });\n\n    test('should validate existing ProgressTracker if present', async () => {\n      const progressTrackerPath = join(projectRoot, 'src/services/campaign/ProgressTracker.ts');\n\n      if (existsSync(progressTrackerPath)) {\n        try {\n          const output = execSync(\n            'yarn eslint --format json --no-eslintrc --config eslint.config.cjs ' + progressTrackerPath,\n            { encoding: 'utf8' },\n          );\n          const result = JSON.parse(output);\n\n          if (result.length > 0 && result[0].messages) {\n            const restrictiveErrors = result[0].messages.filter(\n              (msg: unknown) =>\n                (msg.ruleId === 'complexity' && msg.severity === 2) ||\n                (msg.ruleId === 'max-lines-per-function' && msg.severity === 2) ||\n                (msg.ruleId === 'no-console' && msg.severity === 2),\n            );\n\n            expect(restrictiveErrors.length).toBe(0);\n          }\n        } catch (error) {\n          const output = (error as any).stdout?.toString() || '';\n          if (output) {\n            const result = JSON.parse(output);\n            if (result.length > 0 && result[0].messages) {\n              const restrictiveErrors = result[0].messages.filter(\n                (msg: unknown) =>\n                  (msg.ruleId === 'complexity' && msg.severity === 2) ||\n                  (msg.ruleId === 'max-lines-per-function' && msg.severity === 2) ||\n                  (msg.ruleId === 'no-console' && msg.severity === 2),\n              );\n\n              expect(restrictiveErrors.length).toBe(0);\n            }\n          }\n        }\n      } else {\n        expect(true).toBe(true);\n      }\n    });\n  });\n});\n"],"version":3}