{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/CampaignController.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/CampaignController.ts"],"sourcesContent":["/**\n * Campaign Controller Core\n * Perfect Codebase Campaign - Main Controller Implementation\n */\n\nimport {\n  CampaignConfig,\n  CampaignPhase,\n  PhaseResult,\n  ProgressMetrics,\n  ValidationResult,\n  CheckpointId,\n  PhaseReport,\n  PhaseStatus,\n  SafetyEvent,\n  SafetyEventType,\n  SafetyEventSeverity,\n  MetricsImprovement\n} from '../../types/campaign';\n\nexport class CampaignController {\n  private config: CampaignConfig;\n  private currentPhase: CampaignPhase | null = null;\n  private safetyEvents: SafetyEvent[] = [];\n\n  constructor(config: CampaignConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Execute a specific campaign phase\n   */\n  async executePhase(phase: CampaignPhase): Promise<PhaseResult> {\n    const startTime = Date.now();\n    this.currentPhase = phase;\n    \n    this.addSafetyEvent({\n      type: SafetyEventType.CHECKPOINT_CREATED,\n      timestamp: new Date(),\n      description: `Starting phase: ${phase.name}`,\n      severity: SafetyEventSeverity.INFO,\n      action: 'PHASE_START'\n    });\n\n    try {\n      // Create safety checkpoint before phase execution\n      const checkpointId = await this.createSafetyCheckpoint(\n        `Pre-phase checkpoint: ${phase.name}`\n      );\n\n      // Initialize phase metrics\n      const initialMetrics = await this.getCurrentMetrics();\n      \n      // Execute phase tools in sequence\n      let filesProcessed = 0;\n      let errorsFixed = 0;\n      const warningsFixed = 0;\n\n      for (const tool of phase.tools) {\n        const toolResult = await this.executeTool(tool);\n        filesProcessed += toolResult.filesProcessed.length;\n        errorsFixed += toolResult.changesApplied;\n        \n        // Validate after each tool execution\n        const validation = await this.validatePhaseProgress(phase);\n        if (!validation.success && this.config.safetySettings.automaticRollbackEnabled) {\n          await this.rollbackToCheckpoint(checkpointId);\n          throw new Error(`Tool execution failed: ${validation.errors.join(', ')}`);\n        }\n      }\n\n      // Get final metrics and calculate improvement\n      const finalMetrics = await this.getCurrentMetrics();\n      const metricsImprovement = this.calculateMetricsImprovement(initialMetrics, finalMetrics);\n\n      const executionTime = Date.now() - startTime;\n\n      const result: PhaseResult = {\n        phaseId: phase.id,\n        success: true,\n        metricsImprovement,\n        filesProcessed,\n        errorsFixed,\n        warningsFixed,\n        executionTime,\n        safetyEvents: [...this.safetyEvents]\n      };\n\n      this.addSafetyEvent({\n        type: SafetyEventType.CHECKPOINT_CREATED,\n        timestamp: new Date(),\n        description: `Phase completed successfully: ${phase.name}`,\n        severity: SafetyEventSeverity.INFO,\n        action: 'PHASE_COMPLETE'\n      });\n\n      return result;\n\n    } catch (error) {\n      this.addSafetyEvent({\n        type: SafetyEventType.BUILD_FAILURE,\n        timestamp: new Date(),\n        description: `Phase execution failed: ${error.message}`,\n        severity: SafetyEventSeverity.ERROR,\n        action: 'PHASE_FAILED'\n      });\n\n      const executionTime = Date.now() - startTime;\n\n      return {\n        phaseId: phase.id,\n        success: false,\n        metricsImprovement: {\n          typeScriptErrorsReduced: 0,\n          lintingWarningsReduced: 0,\n          buildTimeImproved: 0,\n          enterpriseSystemsAdded: 0\n        },\n        filesProcessed: 0,\n        errorsFixed: 0,\n        warningsFixed: 0,\n        executionTime,\n        safetyEvents: [...this.safetyEvents]\n      };\n    }\n  }\n\n  /**\n   * Validate phase completion against success criteria\n   */\n  async validatePhaseCompletion(phase: CampaignPhase): Promise<ValidationResult> {\n    try {\n      const currentMetrics = await this.getCurrentMetrics();\n      const errors: string[] = [];\n      const warnings: string[] = [];\n\n      // Check TypeScript errors if specified\n      if (phase.successCriteria.typeScriptErrors !== undefined) {\n        if (currentMetrics.typeScriptErrors.current > phase.successCriteria.typeScriptErrors) {\n          errors.push(\n            `TypeScript errors: ${currentMetrics.typeScriptErrors.current} > ${phase.successCriteria.typeScriptErrors}`\n          );\n        }\n      }\n\n      // Check linting warnings if specified\n      if (phase.successCriteria.lintingWarnings !== undefined) {\n        if (currentMetrics.lintingWarnings.current > phase.successCriteria.lintingWarnings) {\n          errors.push(\n            `Linting warnings: ${currentMetrics.lintingWarnings.current} > ${phase.successCriteria.lintingWarnings}`\n          );\n        }\n      }\n\n      // Check build time if specified\n      if (phase.successCriteria.buildTime !== undefined) {\n        if (currentMetrics.buildPerformance.currentTime > phase.successCriteria.buildTime) {\n          warnings.push(\n            `Build time: ${currentMetrics.buildPerformance.currentTime}s > ${phase.successCriteria.buildTime}s`\n          );\n        }\n      }\n\n      // Check enterprise systems if specified\n      if (phase.successCriteria.enterpriseSystems !== undefined) {\n        if (currentMetrics.enterpriseSystems.current < phase.successCriteria.enterpriseSystems) {\n          errors.push(\n            `Enterprise systems: ${currentMetrics.enterpriseSystems.current} < ${phase.successCriteria.enterpriseSystems}`\n          );\n        }\n      }\n\n      // Run custom validation if provided\n      if (phase.successCriteria.customValidation) {\n        const customResult = await phase.successCriteria.customValidation();\n        if (!customResult) {\n          errors.push('Custom validation failed');\n        }\n      }\n\n      return {\n        success: errors.length === 0,\n        errors,\n        warnings,\n        metrics: currentMetrics\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        errors: [`Validation error: ${error.message}`],\n        warnings: []\n      };\n    }\n  }\n\n  /**\n   * Create a safety checkpoint with current state\n   */\n  async createSafetyCheckpoint(description: string): Promise<CheckpointId> {\n    // This will be implemented by the SafetyProtocol class\n    // For now, return a mock checkpoint ID\n    const checkpointId = `checkpoint_${Date.now()}`;\n    \n    this.addSafetyEvent({\n      type: SafetyEventType.CHECKPOINT_CREATED,\n      timestamp: new Date(),\n      description: `Safety checkpoint created: ${description}`,\n      severity: SafetyEventSeverity.INFO,\n      action: 'CHECKPOINT_CREATE'\n    });\n\n    return checkpointId;\n  }\n\n  /**\n   * Rollback to a specific checkpoint\n   */\n  async rollbackToCheckpoint(checkpointId: CheckpointId): Promise<void> {\n    this.addSafetyEvent({\n      type: SafetyEventType.ROLLBACK_TRIGGERED,\n      timestamp: new Date(),\n      description: `Rolling back to checkpoint: ${checkpointId}`,\n      severity: SafetyEventSeverity.WARNING,\n      action: 'ROLLBACK'\n    });\n\n    // This will be implemented by the SafetyProtocol class\n    // For now, just log the rollback attempt\n    console.log(`Rollback to checkpoint ${checkpointId} requested`);\n  }\n\n  /**\n   * Get current progress metrics\n   */\n  async getProgressMetrics(): Promise<ProgressMetrics> {\n    return this.getCurrentMetrics();\n  }\n\n  /**\n   * Generate comprehensive phase report\n   */\n  async generatePhaseReport(phase: CampaignPhase): Promise<PhaseReport> {\n    const currentMetrics = await this.getCurrentMetrics();\n    const validation = await this.validatePhaseCompletion(phase);\n\n    return {\n      phaseId: phase.id,\n      phaseName: phase.name,\n      startTime: new Date(), // This should be tracked properly\n      status: validation.success ? PhaseStatus.COMPLETED : PhaseStatus.IN_PROGRESS,\n      metrics: currentMetrics,\n      achievements: this.generateAchievements(phase, currentMetrics),\n      issues: validation.errors,\n      recommendations: this.generateRecommendations(phase, validation)\n    };\n  }\n\n  /**\n   * Load and validate campaign configuration\n   */\n  static async loadConfiguration(configPath?: string): Promise<CampaignConfig> {\n    // Default configuration based on the design document\n    const defaultConfig: CampaignConfig = {\n      phases: [\n        {\n          id: 'phase1',\n          name: 'TypeScript Error Elimination',\n          description: 'Eliminate all TypeScript compilation errors',\n          tools: [\n            {\n              scriptPath: 'scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js',\n              parameters: { maxFiles: 15, autoFix: true, validateSafety: true },\n              batchSize: 15,\n              safetyLevel: 'MAXIMUM' as any\n            }\n          ],\n          successCriteria: {\n            typeScriptErrors: 0\n          },\n          safetyCheckpoints: []\n        },\n        {\n          id: 'phase2',\n          name: 'Linting Excellence Achievement',\n          description: 'Eliminate all linting warnings',\n          tools: [\n            {\n              scriptPath: 'scripts/typescript-fixes/fix-explicit-any-systematic.js',\n              parameters: { maxFiles: 25, autoFix: true },\n              batchSize: 25,\n              safetyLevel: 'HIGH' as any\n            }\n          ],\n          successCriteria: {\n            lintingWarnings: 0\n          },\n          safetyCheckpoints: []\n        }\n      ],\n      safetySettings: {\n        maxFilesPerBatch: 25,\n        buildValidationFrequency: 5,\n        testValidationFrequency: 10,\n        corruptionDetectionEnabled: true,\n        automaticRollbackEnabled: true,\n        stashRetentionDays: 7\n      },\n      progressTargets: {\n        typeScriptErrors: 0,\n        lintingWarnings: 0,\n        buildTime: 10,\n        enterpriseSystems: 200\n      },\n      toolConfiguration: {\n        enhancedErrorFixer: 'scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js',\n        explicitAnyFixer: 'scripts/typescript-fixes/fix-explicit-any-systematic.js',\n        unusedVariablesFixer: 'scripts/typescript-fixes/fix-unused-variables-enhanced.js',\n        consoleStatementFixer: 'scripts/lint-fixes/fix-console-statements-only.js'\n      }\n    };\n\n    // If configPath is provided, load from file\n    // For now, return default configuration\n    return defaultConfig;\n  }\n\n  // Private helper methods\n\n  private async executeTool(tool: any): Promise<any> {\n    // Mock implementation - will be replaced by actual script execution\n    return {\n      filesProcessed: [],\n      changesApplied: 0,\n      success: true\n    };\n  }\n\n  private async validatePhaseProgress(phase: CampaignPhase): Promise<ValidationResult> {\n    // Mock implementation - will be replaced by actual validation\n    return {\n      success: true,\n      errors: [],\n      warnings: []\n    };\n  }\n\n  private async getCurrentMetrics(): Promise<ProgressMetrics> {\n    // This will be implemented by the ProgressTracker class\n    // For now, return mock metrics\n    return {\n      typeScriptErrors: {\n        current: 86,\n        target: 0,\n        reduction: 0,\n        percentage: 0\n      },\n      lintingWarnings: {\n        current: 4506,\n        target: 0,\n        reduction: 0,\n        percentage: 0\n      },\n      buildPerformance: {\n        currentTime: 8.5,\n        targetTime: 10,\n        cacheHitRate: 0.8,\n        memoryUsage: 45\n      },\n      enterpriseSystems: {\n        current: 0,\n        target: 200,\n        transformedExports: 0\n      }\n    };\n  }\n\n  private calculateMetricsImprovement(\n    initial: ProgressMetrics,\n    final: ProgressMetrics\n  ): MetricsImprovement {\n    return {\n      typeScriptErrorsReduced: initial.typeScriptErrors.current - final.typeScriptErrors.current,\n      lintingWarningsReduced: initial.lintingWarnings.current - final.lintingWarnings.current,\n      buildTimeImproved: initial.buildPerformance.currentTime - final.buildPerformance.currentTime,\n      enterpriseSystemsAdded: final.enterpriseSystems.current - initial.enterpriseSystems.current\n    };\n  }\n\n  private generateAchievements(phase: CampaignPhase, metrics: ProgressMetrics): string[] {\n    const achievements: string[] = [];\n    \n    if (metrics.typeScriptErrors.current === 0) {\n      achievements.push('Zero TypeScript errors achieved');\n    }\n    \n    if (metrics.lintingWarnings.current === 0) {\n      achievements.push('Zero linting warnings achieved');\n    }\n    \n    if (metrics.buildPerformance.currentTime <= 10) {\n      achievements.push('Build time under 10 seconds maintained');\n    }\n    \n    return achievements;\n  }\n\n  private generateRecommendations(phase: CampaignPhase, validation: ValidationResult): string[] {\n    const recommendations: string[] = [];\n    \n    if (validation.errors.length > 0) {\n      recommendations.push('Address validation errors before proceeding');\n    }\n    \n    if (validation.warnings.length > 0) {\n      recommendations.push('Consider addressing warnings for optimal performance');\n    }\n    \n    return recommendations;\n  }\n\n  private addSafetyEvent(event: SafetyEvent): void {\n    this.safetyEvents.push(event);\n    \n    // Keep only recent events to prevent memory issues\n    if (this.safetyEvents.length > 1000) {\n      this.safetyEvents = this.safetyEvents.slice(-500);\n    }\n  }\n}"],"version":3}