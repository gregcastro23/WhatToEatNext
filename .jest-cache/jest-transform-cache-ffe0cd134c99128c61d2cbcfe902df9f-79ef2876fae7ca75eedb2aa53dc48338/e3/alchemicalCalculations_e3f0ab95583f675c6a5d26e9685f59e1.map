{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/alchemicalCalculations.ts","mappings":";;;AAUA,+BAA+B;AAC/B,MAAM,YAAY,GAA2B;IAC3C,OAAO,EAAE,MAAM;IACf,KAAK,EAAE,MAAM;IACb,aAAa,EAAE,MAAM;IACrB,QAAQ,EAAE,OAAO;IACjB,OAAO,EAAE,OAAO;IAChB,WAAW,EAAE,OAAO;IACpB,QAAQ,EAAE,KAAK;IACf,OAAO,EAAE,KAAK;IACd,UAAU,EAAE,KAAK;IACjB,QAAQ,EAAE,OAAO;IACjB,SAAS,EAAE,OAAO;IAClB,QAAQ,EAAE,OAAO;CAClB,CAAC;AAEF,6CAA6C;AAC7C,MAAM,0BAA0B,GAA2C;IACzE,KAAK,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE;IACjE,MAAM,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE;IAClE,SAAS,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE;IACrE,OAAO,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE;IACnE,MAAM,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE;IAClE,SAAS,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE;IACrE,QAAQ,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE;IACpE,QAAQ,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE;IACpE,SAAS,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE;IACrE,OAAO,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE;CACpE,CAAC;AAEF,0DAA0D;AAC1D,SAAgB,wBAAwB,CAAC,SAAiC;IACxE,MAAM,QAAQ,GAAG;QACf,IAAI,EAAE,CAAC;QACP,KAAK,EAAE,CAAC;QACR,GAAG,EAAE,CAAC;QACN,KAAK,EAAE,CAAC;KACT,CAAC;IAEF,2BAA2B;IAC3B,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACnD,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,MAAM,KAAK,WAAW,IAAI,MAAM,KAAK,WAAW,IAAI,MAAM,KAAK,WAAW,EAAE;YAC5F,OAAO;SACR;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QACxC,MAAM,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC;QAEpD,mDAAmD;QACnD,IAAI,OAAO,KAAK,MAAM,IAAI,OAAO,KAAK,OAAO,IAAI,OAAO,KAAK,OAAO,IAAI,OAAO,KAAK,KAAK,EAAE;YACzF,8BAA8B;YAC9B,IAAI,MAAM,GAAG,GAAG,CAAC;YACjB,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,MAAM;gBAAE,MAAM,GAAG,GAAG,CAAC;YACxD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,OAAO,IAAI,MAAM,KAAK,MAAM;gBAAE,MAAM,GAAG,GAAG,CAAC;YAElF,QAAQ,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC;SAC7B;IACH,CAAC,CAAC,CAAC;IAEH,4CAA4C;IAC5C,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC;IAE7E,OAAO;QACL,MAAM,EAAE,CAAC,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG;QAC1D,OAAO,EAAE,CAAC,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG;QAC7D,MAAM,EAAE,CAAC,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG;QAC7D,SAAS,EAAE,CAAC,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG;KAC/D,CAAC;AACJ,CAAC;AArCD,4DAqCC;AAED,yDAAyD;AACzD,SAAgB,kCAAkC,CAAC,SAAiC;IAClF,MAAM,gBAAgB,GAAG;QACvB,MAAM,EAAE,IAAI;QACZ,OAAO,EAAE,IAAI;QACb,MAAM,EAAE,IAAI;QACZ,SAAS,EAAE,IAAI;KAChB,CAAC;IAEF,IAAI,WAAW,GAAG,CAAC,CAAC;IAEpB,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACnD,IAAI,CAAC,IAAI,IAAI,MAAM,KAAK,WAAW,IAAI,MAAM,KAAK,WAAW,IAAI,MAAM,KAAK,WAAW,EAAE;YACvF,OAAO;SACR;QAED,MAAM,UAAU,GAAG,0BAA0B,CAAC,MAAM,CAAC,CAAC;QACtD,IAAI,CAAC,UAAU;YAAE,OAAO;QAExB,8BAA8B;QAC9B,IAAI,iBAAiB,GAAG,GAAG,CAAC;QAC5B,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,uBAAuB;YACvB,IACE,CAAC,MAAM,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC;gBACzC,CAAC,MAAM,KAAK,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC;gBAC7C,CAAC,MAAM,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;gBAC3E,CAAC,MAAM,KAAK,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;gBACzE,CAAC,MAAM,KAAK,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC;gBACzE,CAAC,MAAM,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,aAAa,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC;gBACjF,CAAC,MAAM,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC;gBAChF,CAAC,MAAM,KAAK,QAAQ,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,CAAC;gBACjD,CAAC,MAAM,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC;gBAChD,CAAC,MAAM,KAAK,OAAO,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC,EAC/C;gBACA,iBAAiB,GAAG,GAAG,CAAC,CAAC,wBAAwB;aAClD;iBAAM,IACL,CAAC,MAAM,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC;gBAC3C,CAAC,MAAM,KAAK,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC;gBAC7C,CAAC,MAAM,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC;gBAChD,CAAC,MAAM,KAAK,OAAO,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,EAC9C;gBACA,iBAAiB,GAAG,GAAG,CAAC,CAAC,aAAa;aACvC;iBAAM,IACL,CAAC,MAAM,KAAK,OAAO,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC;gBAC7C,CAAC,MAAM,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC;gBAChD,CAAC,MAAM,KAAK,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC;gBAC7C,CAAC,MAAM,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,CAAC,EACnD;gBACA,iBAAiB,GAAG,GAAG,CAAC,CAAC,OAAO;aACjC;SACF;QAED,4BAA4B;QAC5B,MAAM,MAAM,GAAG,iBAAiB,CAAC;QACjC,WAAW,IAAI,MAAM,CAAC;QAEtB,gBAAgB,CAAC,MAAM,IAAI,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC;QACtD,gBAAgB,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO,GAAG,MAAM,CAAC;QACxD,gBAAgB,CAAC,MAAM,IAAI,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC;QACtD,gBAAgB,CAAC,SAAS,IAAI,UAAU,CAAC,SAAS,GAAG,MAAM,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,mBAAmB;IACnB,IAAI,WAAW,GAAG,CAAC,EAAE;QACnB,MAAM,UAAU,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;QAEzE,OAAO;YACL,MAAM,EAAE,gBAAgB,CAAC,MAAM,GAAG,UAAU;YAC5C,OAAO,EAAE,gBAAgB,CAAC,OAAO,GAAG,UAAU;YAC9C,MAAM,EAAE,gBAAgB,CAAC,MAAM,GAAG,UAAU;YAC5C,SAAS,EAAE,gBAAgB,CAAC,SAAS,GAAG,UAAU;SACnD,CAAC;KACH;IAED,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AA3ED,gFA2EC;AAED,2DAA2D;AAC3D,SAAgB,yBAAyB,CAAC,SAAiC;IACzE,oCAAoC;IACpC,MAAM,QAAQ,GAAG;QACf,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,IAAI;QACX,GAAG,EAAE,IAAI;QACT,KAAK,EAAE,IAAI;KACZ,CAAC;IAEF,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;QACrD,OAAO,QAAQ,CAAC;KACjB;IAED,IAAI,WAAW,GAAG,CAAC,CAAC;IACpB,IAAI,aAAa,GAAG,KAAK,CAAC;IAE1B,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACnD,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,MAAM,KAAK,WAAW,IAAI,MAAM,KAAK,WAAW,IAAI,MAAM,KAAK,WAAW,EAAE;YACrG,OAAO;SACR;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QACxC,MAAM,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;QAEtC,uCAAuC;QACvC,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,MAAM,IAAI,OAAO,KAAK,OAAO,IAAI,OAAO,KAAK,OAAO,IAAI,OAAO,KAAK,KAAK,CAAC,EAAE;YACtG,8BAA8B;YAC9B,IAAI,MAAM,GAAG,GAAG,CAAC;YACjB,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,MAAM;gBAAE,MAAM,GAAG,GAAG,CAAC;YACxD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,OAAO,IAAI,MAAM,KAAK,MAAM;gBAAE,MAAM,GAAG,GAAG,CAAC;YAElF,QAAQ,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC;YAC5B,WAAW,IAAI,MAAM,CAAC;YACtB,aAAa,GAAG,IAAI,CAAC;SACtB;IACH,CAAC,CAAC,CAAC;IAEH,qCAAqC;IACrC,IAAI,WAAW,GAAG,CAAC,IAAI,aAAa,EAAE;QACpC,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC;QAE7E,OAAO;YACL,IAAI,EAAE,QAAQ,CAAC,IAAI,GAAG,KAAK;YAC3B,KAAK,EAAE,QAAQ,CAAC,KAAK,GAAG,KAAK;YAC7B,GAAG,EAAE,QAAQ,CAAC,GAAG,GAAG,KAAK;YACzB,KAAK,EAAE,QAAQ,CAAC,KAAK,GAAG,KAAK;SAC9B,CAAC;KACH;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC;AAlDD,8DAkDC;AA+BD;;;;;;;;GAQG;AACH,SAAgB,SAAS,CACvB,kBAAqD,EACrD,SAAS,GAAG,IAAI,EAChB,UAAmB,EACnB,WAAqC;IAErC,yCAAyC;IACzC,MAAM,gBAAgB,GAAG;QACvB,IAAI,EAAE,CAAC;QACP,KAAK,EAAE,CAAC;QACR,GAAG,EAAE,CAAC;QACN,KAAK,EAAE,CAAC;KACT,CAAC;IAEF,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,SAAS,GAAG,CAAC,CAAC;IAElB,qDAAqD;IACrD,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,EAAE;QACtE,IAAI,CAAC,UAAU,CAAC,IAAI;YAAE,OAAO;QAE7B,MAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,aAAa,GAAkB,IAAI,CAAC;QAExC,gCAAgC;QAChC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YAClD,aAAa,GAAG,MAAM,CAAC;SACxB;aAAM,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YAC1D,aAAa,GAAG,OAAO,CAAC;SACzB;aAAM,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACzD,aAAa,GAAG,KAAK,CAAC;SACvB;aAAM,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACzD,aAAa,GAAG,OAAO,CAAC;SACzB;QAED,2BAA2B;QAC3B,IAAI,CAAC,aAAa;YAAE,OAAO;QAE3B,8CAA8C;QAC9C,IAAI,YAAY,GAAG,GAAG,CAAC;QACvB,IAAI,UAAU,KAAK,KAAK,IAAI,UAAU,KAAK,MAAM,EAAE;YACjD,YAAY,GAAG,GAAG,CAAC;SACpB;aAAM,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YAC5D,YAAY,GAAG,GAAG,CAAC;SACpB;QAED,wBAAwB;QACxB,IAAI,UAAU,CAAC,YAAY,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC,EAAE;YACvE,YAAY,IAAI,GAAG,CAAC,CAAC,mCAAmC;SACzD;QAED,wDAAwD;QACxD,gBAAgB,CAAC,aAAa,CAAC,IAAI,YAAY,CAAC;QAEhD,wCAAwC;QACxC,QAAQ,UAAU,CAAC,WAAW,EAAE,EAAE;YAChC,KAAK,KAAK;gBACR,MAAM,IAAI,CAAC,GAAG,YAAY,CAAC;gBAC3B,MAAM;YACR,KAAK,MAAM;gBACT,OAAO,IAAI,CAAC,GAAG,YAAY,CAAC;gBAC5B,MAAM;YACR,KAAK,SAAS;gBACZ,SAAS,IAAI,GAAG,GAAG,YAAY,CAAC;gBAChC,MAAM,IAAI,GAAG,GAAG,YAAY,CAAC;gBAC7B,MAAM;YACR,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,GAAG,YAAY,CAAC;gBAC5B,MAAM;YACR,KAAK,MAAM;gBACT,MAAM,IAAI,GAAG,GAAG,YAAY,CAAC;gBAC7B,OAAO,IAAI,GAAG,GAAG,YAAY,CAAC;gBAC9B,MAAM;YACR,KAAK,SAAS;gBACZ,MAAM,IAAI,GAAG,GAAG,YAAY,CAAC;gBAC7B,OAAO,IAAI,GAAG,GAAG,YAAY,CAAC;gBAC9B,MAAM;YACR,KAAK,QAAQ;gBACX,MAAM,IAAI,CAAC,GAAG,YAAY,CAAC;gBAC3B,MAAM;YACR,KAAK,QAAQ;gBACX,SAAS,IAAI,CAAC,GAAG,YAAY,CAAC;gBAC9B,MAAM;YACR,KAAK,SAAS;gBACZ,OAAO,IAAI,GAAG,GAAG,YAAY,CAAC;gBAC9B,SAAS,IAAI,GAAG,GAAG,YAAY,CAAC;gBAChC,MAAM;YACR,KAAK,OAAO;gBACV,MAAM,IAAI,GAAG,GAAG,YAAY,CAAC;gBAC7B,OAAO,IAAI,GAAG,GAAG,YAAY,CAAC;gBAC9B,MAAM;SACT;IACH,CAAC,CAAC,CAAC;IAEH,qCAAqC;IACrC,IAAI,SAAS,EAAE;QACb,gBAAgB,CAAC,IAAI,IAAI,GAAG,CAAC;QAC7B,gBAAgB,CAAC,GAAG,IAAI,GAAG,CAAC;KAC7B;SAAM;QACL,gBAAgB,CAAC,KAAK,IAAI,GAAG,CAAC;QAC9B,gBAAgB,CAAC,KAAK,IAAI,GAAG,CAAC;KAC/B;IAED,2CAA2C;IAC3C,IAAI,UAAU,EAAE;QACd,IAAI,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC/B,gBAAgB,CAAC,IAAI,IAAI,GAAG,CAAC;YAC7B,gBAAgB,CAAC,KAAK,IAAI,GAAG,CAAC;YAC9B,MAAM,IAAI,GAAG,CAAC;YACd,OAAO,IAAI,GAAG,CAAC;SAChB;aAAM,IAAI,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YACrC,gBAAgB,CAAC,KAAK,IAAI,GAAG,CAAC;YAC9B,gBAAgB,CAAC,GAAG,IAAI,GAAG,CAAC;YAC5B,MAAM,IAAI,GAAG,CAAC;YACd,SAAS,IAAI,GAAG,CAAC;SAClB;aAAM,IAAI,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACxC,gBAAgB,CAAC,IAAI,IAAI,IAAI,CAAC;YAC9B,gBAAgB,CAAC,GAAG,IAAI,IAAI,CAAC;YAC7B,MAAM,IAAI,GAAG,CAAC;YACd,SAAS,IAAI,GAAG,CAAC;SAClB;aAAM,IAAI,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACxC,gBAAgB,CAAC,KAAK,IAAI,IAAI,CAAC;YAC/B,gBAAgB,CAAC,KAAK,IAAI,IAAI,CAAC;YAC/B,MAAM,IAAI,GAAG,CAAC;YACd,OAAO,IAAI,GAAG,CAAC;SAChB;KACF;IAED,6BAA6B;IAC7B,IAAI,eAAe,GAAG,UAAU,CAAC;IACjC,IAAI,QAAQ,GAAG,CAAC,CAAC;IAEjB,KAAK,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;QAC/D,IAAI,KAAK,GAAG,QAAQ,EAAE;YACpB,QAAQ,GAAG,KAAK,CAAC;YACjB,eAAe,GAAG,OAAO,CAAC;SAC3B;KACF;IAED,0DAA0D;IAC1D,MAAM,cAAc,GAAG,sBAAsB,CAAC,eAAe,CAAC,CAAC;IAE/D,uBAAuB;IACvB,MAAM,cAAc,GAAG,gBAAgB,CAAC,IAAI,GAAG,gBAAgB,CAAC,KAAK;QAC9C,gBAAgB,CAAC,GAAG,GAAG,gBAAgB,CAAC,KAAK,CAAC;IAErE,IAAI,cAAc,GAAG,CAAC,EAAE;QACtB,gBAAgB,CAAC,IAAI,IAAI,cAAc,CAAC;QACxC,gBAAgB,CAAC,KAAK,IAAI,cAAc,CAAC;QACzC,gBAAgB,CAAC,GAAG,IAAI,cAAc,CAAC;QACvC,gBAAgB,CAAC,KAAK,IAAI,cAAc,CAAC;KAC1C;SAAM;QACL,sBAAsB;QACtB,gBAAgB,CAAC,IAAI,GAAG,IAAI,CAAC;QAC7B,gBAAgB,CAAC,KAAK,GAAG,IAAI,CAAC;QAC9B,gBAAgB,CAAC,GAAG,GAAG,IAAI,CAAC;QAC5B,gBAAgB,CAAC,KAAK,GAAG,IAAI,CAAC;KAC/B;IAED,kCAAkC;IAClC,MAAM,eAAe,GAAG,MAAM,GAAG,OAAO,GAAG,MAAM,GAAG,SAAS,CAAC;IAE9D,IAAI,eAAe,GAAG,CAAC,EAAE;QACvB,MAAM,IAAI,eAAe,CAAC;QAC1B,OAAO,IAAI,eAAe,CAAC;QAC3B,MAAM,IAAI,eAAe,CAAC;QAC1B,SAAS,IAAI,eAAe,CAAC;KAC9B;SAAM;QACL,sBAAsB;QACtB,MAAM,GAAG,IAAI,CAAC;QACd,OAAO,GAAG,IAAI,CAAC;QACf,MAAM,GAAG,IAAI,CAAC;QACd,SAAS,GAAG,IAAI,CAAC;KAClB;IAED,uDAAuD;IACvD,MAAM,gBAAgB,GAAG;QACvB,IAAI,EAAE,gBAAgB,CAAC,IAAI;QAC3B,KAAK,EAAE,gBAAgB,CAAC,KAAK;QAC7B,GAAG,EAAE,gBAAgB,CAAC,GAAG;QACzB,KAAK,EAAE,gBAAgB,CAAC,KAAK;KAC9B,CAAC;IAEF,OAAO;QACL,MAAM;QACN,OAAO;QACP,MAAM;QACN,SAAS;QACT,gBAAgB;QAChB,eAAe;QACf,cAAc;QACd,oBAAoB,EAAE,gBAAgB;KACvC,CAAC;AACJ,CAAC;AAnMD,8BAmMC;AAED;;;;GAIG;AACH,SAAS,sBAAsB,CAAC,eAAuB;IACrD,QAAQ,eAAe,EAAE;QACvB,KAAK,MAAM;YACT,OAAO,iGAAiG,CAAC;QAC3G,KAAK,OAAO;YACV,OAAO,kGAAkG,CAAC;QAC5G,KAAK,KAAK;YACR,OAAO,4GAA4G,CAAC;QACtH,KAAK,OAAO;YACV,OAAO,2GAA2G,CAAC;QACrH;YACE,OAAO,uFAAuF,CAAC;KAClG;AACH,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/alchemicalCalculations.ts"],"sourcesContent":["// Define PlanetaryPositionsType if we can't import it\nexport interface PlanetaryPositionsType {\n  [key: string]: {\n    sign?: string;\n    degree?: number;\n    isRetrograde?: boolean;\n    [key: string]: unknown;\n  };\n}\n\n// Map elements to zodiac signs\nconst signElements: Record<string, string> = {\n  'aries': 'Fire',\n  'leo': 'Fire',\n  'sagittarius': 'Fire',\n  'taurus': 'Earth',\n  'virgo': 'Earth',\n  'capricorn': 'Earth',\n  'gemini': 'Air',\n  'libra': 'Air',\n  'aquarius': 'Air',\n  'cancer': 'Water',\n  'scorpio': 'Water',\n  'pisces': 'Water'\n};\n\n// Map planets to their alchemical properties\nconst planetAlchemicalProperties: Record<string, Record<string, number>> = {\n  'sun': { Spirit: 1.0, Essence: 0.3, Matter: 0.1, Substance: 0.2 },\n  'moon': { Spirit: 0.2, Essence: 0.8, Matter: 0.7, Substance: 0.3 },\n  'mercury': { Spirit: 0.7, Essence: 0.4, Matter: 0.2, Substance: 0.8 },\n  'venus': { Spirit: 0.3, Essence: 0.9, Matter: 0.6, Substance: 0.2 },\n  'mars': { Spirit: 0.4, Essence: 0.7, Matter: 0.8, Substance: 0.3 },\n  'jupiter': { Spirit: 0.8, Essence: 0.6, Matter: 0.3, Substance: 0.4 },\n  'saturn': { Spirit: 0.6, Essence: 0.2, Matter: 0.9, Substance: 0.5 },\n  'uranus': { Spirit: 0.9, Essence: 0.5, Matter: 0.2, Substance: 0.7 },\n  'neptune': { Spirit: 0.7, Essence: 0.8, Matter: 0.1, Substance: 0.9 },\n  'pluto': { Spirit: 0.5, Essence: 0.7, Matter: 0.9, Substance: 0.4 }\n};\n\n// Calculate elemental values based on planetary positions\nexport function calculateElementalValues(positions: PlanetaryPositionsType) {\n  const elements = {\n    Fire: 0,\n    Earth: 0,\n    Air: 0,\n    Water: 0\n  };\n  \n  // Count planets by element\n  Object.entries(positions).forEach(([planet, data]) => {\n    if (!data.sign || planet === 'ascendant' || planet === 'northnode' || planet === 'southnode') {\n      return;\n    }\n    \n    const signKey = data.sign.toLowerCase();\n    const element = signElements[signKey] || 'balanced';\n    \n    // Only add to elements if it's a valid element key\n    if (element === 'Fire' || element === 'Water' || element === 'Earth' || element === 'Air') {\n      // Weight by planet importance\n      let weight = 1.0;\n      if (planet === 'sun' || planet === 'moon') weight = 3.0;\n      if (planet === 'mercury' || planet === 'venus' || planet === 'mars') weight = 1.5;\n      \n      elements[element] += weight;\n    }\n  });\n  \n  // Calculate alchemical values from elements\n  const total = elements.Fire + elements.Earth + elements.Air + elements.Water;\n  \n  return {\n    Spirit: (elements.Fire + elements.Air) / (total * 2) + 0.1,\n    Essence: (elements.Fire + elements.Water) / (total * 2) + 0.1,\n    Matter: (elements.Earth + elements.Water) / (total * 2) + 0.1,\n    Substance: (elements.Earth + elements.Air) / (total * 2) + 0.1\n  };\n}\n\n// Calculate planetary contributions to alchemical values\nexport function calculatePlanetaryAlchemicalValues(positions: PlanetaryPositionsType) {\n  const alchemicalValues = {\n    Spirit: 0.25,\n    Essence: 0.25,\n    Matter: 0.25,\n    Substance: 0.25\n  };\n  \n  let totalWeight = 0;\n  \n  Object.entries(positions).forEach(([planet, data]) => {\n    if (!data || planet === 'ascendant' || planet === 'northnode' || planet === 'southnode') {\n      return;\n    }\n    \n    const properties = planetAlchemicalProperties[planet];\n    if (!properties) return;\n    \n    // Weight by planetary dignity\n    let dignityMultiplier = 1.0;\n    if (data.sign) {\n      // Simple dignity check\n      if (\n        (planet === 'sun' && data.sign === 'leo') ||\n        (planet === 'moon' && data.sign === 'cancer') ||\n        (planet === 'mercury' && (data.sign === 'gemini' || data.sign === 'virgo')) ||\n        (planet === 'venus' && (data.sign === 'taurus' || data.sign === 'libra')) ||\n        (planet === 'mars' && (data.sign === 'aries' || data.sign === 'scorpio')) ||\n        (planet === 'jupiter' && (data.sign === 'sagittarius' || data.sign === 'pisces')) ||\n        (planet === 'saturn' && (data.sign === 'capricorn' || data.sign === 'aquarius')) ||\n        (planet === 'uranus' && data.sign === 'aquarius') ||\n        (planet === 'neptune' && data.sign === 'pisces') ||\n        (planet === 'pluto' && data.sign === 'scorpio')\n      ) {\n        dignityMultiplier = 1.5; // Domicile or rulership\n      } else if (\n        (planet === 'sun' && data.sign === 'aries') ||\n        (planet === 'moon' && data.sign === 'taurus') ||\n        (planet === 'jupiter' && data.sign === 'cancer') ||\n        (planet === 'venus' && data.sign === 'pisces')\n      ) {\n        dignityMultiplier = 1.3; // Exaltation\n      } else if (\n        (planet === 'venus' && data.sign === 'virgo') ||\n        (planet === 'mercury' && data.sign === 'pisces') ||\n        (planet === 'mars' && data.sign === 'cancer') ||\n        (planet === 'jupiter' && data.sign === 'capricorn')\n      ) {\n        dignityMultiplier = 0.7; // Fall\n      }\n    }\n    \n    // Add weighted contribution\n    const weight = dignityMultiplier;\n    totalWeight += weight;\n    \n    alchemicalValues.Spirit += properties.Spirit * weight;\n    alchemicalValues.Essence += properties.Essence * weight;\n    alchemicalValues.Matter += properties.Matter * weight;\n    alchemicalValues.Substance += properties.Substance * weight;\n  });\n  \n  // Normalize values\n  if (totalWeight > 0) {\n    const normalizer = (positions ? Object.keys(positions).length : 10) / 10;\n    \n    return {\n      Spirit: alchemicalValues.Spirit / normalizer,\n      Essence: alchemicalValues.Essence / normalizer,\n      Matter: alchemicalValues.Matter / normalizer,\n      Substance: alchemicalValues.Substance / normalizer\n    };\n  }\n  \n  return alchemicalValues;\n}\n\n// Calculate elemental balance based on planetary positions\nexport function calculateElementalBalance(positions: PlanetaryPositionsType) {\n  // Initialize with balanced elements\n  const elements = {\n    Fire: 0.25,\n    Earth: 0.25,\n    Air: 0.25, \n    Water: 0.25\n  };\n  \n  if (!positions || Object.keys(positions).length === 0) {\n    return elements;\n  }\n  \n  let totalWeight = 0;\n  let elementsFound = false;\n  \n  Object.entries(positions).forEach(([planet, data]) => {\n    if (!data || !data.sign || planet === 'ascendant' || planet === 'northnode' || planet === 'southnode') {\n      return;\n    }\n    \n    const signKey = data.sign.toLowerCase();\n    const element = signElements[signKey];\n    \n    // Only proceed if it's a valid element\n    if (element && (element === 'Fire' || element === 'Water' || element === 'Earth' || element === 'Air')) {\n      // Weight by planet importance\n      let weight = 1.0;\n      if (planet === 'sun' || planet === 'moon') weight = 2.5;\n      if (planet === 'mercury' || planet === 'venus' || planet === 'mars') weight = 1.5;\n      \n      elements[element] += weight;\n      totalWeight += weight;\n      elementsFound = true;\n    }\n  });\n  \n  // Normalize to ensure sum equals 1.0\n  if (totalWeight > 0 && elementsFound) {\n    const total = elements.Fire + elements.Earth + elements.Air + elements.Water;\n    \n    return {\n      Fire: elements.Fire / total, \n      Earth: elements.Earth / total,\n      Air: elements.Air / total,\n      Water: elements.Water / total\n    };\n  }\n  \n  return elements;\n}\n\n// Interface for alchemical result\nexport interface AlchemicalResult {\n  spirit: number;\n  essence: number;\n  matter: number;\n  substance: number;\n  elementalBalance: {\n    fire: number;\n    earth: number;\n    air: number;\n    water: number;\n  };\n  dominantElement: string;\n  recommendation: string;\n  'Total Effect Value': {\n    Fire: number;\n    Earth: number;\n    Air: number;\n    Water: number;\n  };\n}\n\n// Interface for planetary position\nexport interface PlanetaryPosition {\n  sign: string;\n  degree?: number;\n  isRetrograde?: boolean;\n}\n\n/**\n * Core alchemize function that calculates alchemical properties based on planetary positions\n * \n * @param planetaryPositions Current planetary positions\n * @param isDaytime Whether it is daytime\n * @param lunarPhase Current lunar phase\n * @param retrogrades Retrograde information for planets\n * @returns Alchemical result with elemental balance, spirit, essence, matter, and substance\n */\nexport function alchemize(\n  planetaryPositions: Record<string, PlanetaryPosition>,\n  isDaytime = true,\n  lunarPhase?: string,\n  retrogrades?: Record<string, boolean>\n): AlchemicalResult {\n  // Initialize results with default values\n  const elementalBalance = {\n    fire: 0,\n    earth: 0,\n    air: 0,\n    water: 0\n  };\n  \n  let spirit = 0;\n  let essence = 0;\n  let matter = 0;\n  let substance = 0;\n  \n  // Calculate elemental contributions from each planet\n  Object.entries(planetaryPositions).forEach(([planetName, planetData]) => {\n    if (!planetData.sign) return;\n    \n    const sign = planetData.sign.toLowerCase();\n    let planetElement: string | null = null;\n    \n    // Get the element from the sign\n    if (['aries', 'leo', 'sagittarius'].includes(sign)) {\n      planetElement = 'fire';\n    } else if (['taurus', 'virgo', 'capricorn'].includes(sign)) {\n      planetElement = 'earth';\n    } else if (['gemini', 'libra', 'aquarius'].includes(sign)) {\n      planetElement = 'air';\n    } else if (['cancer', 'scorpio', 'pisces'].includes(sign)) {\n      planetElement = 'water';\n    }\n    \n    // Skip if no valid element\n    if (!planetElement) return;\n    \n    // Calculate planet weight based on importance\n    let planetWeight = 1.0;\n    if (planetName === 'sun' || planetName === 'moon') {\n      planetWeight = 3.0;\n    } else if (['mercury', 'venus', 'mars'].includes(planetName)) {\n      planetWeight = 1.5;\n    }\n    \n    // Adjust for retrograde\n    if (planetData.isRetrograde || (retrogrades && retrogrades[planetName])) {\n      planetWeight *= 0.8; // Reduce influence when retrograde\n    }\n    \n    // Increase elemental balance based on the planet's sign\n    elementalBalance[planetElement] += planetWeight;\n    \n    // Add alchemical property contributions\n    switch (planetName.toLowerCase()) {\n      case 'sun':\n        spirit += 1 * planetWeight;\n        break;\n      case 'moon':\n        essence += 1 * planetWeight;\n        break;\n      case 'mercury':\n        substance += 0.5 * planetWeight;\n        spirit += 0.5 * planetWeight;\n        break;\n      case 'venus':\n        essence += 1 * planetWeight;\n        break;\n      case 'mars':\n        matter += 0.5 * planetWeight;\n        essence += 0.5 * planetWeight;\n        break;\n      case 'jupiter':\n        spirit += 0.5 * planetWeight;\n        essence += 0.5 * planetWeight;\n        break;\n      case 'saturn':\n        matter += 1 * planetWeight;\n        break;\n      case 'uranus':\n        substance += 1 * planetWeight;\n        break;\n      case 'neptune':\n        essence += 0.5 * planetWeight;\n        substance += 0.5 * planetWeight;\n        break;\n      case 'pluto':\n        matter += 0.5 * planetWeight;\n        essence += 0.5 * planetWeight;\n        break;\n    }\n  });\n  \n  // Apply daytime/nighttime adjustment\n  if (isDaytime) {\n    elementalBalance.fire *= 1.2;\n    elementalBalance.air *= 1.1;\n  } else {\n    elementalBalance.water *= 1.2;\n    elementalBalance.earth *= 1.1;\n  }\n  \n  // Apply lunar phase adjustment if provided\n  if (lunarPhase) {\n    if (lunarPhase.includes('full')) {\n      elementalBalance.fire *= 1.1;\n      elementalBalance.water *= 1.1;\n      spirit += 0.5;\n      essence += 0.5;\n    } else if (lunarPhase.includes('new')) {\n      elementalBalance.earth *= 1.1;\n      elementalBalance.air *= 1.1;\n      matter += 0.5;\n      substance += 0.5;\n    } else if (lunarPhase.includes('waxing')) {\n      elementalBalance.fire *= 1.05;\n      elementalBalance.air *= 1.05;\n      spirit += 0.3;\n      substance += 0.3;\n    } else if (lunarPhase.includes('waning')) {\n      elementalBalance.water *= 1.05;\n      elementalBalance.earth *= 1.05;\n      matter += 0.3;\n      essence += 0.3;\n    }\n  }\n  \n  // Calculate dominant element\n  let dominantElement = 'balanced';\n  let maxValue = 0;\n  \n  for (const [element, value] of Object.entries(elementalBalance)) {\n    if (value > maxValue) {\n      maxValue = value;\n      dominantElement = element;\n    }\n  }\n  \n  // Generate a recommendation based on the dominant element\n  const recommendation = generateRecommendation(dominantElement);\n  \n  // Normalize the values\n  const totalElemental = elementalBalance.fire + elementalBalance.earth + \n                         elementalBalance.air + elementalBalance.water;\n  \n  if (totalElemental > 0) {\n    elementalBalance.fire /= totalElemental;\n    elementalBalance.earth /= totalElemental;\n    elementalBalance.air /= totalElemental;\n    elementalBalance.water /= totalElemental;\n  } else {\n    // Default to balanced\n    elementalBalance.fire = 0.25;\n    elementalBalance.earth = 0.25;\n    elementalBalance.air = 0.25;\n    elementalBalance.water = 0.25;\n  }\n  \n  // Normalize alchemical properties\n  const totalAlchemical = spirit + essence + matter + substance;\n  \n  if (totalAlchemical > 0) {\n    spirit /= totalAlchemical;\n    essence /= totalAlchemical;\n    matter /= totalAlchemical;\n    substance /= totalAlchemical;\n  } else {\n    // Default to balanced\n    spirit = 0.25;\n    essence = 0.25;\n    matter = 0.25;\n    substance = 0.25;\n  }\n  \n  // Convert to upper case for ElementalProperties return\n  const totalEffectValue = {\n    Fire: elementalBalance.fire,\n    Earth: elementalBalance.earth,\n    Air: elementalBalance.air,\n    Water: elementalBalance.water\n  };\n  \n  return {\n    spirit,\n    essence,\n    matter,\n    substance,\n    elementalBalance,\n    dominantElement,\n    recommendation,\n    'Total Effect Value': totalEffectValue\n  };\n}\n\n/**\n * Generate food recommendations based on elemental balance\n * @param dominantElement Dominant element\n * @returns Recommendation string\n */\nfunction generateRecommendation(dominantElement: string): string {\n  switch (dominantElement) {\n    case 'fire':\n      return \"Foods that cool and ground: fresh vegetables, fruits, and cooling herbs like mint and cucumber.\";\n    case 'earth':\n      return \"Foods that lighten and enliven: leafy greens, sprouted foods, and herbs like rosemary and thyme.\";\n    case 'air':\n      return \"Foods that ground and nourish: root vegetables, whole grains, and warming spices like ginger and cinnamon.\";\n    case 'water':\n      return \"Foods that warm and stimulate: spicy dishes, roasted vegetables, and herbs like cayenne and black pepper.\";\n    default:\n      return \"A balanced diet incorporating elements from all food groups for holistic nourishment.\";\n  }\n} "],"version":3}