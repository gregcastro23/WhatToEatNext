{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/linting/ConfigurationFileRuleValidation.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/linting/ConfigurationFileRuleValidation.test.ts"],"sourcesContent":["/**\n * Configuration File Rule Validation Test Suite\n * \n * Tests the domain-specific ESLint rules for configuration files\n * to ensure dynamic requires and build tools are properly supported.\n * \n * Requirements: 4.4\n */\n\nimport { execSync } from 'child_process';\nimport { writeFileSync, existsSync, readFileSync } from 'fs';\nimport { join } from 'path';\n\ndescribe('Configuration File Rule Validation', () => {\n  const projectRoot = process.cwd()\n  const tempFiles: string[] = [];\n\n  afterEach(() => {\n    // Clean up temporary test files\n    tempFiles.forEach(file => {\n      try {\n        execSync(`rm -f \"${file}\"`);\n      } catch {}\n    });\n    tempFiles.length = 0;\n  });\n\n  describe('Dynamic Require Allowances', () => {\n    test('should allow dynamic requires in config files', async () => {\n      const testContent = `\n        const path = require('path');\n        const fs = require('fs');\n        \n        // Dynamic requires should be allowed\n        const configModule = require(process.env.CONFIG_MODULE || './default-config');\n        const pluginName = process.env.PLUGIN_NAME;\n        const dynamicPlugin = pluginName ? require(pluginName) : null;\n        \n        // Conditional requires\n        const isDevelopment = process.env.NODE_ENV === 'development';\n        const devTools = isDevelopment ? require('./dev-tools') : null;\n        \n        // Runtime requires\n        function loadConfig(configPath) {\n          return require(configPath);\n        }\n        \n        module.exports = {\n          ...configModule,\n          plugins: [\n            dynamicPlugin,\n            devTools\n          ].filter(Boolean),\n          loadConfig\n        };\n      `;\n\n      const testFile = join(projectRoot, 'temp-dynamic-require.config.js');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --no-eslintrc --config eslint.config.cjs --format json`, {\n  encoding: 'utf8',\n          cwd: projectRoot\n        });\n\n        const result = JSON.parse(output);\n        \n        if (result.length > 0 && result[0].messages) {\n          const dynamicRequireErrors = result[0].messages.filter((msg: any) => \n            msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2 // error level\n          );\n          \n          // Configuration files should allow dynamic requires\n          expect(dynamicRequireErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const dynamicRequireErrors = result[0].messages.filter((msg: any) => \n              msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2\n            );\n            \n            expect(dynamicRequireErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow variable requires in config files', async () => {\n      const testContent = `\n        // Variable-based requires\n        const configFiles = [\n          './base.config',\n          './environment.config',\n          './plugins.config'\n        ];\n        \n        const configs = configFiles.map(file => require(file));\n        \n        // Object property requires\n        const moduleMap = {\n  development: './dev.config',\n          production: './prod.config',\n          test: './test.config'\n        };\n        \n        const currentConfig = require(moduleMap[process.env.NODE_ENV] || './default.config');\n        \n        // Template literal requires\n        const environment = process.env.NODE_ENV || 'development';\n        const envConfig = require(\\`./config/\\${environment}.js\\`);\n        \n        module.exports = {\n          ...currentConfig,\n          ...envConfig,\n          additionalConfigs: configs\n        };\n      `;\n\n      const testFile = join(projectRoot, 'temp-variable-require.config.js');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --no-eslintrc --config eslint.config.cjs --format json`, {\n  encoding: 'utf8',\n          cwd: projectRoot\n        });\n\n        const result = JSON.parse(output);\n        \n        if (result.length > 0 && result[0].messages) {\n          const dynamicRequireErrors = result[0].messages.filter((msg: any) => \n            msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2\n          );\n          \n          expect(dynamicRequireErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const dynamicRequireErrors = result[0].messages.filter((msg: any) => \n              msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2\n            );\n            \n            expect(dynamicRequireErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow CommonJS patterns in config files', async () => {\n      const testContent = `\n        // CommonJS patterns should be allowed\n        const { resolve } = require('path');\n        const { existsSync } = require('fs');\n        \n        // Module.exports patterns\n        module.exports = {\n  entry: './src/index.js',\n          output: {\n  path: resolve(__dirname, 'dist'),\n            filename: 'bundle.js'\n          }\n        };\n        \n        // Conditional exports\n        if (process.env.NODE_ENV === 'development') {\n          module.exports.devtool = 'source-map';\n        }\n        \n        // Function exports\n        module.exports = function(env, argv) {\n          const config = require('./base.config');\n          \n          if (argv.mode === 'development') {\n            config.devtool = 'eval-source-map';\n          }\n          \n          return config;\n        };\n        \n        // Mixed exports\n        exports.default = module.exports;\n        exports.development = require('./dev.config');\n        exports.production = require('./prod.config');\n      `;\n\n      const testFile = join(projectRoot, 'temp-commonjs.config.js');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --no-eslintrc --config eslint.config.cjs --format json`, {\n  encoding: 'utf8',\n          cwd: projectRoot\n        });\n\n        const result = JSON.parse(output);\n        \n        if (result.length > 0 && result[0].messages) {\n          const varRequireErrors = result[0].messages.filter((msg: any) => \n            msg.ruleId === '@typescript-eslint/no-var-requires' && msg.severity === 2\n          );\n          \n          // Configuration files should allow var requires\n          expect(varRequireErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const varRequireErrors = result[0].messages.filter((msg: any) => \n              msg.ruleId === '@typescript-eslint/no-var-requires' && msg.severity === 2\n            );\n            \n            expect(varRequireErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n  });\n\n  describe('Build Tool Patterns', () => {\n    test('should allow webpack configuration patterns', async () => {\n      const testContent = `\n        const path = require('path');\n        const HtmlWebpackPlugin = require('html-webpack-plugin');\n        const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n        \n        const isDevelopment = process.env.NODE_ENV === 'development';\n        \n        module.exports = {\n  mode: isDevelopment ? 'development' : 'production',\n          entry: './src/index.js',\n          output: {\n  path: path.resolve(__dirname, 'dist'),\n            filename: isDevelopment ? '[name].js' : '[name].[contenthash].js',\n            clean: true\n          },\n          module: {\n  rules: [\n              {\n  test: /\\\\.(js|jsx|ts|tsx)$/,\n                exclude: /node_modules/,\n                use: {\n  loader: 'babel-loader',\n                  options: {\n  presets: ['@babel/preset-env', '@babel/preset-react', '@babel/preset-typescript']\n                  }\n                }\n              },\n              {\n  test: /\\\\.css$/,\n                use: [\n                  isDevelopment ? 'style-loader' : MiniCssExtractPlugin.loader,\n                  'css-loader',\n                  'postcss-loader'\n                ]\n              }\n            ]\n          },\n          plugins: [\n            new HtmlWebpackPlugin({\n  template: './public/index.html'\n            }),\n            !isDevelopment && new MiniCssExtractPlugin({\n  filename: '[name].[contenthash].css'\n            })\n          ].filter(Boolean),\n          devServer: isDevelopment ? {\n  port: 3000,\n            hot: true,\n            open: true\n          } : undefined\n        };\n      `;\n\n      const testFile = join(projectRoot, 'temp-webpack.config.js');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --no-eslintrc --config eslint.config.cjs --format json`, {\n  encoding: 'utf8',\n          cwd: projectRoot\n        });\n\n        const result = JSON.parse(output);\n        \n        if (result.length > 0 && result[0].messages) {\n          const restrictiveErrors = result[0].messages.filter((msg: any) => \n            (msg.ruleId === 'no-console' && msg.severity === 2) ||\n            (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||\n            (msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2)\n          );\n          \n          // Webpack config should not have restrictive errors\n          expect(restrictiveErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const restrictiveErrors = result[0].messages.filter((msg: any) => \n              (msg.ruleId === 'no-console' && msg.severity === 2) ||\n              (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||\n              (msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2)\n            );\n            \n            expect(restrictiveErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow Next.js configuration patterns', async () => {\n      const testContent = `\n        /** @type {import('next').NextConfig} */\n        const nextConfig = {\n  reactStrictMode: true,\n          swcMinify: true,\n          experimental: {\n  appDir: true,\n            serverComponentsExternalPackages: ['astronomy-engine'] // astronomia removed\n          },\n          webpack: (config, { buildId, dev, isServer, defaultLoaders, webpack }) => {\n            // Custom webpack configuration\n            config.resolve.fallback = {\n  fs: false,\n              path: false,\n              crypto: false\n            };\n            \n            // Add custom loaders\n            config.module.rules.push({\n  test: /\\\\.svg$/,\n              use: ['@svgr/webpack']\n            });\n            \n            // Environment-specific configuration\n            if (dev) {\n              config.devtool = 'eval-source-map';\n            }\n            \n            if (!isServer) {\n              config.resolve.alias = {\n                ...config.resolve.alias,\n                '@': path.resolve(__dirname, 'src')\n              };\n            }\n            \n            return config;\n          },\n          env: {\n  CUSTOM_KEY: process.env.CUSTOM_KEY,\n            API_URL: process.env.NODE_ENV === 'development' \n              ? 'http://localhost:3001' \n              : 'https://api.example.com'\n          },\n          async redirects() {\n            return [\n              {\n  source: '/old-path',\n                destination: '/new-path',\n                permanent: true\n              }\n            ];\n          },\n          async rewrites() {\n            return [\n              {\n  source: '/api/:path*',\n                destination: 'https://api.example.com/:path*'\n              }\n            ];\n          }\n        };\n        \n        module.exports = nextConfig;\n      `;\n\n      const testFile = join(projectRoot, 'temp-next.config.js');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --no-eslintrc --config eslint.config.cjs --format json`, {\n\n          encoding: 'utf8',\n\n          cwd: projectRoot\n\n        });\n        const result = JSON.parse(output);\n        \n        if (result.length > 0 && result[0].messages) {\n          const restrictiveErrors = result[0].messages.filter((msg: any) => \n            (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||\n            (msg.ruleId === 'no-console' && msg.severity === 2)\n          );\n          \n          expect(restrictiveErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const restrictiveErrors = result[0].messages.filter((msg: any) => \n              (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||\n              (msg.ruleId === 'no-console' && msg.severity === 2)\n            );\n            \n            expect(restrictiveErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow Tailwind CSS configuration patterns', async () => {\n      const testContent = `\n        /** @type {import('tailwindcss').Config} */\n        module.exports = {\n  content: [\n            './pages/**/*.{js,ts,jsx,tsx,mdx}',\n            './components/**/*.{js,ts,jsx,tsx,mdx}',\n            './app/**/*.{js,ts,jsx,tsx,mdx}',\n            './src/**/*.{js,ts,jsx,tsx,mdx}'\n          ],\n          theme: {\n  extend: {\n  colors: {\n                // Elemental color scheme,\n  fire: {\n  50: '#fef2f2',\n                  100: '#fee2e2',\n                  500: '#ef4444',\n                  900: '#7f1d1d'\n                },\n                water: {\n  50: '#eff6ff',\n                  100: '#dbeafe',\n                  500: '#3b82f6',\n                  900: '#1e3a8a'\n                },\n                earth: {\n  50: '#f9fafb',\n                  100: '#f3f4f6',\n                  500: '#6b7280',\n                  900: '#111827'\n                },\n                air: {\n  50: '#fefce8',\n                  100: '#fef3c7',\n                  500: '#f59e0b',\n                  900: '#78350f'\n                }\n              },\n              fontFamily: {\n  sans: ['Inter', 'system-ui', 'sans-serif'],\n                serif: ['Merriweather', 'serif'],\n                mono: ['Fira Code', 'monospace']\n              },\n              spacing: {\n                '18': '4.5rem',\n                '88': '22rem'\n              },\n              animation: {\n                'fade-in': 'fadeIn 0.5s ease-in-out',\n                'slide-up': 'slideUp 0.3s ease-out'\n              },\n              keyframes: {\n  fadeIn: {\n                  '0%': { opacity: '0' },\n                  '100%': { opacity: '1' }\n                },\n                slideUp: {\n                  '0%': { transform: 'translateY(10px)', opacity: '0' },\n                  '100%': { transform: 'translateY(0)', opacity: '1' }\n                }\n              }\n            }\n          },\n          plugins: [\n            require('@tailwindcss/forms'),\n            require('@tailwindcss/typography'),\n            require('@tailwindcss/aspect-ratio'),\n            // Custom plugin\n            function({ addUtilities, theme }) {\n              const newUtilities = {\n                '.elemental-gradient': {\n  background: \\`linear-gradient(45deg, \\${theme('colors.fire.500')}, \\${theme('colors.water.500')})\\`\n                }\n              };\n              addUtilities(newUtilities);\n            }\n          ]\n        };\n      `;\n\n      const testFile = join(projectRoot, 'temp-tailwind.config.js');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --no-eslintrc --config eslint.config.cjs --format json`, {\n  encoding: 'utf8',\n          cwd: projectRoot\n        });\n\n        const result = JSON.parse(output);\n        \n        if (result.length > 0 && result[0].messages) {\n          const restrictiveErrors = result[0].messages.filter((msg: any) => \n            (msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2) ||\n            (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2)\n          );\n          \n          expect(restrictiveErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const restrictiveErrors = result[0].messages.filter((msg: any) => \n              (msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2) ||\n              (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2)\n            );\n            \n            expect(restrictiveErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow Jest configuration patterns', async () => {\n      const testContent = `\n        const path = require('path');\n        \n        /** @type {import('jest').Config} */\n        module.exports = {\n  testEnvironment: 'jsdom',\n          setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n          moduleNameMapping: {\n            '^@/(.*)$': '<rootDir>/src/$1',\n            '^@components/(.*)$': '<rootDir>/src/components/$1',\n            '^@utils/(.*)$': '<rootDir>/src/utils/$1',\n            '^@calculations/(.*)$': '<rootDir>/src/calculations/$1'\n          },\n          testMatch: [\n            '<rootDir>/src/**/__tests__/**/*.{js,jsx,ts,tsx}',\n            '<rootDir>/src/**/*.{test,spec}.{js,jsx,ts,tsx}'\n          ],\n          collectCoverageFrom: [\n            'src/**/*.{js,jsx,ts,tsx}',\n            '!src/**/*.d.ts',\n            '!src/index.tsx',\n            '!src/reportWebVitals.ts'\n          ],\n          coverageThreshold: {\n  global: {\n  branches: 80,\n              functions: 80,\n              lines: 80,\n              statements: 80\n            }\n          },\n          transform: {\n            '^.+\\\\\\\\.(js|jsx|ts|tsx)$': ['babel-jest', {\n  presets: [\n                ['@babel/preset-env', { targets: { node: 'current' } }],\n                ['@babel/preset-react', { runtime: 'automatic' }],\n                '@babel/preset-typescript'\n              ]\n            }]\n          },\n          moduleFileExtensions: ['js', 'jsx', 'ts', 'tsx', 'json'],\n          testTimeout: 10000,\n          globals: {\n            'ts-jest': {\n  useESM: true\n            }\n          },\n          // Custom configuration function\n          ...(process.env.CI && {\n  maxWorkers: 2,\n            cache: false\n          })\n        };\n        \n        // Environment-specific overrides\n        if (process.env.NODE_ENV === 'development') {\n          module.exports.verbose = true;\n          module.exports.watchman = true;\n        }\n      `;\n\n      const testFile = join(projectRoot, 'temp-jest.config.js');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --no-eslintrc --config eslint.config.cjs --format json`, {\n  encoding: 'utf8',\n          cwd: projectRoot\n        });\n\n        const result = JSON.parse(output);\n        \n        if (result.length > 0 && result[0].messages) {\n          const restrictiveErrors = result[0].messages.filter((msg: any) => \n            (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||\n            (msg.ruleId === 'no-console' && msg.severity === 2)\n          );\n          \n          expect(restrictiveErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const restrictiveErrors = result[0].messages.filter((msg: any) => \n              (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||\n              (msg.ruleId === 'no-console' && msg.severity === 2)\n            );\n            \n            expect(restrictiveErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n  });\n\n  describe('Configuration-Specific Relaxations', () => {\n    test('should allow explicit any types in config files', async () => {\n      const testContent = `\n        // Configuration files often need flexible typing\n        const config: any = {\n  development: {\n  apiUrl: 'http://localhost:3001',\n            debug: true,\n            logLevel: 'verbose'\n          },\n          production: {\n  apiUrl: process.env.API_URL,\n            debug: false,\n            logLevel: 'error'\n          }\n        };\n        \n        // Dynamic configuration loading\n        function loadConfig(environment: string): any {\n          const envConfig = config[environment];\n          const customConfig: any = process.env.CUSTOM_CONFIG \n            ? JSON.parse(process.env.CUSTOM_CONFIG)\n            : {};\n          \n          return {\n            ...envConfig,\n            ...customConfig\n          };\n        }\n        \n        // Plugin configuration with any types\n        const plugins: any[] = [\n          { name: 'plugin1', options: { enabled: true } },\n          { name: 'plugin2', options: { timeout: 5000 } }\n        ];\n        \n        // Export configuration\n        module.exports = {\n          ...loadConfig(process.env.NODE_ENV || 'development'),\n          plugins\n        };\n      `;\n\n      const testFile = join(projectRoot, 'temp-any-config.config.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --no-eslintrc --config eslint.config.cjs --format json`, {\n  encoding: 'utf8',\n          cwd: projectRoot\n        });\n\n        const result = JSON.parse(output);\n        \n        if (result.length > 0 && result[0].messages) {\n          const anyTypeErrors = result[0].messages.filter((msg: any) => \n            msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2\n          );\n          \n          // Configuration files should allow explicit any types\n          expect(anyTypeErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const anyTypeErrors = result[0].messages.filter((msg: any) => \n              msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2\n            );\n            \n            expect(anyTypeErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow console statements in config files', async () => {\n      const testContent = `\n        const isDevelopment = process.env.NODE_ENV === 'development';\n        \n        // Configuration logging should be allowed\n        console.log('Loading configuration...');\n        console.log('Environment:', process.env.NODE_ENV);\n        console.log('Development mode:', isDevelopment);\n        \n        if (isDevelopment) {\n          console.log('Development configuration loaded');\n          console.warn('Using development settings');\n        } else {\n          console.log('Production configuration loaded');\n          console.info('Optimized for production');\n        }\n        \n        // Configuration validation logging\n        const requiredEnvVars = ['API_URL', 'DATABASE_URL'];\n        requiredEnvVars.forEach(envVar => {\n          if (!process.env[envVar]) {\n            console.error(\\`Missing required environment variable: \\${envVar}\\`);\n          } else {\n            console.log(\\`✓ \\${envVar} is configured\\`);\n          }\n        });\n        \n        // Build-time logging\n        console.log('Configuration build completed at:', new Date().toISOString());\n        \n        module.exports = {\n  environment: process.env.NODE_ENV,\n          timestamp: Date.now()\n        };\n      `;\n\n      const testFile = join(projectRoot, 'temp-console-config.config.js');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --no-eslintrc --config eslint.config.cjs --format json`, {\n  encoding: 'utf8',\n          cwd: projectRoot\n        });\n\n        const result = JSON.parse(output);\n        \n        if (result.length > 0 && result[0].messages) {\n          const consoleErrors = result[0].messages.filter((msg: any) => \n            msg.ruleId === 'no-console' && msg.severity === 2\n          );\n          \n          // Configuration files should allow console statements\n          expect(consoleErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const consoleErrors = result[0].messages.filter((msg: any) => \n              msg.ruleId === 'no-console' && msg.severity === 2\n            );\n            \n            expect(consoleErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow var requires in TypeScript config files', async () => {\n      const testContent = `\n        // TypeScript configuration files often use require\n        const path = require('path');\n        const fs = require('fs');\n        \n        // Dynamic requires for plugins\n        const plugins = [\n          require('@typescript-eslint/eslint-plugin'),\n          require('eslint-plugin-react'),\n          require('eslint-plugin-import')\n        ];\n        \n        // Conditional requires\n        const isDevelopment = process.env.NODE_ENV === 'development';\n        const devPlugins = isDevelopment ? [\n          require('eslint-plugin-react-hooks')\n        ] : [];\n        \n        // Function-based requires\n        function loadTSConfig(configPath: string) {\n          return require(configPath);\n        }\n        \n        // Export with require\n        module.exports = {\n  plugins: [...plugins, ...devPlugins],\n          loadTSConfig\n        };\n      `;\n\n      const testFile = join(projectRoot, 'temp-ts-require.config.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --no-eslintrc --config eslint.config.cjs --format json`, {\n  encoding: 'utf8',\n          cwd: projectRoot\n        });\n\n        const result = JSON.parse(output);\n        \n        if (result.length > 0 && result[0].messages) {\n          const varRequireErrors = result[0].messages.filter((msg: any) => \n            msg.ruleId === '@typescript-eslint/no-var-requires' && msg.severity === 2\n          );\n          \n          // TypeScript config files should allow var requires\n          expect(varRequireErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const varRequireErrors = result[0].messages.filter((msg: any) => \n              msg.ruleId === '@typescript-eslint/no-var-requires' && msg.severity === 2\n            );\n            \n            expect(varRequireErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n  });\n\n  describe('Configuration File Pattern Matching', () => {\n    test('should apply config rules to correct file patterns', () => {\n      const configFiles = [\n        'next.config.js',\n        'webpack.config.js',\n        'tailwind.config.js',\n        'jest.config.js',\n        'babel.config.js',\n        'postcss.config.js',\n        'rollup.config.js',\n        'vite.config.ts',\n        'tsconfig.json',\n        'package.json'\n      ];\n\n      configFiles.forEach(file => {\n        // Check if file would match config patterns in ESLint config\n        const matchesConfigPattern = \n          file.includes('.config.') ||\n          file.includes('tsconfig.') ||\n          file.includes('package.json');\n        \n        expect(matchesConfigPattern).toBe(true);\n      });\n    });\n\n    test('should not apply config rules to non-config files', () => {\n      const nonConfigFiles = [\n        'src/components/FoodRecommender.tsx',\n        'src/utils/astrology.ts',\n        'src/services/campaign.ts',\n        'src/calculations/culinaryAstrology.ts',\n        'src/data/ingredients/vegetables.ts',\n        'README.md',\n        'LICENSE'\n      ];\n\n      nonConfigFiles.forEach(file => {\n        // Check that file would NOT match config patterns\n        const matchesConfigPattern = \n          file.includes('.config.') ||\n          file.includes('tsconfig.') ||\n          file.includes('package.json');\n        \n        expect(matchesConfigPattern).toBe(false);\n      });\n    });\n  });\n\n  describe('Integration with Existing Config Files', () => {\n    test('should validate existing Next.js config if present', async () => {\n      const nextConfigPath = join(projectRoot, 'next.config.js');\n      \n      if (existsSync(nextConfigPath)) {\n        try {\n          const output = execSync(`npx eslint \"${nextConfigPath}\" --no-eslintrc --config eslint.config.cjs --format json`, {\n\n            encoding: 'utf8',\n\n            cwd: projectRoot\n\n          });\n          const result = JSON.parse(output);\n          \n          if (result.length > 0 && result[0].messages) {\n            const restrictiveErrors = result[0].messages.filter((msg: any) => \n              (msg.ruleId === 'no-console' && msg.severity === 2) ||\n              (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||\n              (msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2)\n            );\n            \n            // Existing Next.js config should not have restrictive errors\n            expect(restrictiveErrors.length).toBe(0);\n          }\n        } catch (error) {\n          const output = (error as any).stdout?.toString() || '';\n          if (output) {\n            const result = JSON.parse(output);\n            if (result.length > 0 && result[0].messages) {\n              const restrictiveErrors = result[0].messages.filter((msg: any) => \n                (msg.ruleId === 'no-console' && msg.severity === 2) ||\n                (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||\n                (msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2)\n              );\n              \n              expect(restrictiveErrors.length).toBe(0);\n            }\n          }\n        }\n      } else {\n        // If file doesn't exist, test passes\n        expect(true).toBe(true);\n      }\n    });\n\n    test('should validate existing Tailwind config if present', async () => {\n      const tailwindConfigPath = join(projectRoot, 'tailwind.config.js');\n      \n      if (existsSync(tailwindConfigPath)) {\n        try {\n          const output = execSync(`npx eslint \"${tailwindConfigPath}\" --no-eslintrc --config eslint.config.cjs --format json`, {\n\n            encoding: 'utf8',\n\n            cwd: projectRoot\n\n          });\n          const result = JSON.parse(output);\n          \n          if (result.length > 0 && result[0].messages) {\n            const restrictiveErrors = result[0].messages.filter((msg: any) => \n              (msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2) ||\n              (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2)\n            );\n            \n            expect(restrictiveErrors.length).toBe(0);\n          }\n        } catch (error) {\n          const output = (error as any).stdout?.toString() || '';\n          if (output) {\n            const result = JSON.parse(output);\n            if (result.length > 0 && result[0].messages) {\n              const restrictiveErrors = result[0].messages.filter((msg: any) => \n                (msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2) ||\n                (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2)\n              );\n              \n              expect(restrictiveErrors.length).toBe(0);\n            }\n          }\n        }\n      } else {\n        expect(true).toBe(true);\n      }\n    });\n\n    test('should validate existing Jest config if present', async () => {\n      const jestConfigPath = join(projectRoot, 'jest.config.js');\n      \n      if (existsSync(jestConfigPath)) {\n        try {\n          const output = execSync(`npx eslint \"${jestConfigPath}\" --no-eslintrc --config eslint.config.cjs --format json`, {\n\n            encoding: 'utf8',\n\n            cwd: projectRoot\n\n          });\n          const result = JSON.parse(output);\n          \n          if (result.length > 0 && result[0].messages) {\n            const restrictiveErrors = result[0].messages.filter((msg: any) => \n              (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||\n              (msg.ruleId === 'no-console' && msg.severity === 2)\n            );\n            \n            expect(restrictiveErrors.length).toBe(0);\n          }\n        } catch (error) {\n          const output = (error as any).stdout?.toString() || '';\n          if (output) {\n            const result = JSON.parse(output);\n            if (result.length > 0 && result[0].messages) {\n              const restrictiveErrors = result[0].messages.filter((msg: any) => \n                (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||\n                (msg.ruleId === 'no-console' && msg.severity === 2)\n              );\n              \n              expect(restrictiveErrors.length).toBe(0);\n            }\n          }\n        }\n      } else {\n        expect(true).toBe(true);\n      }\n    });\n\n    test('should validate ESLint config itself', async () => {\n      const eslintConfigPath = join(projectRoot, 'eslint.config.cjs');\n      \n      if (existsSync(eslintConfigPath)) {\n        const configContent = readFileSync\n        // Check that config has proper file patterns for configuration files\n        expect(configContent).toContain('*.config.js');\n        expect(configContent).toContain('*.config.ts');\n        expect(configContent).toContain('*.config.mjs');\n        expect(configContent).toContain('*.config.cjs');\n        \n        // Check that config allows necessary patterns\n        expect(configContent).toContain('no-console');\n        expect(configContent).toContain('@typescript-eslint/no-explicit-any');\n        expect(configContent).toContain('import/no-dynamic-require');\n        \n        try {\n          const output = execSync(`npx eslint \"${eslintConfigPath}\" --no-eslintrc --config eslint.config.cjs --format json`, {\n  encoding: 'utf8',\n            cwd: projectRoot\n          });\n\n          const result = JSON.parse(output);\n          \n          if (result.length > 0 && result[0].messages) {\n            const restrictiveErrors = result[0].messages.filter((msg: any) => \n              (msg.ruleId === 'no-console' && msg.severity === 2) ||\n              (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||\n              (msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2)\n            );\n            \n            expect(restrictiveErrors.length).toBe(0);\n          }\n        } catch (error) {\n          const output = (error as any).stdout?.toString() || '';\n          if (output) {\n            const result = JSON.parse(output);\n            if (result.length > 0 && result[0].messages) {\n              const restrictiveErrors = result[0].messages.filter((msg: any) => \n                (msg.ruleId === 'no-console' && msg.severity === 2) ||\n                (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||\n                (msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2)\n              );\n              \n              expect(restrictiveErrors.length).toBe(0);\n            }\n          }\n        }\n      } else {\n        fail('ESLint config file should exist');\n      }\n    });\n  });\n});"],"version":3}