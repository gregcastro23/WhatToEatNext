{"file":"/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/services/linting/LintingAlertingSystem.ts","mappings":";AAAA;;;;;GAKG;;;AAEH,iDAAyC;AACzC,2BAA6D;AA2D7D,MAAa,qBAAqB;IACf,UAAU,GAAG,oCAAoC,CAAC;IAClD,WAAW,GAAG,qCAAqC,CAAC;IACpD,eAAe,GAAG,uCAAuC,CAAC;IAEnE,MAAM,CAAiB;IACvB,aAAa,GAAsB,IAAI,GAAG,EAAE,CAAC;IAC7C,gBAAgB,GAAgB,IAAI,GAAG,EAAE,CAAC;IAElD;QACE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACvC,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa,CAAC,MAAe,EAAE,OAAuB;QAC1D,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACxB,OAAO;SACR;QAED,OAAO,CAAC,GAAG,CAAC,iBAAiB,MAAM,CAAC,MAAM,YAAY,CAAC,CAAC;QAExD,kDAAkD;QAClD,MAAM,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAErD,iCAAiC;QACjC,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAEjE,0CAA0C;QAC1C,KAAK,MAAM,KAAK,IAAI,YAAY,EAAE;YAChC,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC5B,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;SAChC;QAED,6BAA6B;QAC7B,KAAK,MAAM,KAAK,IAAI,iBAAiB,EAAE;YACrC,MAAM,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;SAC3C;QAED,uCAAuC;QACvC,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE;YACpC,MAAM,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC;SAClE;QAED,OAAO,CAAC,GAAG,CACT,eAAe,YAAY,CAAC,MAAM,sBAAsB,iBAAiB,CAAC,MAAM,qBAAqB,CACtG,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,kBAAkB,CAAC,OAAuB;QACtD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,OAAO,EAAE;YAC9C,OAAO,EAAE,CAAC;SACX;QAED,MAAM,MAAM,GAAuB,EAAE,CAAC;QACtC,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,UAAU,CAAC;QAEhE,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;YAClC,MAAM,KAAK,GAAG,IAAI,CAAC,yBAAyB,CAAC,OAAO,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;YAExE,IAAI,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,SAAS,CAAC,EAAE;gBAC9C,MAAM,KAAK,GAAqB;oBAC9B,EAAE,EAAE,QAAQ,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE;oBAC5C,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,IAAI,EAAE,oBAAoB;oBAC1B,MAAM,EAAE,SAAS,CAAC,MAAM;oBACxB,KAAK;oBACL,SAAS,EAAE,SAAS,CAAC,SAAS;oBAC9B,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC;oBAChD,qBAAqB,EAAE,KAAK;iBAC7B,CAAC;gBAEF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACnB,OAAO,CAAC,GAAG,CACT,sCAAsC,SAAS,CAAC,MAAM,MAAM,KAAK,MAAM,SAAS,CAAC,SAAS,EAAE,CAC7F,CAAC;aACH;SACF;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,SAAS,CAAC,KAAY;QAClC,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YAC1C,IAAI,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;gBACnD,MAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;aAC/C;SACF;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,kBAAkB,CAAC,KAAY,EAAE,OAAqB;QAClE,IAAI;YACF,QAAQ,OAAO,CAAC,IAAI,EAAE;gBACpB,KAAK,SAAS;oBACZ,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;oBAC7B,MAAM;gBACR,KAAK,MAAM;oBACT,MAAM,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;oBAChD,MAAM;gBACR,KAAK,MAAM;oBACT,MAAM,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;oBAChD,MAAM;gBACR,KAAK,SAAS;oBACZ,MAAM,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;oBACnD,MAAM;aACT;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,2BAA2B,OAAO,CAAC,IAAI,GAAG,EAAE,KAAK,CAAC,CAAC;SAClE;IACH,CAAC;IAED;;OAEG;IACK,gBAAgB,CAAC,KAAY;QACnC,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QAEhD,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,KAAK,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,SAAS,EAAE,CAAC,CAAC;QACtE,OAAO,CAAC,GAAG,CAAC,cAAc,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC1C,OAAO,CAAC,GAAG,CAAC,aAAa,KAAK,CAAC,YAAY,gBAAgB,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;QAC/E,OAAO,CAAC,GAAG,CAAC,eAAe,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC5C,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAClB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,aAAa,CAAC,KAAY,EAAE,MAA+B;QACvE,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,IAAI,0BAA0B,CAAC;QAC5D,MAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QAChD,MAAM,QAAQ,GAAG,IAAI,SAAS,KAAK,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,OAAO,KAAK,KAAK,CAAC,MAAM,KAAK,KAAK,CAAC,YAAY,IAAI,KAAK,CAAC,SAAS,KAAK,CAAC;QAElJ,IAAI;YACF,iBAAiB;YACjB,IAAA,wBAAQ,EAAC,SAAS,QAAQ,SAAS,SAAS,GAAG,CAAC,CAAC;SAClD;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;SACxD;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,aAAa,CAAC,KAAY,EAAE,MAA+B;QACvE,gCAAgC;QAChC,MAAM,SAAS,GAAG;YAChB,EAAE,EAAE,KAAK,CAAC,EAAE;YACZ,SAAS,EAAE,KAAK,CAAC,SAAS;YAC1B,IAAI,EAAE,eAAe;YACrB,QAAQ,EAAE,KAAK,CAAC,QAAQ;YACxB,KAAK,EAAE,WAAW,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,MAAM,EAAE;YACjE,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,IAAI,EAAE;gBACJ,MAAM,EAAE,KAAK,CAAC,MAAM;gBACpB,YAAY,EAAE,KAAK,CAAC,YAAY;gBAChC,SAAS,EAAE,KAAK,CAAC,SAAS;aAC3B;YACD,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;SACzC,CAAC;QAEF,MAAM,QAAQ,GAAG,yCAAyC,CAAC;QAC3D,IAAA,kBAAa,EAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9D,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,gBAAgB,CAAC,KAAY,EAAE,MAA+B;QAC1E,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;YACf,OAAO,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;YAC3C,OAAO;SACR;QAED,MAAM,OAAO,GAAG;YACd,QAAQ,EAAE,KAAK,CAAC,EAAE;YAClB,SAAS,EAAE,KAAK,CAAC,SAAS;YAC1B,QAAQ,EAAE,KAAK,CAAC,QAAQ;YACxB,MAAM,EAAE,KAAK,CAAC,MAAM;YACpB,aAAa,EAAE,KAAK,CAAC,YAAY;YACjC,SAAS,EAAE,KAAK,CAAC,SAAS;YAC1B,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,MAAM,EAAE,8BAA8B;SACvC,CAAC;QAEF,IAAI;YACF,8DAA8D;YAC9D,MAAM,WAAW,GAAG,iBAAiB,MAAM,CAAC,GAAG;;cAEvC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC;YAEnC,IAAA,wBAAQ,EAAC,WAAW,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;SAC1C;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;SACvD;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,uBAAuB,CAAC,KAAuB;QAC3D,OAAO,CAAC,GAAG,CAAC,yBAAyB,KAAK,CAAC,IAAI,QAAQ,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAEvE,wBAAwB;QACxB,MAAM,cAAc,GAAG,sCAAsC,CAAC;QAC9D,MAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,MAAM,MAAM,KAAK,CAAC,KAAK,gBAAgB,KAAK,CAAC,SAAS,aAAa,KAAK,CAAC,MAAM,KAAK,CAAC;QAE/K,IAAI;YACF,IAAA,wBAAQ,EAAC,SAAS,QAAQ,SAAS,cAAc,GAAG,CAAC,CAAC;SACvD;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;SAC1D;QAED,6BAA6B;QAC7B,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,oBAAoB,CAAC,MAAe,EAAE,MAA0B;QAC5E,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC;QAEjD,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE;gBACpD,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;aACxC;SACF;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,mBAAmB,CAAC,MAA0B;QAC1D,OAAO,CAAC,GAAG,CAAC,+BAA+B,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;QAE5D,IAAI;YACF,QAAQ,MAAM,CAAC,MAAM,EAAE;gBACrB,KAAK,aAAa;oBAChB,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAChC,MAAM;gBACR,KAAK,iBAAiB;oBACpB,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;oBAC5D,MAAM;gBACR,KAAK,iBAAiB;oBACpB,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBAClC,MAAM;gBACR,KAAK,eAAe;oBAClB,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;oBAC3B,MAAM;aACT;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,mCAAmC,MAAM,CAAC,MAAM,GAAG,EAAE,KAAK,CAAC,CAAC;SAC3E;IACH,CAAC;IAED;;OAEG;IACK,kBAAkB,CAAC,MAAe;QACxC,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAC3B,oBAAoB;YACpB,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;gBAC3C,OAAO,KAAK,CAAC;aACd;YAED,iBAAiB;YACjB,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACvD,IAAI,SAAS,EAAE;gBACb,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,cAAc,GAAG,EAAE,GAAG,IAAI,CAAC;gBAC9E,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,OAAO,EAAE,GAAG,UAAU,EAAE;oBACjD,OAAO,KAAK,CAAC;iBACd;aACF;YAED,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,mBAAmB,CAAC,KAAY;QACtC,MAAM,OAAO,GAAmC,EAAE,CAAC;QAEnD,IAAI,KAAK,CAAC,MAAM,KAAK,cAAc,IAAI,KAAK,CAAC,YAAY,GAAG,CAAC,EAAE;YAC7D,OAAO,CAAC,IAAI,CAAC;gBACX,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,mBAAmB;gBAC1B,OAAO,EAAE,mBAAmB;gBAC5B,WAAW,EAAE,mDAAmD;aACjE,CAAC,CAAC;SACJ;QAED,IAAI,KAAK,CAAC,MAAM,KAAK,mBAAmB,IAAI,KAAK,CAAC,YAAY,GAAG,GAAG,EAAE;YACpE,OAAO,CAAC,IAAI,CAAC;gBACX,IAAI,EAAE,UAAU;gBAChB,KAAK,EAAE,6BAA6B;gBACpC,QAAQ,EAAE,0BAA0B;gBACpC,WAAW,EAAE,iDAAiD;aAC/D,CAAC,CAAC;SACJ;QAED,IAAI,KAAK,CAAC,MAAM,KAAK,mBAAmB,IAAI,KAAK,CAAC,YAAY,GAAG,EAAE,EAAE;YACnE,OAAO,CAAC,IAAI,CAAC;gBACX,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,kBAAkB;gBACzB,OAAO,EAAE,eAAe;gBACxB,WAAW,EAAE,oDAAoD;aAClE,CAAC,CAAC;SACJ;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,gCAAgC;IACxB,KAAK,CAAC,kBAAkB;QAC9B,OAAO,CAAC,GAAG,CAAC,qDAAqD,CAAC,CAAC;QACnE,iEAAiE;IACnE,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,OAAe;QAC3C,OAAO,CAAC,GAAG,CAAC,6BAA6B,OAAO,yBAAyB,CAAC,CAAC;QAC3E,6DAA6D;IAC/D,CAAC;IAEO,KAAK,CAAC,oBAAoB;QAChC,OAAO,CAAC,GAAG,CAAC,2DAA2D,CAAC,CAAC;QACzE,iEAAiE;IACnE,CAAC;IAEO,KAAK,CAAC,aAAa;QACzB,OAAO,CAAC,GAAG,CAAC,0DAA0D,CAAC,CAAC;QACxE,gDAAgD;IAClD,CAAC;IAED,iBAAiB;IACT,iBAAiB;QACvB,IAAI;YACF,IAAI,IAAA,eAAU,EAAC,IAAI,CAAC,UAAU,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAA,iBAAY,EAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;aAC1D;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;SAC9D;QAED,+BAA+B;QAC/B,OAAO;YACL,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE;gBACR;oBACE,IAAI,EAAE,SAAS;oBACf,MAAM,EAAE,EAAE;oBACV,cAAc,EAAE,CAAC,SAAS,EAAE,OAAO,EAAE,UAAU,CAAC;iBACjD;gBACD;oBACE,IAAI,EAAE,MAAM;oBACZ,MAAM,EAAE,EAAE,IAAI,EAAE,0BAA0B,EAAE;oBAC5C,cAAc,EAAE,CAAC,OAAO,EAAE,UAAU,CAAC;iBACtC;gBACD;oBACE,IAAI,EAAE,MAAM;oBACZ,MAAM,EAAE,EAAE;oBACV,cAAc,EAAE,CAAC,UAAU,CAAC;iBAC7B;aACF;YACD,mBAAmB,EAAE;gBACnB,OAAO,EAAE,IAAI;gBACb,WAAW,EAAE,QAAQ;gBACrB,cAAc,EAAE,EAAE,EAAE,aAAa;aAClC;YACD,qBAAqB,EAAE;gBACrB,OAAO,EAAE,IAAI;gBACb,UAAU,EAAE;oBACV;wBACE,MAAM,EAAE,UAAU;wBAClB,SAAS,EAAE,KAAK;wBAChB,QAAQ,EAAE,SAAS;wBACnB,OAAO,EAAE,qCAAqC;qBAC/C;oBACD;wBACE,MAAM,EAAE,QAAQ;wBAChB,SAAS,EAAE,GAAG;wBACd,QAAQ,EAAE,SAAS;wBACnB,OAAO,EAAE,4BAA4B;qBACtC;oBACD;wBACE,MAAM,EAAE,cAAc;wBACtB,SAAS,EAAE,GAAG;wBACd,QAAQ,EAAE,SAAS;wBACnB,OAAO,EAAE,0BAA0B;qBACpC;iBACF;aACF;YACD,YAAY,EAAE;gBACZ,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE;oBACP;wBACE,OAAO,EAAE,yBAAyB;wBAClC,MAAM,EAAE,aAAa;wBACrB,UAAU,EAAE,EAAE;qBACf;oBACD;wBACE,OAAO,EAAE,iBAAiB;wBAC1B,MAAM,EAAE,iBAAiB;wBACzB,UAAU,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;qBAC5B;iBACF;aACF;SACF,CAAC;IACJ,CAAC;IAEO,gBAAgB;QACtB,IAAI;YACF,IAAI,IAAA,eAAU,EAAC,IAAI,CAAC,eAAe,CAAC,EAAE;gBACpC,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAA,iBAAY,EAAC,IAAI,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC,CAAC;gBAC5E,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;aAC/C;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;SAC1D;IACH,CAAC;IAEO,kBAAkB,CAAC,KAAY;QACrC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;QAEtD,wBAAwB;QACxB,IAAI;YACF,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAE3B,6BAA6B;YAC7B,IAAI,OAAO,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,EAAE;gBAChC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;aACxD;YAED,IAAA,kBAAa,EAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SACnE;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;SACvD;IACH,CAAC;IAEO,wBAAwB,CAAC,KAAuB;QACtD,IAAI;YACF,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEtC,wCAAwC;YACxC,IAAI,OAAO,CAAC,iBAAiB,CAAC,MAAM,GAAG,GAAG,EAAE;gBAC1C,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,iBAAiB,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;aAC7E;YAED,IAAA,kBAAa,EAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SACnE;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;SAC7D;IACH,CAAC;IAEO,gBAAgB;QACtB,IAAI;YACF,IAAI,IAAA,eAAU,EAAC,IAAI,CAAC,WAAW,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAA,iBAAY,EAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC;aAC3D;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;SACrD;QAED,OAAO;YACL,MAAM,EAAE,EAAE;YACV,gBAAgB,EAAE,EAAE;YACpB,cAAc,EAAE,EAAE;YAClB,iBAAiB,EAAE,EAAE;SACtB,CAAC;IACJ,CAAC;IAEO,yBAAyB,CAAC,OAAuB,EAAE,MAAc;QACvE,QAAQ,MAAM,EAAE;YACd,KAAK,UAAU;gBACb,OAAO,OAAO,CAAC,kBAAkB,CAAC,eAAe,CAAC;YACpD,KAAK,QAAQ;gBACX,OAAO,OAAO,CAAC,kBAAkB,CAAC,WAAW,CAAC;YAChD,KAAK,cAAc;gBACjB,OAAO,OAAO,CAAC,kBAAkB,CAAC,YAAY,CAAC;YACjD,KAAK,gBAAgB;gBACnB,OAAO,CACL,OAAO,CAAC,kBAAkB,CAAC,cAAc;oBACzC,CAAC,OAAO,CAAC,kBAAkB,CAAC,eAAe,GAAG,IAAI,CAAC,CACpD,CAAC;YACJ;gBACE,OAAO,CAAC,CAAC;SACZ;IACH,CAAC;IAEO,mBAAmB,CAAC,KAAa,EAAE,SAA+B;QACxE,IAAI,SAAS,CAAC,MAAM,KAAK,cAAc,EAAE;YACvC,OAAO,KAAK,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,2CAA2C;SAChF;QACD,OAAO,KAAK,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,0CAA0C;IAChF,CAAC;IAEO,eAAe,CAAC,QAAgB;QACtC,QAAQ,QAAQ,EAAE;YAChB,KAAK,UAAU;gBACb,OAAO,MAAM,CAAC;YAChB,KAAK,OAAO;gBACV,OAAO,QAAQ,CAAC;YAClB;gBACE,OAAO,KAAK,CAAC;SAChB;IACH,CAAC;IAEO,mBAAmB,CACzB,MAA0B,EAC1B,MAAe,EACf,MAA0B;QAE1B,QAAQ,MAAM,CAAC,OAAO,EAAE;YACtB,KAAK,yBAAyB;gBAC5B,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,oBAAoB,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC;YAClF,KAAK,iBAAiB;gBACpB,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,QAAQ,IAAI,CAAC,CAAC,IAAI,KAAK,oBAAoB,CAAC,CAAC;YACpF,KAAK,gBAAgB;gBACnB,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC;YACrD;gBACE,OAAO,KAAK,CAAC;SAChB;IACH,CAAC;IAEO,eAAe,CAAC,QAAgB;QACtC,QAAQ,QAAQ,EAAE;YAChB,KAAK,UAAU;gBACb,OAAO,IAAI,CAAC;YACd,KAAK,OAAO;gBACV,OAAO,GAAG,CAAC;YACb,KAAK,SAAS;gBACZ,OAAO,IAAI,CAAC;YACd,KAAK,MAAM;gBACT,OAAO,IAAI,CAAC;YACd;gBACE,OAAO,IAAI,CAAC;SACf;IACH,CAAC;CACF;AAziBD,sDAyiBC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/services/linting/LintingAlertingSystem.ts"],"sourcesContent":["/**\n * Linting Alerting System with Performance Monitoring\n *\n * Provides real-time alerting for linting regression detection\n * with performance monitoring and automated response capabilities.\n */\n\nimport { execSync } from 'child_process';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\n\nimport { Alert, LintingMetrics } from './LintingValidationDashboard';\n\nexport interface AlertingConfig {\n  enabled: boolean;\n  channels: AlertChannel[];\n  regressionDetection: {\n    enabled: boolean;\n    sensitivity: 'low' | 'medium' | 'high';\n    cooldownPeriod: number; // minutes\n  };\n  performanceMonitoring: {\n    enabled: boolean;\n    thresholds: PerformanceThreshold[];\n  };\n  autoResponse: {\n    enabled: boolean;\n    actions: AutoResponseAction[];\n  };\n}\n\nexport interface AlertChannel {\n  type: 'console' | 'file' | 'webhook' | 'kiro';\n  config: Record<string, unknown>;\n  severityFilter: ('info' | 'warning' | 'error' | 'critical')[];\n}\n\nexport interface PerformanceThreshold {\n  metric: 'duration' | 'memory' | 'cacheHitRate' | 'filesPerSecond';\n  threshold: number;\n  severity: 'warning' | 'error' | 'critical';\n  message: string;\n}\n\nexport interface AutoResponseAction {\n  trigger: string;\n  action: 'enableCache' | 'reduceBatchSize' | 'skipNonCritical' | 'emergencyStop';\n  parameters: Record<string, unknown>;\n}\n\nexport interface AlertHistory {\n  alerts: Alert[];\n  suppressedAlerts: Alert[];\n  resolvedAlerts: Alert[];\n  performanceEvents: PerformanceEvent[];\n}\n\nexport interface PerformanceEvent {\n  id: string;\n  timestamp: Date;\n  type: 'degradation' | 'improvement' | 'threshold_exceeded';\n  metric: string;\n  value: number;\n  threshold: number;\n  impact: 'low' | 'medium' | 'high';\n  autoResponseTriggered: boolean;\n}\n\nexport class LintingAlertingSystem {\n  private readonly configFile = '.kiro/metrics/alerting-config.json';\n  private readonly historyFile = '.kiro/metrics/alerting-history.json';\n  private readonly suppressionFile = '.kiro/metrics/alert-suppressions.json';\n\n  private config: AlertingConfig;\n  private lastAlertTime: Map<string, Date> = new Map();\n  private suppressedAlerts: Set<string> = new Set();\n\n  constructor() {\n    this.config = this.loadConfiguration();\n    this.loadSuppressions();\n  }\n\n  /**\n   * Process alerts and trigger appropriate responses\n   */\n  async processAlerts(alerts: Alert[], metrics: LintingMetrics): Promise<void> {\n    if (!this.config.enabled) {\n      return;\n    }\n\n    console.log(`🚨 Processing ${alerts.length} alerts...`);\n\n    // Filter alerts based on cooldown and suppression\n    const activeAlerts = this.filterActiveAlerts(alerts);\n\n    // Process performance monitoring\n    const performanceEvents = await this.monitorPerformance(metrics);\n\n    // Send alerts through configured channels\n    for (const alert of activeAlerts) {\n      await this.sendAlert(alert);\n      this.updateAlertHistory(alert);\n    }\n\n    // Process performance events\n    for (const event of performanceEvents) {\n      await this.processPerformanceEvent(event);\n    }\n\n    // Trigger auto-responses if configured\n    if (this.config.autoResponse.enabled) {\n      await this.triggerAutoResponses(activeAlerts, performanceEvents);\n    }\n\n    console.log(\n      `✅ Processed ${activeAlerts.length} active alerts and ${performanceEvents.length} performance events`,\n    );\n  }\n\n  /**\n   * Monitor performance metrics and detect issues\n   */\n  private async monitorPerformance(metrics: LintingMetrics): Promise<PerformanceEvent[]> {\n    if (!this.config.performanceMonitoring.enabled) {\n      return [];\n    }\n\n    const events: PerformanceEvent[] = [];\n    const thresholds = this.config.performanceMonitoring.thresholds;\n\n    for (const threshold of thresholds) {\n      const value = this.getPerformanceMetricValue(metrics, threshold.metric);\n\n      if (this.isThresholdExceeded(value, threshold)) {\n        const event: PerformanceEvent = {\n          id: `perf-${threshold.metric}-${Date.now()}`,\n          timestamp: new Date(),\n          type: 'threshold_exceeded',\n          metric: threshold.metric,\n          value,\n          threshold: threshold.threshold,\n          impact: this.calculateImpact(threshold.severity),\n          autoResponseTriggered: false,\n        };\n\n        events.push(event);\n        console.log(\n          `⚠️ Performance threshold exceeded: ${threshold.metric} = ${value} > ${threshold.threshold}`,\n        );\n      }\n    }\n\n    return events;\n  }\n\n  /**\n   * Send alert through configured channels\n   */\n  private async sendAlert(alert: Alert): Promise<void> {\n    for (const channel of this.config.channels) {\n      if (channel.severityFilter.includes(alert.severity)) {\n        await this.sendAlertToChannel(alert, channel);\n      }\n    }\n  }\n\n  /**\n   * Send alert to specific channel\n   */\n  private async sendAlertToChannel(alert: Alert, channel: AlertChannel): Promise<void> {\n    try {\n      switch (channel.type) {\n        case 'console':\n          this.sendConsoleAlert(alert);\n          break;\n        case 'file':\n          await this.sendFileAlert(alert, channel.config);\n          break;\n        case 'kiro':\n          await this.sendKiroAlert(alert, channel.config);\n          break;\n        case 'webhook':\n          await this.sendWebhookAlert(alert, channel.config);\n          break;\n      }\n    } catch (error) {\n      console.error(`Failed to send alert to ${channel.type}:`, error);\n    }\n  }\n\n  /**\n   * Send console alert\n   */\n  private sendConsoleAlert(alert: Alert): void {\n    const icon = this.getSeverityIcon(alert.severity);\n    const timestamp = alert.timestamp.toISOString();\n\n    console.log(`${icon} [${alert.severity.toUpperCase()}] ${timestamp}`);\n    console.log(`   Metric: ${alert.metric}`);\n    console.log(`   Value: ${alert.currentValue} (threshold: ${alert.threshold})`);\n    console.log(`   Message: ${alert.message}`);\n    console.log('');\n  }\n\n  /**\n   * Send file alert\n   */\n  private async sendFileAlert(alert: Alert, config: Record<string, unknown>): Promise<void> {\n    const alertFile = config.file || '.kiro/metrics/alerts.log';\n    const timestamp = alert.timestamp.toISOString();\n    const logEntry = `[${timestamp}] ${alert.severity.toUpperCase()}: ${alert.message} (${alert.metric}: ${alert.currentValue}/${alert.threshold})\\n`;\n\n    try {\n      // Append to file\n      execSync(`echo \"${logEntry}\" >> \"${alertFile}\"`);\n    } catch (error) {\n      console.error('Failed to write alert to file:', error);\n    }\n  }\n\n  /**\n   * Send Kiro alert (integration with Kiro system)\n   */\n  private async sendKiroAlert(alert: Alert, config: Record<string, unknown>): Promise<void> {\n    // Create Kiro notification file\n    const kiroAlert = {\n      id: alert.id,\n      timestamp: alert.timestamp,\n      type: 'linting_alert',\n      severity: alert.severity,\n      title: `Linting ${alert.severity.toUpperCase()}: ${alert.metric}`,\n      message: alert.message,\n      data: {\n        metric: alert.metric,\n        currentValue: alert.currentValue,\n        threshold: alert.threshold,\n      },\n      actions: this.generateKiroActions(alert),\n    };\n\n    const kiroFile = '.kiro/notifications/linting-alerts.json';\n    writeFileSync(kiroFile, JSON.stringify(kiroAlert, null, 2));\n  }\n\n  /**\n   * Send webhook alert\n   */\n  private async sendWebhookAlert(alert: Alert, config: Record<string, unknown>): Promise<void> {\n    if (!config.url) {\n      console.warn('Webhook URL not configured');\n      return;\n    }\n\n    const payload = {\n      alert_id: alert.id,\n      timestamp: alert.timestamp,\n      severity: alert.severity,\n      metric: alert.metric,\n      current_value: alert.currentValue,\n      threshold: alert.threshold,\n      message: alert.message,\n      source: 'linting-excellence-dashboard',\n    };\n\n    try {\n      // Use curl for webhook (Node.js fetch might not be available)\n      const curlCommand = `curl -X POST \"${config.url}\" \\\n        -H \"Content-Type: application/json\" \\\n        -d '${JSON.stringify(payload)}'`;\n\n      execSync(curlCommand, { stdio: 'pipe' });\n    } catch (error) {\n      console.error('Failed to send webhook alert:', error);\n    }\n  }\n\n  /**\n   * Process performance event and trigger responses\n   */\n  private async processPerformanceEvent(event: PerformanceEvent): Promise<void> {\n    console.log(`📊 Performance event: ${event.type} for ${event.metric}`);\n\n    // Log performance event\n    const performanceLog = `.kiro/metrics/performance-events.log`;\n    const logEntry = `[${event.timestamp.toISOString()}] ${event.type.toUpperCase()}: ${event.metric} = ${event.value} (threshold: ${event.threshold}, impact: ${event.impact})\\n`;\n\n    try {\n      execSync(`echo \"${logEntry}\" >> \"${performanceLog}\"`);\n    } catch (error) {\n      console.error('Failed to log performance event:', error);\n    }\n\n    // Update performance history\n    this.updatePerformanceHistory(event);\n  }\n\n  /**\n   * Trigger automatic responses based on alerts and performance events\n   */\n  private async triggerAutoResponses(alerts: Alert[], events: PerformanceEvent[]): Promise<void> {\n    const actions = this.config.autoResponse.actions;\n\n    for (const action of actions) {\n      if (this.shouldTriggerAction(action, alerts, events)) {\n        await this.executeAutoResponse(action);\n      }\n    }\n  }\n\n  /**\n   * Execute automatic response action\n   */\n  private async executeAutoResponse(action: AutoResponseAction): Promise<void> {\n    console.log(`🤖 Executing auto-response: ${action.action}`);\n\n    try {\n      switch (action.action) {\n        case 'enableCache':\n          await this.enableLintingCache();\n          break;\n        case 'reduceBatchSize':\n          await this.reduceBatchSize(action.parameters.newSize || 10);\n          break;\n        case 'skipNonCritical':\n          await this.skipNonCriticalRules();\n          break;\n        case 'emergencyStop':\n          await this.emergencyStop();\n          break;\n      }\n    } catch (error) {\n      console.error(`Failed to execute auto-response ${action.action}:`, error);\n    }\n  }\n\n  /**\n   * Filter alerts based on cooldown and suppression\n   */\n  private filterActiveAlerts(alerts: Alert[]): Alert[] {\n    return alerts.filter(alert => {\n      // Check suppression\n      if (this.suppressedAlerts.has(alert.metric)) {\n        return false;\n      }\n\n      // Check cooldown\n      const lastAlert = this.lastAlertTime.get(alert.metric);\n      if (lastAlert) {\n        const cooldownMs = this.config.regressionDetection.cooldownPeriod * 60 * 1000;\n        if (Date.now() - lastAlert.getTime() < cooldownMs) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  /**\n   * Generate Kiro-specific actions for alerts\n   */\n  private generateKiroActions(alert: Alert): Array<Record<string, unknown>> {\n    const actions: Array<Record<string, unknown>> = [];\n\n    if (alert.metric === 'parserErrors' && alert.currentValue > 0) {\n      actions.push({\n        type: 'command',\n        label: 'Fix Parser Errors',\n        command: 'yarn tsc --noEmit',\n        description: 'Run TypeScript compiler to identify syntax errors',\n      });\n    }\n\n    if (alert.metric === 'explicitAnyErrors' && alert.currentValue > 100) {\n      actions.push({\n        type: 'campaign',\n        label: 'Start Explicit Any Campaign',\n        campaign: 'explicit-any-elimination',\n        description: 'Launch systematic explicit any type elimination',\n      });\n    }\n\n    if (alert.metric === 'importOrderIssues' && alert.currentValue > 50) {\n      actions.push({\n        type: 'command',\n        label: 'Fix Import Order',\n        command: 'yarn lint:fix',\n        description: 'Automatically organize imports with enhanced rules',\n      });\n    }\n\n    return actions;\n  }\n\n  // Auto-response implementations\n  private async enableLintingCache(): Promise<void> {\n    console.log('🚀 Enabling ESLint caching for improved performance');\n    // Cache is already enabled in eslint.config.cjs, this is a no-op\n  }\n\n  private async reduceBatchSize(newSize: number): Promise<void> {\n    console.log(`📉 Reducing batch size to ${newSize} for better performance`);\n    // This would integrate with campaign system batch processing\n  }\n\n  private async skipNonCriticalRules(): Promise<void> {\n    console.log('⚡ Temporarily skipping non-critical rules for performance');\n    // This would create a temporary ESLint config with reduced rules\n  }\n\n  private async emergencyStop(): Promise<void> {\n    console.log('🛑 Emergency stop triggered - halting linting operations');\n    // This would stop any running linting campaigns\n  }\n\n  // Helper methods\n  private loadConfiguration(): AlertingConfig {\n    try {\n      if (existsSync(this.configFile)) {\n        return JSON.parse(readFileSync(this.configFile, 'utf8'));\n      }\n    } catch (error) {\n      console.warn('Error loading alerting configuration:', error);\n    }\n\n    // Return default configuration\n    return {\n      enabled: true,\n      channels: [\n        {\n          type: 'console',\n          config: {},\n          severityFilter: ['warning', 'error', 'critical'],\n        },\n        {\n          type: 'file',\n          config: { file: '.kiro/metrics/alerts.log' },\n          severityFilter: ['error', 'critical'],\n        },\n        {\n          type: 'kiro',\n          config: {},\n          severityFilter: ['critical'],\n        },\n      ],\n      regressionDetection: {\n        enabled: true,\n        sensitivity: 'medium',\n        cooldownPeriod: 15, // 15 minutes\n      },\n      performanceMonitoring: {\n        enabled: true,\n        thresholds: [\n          {\n            metric: 'duration',\n            threshold: 30000, // 30 seconds\n            severity: 'warning',\n            message: 'Linting duration exceeds 30 seconds',\n          },\n          {\n            metric: 'memory',\n            threshold: 512, // 512 MB\n            severity: 'warning',\n            message: 'Memory usage exceeds 512MB',\n          },\n          {\n            metric: 'cacheHitRate',\n            threshold: 0.5, // 50%\n            severity: 'warning',\n            message: 'Cache hit rate below 50%',\n          },\n        ],\n      },\n      autoResponse: {\n        enabled: true,\n        actions: [\n          {\n            trigger: 'performance_degradation',\n            action: 'enableCache',\n            parameters: {},\n          },\n          {\n            trigger: 'memory_exceeded',\n            action: 'reduceBatchSize',\n            parameters: { newSize: 10 },\n          },\n        ],\n      },\n    };\n  }\n\n  private loadSuppressions(): void {\n    try {\n      if (existsSync(this.suppressionFile)) {\n        const suppressions = JSON.parse(readFileSync(this.suppressionFile, 'utf8'));\n        this.suppressedAlerts = new Set(suppressions);\n      }\n    } catch (error) {\n      console.warn('Error loading alert suppressions:', error);\n    }\n  }\n\n  private updateAlertHistory(alert: Alert): void {\n    this.lastAlertTime.set(alert.metric, alert.timestamp);\n\n    // Store in history file\n    try {\n      const history = this.loadAlertHistory();\n      history.alerts.push(alert);\n\n      // Keep only last 1000 alerts\n      if (history.alerts.length > 1000) {\n        history.alerts.splice(0, history.alerts.length - 1000);\n      }\n\n      writeFileSync(this.historyFile, JSON.stringify(history, null, 2));\n    } catch (error) {\n      console.error('Error updating alert history:', error);\n    }\n  }\n\n  private updatePerformanceHistory(event: PerformanceEvent): void {\n    try {\n      const history = this.loadAlertHistory();\n      history.performanceEvents.push(event);\n\n      // Keep only last 500 performance events\n      if (history.performanceEvents.length > 500) {\n        history.performanceEvents.splice(0, history.performanceEvents.length - 500);\n      }\n\n      writeFileSync(this.historyFile, JSON.stringify(history, null, 2));\n    } catch (error) {\n      console.error('Error updating performance history:', error);\n    }\n  }\n\n  private loadAlertHistory(): AlertHistory {\n    try {\n      if (existsSync(this.historyFile)) {\n        return JSON.parse(readFileSync(this.historyFile, 'utf8'));\n      }\n    } catch (error) {\n      console.warn('Error loading alert history:', error);\n    }\n\n    return {\n      alerts: [],\n      suppressedAlerts: [],\n      resolvedAlerts: [],\n      performanceEvents: [],\n    };\n  }\n\n  private getPerformanceMetricValue(metrics: LintingMetrics, metric: string): number {\n    switch (metric) {\n      case 'duration':\n        return metrics.performanceMetrics.lintingDuration;\n      case 'memory':\n        return metrics.performanceMetrics.memoryUsage;\n      case 'cacheHitRate':\n        return metrics.performanceMetrics.cacheHitRate;\n      case 'filesPerSecond':\n        return (\n          metrics.performanceMetrics.filesProcessed /\n          (metrics.performanceMetrics.lintingDuration / 1000)\n        );\n      default:\n        return 0;\n    }\n  }\n\n  private isThresholdExceeded(value: number, threshold: PerformanceThreshold): boolean {\n    if (threshold.metric === 'cacheHitRate') {\n      return value < threshold.threshold; // Cache hit rate should be above threshold\n    }\n    return value > threshold.threshold; // Other metrics should be below threshold\n  }\n\n  private calculateImpact(severity: string): 'low' | 'medium' | 'high' {\n    switch (severity) {\n      case 'critical':\n        return 'high';\n      case 'error':\n        return 'medium';\n      default:\n        return 'low';\n    }\n  }\n\n  private shouldTriggerAction(\n    action: AutoResponseAction,\n    alerts: Alert[],\n    events: PerformanceEvent[],\n  ): boolean {\n    switch (action.trigger) {\n      case 'performance_degradation':\n        return events.some(e => e.type === 'threshold_exceeded' && e.impact === 'high');\n      case 'memory_exceeded':\n        return events.some(e => e.metric === 'memory' && e.type === 'threshold_exceeded');\n      case 'critical_alert':\n        return alerts.some(a => a.severity === 'critical');\n      default:\n        return false;\n    }\n  }\n\n  private getSeverityIcon(severity: string): string {\n    switch (severity) {\n      case 'critical':\n        return '🚨';\n      case 'error':\n        return '❌';\n      case 'warning':\n        return '⚠️';\n      case 'info':\n        return 'ℹ️';\n      default:\n        return '📋';\n    }\n  }\n}\n"],"version":3}