{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/AutomatedLintingFixer.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/AutomatedLintingFixer.ts"],"sourcesContent":["/**\n * AutomatedLintingFixer - Automated error resolution system with safety protocols\n *\n * This class implements comprehensive automated fixing capabilities with batch processing,\n * safety validation, and rollback mechanisms for ESLint issues.\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport { log } from '@/services/LoggingService';\n\nimport { LintingIssue, CategorizedErrors } from './LintingErrorAnalyzer';\nimport { ResolutionStrategy } from './ResolutionStrategyGenerator';\n\nexport interface AutomatedFixResult {\n  success: boolean;\n  fixedIssues: number;\n  failedIssues: number;\n  processedFiles: string[];\n  errors: FixError[];\n  validationResults: ValidationResult[];\n  rollbackInfo?: RollbackInfo;\n  metrics: FixMetrics;\n}\n\nexport interface FixError {\n  file: string;\n  rule: string;\n  message: string;\n  error: string;\n  severity: 'warning' | 'error' | 'critical';\n}\n\nexport interface ValidationResult {\n  type: 'build' | 'test' | 'type-check' | 'lint';\n  success: boolean;\n  message: string;\n  details?: string;\n}\n\nexport interface RollbackInfo {\n  stashId: string;\n  timestamp: Date;\n  affectedFiles: string[];\n  rollbackCommand: string;\n}\n\nexport interface FixMetrics {\n  startTime: Date;\n  endTime: Date;\n  totalTime: number; // milliseconds\n  filesProcessed: number;\n  issuesAttempted: number;\n  issuesFixed: number;\n  issuesFailed: number;\n  validationTime: number;\n  rollbacksPerformed: number;\n}\n\nexport interface BatchProcessingOptions {\n  batchSize: number;\n  maxConcurrentBatches: number;\n  validateAfterEachBatch: boolean;\n  continueOnError: boolean;\n  createBackups: boolean;\n  dryRun: boolean;\n}\n\nexport interface SafetyProtocols {\n  enableRollback: boolean;\n  validateBeforeFix: boolean;\n  validateAfterFix: boolean;\n  maxFailuresBeforeStop: number;\n  requireManualApproval: boolean;\n  preservePatterns: string[];\n}\n\nexport interface UnusedVariableFixOptions {\n  prefixWithUnderscore: boolean;\n  removeCompletely: boolean;\n  preservePatterns: string[];\n  skipTestFiles: boolean;\n  skipDomainFiles: boolean;\n}\n\nexport interface ImportOptimizationOptions {\n  removeDuplicates: boolean;\n  organizeImports: boolean;\n  removeUnused: boolean;\n  preserveComments: boolean;\n  sortImports: boolean;\n}\n\nexport interface TypeAnnotationOptions {\n  inferFromUsage: boolean;\n  useStrictTypes: boolean;\n  preserveExplicitAny: string[];\n  maxComplexity: 'simple' | 'moderate' | 'complex';\n}\n\n/**\n * Main AutomatedLintingFixer class\n */\nexport class AutomatedLintingFixer {\n  private workspaceRoot: string;\n  private eslintConfigPath: string;\n  private safetyProtocols: SafetyProtocols;\n  private currentRollbackInfo?: RollbackInfo;\n\n  constructor(\n    workspaceRoot: string = process.cwd(),\n    safetyProtocols: Partial<SafetyProtocols> = {},\n  ) {\n    this.workspaceRoot = workspaceRoot;\n    this.eslintConfigPath = path.join(workspaceRoot, 'eslint.config.cjs');\n\n    // Default safety protocols\n    this.safetyProtocols = {\n      enableRollback: true,\n      validateBeforeFix: true,\n      validateAfterFix: true,\n      maxFailuresBeforeStop: 5,\n      requireManualApproval: false,\n      preservePatterns: [\n        '**/calculations/**',\n        '**/data/planets/**',\n        '**/*astrological*',\n        '**/*campaign*',\n      ],\n      ...safetyProtocols,\n    };\n  }\n\n  /**\n   * Apply automated fixes with batch processing and safety protocols\n   */\n  async applyAutomatedFixes(\n    categorizedErrors: CategorizedErrors,\n    options: Partial<BatchProcessingOptions> = {},\n  ): Promise<AutomatedFixResult> {\n    const startTime = new Date();\n    log.info('🔧 Starting automated linting fixes with safety protocols...');\n\n    const batchOptions: BatchProcessingOptions = {\n      batchSize: 10,\n      maxConcurrentBatches: 1,\n      validateAfterEachBatch: true,\n      continueOnError: false,\n      createBackups: true,\n      dryRun: false,\n      ...options,\n    };\n\n    const result: AutomatedFixResult = {\n      success: false,\n      fixedIssues: 0,\n      failedIssues: 0,\n      processedFiles: [],\n      errors: [],\n      validationResults: [],\n      metrics: {\n        startTime,\n        endTime: new Date(),\n        totalTime: 0,\n        filesProcessed: 0,\n        issuesAttempted: 0,\n        issuesFixed: 0,\n        issuesFailed: 0,\n        validationTime: 0,\n        rollbacksPerformed: 0,\n      },\n    };\n\n    try {\n      // Step 1: Pre-fix validation\n      if (this.safetyProtocols.validateBeforeFix) {\n        log.info('🔍 Running pre-fix validation...');\n        const preValidation = await this.runValidation();\n        result.validationResults.push(...preValidation);\n\n        if (preValidation.some(v => !v.success && v.type === 'build')) {\n          throw new Error('Pre-fix validation failed - build is broken');\n        }\n      }\n\n      // Step 2: Create backup/stash if enabled\n      if (batchOptions.createBackups && this.safetyProtocols.enableRollback) {\n        log.info('💾 Creating backup...');\n        this.currentRollbackInfo = await this.createBackup();\n        result.rollbackInfo = this.currentRollbackInfo;\n      }\n\n      // Step 3: Process auto-fixable issues in batches\n      const autoFixableIssues = categorizedErrors.autoFixable.filter(issue =>\n        this.isSafeToAutoFix(issue),\n      );\n\n      log.info(\n        `🎯 Processing ${autoFixableIssues.length} auto-fixable issues in batches of ${batchOptions.batchSize}`,\n      );\n\n      const batches = this.createBatches(autoFixableIssues, batchOptions.batchSize);\n      let failureCount = 0;\n\n      for (let i = 0; i < batches.length; i++) {\n        const batch = batches[i];\n        log.info(`📦 Processing batch ${i + 1}/${batches.length} (${batch.length} issues)`);\n\n        try {\n          const batchResult = await this.processBatch(batch, batchOptions);\n\n          result.fixedIssues += batchResult.fixedIssues;\n          result.failedIssues += batchResult.failedIssues;\n          result.processedFiles.push(...batchResult.processedFiles);\n          result.errors.push(...batchResult.errors);\n\n          // Validate after each batch if enabled\n          if (batchOptions.validateAfterEachBatch) {\n            const batchValidation = await this.runValidation();\n            result.validationResults.push(...batchValidation);\n\n            if (batchValidation.some(v => !v.success && v.type === 'build')) {\n              console.warn('⚠️ Batch validation failed - performing rollback');\n              await this.performRollback();\n              result.metrics.rollbacksPerformed++;\n              failureCount++;\n\n              if (failureCount >= this.safetyProtocols.maxFailuresBeforeStop) {\n                throw new Error('Maximum failures reached - stopping automated fixes');\n              }\n            }\n          }\n        } catch (error) {\n          console.error(`❌ Batch ${i + 1} failed:`, error);\n          result.errors.push({\n            file: 'batch-processing',\n            rule: 'batch-error',\n            message: `Batch ${i + 1} processing failed`,\n            error: error instanceof Error ? error.message : String(error),\n            severity: 'error',\n          });\n\n          failureCount++;\n          if (\n            !batchOptions.continueOnError ||\n            failureCount >= this.safetyProtocols.maxFailuresBeforeStop\n          ) {\n            break;\n          }\n        }\n      }\n\n      // Step 4: Final validation\n      if (this.safetyProtocols.validateAfterFix) {\n        log.info('✅ Running final validation...');\n        const finalValidation = await this.runValidation();\n        result.validationResults.push(...finalValidation);\n\n        const buildSuccess = finalValidation.find(v => v.type === 'build')?.success ?? true;\n        result.success = buildSuccess && result.fixedIssues > 0;\n      } else {\n        result.success = result.fixedIssues > 0;\n      }\n\n      // Update metrics\n      const endTime = new Date();\n      result.metrics.endTime = endTime;\n      result.metrics.totalTime = endTime.getTime() - startTime.getTime();\n      result.metrics.filesProcessed = new Set(result.processedFiles).size;\n      result.metrics.issuesAttempted = autoFixableIssues.length;\n      result.metrics.issuesFixed = result.fixedIssues;\n      result.metrics.issuesFailed = result.failedIssues;\n\n      log.info(\n        `✅ Automated fixes complete: ${result.fixedIssues} fixed, ${result.failedIssues} failed`,\n      );\n\n      return result;\n    } catch (error) {\n      console.error('❌ Automated fixing failed:', error);\n\n      // Attempt rollback on critical failure\n      if (this.currentRollbackInfo && this.safetyProtocols.enableRollback) {\n        log.info('🔄 Performing emergency rollback...');\n        await this.performRollback();\n        result.metrics.rollbacksPerformed++;\n      }\n\n      result.success = false;\n      result.errors.push({\n        file: 'system',\n        rule: 'critical-error',\n        message: 'Critical failure during automated fixing',\n        error: error instanceof Error ? error.message : String(error),\n        severity: 'critical',\n      });\n\n      return result;\n    }\n  }\n\n  /**\n   * Handle unused variable removal with underscore prefixing\n   */\n  async handleUnusedVariables(\n    issues: LintingIssue[],\n    options: Partial<UnusedVariableFixOptions> = {},\n  ): Promise<AutomatedFixResult> {\n    log.info('🧹 Handling unused variables...');\n\n    const fixOptions: UnusedVariableFixOptions = {\n      prefixWithUnderscore: true,\n      removeCompletely: false,\n      preservePatterns: ['**/calculations/**', '**/data/planets/**', '**/*astrological*'],\n      skipTestFiles: false,\n      skipDomainFiles: true,\n      ...options,\n    };\n\n    const unusedVarIssues = issues.filter(\n      issue => issue.rule.includes('no-unused-vars') || issue.rule.includes('unused-vars'),\n    );\n\n    const result: AutomatedFixResult = {\n      success: false,\n      fixedIssues: 0,\n      failedIssues: 0,\n      processedFiles: [],\n      errors: [],\n      validationResults: [],\n      metrics: {\n        startTime: new Date(),\n        endTime: new Date(),\n        totalTime: 0,\n        filesProcessed: 0,\n        issuesAttempted: unusedVarIssues.length,\n        issuesFixed: 0,\n        issuesFailed: 0,\n        validationTime: 0,\n        rollbacksPerformed: 0,\n      },\n    };\n\n    for (const issue of unusedVarIssues) {\n      try {\n        // Skip if file should be preserved\n        if (this.shouldPreserveFile(issue.file, fixOptions.preservePatterns)) {\n          log.info(`⏭️ Skipping preserved file: ${issue.file}`);\n          continue;\n        }\n\n        // Skip domain files if configured\n        if (fixOptions.skipDomainFiles && issue.domainContext?.requiresSpecialHandling) {\n          log.info(`⏭️ Skipping domain file: ${issue.file}`);\n          continue;\n        }\n\n        // Skip test files if configured\n        if (fixOptions.skipTestFiles && issue.domainContext?.isTestFile) {\n          log.info(`⏭️ Skipping test file: ${issue.file}`);\n          continue;\n        }\n\n        const fixed = await this.fixUnusedVariable(issue, fixOptions);\n        if (fixed) {\n          result.fixedIssues++;\n          if (!result.processedFiles.includes(issue.file)) {\n            result.processedFiles.push(issue.file);\n          }\n        } else {\n          result.failedIssues++;\n        }\n      } catch (error) {\n        result.failedIssues++;\n        result.errors.push({\n          file: issue.file,\n          rule: issue.rule,\n          message: `Failed to fix unused variable: ${issue.message}`,\n          error: error instanceof Error ? error.message : String(error),\n          severity: 'error',\n        });\n      }\n    }\n\n    result.success = result.fixedIssues > 0;\n    result.metrics.endTime = new Date();\n    result.metrics.totalTime =\n      result.metrics.endTime.getTime() - result.metrics.startTime.getTime();\n    result.metrics.filesProcessed = result.processedFiles.length;\n    result.metrics.issuesFixed = result.fixedIssues;\n    result.metrics.issuesFailed = result.failedIssues;\n\n    log.info(\n      `🧹 Unused variables handled: ${result.fixedIssues} fixed, ${result.failedIssues} failed`,\n    );\n    return result;\n  }\n\n  /**\n   * Optimize import statements and remove duplicates\n   */\n  async optimizeImports(\n    issues: LintingIssue[],\n    options: Partial<ImportOptimizationOptions> = {},\n  ): Promise<AutomatedFixResult> {\n    log.info('📦 Optimizing import statements...');\n\n    const importOptions: ImportOptimizationOptions = {\n      removeDuplicates: true,\n      organizeImports: true,\n      removeUnused: true,\n      preserveComments: true,\n      sortImports: true,\n      ...options,\n    };\n\n    const importIssues = issues.filter(\n      issue => issue.category.primary === 'import' || issue.rule.startsWith('import/'),\n    );\n\n    const result: AutomatedFixResult = {\n      success: false,\n      fixedIssues: 0,\n      failedIssues: 0,\n      processedFiles: [],\n      errors: [],\n      validationResults: [],\n      metrics: {\n        startTime: new Date(),\n        endTime: new Date(),\n        totalTime: 0,\n        filesProcessed: 0,\n        issuesAttempted: importIssues.length,\n        issuesFixed: 0,\n        issuesFailed: 0,\n        validationTime: 0,\n        rollbacksPerformed: 0,\n      },\n    };\n\n    // Group issues by file for batch processing\n    const issuesByFile = new Map<string, LintingIssue[]>();\n    for (const issue of importIssues) {\n      if (!issuesByFile.has(issue.file)) {\n        issuesByFile.set(issue.file, []);\n      }\n      issuesByFile.get(issue.file)?.push(issue);\n    }\n\n    for (const [filePath, fileIssues] of issuesByFile) {\n      try {\n        // Skip if file should be preserved\n        if (this.shouldPreserveFile(filePath, this.safetyProtocols.preservePatterns)) {\n          log.info(`⏭️ Skipping preserved file: ${filePath}`);\n          continue;\n        }\n\n        const fixed = await this.optimizeFileImports(filePath, fileIssues, importOptions);\n        if (fixed) {\n          result.fixedIssues += fileIssues.length;\n          result.processedFiles.push(filePath);\n        } else {\n          result.failedIssues += fileIssues.length;\n        }\n      } catch (error) {\n        result.failedIssues += fileIssues.length;\n        result.errors.push({\n          file: filePath,\n          rule: 'import-optimization',\n          message: `Failed to optimize imports`,\n          error: error instanceof Error ? error.message : String(error),\n          severity: 'error',\n        });\n      }\n    }\n\n    result.success = result.fixedIssues > 0;\n    result.metrics.endTime = new Date();\n    result.metrics.totalTime =\n      result.metrics.endTime.getTime() - result.metrics.startTime.getTime();\n    result.metrics.filesProcessed = result.processedFiles.length;\n    result.metrics.issuesFixed = result.fixedIssues;\n    result.metrics.issuesFailed = result.failedIssues;\n\n    log.info(\n      `📦 Import optimization complete: ${result.fixedIssues} fixed, ${result.failedIssues} failed`,\n    );\n    return result;\n  }\n\n  /**\n   * Improve type annotations for simple cases\n   */\n  async improveTypeAnnotations(\n    issues: LintingIssue[],\n    options: Partial<TypeAnnotationOptions> = {},\n  ): Promise<AutomatedFixResult> {\n    log.info('🏷️ Improving type annotations...');\n\n    const typeOptions: TypeAnnotationOptions = {\n      inferFromUsage: true,\n      useStrictTypes: false,\n      preserveExplicitAny: ['**/calculations/**', '**/data/planets/**'],\n      maxComplexity: 'simple',\n      ...options,\n    };\n\n    const typeIssues = issues.filter(\n      issue =>\n        issue.rule.includes('no-explicit-any') ||\n        issue.rule.includes('no-implicit-any') ||\n        issue.category.primary === 'typescript',\n    );\n\n    const result: AutomatedFixResult = {\n      success: false,\n      fixedIssues: 0,\n      failedIssues: 0,\n      processedFiles: [],\n      errors: [],\n      validationResults: [],\n      metrics: {\n        startTime: new Date(),\n        endTime: new Date(),\n        totalTime: 0,\n        filesProcessed: 0,\n        issuesAttempted: typeIssues.length,\n        issuesFixed: 0,\n        issuesFailed: 0,\n        validationTime: 0,\n        rollbacksPerformed: 0,\n      },\n    };\n\n    for (const issue of typeIssues) {\n      try {\n        // Skip if file should preserve explicit any\n        if (this.shouldPreserveFile(issue.file, typeOptions.preserveExplicitAny)) {\n          log.info(`⏭️ Preserving explicit any in: ${issue.file}`);\n          continue;\n        }\n\n        // Only handle simple cases based on complexity setting\n        if (typeOptions.maxComplexity === 'simple' && !this.isSimpleTypeIssue(issue)) {\n          log.info(`⏭️ Skipping complex type issue: ${issue.rule} in ${issue.file}`);\n          continue;\n        }\n\n        const fixed = await this.improveTypeAnnotation(issue, typeOptions);\n        if (fixed) {\n          result.fixedIssues++;\n          if (!result.processedFiles.includes(issue.file)) {\n            result.processedFiles.push(issue.file);\n          }\n        } else {\n          result.failedIssues++;\n        }\n      } catch (error) {\n        result.failedIssues++;\n        result.errors.push({\n          file: issue.file,\n          rule: issue.rule,\n          message: `Failed to improve type annotation: ${issue.message}`,\n          error: error instanceof Error ? error.message : String(error),\n          severity: 'error',\n        });\n      }\n    }\n\n    result.success = result.fixedIssues > 0;\n    result.metrics.endTime = new Date();\n    result.metrics.totalTime =\n      result.metrics.endTime.getTime() - result.metrics.startTime.getTime();\n    result.metrics.filesProcessed = result.processedFiles.length;\n    result.metrics.issuesFixed = result.fixedIssues;\n    result.metrics.issuesFailed = result.failedIssues;\n\n    log.info(\n      `🏷️ Type annotation improvement complete: ${result.fixedIssues} fixed, ${result.failedIssues} failed`,\n    );\n    return result;\n  }\n\n  /**\n   * Validate fixes with comprehensive checks\n   */\n  async validateFixes(): Promise<ValidationResult[]> {\n    log.info('🔍 Running comprehensive validation...');\n    return await this.runValidation();\n  }\n\n  /**\n   * Perform rollback to previous state\n   */\n  async performRollback(): Promise<boolean> {\n    if (!this.currentRollbackInfo || !this.safetyProtocols.enableRollback) {\n      console.warn('⚠️ No rollback information available');\n      return false;\n    }\n\n    try {\n      log.info(`🔄 Rolling back to stash: ${this.currentRollbackInfo.stashId}`);\n      execSync(this.currentRollbackInfo.rollbackCommand, {\n        cwd: this.workspaceRoot,\n        stdio: 'pipe',\n      });\n\n      log.info('✅ Rollback completed successfully');\n      return true;\n    } catch (error) {\n      console.error('❌ Rollback failed:', error);\n      return false;\n    }\n  }\n\n  // Private helper methods\n\n  private async createBackup(): Promise<RollbackInfo> {\n    const timestamp = new Date();\n    const stashMessage = `automated-linting-fixes-${timestamp.toISOString()}`;\n\n    try {\n      execSync(`git add -A && git stash push -m \"${stashMessage}\"`, {\n        cwd: this.workspaceRoot,\n        stdio: 'pipe',\n      });\n\n      const stashList = execSync('git stash list', {\n        cwd: this.workspaceRoot,\n        encoding: 'utf8',\n      });\n\n      const stashId = stashList.split('\\n')[0]?.split(':')[0] || 'stash@{0}';\n\n      return {\n        stashId,\n        timestamp,\n        affectedFiles: [],\n        rollbackCommand: `git stash pop ${stashId}`,\n      };\n    } catch (error) {\n      throw new Error(`Failed to create backup: ${error}`);\n    }\n  }\n\n  private async runValidation(): Promise<ValidationResult[]> {\n    const results: ValidationResult[] = [];\n    const validationStart = Date.now();\n\n    // Build validation\n    try {\n      execSync('npm run build', {\n        cwd: this.workspaceRoot,\n        stdio: 'pipe',\n        timeout: 60000, // 1 minute timeout\n      });\n      results.push({\n        type: 'build',\n        success: true,\n        message: 'Build passed successfully',\n      });\n    } catch (error) {\n      results.push({\n        type: 'build',\n        success: false,\n        message: 'Build failed',\n        details: error instanceof Error ? error.message : String(error),\n      });\n    }\n\n    // Type check validation\n    try {\n      execSync('npx tsc --noEmit', {\n        cwd: this.workspaceRoot,\n        stdio: 'pipe',\n        timeout: 30000, // 30 second timeout\n      });\n      results.push({\n        type: 'type-check',\n        success: true,\n        message: 'Type checking passed',\n      });\n    } catch (error) {\n      results.push({\n        type: 'type-check',\n        success: false,\n        message: 'Type checking failed',\n        details: error instanceof Error ? error.message : String(error),\n      });\n    }\n\n    // Lint validation\n    try {\n      execSync(`npx eslint --config ${this.eslintConfigPath} src`, {\n        cwd: this.workspaceRoot,\n        stdio: 'pipe',\n        timeout: 30000, // 30 second timeout\n      });\n      results.push({\n        type: 'lint',\n        success: true,\n        message: 'Linting passed',\n      });\n    } catch (error) {\n      // ESLint returns non-zero exit code for warnings/errors, which is expected\n      results.push({\n        type: 'lint',\n        success: true,\n        message: 'Linting completed (may have remaining issues)',\n      });\n    }\n\n    // Test validation (if tests exist)\n    if (fs.existsSync(path.join(this.workspaceRoot, 'jest.config.js'))) {\n      try {\n        execSync('npm test -- --passWithNoTests', {\n          cwd: this.workspaceRoot,\n          stdio: 'pipe',\n          timeout: 120000, // 2 minute timeout\n        });\n        results.push({\n          type: 'test',\n          success: true,\n          message: 'Tests passed',\n        });\n      } catch (error) {\n        results.push({\n          type: 'test',\n          success: false,\n          message: 'Tests failed',\n          details: error instanceof Error ? error.message : String(error),\n        });\n      }\n    }\n\n    const validationTime = Date.now() - validationStart;\n    log.info(`🔍 Validation completed in ${validationTime}ms`);\n\n    return results;\n  }\n\n  private isSafeToAutoFix(issue: LintingIssue): boolean {\n    // Check if file should be preserved\n    if (this.shouldPreserveFile(issue.file, this.safetyProtocols.preservePatterns)) {\n      return false;\n    }\n\n    // Check if issue requires special handling\n    if (issue.domainContext?.requiresSpecialHandling) {\n      return false;\n    }\n\n    // Only auto-fix issues with high confidence\n    if (issue.resolutionStrategy.confidence < 0.7) {\n      return false;\n    }\n\n    // Only auto-fix low to medium risk issues\n    if (issue.resolutionStrategy.riskLevel === 'high') {\n      return false;\n    }\n\n    return issue.autoFixable;\n  }\n\n  private shouldPreserveFile(filePath: string, patterns: string[]): boolean {\n    return patterns.some(pattern => {\n      const regex = new RegExp(pattern.replace(/\\*\\*/g, '.*').replace(/\\*/g, '[^/]*'));\n      return regex.test(filePath);\n    });\n  }\n\n  private createBatches<T>(items: T[], batchSize: number): T[][] {\n    const batches: T[][] = [];\n    for (let i = 0; i < items.length; i += batchSize) {\n      batches.push(items.slice(i, i + batchSize));\n    }\n    return batches;\n  }\n\n  private async processBatch(\n    batch: LintingIssue[],\n    options: BatchProcessingOptions,\n  ): Promise<AutomatedFixResult> {\n    const result: AutomatedFixResult = {\n      success: false,\n      fixedIssues: 0,\n      failedIssues: 0,\n      processedFiles: [],\n      errors: [],\n      validationResults: [],\n      metrics: {\n        startTime: new Date(),\n        endTime: new Date(),\n        totalTime: 0,\n        filesProcessed: 0,\n        issuesAttempted: batch.length,\n        issuesFixed: 0,\n        issuesFailed: 0,\n        validationTime: 0,\n        rollbacksPerformed: 0,\n      },\n    };\n\n    // Group issues by file for efficient processing\n    const issuesByFile = new Map<string, LintingIssue[]>();\n    for (const issue of batch) {\n      if (!issuesByFile.has(issue.file)) {\n        issuesByFile.set(issue.file, []);\n      }\n      issuesByFile.get(issue.file)?.push(issue);\n    }\n\n    // Process each file\n    for (const [filePath, fileIssues] of issuesByFile) {\n      try {\n        if (options.dryRun) {\n          log.info(`🔍 [DRY RUN] Would fix ${fileIssues.length} issues in ${filePath}`);\n          result.fixedIssues += fileIssues.length;\n        } else {\n          const fixed = await this.fixFileIssues(filePath, fileIssues);\n          if (fixed) {\n            result.fixedIssues += fileIssues.length;\n            result.processedFiles.push(filePath);\n          } else {\n            result.failedIssues += fileIssues.length;\n          }\n        }\n      } catch (error) {\n        result.failedIssues += fileIssues.length;\n        result.errors.push({\n          file: filePath,\n          rule: 'batch-processing',\n          message: `Failed to process file in batch`,\n          error: error instanceof Error ? error.message : String(error),\n          severity: 'error',\n        });\n      }\n    }\n\n    result.success = result.fixedIssues > 0;\n    result.metrics.endTime = new Date();\n    result.metrics.totalTime =\n      result.metrics.endTime.getTime() - result.metrics.startTime.getTime();\n    result.metrics.filesProcessed = result.processedFiles.length;\n    result.metrics.issuesFixed = result.fixedIssues;\n    result.metrics.issuesFailed = result.failedIssues;\n\n    return result;\n  }\n\n  private async fixFileIssues(filePath: string, issues: LintingIssue[]): Promise<boolean> {\n    try {\n      // Use ESLint's auto-fix capability for the specific file\n      const command = `npx eslint --config ${this.eslintConfigPath} --fix \"${filePath}\"`;\n      execSync(command, {\n        cwd: this.workspaceRoot,\n        stdio: 'pipe',\n      });\n\n      return true;\n    } catch (error) {\n      console.warn(`⚠️ Failed to fix issues in ${filePath}:`, error);\n      return false;\n    }\n  }\n\n  private async fixUnusedVariable(\n    issue: LintingIssue,\n    options: UnusedVariableFixOptions,\n  ): Promise<boolean> {\n    try {\n      const filePath = path.join(this.workspaceRoot, issue.file);\n      const content = fs.readFileSync(filePath, 'utf8');\n      const lines = content.split('\\n');\n\n      // Find the line with the unused variable\n      const lineIndex = issue.line - 1;\n      if (lineIndex >= 0 && lineIndex < lines.length) {\n        const line = lines[lineIndex];\n\n        // Extract variable name from the message\n        const varNameMatch = issue.message.match(\n          /'([^']+)' is (defined but never used|assigned a value but never used)/,\n        );\n        if (varNameMatch) {\n          const varName = varNameMatch[1];\n\n          if (options.prefixWithUnderscore && !varName.startsWith('_')) {\n            // Prefix with underscore to indicate intentional non-use\n            const newLine = line.replace(new RegExp(`\\\\b${varName}\\\\b`), `_${varName}`);\n            lines[lineIndex] = newLine;\n\n            fs.writeFileSync(filePath, lines.join('\\n'));\n            return true;\n          }\n        }\n      }\n\n      return false;\n    } catch (error) {\n      console.warn(`⚠️ Failed to fix unused variable in ${issue.file}:`, error);\n      return false;\n    }\n  }\n\n  private async optimizeFileImports(\n    filePath: string,\n    issues: LintingIssue[],\n    options: ImportOptimizationOptions,\n  ): Promise<boolean> {\n    try {\n      // Use ESLint's auto-fix for import-related rules\n      const importRules = issues.map(i => i.rule).filter(rule => rule.startsWith('import/'));\n      if (importRules.length > 0) {\n        const command = `npx eslint --config ${this.eslintConfigPath} --fix \"${filePath}\"`;\n        execSync(command, {\n          cwd: this.workspaceRoot,\n          stdio: 'pipe',\n        });\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.warn(`⚠️ Failed to optimize imports in ${filePath}:`, error);\n      return false;\n    }\n  }\n\n  private isSimpleTypeIssue(issue: LintingIssue): boolean {\n    // Consider simple type issues that can be safely auto-fixed\n    const simplePatterns = [\n      /no-explicit-any.*parameter/,\n      /no-explicit-any.*return type/,\n      /no-explicit-any.*variable declaration/,\n    ];\n\n    return simplePatterns.some(pattern => pattern.test(issue.message));\n  }\n\n  private async improveTypeAnnotation(\n    issue: LintingIssue,\n    options: TypeAnnotationOptions,\n  ): Promise<boolean> {\n    // For now, only handle very simple cases\n    // More complex type inference would require AST parsing and analysis\n\n    if (options.maxComplexity === 'simple' && this.isSimpleTypeIssue(issue)) {\n      try {\n        // Use ESLint auto-fix if available\n        if (issue.autoFixable) {\n          const command = `npx eslint --config ${this.eslintConfigPath} --fix \"${issue.file}\"`;\n          execSync(command, {\n            cwd: this.workspaceRoot,\n            stdio: 'pipe',\n          });\n          return true;\n        }\n      } catch (error) {\n        console.warn(`⚠️ Failed to improve type annotation in ${issue.file}:`, error);\n      }\n    }\n\n    return false;\n  }\n}\n"],"version":3}