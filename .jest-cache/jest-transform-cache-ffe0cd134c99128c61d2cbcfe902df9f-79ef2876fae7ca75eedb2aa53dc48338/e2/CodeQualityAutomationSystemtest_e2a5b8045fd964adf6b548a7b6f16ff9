ff74c99631d1b1bf2aa6aa95a4be37aa
"use strict";
/**
 * Code Quality Automation System Tests
 * Comprehensive test suite for the unified automation system
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the subsystems
jest.mock('./ImportCleanupSystem');
jest.mock('./LintingFormattingSystem');
jest.mock('./DependencySecurityMonitor');
jest.mock('../../utils/logger');
jest.mock('child_process');
const CodeQualityAutomationSystem_1 = require("./CodeQualityAutomationSystem");
const DependencySecurityMonitor_1 = require("./DependencySecurityMonitor");
const ImportCleanupSystem_1 = require("./ImportCleanupSystem");
const LintingFormattingSystem_1 = require("./LintingFormattingSystem");
const MockImportCleanupSystem = ImportCleanupSystem_1.ImportCleanupSystem;
const MockLintingFormattingSystem = LintingFormattingSystem_1.LintingFormattingSystem;
const MockDependencySecurityMonitor = DependencySecurityMonitor_1.DependencySecurityMonitor;
describe('CodeQualityAutomationSystem', () => {
    let automationSystem;
    let testConfig;
    let mockImportCleanup;
    let mockLintingFormatting;
    let mockDependencySecurity;
    beforeEach(() => {
        testConfig = {
            ...CodeQualityAutomationSystem_1.DEFAULT_CODE_QUALITY_AUTOMATION_CONFIG,
            globalSettings: {
                ...CodeQualityAutomationSystem_1.DEFAULT_CODE_QUALITY_AUTOMATION_CONFIG.globalSettings,
                safetyValidationEnabled: false, // Disable for testing
            },
        };
        // Create mock instances
        mockImportCleanup = {
            executeCleanup: jest.fn(),
        };
        mockLintingFormatting = {
            executeLintingAndFormatting: jest.fn(),
        };
        mockDependencySecurity = {
            executeDependencySecurityMonitoring: jest.fn(),
        };
        // Setup mock constructors
        MockImportCleanupSystem.mockImplementation(() => mockImportCleanup);
        MockLintingFormattingSystem.mockImplementation(() => mockLintingFormatting);
        MockDependencySecurityMonitor.mockImplementation(() => mockDependencySecurity);
        automationSystem = new CodeQualityAutomationSystem_1.CodeQualityAutomationSystem(testConfig);
        // Reset mocks
        jest.clearAllMocks();
    });
    describe('executeAutomation', () => {
        test('executes all enabled phases in order', async () => {
            // Setup mock responses
            mockImportCleanup.executeCleanup.mockResolvedValue({
                filesProcessed: ['file1.ts', 'file2.ts'],
                unusedImportsRemoved: 5,
                importsOrganized: 3,
                styleViolationsFixed: 2,
                buildValidationPassed: true,
                errors: [],
                warnings: [],
            });
            mockLintingFormatting.executeLintingAndFormatting.mockResolvedValue({
                filesProcessed: ['file1.ts', 'file2.ts'],
                lintingViolationsFixed: 10,
                formattingIssuesFixed: 8,
                patternBasedFixesApplied: 3,
                buildValidationPassed: true,
                errors: [],
                warnings: [],
                violationBreakdown: {
                    typeScriptErrors: 5,
                    reactViolations: 3,
                    importViolations: 2,
                    formattingIssues: 8,
                    customPatternFixes: 3,
                },
            });
            mockDependencySecurity.executeDependencySecurityMonitoring.mockResolvedValue({
                dependenciesScanned: 50,
                vulnerabilitiesFound: 2,
                updatesAvailable: 5,
                updatesApplied: 3,
                securityPatchesApplied: 2,
                compatibilityTestsPassed: true,
                errors: [],
                warnings: [],
                securityReport: {
                    vulnerabilities: [],
                    summary: { critical: 0, high: 1, moderate: 1, low: 0, total: 2 },
                    recommendations: [],
                },
                updateReport: {
                    availableUpdates: [],
                    appliedUpdates: [],
                    failedUpdates: [],
                    summary: { major: 0, minor: 2, patch: 3, security: 2, total: 5 },
                },
            });
            const result = await automationSystem.executeAutomation();
            expect(result.overallSuccess).toBe(true);
            expect(result.phasesExecuted).toBe(3);
            expect(result.phasesSucceeded).toBe(3);
            expect(result.phasesFailed).toBe(0);
            expect(result.phaseResults).toHaveLength(3);
            // Verify execution order
            expect(result.phaseResults[0].phaseName).toBe('Import Cleanup');
            expect(result.phaseResults[1].phaseName).toBe('Linting and Formatting');
            expect(result.phaseResults[2].phaseName).toBe('Dependency Security');
            // Verify global metrics
            expect(result.globalMetrics.importIssuesFixed).toBe(8); // 5 + 3
            expect(result.globalMetrics.lintingViolationsFixed).toBe(10);
            expect(result.globalMetrics.formattingIssuesFixed).toBe(8);
            expect(result.globalMetrics.securityVulnerabilitiesFixed).toBe(2);
            expect(result.globalMetrics.dependencyUpdatesApplied).toBe(3);
        });
        test('handles phase failures gracefully', async () => {
            // Setup import cleanup to fail
            mockImportCleanup.executeCleanup.mockResolvedValue({
                filesProcessed: [],
                unusedImportsRemoved: 0,
                importsOrganized: 0,
                styleViolationsFixed: 0,
                buildValidationPassed: false,
                errors: ['Import cleanup failed'],
                warnings: [],
            });
            // Setup other phases to succeed
            mockLintingFormatting.executeLintingAndFormatting.mockResolvedValue({
                filesProcessed: ['file1.ts'],
                lintingViolationsFixed: 5,
                formattingIssuesFixed: 3,
                patternBasedFixesApplied: 1,
                buildValidationPassed: true,
                errors: [],
                warnings: [],
                violationBreakdown: {
                    typeScriptErrors: 2,
                    reactViolations: 1,
                    importViolations: 2,
                    formattingIssues: 3,
                    customPatternFixes: 1,
                },
            });
            mockDependencySecurity.executeDependencySecurityMonitoring.mockResolvedValue({
                dependenciesScanned: 10,
                vulnerabilitiesFound: 0,
                updatesAvailable: 0,
                updatesApplied: 0,
                securityPatchesApplied: 0,
                compatibilityTestsPassed: true,
                errors: [],
                warnings: [],
                securityReport: {
                    vulnerabilities: [],
                    summary: { critical: 0, high: 0, moderate: 0, low: 0, total: 0 },
                    recommendations: [],
                },
                updateReport: {
                    availableUpdates: [],
                    appliedUpdates: [],
                    failedUpdates: [],
                    summary: { major: 0, minor: 0, patch: 0, security: 0, total: 0 },
                },
            });
            const result = await automationSystem.executeAutomation();
            expect(result.overallSuccess).toBe(false);
            expect(result.phasesExecuted).toBe(3);
            expect(result.phasesSucceeded).toBe(2);
            expect(result.phasesFailed).toBe(1);
            expect(result.errors).toContain('Import cleanup failed');
        });
        test('respects phase dependencies', async () => {
            // Configure linting to depend on import cleanup
            const configWithDependencies = {
                ...testConfig,
                executionOrder: [
                    {
                        name: 'Import Cleanup',
                        description: 'Clean up imports',
                        system: 'importCleanup',
                        enabled: true,
                        dependencies: [],
                        criticalFailure: false,
                    },
                    {
                        name: 'Linting and Formatting',
                        description: 'Fix linting',
                        system: 'lintingFormatting',
                        enabled: true,
                        dependencies: ['Import Cleanup'],
                        criticalFailure: false,
                    },
                ],
            };
            const systemWithDeps = new CodeQualityAutomationSystem_1.CodeQualityAutomationSystem(configWithDependencies);
            // Make import cleanup fail
            mockImportCleanup.executeCleanup.mockResolvedValue({
                filesProcessed: [],
                unusedImportsRemoved: 0,
                importsOrganized: 0,
                styleViolationsFixed: 0,
                buildValidationPassed: false,
                errors: ['Failed'],
                warnings: [],
            });
            const result = await systemWithDeps.executeAutomation();
            // Linting should still execute because dependencies are checked based on success
            expect(result.phasesExecuted).toBe(2);
            expect(mockLintingFormatting.executeLintingAndFormatting).toHaveBeenCalled();
        });
        test('stops execution on critical failure when continueOnError is false', async () => {
            const configStopOnError = {
                ...testConfig,
                globalSettings: {
                    ...testConfig.globalSettings,
                    continueOnError: false,
                },
                executionOrder: [
                    {
                        name: 'Critical Phase',
                        description: 'Critical phase that fails',
                        system: 'importCleanup',
                        enabled: true,
                        dependencies: [],
                        criticalFailure: true,
                    },
                    {
                        name: 'Next Phase',
                        description: 'Should not execute',
                        system: 'lintingFormatting',
                        enabled: true,
                        dependencies: [],
                        criticalFailure: false,
                    },
                ],
            };
            const systemStopOnError = new CodeQualityAutomationSystem_1.CodeQualityAutomationSystem(configStopOnError);
            // Make the critical phase fail
            mockImportCleanup.executeCleanup.mockResolvedValue({
                filesProcessed: [],
                unusedImportsRemoved: 0,
                importsOrganized: 0,
                styleViolationsFixed: 0,
                buildValidationPassed: false,
                errors: ['Critical failure'],
                warnings: [],
            });
            const result = await systemStopOnError.executeAutomation();
            expect(result.overallSuccess).toBe(false);
            expect(result.phasesExecuted).toBe(1);
            expect(mockLintingFormatting.executeLintingAndFormatting).not.toHaveBeenCalled();
        });
        test('skips disabled phases', async () => {
            const configWithDisabled = {
                ...testConfig,
                executionOrder: [
                    {
                        name: 'Enabled Phase',
                        description: 'This phase is enabled',
                        system: 'importCleanup',
                        enabled: true,
                        dependencies: [],
                        criticalFailure: false,
                    },
                    {
                        name: 'Disabled Phase',
                        description: 'This phase is disabled',
                        system: 'lintingFormatting',
                        enabled: false,
                        dependencies: [],
                        criticalFailure: false,
                    },
                ],
            };
            const systemWithDisabled = new CodeQualityAutomationSystem_1.CodeQualityAutomationSystem(configWithDisabled);
            mockImportCleanup.executeCleanup.mockResolvedValue({
                filesProcessed: ['file1.ts'],
                unusedImportsRemoved: 1,
                importsOrganized: 1,
                styleViolationsFixed: 0,
                buildValidationPassed: true,
                errors: [],
                warnings: [],
            });
            const result = await systemWithDisabled.executeAutomation();
            expect(result.phasesExecuted).toBe(1);
            expect(mockImportCleanup.executeCleanup).toHaveBeenCalled();
            expect(mockLintingFormatting.executeLintingAndFormatting).not.toHaveBeenCalled();
        });
    });
    describe('executePhase', () => {
        test('executes import cleanup phase correctly', async () => {
            const phase = {
                name: 'Import Cleanup',
                description: 'Clean up imports',
                system: 'importCleanup',
                enabled: true,
                dependencies: [],
                criticalFailure: false,
            };
            const mockResult = {
                filesProcessed: ['file1.ts'],
                unusedImportsRemoved: 3,
                importsOrganized: 2,
                styleViolationsFixed: 1,
                buildValidationPassed: true,
                errors: [],
                warnings: ['Warning message'],
            };
            mockImportCleanup.executeCleanup.mockResolvedValue(mockResult);
            const result = await automationSystem.executePhase(phase);
            expect(result.phaseName).toBe('Import Cleanup');
            expect(result.system).toBe('importCleanup');
            expect(result.success).toBe(true);
            expect(result.result).toEqual(mockResult);
            expect(result.warnings).toEqual(['Warning message']);
        });
        test('executes linting formatting phase correctly', async () => {
            const phase = {
                name: 'Linting and Formatting',
                description: 'Fix linting and formatting',
                system: 'lintingFormatting',
                enabled: true,
                dependencies: [],
                criticalFailure: false,
            };
            const mockResult = {
                filesProcessed: ['file1.ts'],
                lintingViolationsFixed: 5,
                formattingIssuesFixed: 3,
                patternBasedFixesApplied: 2,
                buildValidationPassed: true,
                errors: [],
                warnings: [],
                violationBreakdown: {
                    typeScriptErrors: 2,
                    reactViolations: 1,
                    importViolations: 2,
                    formattingIssues: 3,
                    customPatternFixes: 2,
                },
            };
            mockLintingFormatting.executeLintingAndFormatting.mockResolvedValue(mockResult);
            const result = await automationSystem.executePhase(phase);
            expect(result.phaseName).toBe('Linting and Formatting');
            expect(result.system).toBe('lintingFormatting');
            expect(result.success).toBe(true);
            expect(result.result).toEqual(mockResult);
        });
        test('executes dependency security phase correctly', async () => {
            const phase = {
                name: 'Dependency Security',
                description: 'Monitor dependencies and security',
                system: 'dependencySecurity',
                enabled: true,
                dependencies: [],
                criticalFailure: false,
            };
            const mockResult = {
                dependenciesScanned: 25,
                vulnerabilitiesFound: 1,
                updatesAvailable: 3,
                updatesApplied: 2,
                securityPatchesApplied: 1,
                compatibilityTestsPassed: true,
                errors: [],
                warnings: [],
                securityReport: {
                    vulnerabilities: [],
                    summary: { critical: 0, high: 1, moderate: 0, low: 0, total: 1 },
                    recommendations: [],
                },
                updateReport: {
                    availableUpdates: [],
                    appliedUpdates: [],
                    failedUpdates: [],
                    summary: { major: 0, minor: 1, patch: 2, security: 1, total: 3 },
                },
            };
            mockDependencySecurity.executeDependencySecurityMonitoring.mockResolvedValue(mockResult);
            const result = await automationSystem.executePhase(phase);
            expect(result.phaseName).toBe('Dependency Security');
            expect(result.system).toBe('dependencySecurity');
            expect(result.success).toBe(true);
            expect(result.result).toEqual(mockResult);
        });
        test('handles unknown system gracefully', async () => {
            const phase = {
                name: 'Unknown Phase',
                description: 'Unknown system',
                system: 'unknown',
                enabled: true,
                dependencies: [],
                criticalFailure: false,
            };
            const result = await automationSystem.executePhase(phase);
            expect(result.success).toBe(false);
            expect(result.errors).toContain('Phase execution failed: Unknown system: unknown');
        });
    });
    describe('generateReport', () => {
        test('generates comprehensive report', () => {
            const mockResult = {
                overallSuccess: true,
                phasesExecuted: 2,
                phasesSucceeded: 2,
                phasesFailed: 0,
                totalExecutionTime: 5000,
                phaseResults: [
                    {
                        phaseName: 'Import Cleanup',
                        system: 'importCleanup',
                        success: true,
                        executionTime: 2000,
                        result: {},
                        errors: [],
                        warnings: ['Minor warning'],
                    },
                    {
                        phaseName: 'Linting and Formatting',
                        system: 'lintingFormatting',
                        success: true,
                        executionTime: 3000,
                        result: {},
                        errors: [],
                        warnings: [],
                    },
                ],
                globalMetrics: {
                    filesProcessed: 10,
                    importIssuesFixed: 5,
                    lintingViolationsFixed: 8,
                    formattingIssuesFixed: 3,
                    securityVulnerabilitiesFixed: 1,
                    dependencyUpdatesApplied: 2,
                    buildValidationsPassed: 2,
                    buildValidationsFailed: 0,
                },
                errors: [],
                warnings: ['Global warning'],
                recommendations: ['Great job!'],
            };
            const report = automationSystem.generateReport(mockResult);
            expect(report).toContain('# Code Quality Automation Report');
            expect(report).toContain('**Overall Success:** ✅');
            expect(report).toContain('- Phases Executed: 2');
            expect(report).toContain('- Import Issues Fixed: 5');
            expect(report).toContain('### ✅ Import Cleanup');
            expect(report).toContain('- Minor warning');
            expect(report).toContain('## Recommendations');
            expect(report).toContain('- Great job!');
        });
        test('includes errors and warnings in report', () => {
            const mockResult = {
                overallSuccess: false,
                phasesExecuted: 1,
                phasesSucceeded: 0,
                phasesFailed: 1,
                totalExecutionTime: 1000,
                phaseResults: [
                    {
                        phaseName: 'Failed Phase',
                        system: 'importCleanup',
                        success: false,
                        executionTime: 1000,
                        result: {},
                        errors: ['Phase error'],
                        warnings: [],
                    },
                ],
                globalMetrics: {
                    filesProcessed: 0,
                    importIssuesFixed: 0,
                    lintingViolationsFixed: 0,
                    formattingIssuesFixed: 0,
                    securityVulnerabilitiesFixed: 0,
                    dependencyUpdatesApplied: 0,
                    buildValidationsPassed: 0,
                    buildValidationsFailed: 1,
                },
                errors: ['Global error'],
                warnings: ['Global warning'],
                recommendations: [],
            };
            const report = automationSystem.generateReport(mockResult);
            expect(report).toContain('**Overall Success:** ❌');
            expect(report).toContain('### ❌ Failed Phase');
            expect(report).toContain('## Errors');
            expect(report).toContain('- ❌ Global error');
            expect(report).toContain('## Warnings');
            expect(report).toContain('- ⚠️ Global warning');
        });
    });
    describe('configuration validation', () => {
        test('uses default configuration when not provided', () => {
            const system = new CodeQualityAutomationSystem_1.CodeQualityAutomationSystem(CodeQualityAutomationSystem_1.DEFAULT_CODE_QUALITY_AUTOMATION_CONFIG);
            expect(system).toBeDefined();
        });
        test('respects custom configuration', () => {
            const customConfig = {
                importCleanup: {
                    maxFilesPerBatch: 10,
                    safetyValidationEnabled: false,
                    buildValidationFrequency: 3,
                    importStyleEnforcement: false,
                    organizationRules: {
                        groupExternalImports: false,
                        groupInternalImports: false,
                        sortAlphabetically: false,
                        separateTypeImports: false,
                        enforceTrailingCommas: false,
                        maxLineLength: 80,
                    },
                },
                lintingFormatting: {
                    maxFilesPerBatch: 15,
                    safetyValidationEnabled: false,
                    buildValidationFrequency: 2,
                    autoFixEnabled: false,
                    formattingEnabled: false,
                    lintingRules: {
                        enforceTypeScriptRules: false,
                        enforceReactRules: false,
                        enforceImportRules: false,
                        maxWarningsThreshold: 500,
                        customRuleOverrides: {},
                    },
                    formattingRules: {
                        enforceConsistentIndentation: false,
                        enforceTrailingCommas: false,
                        enforceSemicolons: false,
                        enforceQuoteStyle: 'double',
                        enforceLineLength: 80,
                        enforceSpacing: false,
                    },
                    patternBasedFixes: [],
                },
                dependencySecurity: {
                    maxDependenciesPerBatch: 5,
                    safetyValidationEnabled: false,
                    autoUpdateEnabled: false,
                    securityScanEnabled: false,
                    compatibilityTestingEnabled: false,
                    updateStrategies: [],
                    securityThresholds: {
                        critical: 0,
                        high: 0,
                        moderate: 0,
                        low: 0,
                        autoFixCritical: false,
                        autoFixHigh: false,
                    },
                    excludedPackages: [],
                },
                executionOrder: [],
                globalSettings: {
                    maxConcurrentOperations: 2,
                    safetyValidationEnabled: false,
                    buildValidationFrequency: 1,
                    rollbackOnFailure: true,
                    continueOnError: false,
                    reportingEnabled: false,
                },
            };
            const system = new CodeQualityAutomationSystem_1.CodeQualityAutomationSystem(customConfig);
            expect(system).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0Ly5jb25zb2xpZGF0aW9uLWJhY2t1cHMtMjAyNS0wOC0yM1QxNy01NC0xMC0wOTJaL3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi9Db2RlUXVhbGl0eUF1dG9tYXRpb25TeXN0ZW0udGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOztBQVdILHNCQUFzQjtBQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztBQWQzQiwrRUFJdUM7QUFDdkMsMkVBQXdFO0FBQ3hFLCtEQUE0RDtBQUM1RCx1RUFBb0U7QUFTcEUsTUFBTSx1QkFBdUIsR0FBRyx5Q0FBbUUsQ0FBQztBQUNwRyxNQUFNLDJCQUEyQixHQUFHLGlEQUEyRSxDQUFDO0FBQ2hILE1BQU0sNkJBQTZCLEdBQUcscURBQStFLENBQUM7QUFFdEgsUUFBUSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRTtJQUMzQyxJQUFJLGdCQUE2QyxDQUFDO0lBQ2xELElBQUksVUFBdUMsQ0FBQztJQUM1QyxJQUFJLGlCQUFtRCxDQUFDO0lBQ3hELElBQUkscUJBQTJELENBQUM7SUFDaEUsSUFBSSxzQkFBOEQsQ0FBQztJQUVuRSxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsVUFBVSxHQUFHO1lBQ1gsR0FBRyxvRUFBc0M7WUFDekMsY0FBYyxFQUFFO2dCQUNkLEdBQUcsb0VBQXNDLENBQUMsY0FBYztnQkFDeEQsdUJBQXVCLEVBQUUsS0FBSyxFQUFFLHNCQUFzQjthQUN2RDtTQUNGLENBQUM7UUFFRix3QkFBd0I7UUFDeEIsaUJBQWlCLEdBQUc7WUFDbEIsY0FBYyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7U0FDZixDQUFDO1FBRWIscUJBQXFCLEdBQUc7WUFDdEIsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtTQUM1QixDQUFDO1FBRWIsc0JBQXNCLEdBQUc7WUFDdkIsbUNBQW1DLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtTQUNwQyxDQUFDO1FBRWIsMEJBQTBCO1FBQzFCLHVCQUF1QixDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDcEUsMkJBQTJCLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUM1RSw2QkFBNkIsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBRS9FLGdCQUFnQixHQUFHLElBQUkseURBQTJCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFL0QsY0FBYztRQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDakMsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3RELHVCQUF1QjtZQUN2QixpQkFBaUIsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUM7Z0JBQ2pELGNBQWMsRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUM7Z0JBQ3hDLG9CQUFvQixFQUFFLENBQUM7Z0JBQ3ZCLGdCQUFnQixFQUFFLENBQUM7Z0JBQ25CLG9CQUFvQixFQUFFLENBQUM7Z0JBQ3ZCLHFCQUFxQixFQUFFLElBQUk7Z0JBQzNCLE1BQU0sRUFBRSxFQUFFO2dCQUNWLFFBQVEsRUFBRSxFQUFFO2FBQ2IsQ0FBQyxDQUFDO1lBRUgscUJBQXFCLENBQUMsMkJBQTJCLENBQUMsaUJBQWlCLENBQUM7Z0JBQ2xFLGNBQWMsRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUM7Z0JBQ3hDLHNCQUFzQixFQUFFLEVBQUU7Z0JBQzFCLHFCQUFxQixFQUFFLENBQUM7Z0JBQ3hCLHdCQUF3QixFQUFFLENBQUM7Z0JBQzNCLHFCQUFxQixFQUFFLElBQUk7Z0JBQzNCLE1BQU0sRUFBRSxFQUFFO2dCQUNWLFFBQVEsRUFBRSxFQUFFO2dCQUNaLGtCQUFrQixFQUFFO29CQUNsQixnQkFBZ0IsRUFBRSxDQUFDO29CQUNuQixlQUFlLEVBQUUsQ0FBQztvQkFDbEIsZ0JBQWdCLEVBQUUsQ0FBQztvQkFDbkIsZ0JBQWdCLEVBQUUsQ0FBQztvQkFDbkIsa0JBQWtCLEVBQUUsQ0FBQztpQkFDdEI7YUFDRixDQUFDLENBQUM7WUFFSCxzQkFBc0IsQ0FBQyxtQ0FBbUMsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDM0UsbUJBQW1CLEVBQUUsRUFBRTtnQkFDdkIsb0JBQW9CLEVBQUUsQ0FBQztnQkFDdkIsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDbkIsY0FBYyxFQUFFLENBQUM7Z0JBQ2pCLHNCQUFzQixFQUFFLENBQUM7Z0JBQ3pCLHdCQUF3QixFQUFFLElBQUk7Z0JBQzlCLE1BQU0sRUFBRSxFQUFFO2dCQUNWLFFBQVEsRUFBRSxFQUFFO2dCQUNaLGNBQWMsRUFBRTtvQkFDZCxlQUFlLEVBQUUsRUFBRTtvQkFDbkIsT0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO29CQUNoRSxlQUFlLEVBQUUsRUFBRTtpQkFDcEI7Z0JBQ0QsWUFBWSxFQUFFO29CQUNaLGdCQUFnQixFQUFFLEVBQUU7b0JBQ3BCLGNBQWMsRUFBRSxFQUFFO29CQUNsQixhQUFhLEVBQUUsRUFBRTtvQkFDakIsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO2lCQUNqRTthQUNGLENBQUMsQ0FBQztZQUVILE1BQU0sTUFBTSxHQUFHLE1BQU0sZ0JBQWdCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUUxRCxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QyxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUU1Qyx5QkFBeUI7WUFDekIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDaEUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7WUFDeEUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFFckUsd0JBQXdCO1lBQ3hCLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUTtZQUNoRSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM3RCxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzRCxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsRSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRSxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxtQ0FBbUMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNuRCwrQkFBK0I7WUFDL0IsaUJBQWlCLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDO2dCQUNqRCxjQUFjLEVBQUUsRUFBRTtnQkFDbEIsb0JBQW9CLEVBQUUsQ0FBQztnQkFDdkIsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDbkIsb0JBQW9CLEVBQUUsQ0FBQztnQkFDdkIscUJBQXFCLEVBQUUsS0FBSztnQkFDNUIsTUFBTSxFQUFFLENBQUMsdUJBQXVCLENBQUM7Z0JBQ2pDLFFBQVEsRUFBRSxFQUFFO2FBQ2IsQ0FBQyxDQUFDO1lBRUgsZ0NBQWdDO1lBQ2hDLHFCQUFxQixDQUFDLDJCQUEyQixDQUFDLGlCQUFpQixDQUFDO2dCQUNsRSxjQUFjLEVBQUUsQ0FBQyxVQUFVLENBQUM7Z0JBQzVCLHNCQUFzQixFQUFFLENBQUM7Z0JBQ3pCLHFCQUFxQixFQUFFLENBQUM7Z0JBQ3hCLHdCQUF3QixFQUFFLENBQUM7Z0JBQzNCLHFCQUFxQixFQUFFLElBQUk7Z0JBQzNCLE1BQU0sRUFBRSxFQUFFO2dCQUNWLFFBQVEsRUFBRSxFQUFFO2dCQUNaLGtCQUFrQixFQUFFO29CQUNsQixnQkFBZ0IsRUFBRSxDQUFDO29CQUNuQixlQUFlLEVBQUUsQ0FBQztvQkFDbEIsZ0JBQWdCLEVBQUUsQ0FBQztvQkFDbkIsZ0JBQWdCLEVBQUUsQ0FBQztvQkFDbkIsa0JBQWtCLEVBQUUsQ0FBQztpQkFDdEI7YUFDRixDQUFDLENBQUM7WUFFSCxzQkFBc0IsQ0FBQyxtQ0FBbUMsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDM0UsbUJBQW1CLEVBQUUsRUFBRTtnQkFDdkIsb0JBQW9CLEVBQUUsQ0FBQztnQkFDdkIsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDbkIsY0FBYyxFQUFFLENBQUM7Z0JBQ2pCLHNCQUFzQixFQUFFLENBQUM7Z0JBQ3pCLHdCQUF3QixFQUFFLElBQUk7Z0JBQzlCLE1BQU0sRUFBRSxFQUFFO2dCQUNWLFFBQVEsRUFBRSxFQUFFO2dCQUNaLGNBQWMsRUFBRTtvQkFDZCxlQUFlLEVBQUUsRUFBRTtvQkFDbkIsT0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO29CQUNoRSxlQUFlLEVBQUUsRUFBRTtpQkFDcEI7Z0JBQ0QsWUFBWSxFQUFFO29CQUNaLGdCQUFnQixFQUFFLEVBQUU7b0JBQ3BCLGNBQWMsRUFBRSxFQUFFO29CQUNsQixhQUFhLEVBQUUsRUFBRTtvQkFDakIsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO2lCQUNqRTthQUNGLENBQUMsQ0FBQztZQUVILE1BQU0sTUFBTSxHQUFHLE1BQU0sZ0JBQWdCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUUxRCxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QyxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQzNELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLDZCQUE2QixFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzdDLGdEQUFnRDtZQUNoRCxNQUFNLHNCQUFzQixHQUFHO2dCQUM3QixHQUFHLFVBQVU7Z0JBQ2IsY0FBYyxFQUFFO29CQUNkO3dCQUNFLElBQUksRUFBRSxnQkFBZ0I7d0JBQ3RCLFdBQVcsRUFBRSxrQkFBa0I7d0JBQy9CLE1BQU0sRUFBRSxlQUF3Qjt3QkFDaEMsT0FBTyxFQUFFLElBQUk7d0JBQ2IsWUFBWSxFQUFFLEVBQUU7d0JBQ2hCLGVBQWUsRUFBRSxLQUFLO3FCQUN2QjtvQkFDRDt3QkFDRSxJQUFJLEVBQUUsd0JBQXdCO3dCQUM5QixXQUFXLEVBQUUsYUFBYTt3QkFDMUIsTUFBTSxFQUFFLG1CQUE0Qjt3QkFDcEMsT0FBTyxFQUFFLElBQUk7d0JBQ2IsWUFBWSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7d0JBQ2hDLGVBQWUsRUFBRSxLQUFLO3FCQUN2QjtpQkFDRjthQUNGLENBQUM7WUFFRixNQUFNLGNBQWMsR0FBRyxJQUFJLHlEQUEyQixDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFFL0UsMkJBQTJCO1lBQzNCLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDakQsY0FBYyxFQUFFLEVBQUU7Z0JBQ2xCLG9CQUFvQixFQUFFLENBQUM7Z0JBQ3ZCLGdCQUFnQixFQUFFLENBQUM7Z0JBQ25CLG9CQUFvQixFQUFFLENBQUM7Z0JBQ3ZCLHFCQUFxQixFQUFFLEtBQUs7Z0JBQzVCLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQztnQkFDbEIsUUFBUSxFQUFFLEVBQUU7YUFDYixDQUFDLENBQUM7WUFFSCxNQUFNLE1BQU0sR0FBRyxNQUFNLGNBQWMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBRXhELGlGQUFpRjtZQUNqRixNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxNQUFNLENBQUMscUJBQXFCLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQy9FLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLG1FQUFtRSxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ25GLE1BQU0saUJBQWlCLEdBQUc7Z0JBQ3hCLEdBQUcsVUFBVTtnQkFDYixjQUFjLEVBQUU7b0JBQ2QsR0FBRyxVQUFVLENBQUMsY0FBYztvQkFDNUIsZUFBZSxFQUFFLEtBQUs7aUJBQ3ZCO2dCQUNELGNBQWMsRUFBRTtvQkFDZDt3QkFDRSxJQUFJLEVBQUUsZ0JBQWdCO3dCQUN0QixXQUFXLEVBQUUsMkJBQTJCO3dCQUN4QyxNQUFNLEVBQUUsZUFBd0I7d0JBQ2hDLE9BQU8sRUFBRSxJQUFJO3dCQUNiLFlBQVksRUFBRSxFQUFFO3dCQUNoQixlQUFlLEVBQUUsSUFBSTtxQkFDdEI7b0JBQ0Q7d0JBQ0UsSUFBSSxFQUFFLFlBQVk7d0JBQ2xCLFdBQVcsRUFBRSxvQkFBb0I7d0JBQ2pDLE1BQU0sRUFBRSxtQkFBNEI7d0JBQ3BDLE9BQU8sRUFBRSxJQUFJO3dCQUNiLFlBQVksRUFBRSxFQUFFO3dCQUNoQixlQUFlLEVBQUUsS0FBSztxQkFDdkI7aUJBQ0Y7YUFDRixDQUFDO1lBRUYsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLHlEQUEyQixDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFFN0UsK0JBQStCO1lBQy9CLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDakQsY0FBYyxFQUFFLEVBQUU7Z0JBQ2xCLG9CQUFvQixFQUFFLENBQUM7Z0JBQ3ZCLGdCQUFnQixFQUFFLENBQUM7Z0JBQ25CLG9CQUFvQixFQUFFLENBQUM7Z0JBQ3ZCLHFCQUFxQixFQUFFLEtBQUs7Z0JBQzVCLE1BQU0sRUFBRSxDQUFDLGtCQUFrQixDQUFDO2dCQUM1QixRQUFRLEVBQUUsRUFBRTthQUNiLENBQUMsQ0FBQztZQUVILE1BQU0sTUFBTSxHQUFHLE1BQU0saUJBQWlCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUUzRCxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxNQUFNLENBQUMscUJBQXFCLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNuRixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyx1QkFBdUIsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN2QyxNQUFNLGtCQUFrQixHQUFHO2dCQUN6QixHQUFHLFVBQVU7Z0JBQ2IsY0FBYyxFQUFFO29CQUNkO3dCQUNFLElBQUksRUFBRSxlQUFlO3dCQUNyQixXQUFXLEVBQUUsdUJBQXVCO3dCQUNwQyxNQUFNLEVBQUUsZUFBd0I7d0JBQ2hDLE9BQU8sRUFBRSxJQUFJO3dCQUNiLFlBQVksRUFBRSxFQUFFO3dCQUNoQixlQUFlLEVBQUUsS0FBSztxQkFDdkI7b0JBQ0Q7d0JBQ0UsSUFBSSxFQUFFLGdCQUFnQjt3QkFDdEIsV0FBVyxFQUFFLHdCQUF3Qjt3QkFDckMsTUFBTSxFQUFFLG1CQUE0Qjt3QkFDcEMsT0FBTyxFQUFFLEtBQUs7d0JBQ2QsWUFBWSxFQUFFLEVBQUU7d0JBQ2hCLGVBQWUsRUFBRSxLQUFLO3FCQUN2QjtpQkFDRjthQUNGLENBQUM7WUFFRixNQUFNLGtCQUFrQixHQUFHLElBQUkseURBQTJCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUUvRSxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUM7Z0JBQ2pELGNBQWMsRUFBRSxDQUFDLFVBQVUsQ0FBQztnQkFDNUIsb0JBQW9CLEVBQUUsQ0FBQztnQkFDdkIsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDbkIsb0JBQW9CLEVBQUUsQ0FBQztnQkFDdkIscUJBQXFCLEVBQUUsSUFBSTtnQkFDM0IsTUFBTSxFQUFFLEVBQUU7Z0JBQ1YsUUFBUSxFQUFFLEVBQUU7YUFDYixDQUFDLENBQUM7WUFFSCxNQUFNLE1BQU0sR0FBRyxNQUFNLGtCQUFrQixDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFFNUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDNUQsTUFBTSxDQUFDLHFCQUFxQixDQUFDLDJCQUEyQixDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDbkYsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFO1FBQzVCLElBQUksQ0FBQyx5Q0FBeUMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN6RCxNQUFNLEtBQUssR0FBRztnQkFDWixJQUFJLEVBQUUsZ0JBQWdCO2dCQUN0QixXQUFXLEVBQUUsa0JBQWtCO2dCQUMvQixNQUFNLEVBQUUsZUFBd0I7Z0JBQ2hDLE9BQU8sRUFBRSxJQUFJO2dCQUNiLFlBQVksRUFBRSxFQUFFO2dCQUNoQixlQUFlLEVBQUUsS0FBSzthQUN2QixDQUFDO1lBRUYsTUFBTSxVQUFVLEdBQUc7Z0JBQ2pCLGNBQWMsRUFBRSxDQUFDLFVBQVUsQ0FBQztnQkFDNUIsb0JBQW9CLEVBQUUsQ0FBQztnQkFDdkIsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDbkIsb0JBQW9CLEVBQUUsQ0FBQztnQkFDdkIscUJBQXFCLEVBQUUsSUFBSTtnQkFDM0IsTUFBTSxFQUFFLEVBQUU7Z0JBQ1YsUUFBUSxFQUFFLENBQUMsaUJBQWlCLENBQUM7YUFDOUIsQ0FBQztZQUVGLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUUvRCxNQUFNLE1BQU0sR0FBRyxNQUFNLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUUxRCxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ2hELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLDZDQUE2QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzdELE1BQU0sS0FBSyxHQUFHO2dCQUNaLElBQUksRUFBRSx3QkFBd0I7Z0JBQzlCLFdBQVcsRUFBRSw0QkFBNEI7Z0JBQ3pDLE1BQU0sRUFBRSxtQkFBNEI7Z0JBQ3BDLE9BQU8sRUFBRSxJQUFJO2dCQUNiLFlBQVksRUFBRSxFQUFFO2dCQUNoQixlQUFlLEVBQUUsS0FBSzthQUN2QixDQUFDO1lBRUYsTUFBTSxVQUFVLEdBQUc7Z0JBQ2pCLGNBQWMsRUFBRSxDQUFDLFVBQVUsQ0FBQztnQkFDNUIsc0JBQXNCLEVBQUUsQ0FBQztnQkFDekIscUJBQXFCLEVBQUUsQ0FBQztnQkFDeEIsd0JBQXdCLEVBQUUsQ0FBQztnQkFDM0IscUJBQXFCLEVBQUUsSUFBSTtnQkFDM0IsTUFBTSxFQUFFLEVBQUU7Z0JBQ1YsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osa0JBQWtCLEVBQUU7b0JBQ2xCLGdCQUFnQixFQUFFLENBQUM7b0JBQ25CLGVBQWUsRUFBRSxDQUFDO29CQUNsQixnQkFBZ0IsRUFBRSxDQUFDO29CQUNuQixnQkFBZ0IsRUFBRSxDQUFDO29CQUNuQixrQkFBa0IsRUFBRSxDQUFDO2lCQUN0QjthQUNGLENBQUM7WUFFRixxQkFBcUIsQ0FBQywyQkFBMkIsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUVoRixNQUFNLE1BQU0sR0FBRyxNQUFNLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUUxRCxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1lBQ3hELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDaEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsOENBQThDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDOUQsTUFBTSxLQUFLLEdBQUc7Z0JBQ1osSUFBSSxFQUFFLHFCQUFxQjtnQkFDM0IsV0FBVyxFQUFFLG1DQUFtQztnQkFDaEQsTUFBTSxFQUFFLG9CQUE2QjtnQkFDckMsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsWUFBWSxFQUFFLEVBQUU7Z0JBQ2hCLGVBQWUsRUFBRSxLQUFLO2FBQ3ZCLENBQUM7WUFFRixNQUFNLFVBQVUsR0FBRztnQkFDakIsbUJBQW1CLEVBQUUsRUFBRTtnQkFDdkIsb0JBQW9CLEVBQUUsQ0FBQztnQkFDdkIsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDbkIsY0FBYyxFQUFFLENBQUM7Z0JBQ2pCLHNCQUFzQixFQUFFLENBQUM7Z0JBQ3pCLHdCQUF3QixFQUFFLElBQUk7Z0JBQzlCLE1BQU0sRUFBRSxFQUFFO2dCQUNWLFFBQVEsRUFBRSxFQUFFO2dCQUNaLGNBQWMsRUFBRTtvQkFDZCxlQUFlLEVBQUUsRUFBRTtvQkFDbkIsT0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO29CQUNoRSxlQUFlLEVBQUUsRUFBRTtpQkFDcEI7Z0JBQ0QsWUFBWSxFQUFFO29CQUNaLGdCQUFnQixFQUFFLEVBQUU7b0JBQ3BCLGNBQWMsRUFBRSxFQUFFO29CQUNsQixhQUFhLEVBQUUsRUFBRTtvQkFDakIsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO2lCQUNqRTthQUNGLENBQUM7WUFFRixzQkFBc0IsQ0FBQyxtQ0FBbUMsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUV6RixNQUFNLE1BQU0sR0FBRyxNQUFNLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUUxRCxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDakQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsbUNBQW1DLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDbkQsTUFBTSxLQUFLLEdBQUc7Z0JBQ1osSUFBSSxFQUFFLGVBQWU7Z0JBQ3JCLFdBQVcsRUFBRSxnQkFBZ0I7Z0JBQzdCLE1BQU0sRUFBRSxTQUFvQjtnQkFDNUIsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsWUFBWSxFQUFFLEVBQUU7Z0JBQ2hCLGVBQWUsRUFBRSxLQUFLO2FBQ3ZCLENBQUM7WUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUUxRCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO1FBQ3JGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO1FBQzlCLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUU7WUFDMUMsTUFBTSxVQUFVLEdBQUc7Z0JBQ2pCLGNBQWMsRUFBRSxJQUFJO2dCQUNwQixjQUFjLEVBQUUsQ0FBQztnQkFDakIsZUFBZSxFQUFFLENBQUM7Z0JBQ2xCLFlBQVksRUFBRSxDQUFDO2dCQUNmLGtCQUFrQixFQUFFLElBQUk7Z0JBQ3hCLFlBQVksRUFBRTtvQkFDWjt3QkFDRSxTQUFTLEVBQUUsZ0JBQWdCO3dCQUMzQixNQUFNLEVBQUUsZUFBZTt3QkFDdkIsT0FBTyxFQUFFLElBQUk7d0JBQ2IsYUFBYSxFQUFFLElBQUk7d0JBQ25CLE1BQU0sRUFBRSxFQUFFO3dCQUNWLE1BQU0sRUFBRSxFQUFFO3dCQUNWLFFBQVEsRUFBRSxDQUFDLGVBQWUsQ0FBQztxQkFDNUI7b0JBQ0Q7d0JBQ0UsU0FBUyxFQUFFLHdCQUF3Qjt3QkFDbkMsTUFBTSxFQUFFLG1CQUFtQjt3QkFDM0IsT0FBTyxFQUFFLElBQUk7d0JBQ2IsYUFBYSxFQUFFLElBQUk7d0JBQ25CLE1BQU0sRUFBRSxFQUFFO3dCQUNWLE1BQU0sRUFBRSxFQUFFO3dCQUNWLFFBQVEsRUFBRSxFQUFFO3FCQUNiO2lCQUNGO2dCQUNELGFBQWEsRUFBRTtvQkFDYixjQUFjLEVBQUUsRUFBRTtvQkFDbEIsaUJBQWlCLEVBQUUsQ0FBQztvQkFDcEIsc0JBQXNCLEVBQUUsQ0FBQztvQkFDekIscUJBQXFCLEVBQUUsQ0FBQztvQkFDeEIsNEJBQTRCLEVBQUUsQ0FBQztvQkFDL0Isd0JBQXdCLEVBQUUsQ0FBQztvQkFDM0Isc0JBQXNCLEVBQUUsQ0FBQztvQkFDekIsc0JBQXNCLEVBQUUsQ0FBQztpQkFDMUI7Z0JBQ0QsTUFBTSxFQUFFLEVBQUU7Z0JBQ1YsUUFBUSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7Z0JBQzVCLGVBQWUsRUFBRSxDQUFDLFlBQVksQ0FBQzthQUNoQyxDQUFDO1lBRUYsTUFBTSxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRTNELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsa0NBQWtDLENBQUMsQ0FBQztZQUM3RCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLENBQUM7WUFDbkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1lBQ2pELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUNyRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFDakQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUMvQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLHdDQUF3QyxFQUFFLEdBQUcsRUFBRTtZQUNsRCxNQUFNLFVBQVUsR0FBRztnQkFDakIsY0FBYyxFQUFFLEtBQUs7Z0JBQ3JCLGNBQWMsRUFBRSxDQUFDO2dCQUNqQixlQUFlLEVBQUUsQ0FBQztnQkFDbEIsWUFBWSxFQUFFLENBQUM7Z0JBQ2Ysa0JBQWtCLEVBQUUsSUFBSTtnQkFDeEIsWUFBWSxFQUFFO29CQUNaO3dCQUNFLFNBQVMsRUFBRSxjQUFjO3dCQUN6QixNQUFNLEVBQUUsZUFBZTt3QkFDdkIsT0FBTyxFQUFFLEtBQUs7d0JBQ2QsYUFBYSxFQUFFLElBQUk7d0JBQ25CLE1BQU0sRUFBRSxFQUFFO3dCQUNWLE1BQU0sRUFBRSxDQUFDLGFBQWEsQ0FBQzt3QkFDdkIsUUFBUSxFQUFFLEVBQUU7cUJBQ2I7aUJBQ0Y7Z0JBQ0QsYUFBYSxFQUFFO29CQUNiLGNBQWMsRUFBRSxDQUFDO29CQUNqQixpQkFBaUIsRUFBRSxDQUFDO29CQUNwQixzQkFBc0IsRUFBRSxDQUFDO29CQUN6QixxQkFBcUIsRUFBRSxDQUFDO29CQUN4Qiw0QkFBNEIsRUFBRSxDQUFDO29CQUMvQix3QkFBd0IsRUFBRSxDQUFDO29CQUMzQixzQkFBc0IsRUFBRSxDQUFDO29CQUN6QixzQkFBc0IsRUFBRSxDQUFDO2lCQUMxQjtnQkFDRCxNQUFNLEVBQUUsQ0FBQyxjQUFjLENBQUM7Z0JBQ3hCLFFBQVEsRUFBRSxDQUFDLGdCQUFnQixDQUFDO2dCQUM1QixlQUFlLEVBQUUsRUFBRTthQUNwQixDQUFDO1lBRUYsTUFBTSxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRTNELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsQ0FBQztZQUNuRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDL0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN0QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDN0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN4QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7UUFDeEMsSUFBSSxDQUFDLDhDQUE4QyxFQUFFLEdBQUcsRUFBRTtZQUN4RCxNQUFNLE1BQU0sR0FBRyxJQUFJLHlEQUEyQixDQUFDLG9FQUFzQyxDQUFDLENBQUM7WUFDdkYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtZQUN6QyxNQUFNLFlBQVksR0FBZ0M7Z0JBQ2hELGFBQWEsRUFBRTtvQkFDYixnQkFBZ0IsRUFBRSxFQUFFO29CQUNwQix1QkFBdUIsRUFBRSxLQUFLO29CQUM5Qix3QkFBd0IsRUFBRSxDQUFDO29CQUMzQixzQkFBc0IsRUFBRSxLQUFLO29CQUM3QixpQkFBaUIsRUFBRTt3QkFDakIsb0JBQW9CLEVBQUUsS0FBSzt3QkFDM0Isb0JBQW9CLEVBQUUsS0FBSzt3QkFDM0Isa0JBQWtCLEVBQUUsS0FBSzt3QkFDekIsbUJBQW1CLEVBQUUsS0FBSzt3QkFDMUIscUJBQXFCLEVBQUUsS0FBSzt3QkFDNUIsYUFBYSxFQUFFLEVBQUU7cUJBQ2xCO2lCQUNGO2dCQUNELGlCQUFpQixFQUFFO29CQUNqQixnQkFBZ0IsRUFBRSxFQUFFO29CQUNwQix1QkFBdUIsRUFBRSxLQUFLO29CQUM5Qix3QkFBd0IsRUFBRSxDQUFDO29CQUMzQixjQUFjLEVBQUUsS0FBSztvQkFDckIsaUJBQWlCLEVBQUUsS0FBSztvQkFDeEIsWUFBWSxFQUFFO3dCQUNaLHNCQUFzQixFQUFFLEtBQUs7d0JBQzdCLGlCQUFpQixFQUFFLEtBQUs7d0JBQ3hCLGtCQUFrQixFQUFFLEtBQUs7d0JBQ3pCLG9CQUFvQixFQUFFLEdBQUc7d0JBQ3pCLG1CQUFtQixFQUFFLEVBQUU7cUJBQ3hCO29CQUNELGVBQWUsRUFBRTt3QkFDZiw0QkFBNEIsRUFBRSxLQUFLO3dCQUNuQyxxQkFBcUIsRUFBRSxLQUFLO3dCQUM1QixpQkFBaUIsRUFBRSxLQUFLO3dCQUN4QixpQkFBaUIsRUFBRSxRQUFRO3dCQUMzQixpQkFBaUIsRUFBRSxFQUFFO3dCQUNyQixjQUFjLEVBQUUsS0FBSztxQkFDdEI7b0JBQ0QsaUJBQWlCLEVBQUUsRUFBRTtpQkFDdEI7Z0JBQ0Qsa0JBQWtCLEVBQUU7b0JBQ2xCLHVCQUF1QixFQUFFLENBQUM7b0JBQzFCLHVCQUF1QixFQUFFLEtBQUs7b0JBQzlCLGlCQUFpQixFQUFFLEtBQUs7b0JBQ3hCLG1CQUFtQixFQUFFLEtBQUs7b0JBQzFCLDJCQUEyQixFQUFFLEtBQUs7b0JBQ2xDLGdCQUFnQixFQUFFLEVBQUU7b0JBQ3BCLGtCQUFrQixFQUFFO3dCQUNsQixRQUFRLEVBQUUsQ0FBQzt3QkFDWCxJQUFJLEVBQUUsQ0FBQzt3QkFDUCxRQUFRLEVBQUUsQ0FBQzt3QkFDWCxHQUFHLEVBQUUsQ0FBQzt3QkFDTixlQUFlLEVBQUUsS0FBSzt3QkFDdEIsV0FBVyxFQUFFLEtBQUs7cUJBQ25CO29CQUNELGdCQUFnQixFQUFFLEVBQUU7aUJBQ3JCO2dCQUNELGNBQWMsRUFBRSxFQUFFO2dCQUNsQixjQUFjLEVBQUU7b0JBQ2QsdUJBQXVCLEVBQUUsQ0FBQztvQkFDMUIsdUJBQXVCLEVBQUUsS0FBSztvQkFDOUIsd0JBQXdCLEVBQUUsQ0FBQztvQkFDM0IsaUJBQWlCLEVBQUUsSUFBSTtvQkFDdkIsZUFBZSxFQUFFLEtBQUs7b0JBQ3RCLGdCQUFnQixFQUFFLEtBQUs7aUJBQ3hCO2FBQ0YsQ0FBQztZQUVGLE1BQU0sTUFBTSxHQUFHLElBQUkseURBQTJCLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDN0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvR3JlZ0Nhc3Ryby9EZXNrdG9wL1doYXRUb0VhdE5leHQvLmNvbnNvbGlkYXRpb24tYmFja3Vwcy0yMDI1LTA4LTIzVDE3LTU0LTEwLTA5Mlovc3JjL3NlcnZpY2VzL2NhbXBhaWduL0NvZGVRdWFsaXR5QXV0b21hdGlvblN5c3RlbS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29kZSBRdWFsaXR5IEF1dG9tYXRpb24gU3lzdGVtIFRlc3RzXG4gKiBDb21wcmVoZW5zaXZlIHRlc3Qgc3VpdGUgZm9yIHRoZSB1bmlmaWVkIGF1dG9tYXRpb24gc3lzdGVtXG4gKi9cblxuaW1wb3J0IHtcbiAgQ29kZVF1YWxpdHlBdXRvbWF0aW9uU3lzdGVtLFxuICBERUZBVUxUX0NPREVfUVVBTElUWV9BVVRPTUFUSU9OX0NPTkZJRyxcbiAgQ29kZVF1YWxpdHlBdXRvbWF0aW9uQ29uZmlnLFxufSBmcm9tICcuL0NvZGVRdWFsaXR5QXV0b21hdGlvblN5c3RlbSc7XG5pbXBvcnQgeyBEZXBlbmRlbmN5U2VjdXJpdHlNb25pdG9yIH0gZnJvbSAnLi9EZXBlbmRlbmN5U2VjdXJpdHlNb25pdG9yJztcbmltcG9ydCB7IEltcG9ydENsZWFudXBTeXN0ZW0gfSBmcm9tICcuL0ltcG9ydENsZWFudXBTeXN0ZW0nO1xuaW1wb3J0IHsgTGludGluZ0Zvcm1hdHRpbmdTeXN0ZW0gfSBmcm9tICcuL0xpbnRpbmdGb3JtYXR0aW5nU3lzdGVtJztcblxuLy8gTW9jayB0aGUgc3Vic3lzdGVtc1xuamVzdC5tb2NrKCcuL0ltcG9ydENsZWFudXBTeXN0ZW0nKTtcbmplc3QubW9jaygnLi9MaW50aW5nRm9ybWF0dGluZ1N5c3RlbScpO1xuamVzdC5tb2NrKCcuL0RlcGVuZGVuY3lTZWN1cml0eU1vbml0b3InKTtcbmplc3QubW9jaygnLi4vLi4vdXRpbHMvbG9nZ2VyJyk7XG5qZXN0Lm1vY2soJ2NoaWxkX3Byb2Nlc3MnKTtcblxuY29uc3QgTW9ja0ltcG9ydENsZWFudXBTeXN0ZW0gPSBJbXBvcnRDbGVhbnVwU3lzdGVtIGFzIGplc3QuTW9ja2VkQ2xhc3M8dHlwZW9mIEltcG9ydENsZWFudXBTeXN0ZW0+O1xuY29uc3QgTW9ja0xpbnRpbmdGb3JtYXR0aW5nU3lzdGVtID0gTGludGluZ0Zvcm1hdHRpbmdTeXN0ZW0gYXMgamVzdC5Nb2NrZWRDbGFzczx0eXBlb2YgTGludGluZ0Zvcm1hdHRpbmdTeXN0ZW0+O1xuY29uc3QgTW9ja0RlcGVuZGVuY3lTZWN1cml0eU1vbml0b3IgPSBEZXBlbmRlbmN5U2VjdXJpdHlNb25pdG9yIGFzIGplc3QuTW9ja2VkQ2xhc3M8dHlwZW9mIERlcGVuZGVuY3lTZWN1cml0eU1vbml0b3I+O1xuXG5kZXNjcmliZSgnQ29kZVF1YWxpdHlBdXRvbWF0aW9uU3lzdGVtJywgKCkgPT4ge1xuICBsZXQgYXV0b21hdGlvblN5c3RlbTogQ29kZVF1YWxpdHlBdXRvbWF0aW9uU3lzdGVtO1xuICBsZXQgdGVzdENvbmZpZzogQ29kZVF1YWxpdHlBdXRvbWF0aW9uQ29uZmlnO1xuICBsZXQgbW9ja0ltcG9ydENsZWFudXA6IGplc3QuTW9ja2VkPEltcG9ydENsZWFudXBTeXN0ZW0+O1xuICBsZXQgbW9ja0xpbnRpbmdGb3JtYXR0aW5nOiBqZXN0Lk1vY2tlZDxMaW50aW5nRm9ybWF0dGluZ1N5c3RlbT47XG4gIGxldCBtb2NrRGVwZW5kZW5jeVNlY3VyaXR5OiBqZXN0Lk1vY2tlZDxEZXBlbmRlbmN5U2VjdXJpdHlNb25pdG9yPjtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICB0ZXN0Q29uZmlnID0ge1xuICAgICAgLi4uREVGQVVMVF9DT0RFX1FVQUxJVFlfQVVUT01BVElPTl9DT05GSUcsXG4gICAgICBnbG9iYWxTZXR0aW5nczoge1xuICAgICAgICAuLi5ERUZBVUxUX0NPREVfUVVBTElUWV9BVVRPTUFUSU9OX0NPTkZJRy5nbG9iYWxTZXR0aW5ncyxcbiAgICAgICAgc2FmZXR5VmFsaWRhdGlvbkVuYWJsZWQ6IGZhbHNlLCAvLyBEaXNhYmxlIGZvciB0ZXN0aW5nXG4gICAgICB9LFxuICAgIH07XG5cbiAgICAvLyBDcmVhdGUgbW9jayBpbnN0YW5jZXNcbiAgICBtb2NrSW1wb3J0Q2xlYW51cCA9IHtcbiAgICAgIGV4ZWN1dGVDbGVhbnVwOiBqZXN0LmZuKCksXG4gICAgfSBhcyB1bmtub3duO1xuXG4gICAgbW9ja0xpbnRpbmdGb3JtYXR0aW5nID0ge1xuICAgICAgZXhlY3V0ZUxpbnRpbmdBbmRGb3JtYXR0aW5nOiBqZXN0LmZuKCksXG4gICAgfSBhcyB1bmtub3duO1xuXG4gICAgbW9ja0RlcGVuZGVuY3lTZWN1cml0eSA9IHtcbiAgICAgIGV4ZWN1dGVEZXBlbmRlbmN5U2VjdXJpdHlNb25pdG9yaW5nOiBqZXN0LmZuKCksXG4gICAgfSBhcyB1bmtub3duO1xuXG4gICAgLy8gU2V0dXAgbW9jayBjb25zdHJ1Y3RvcnNcbiAgICBNb2NrSW1wb3J0Q2xlYW51cFN5c3RlbS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gbW9ja0ltcG9ydENsZWFudXApO1xuICAgIE1vY2tMaW50aW5nRm9ybWF0dGluZ1N5c3RlbS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gbW9ja0xpbnRpbmdGb3JtYXR0aW5nKTtcbiAgICBNb2NrRGVwZW5kZW5jeVNlY3VyaXR5TW9uaXRvci5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gbW9ja0RlcGVuZGVuY3lTZWN1cml0eSk7XG5cbiAgICBhdXRvbWF0aW9uU3lzdGVtID0gbmV3IENvZGVRdWFsaXR5QXV0b21hdGlvblN5c3RlbSh0ZXN0Q29uZmlnKTtcblxuICAgIC8vIFJlc2V0IG1vY2tzXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdleGVjdXRlQXV0b21hdGlvbicsICgpID0+IHtcbiAgICB0ZXN0KCdleGVjdXRlcyBhbGwgZW5hYmxlZCBwaGFzZXMgaW4gb3JkZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBTZXR1cCBtb2NrIHJlc3BvbnNlc1xuICAgICAgbW9ja0ltcG9ydENsZWFudXAuZXhlY3V0ZUNsZWFudXAubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBmaWxlc1Byb2Nlc3NlZDogWydmaWxlMS50cycsICdmaWxlMi50cyddLFxuICAgICAgICB1bnVzZWRJbXBvcnRzUmVtb3ZlZDogNSxcbiAgICAgICAgaW1wb3J0c09yZ2FuaXplZDogMyxcbiAgICAgICAgc3R5bGVWaW9sYXRpb25zRml4ZWQ6IDIsXG4gICAgICAgIGJ1aWxkVmFsaWRhdGlvblBhc3NlZDogdHJ1ZSxcbiAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgd2FybmluZ3M6IFtdLFxuICAgICAgfSk7XG5cbiAgICAgIG1vY2tMaW50aW5nRm9ybWF0dGluZy5leGVjdXRlTGludGluZ0FuZEZvcm1hdHRpbmcubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBmaWxlc1Byb2Nlc3NlZDogWydmaWxlMS50cycsICdmaWxlMi50cyddLFxuICAgICAgICBsaW50aW5nVmlvbGF0aW9uc0ZpeGVkOiAxMCxcbiAgICAgICAgZm9ybWF0dGluZ0lzc3Vlc0ZpeGVkOiA4LFxuICAgICAgICBwYXR0ZXJuQmFzZWRGaXhlc0FwcGxpZWQ6IDMsXG4gICAgICAgIGJ1aWxkVmFsaWRhdGlvblBhc3NlZDogdHJ1ZSxcbiAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgd2FybmluZ3M6IFtdLFxuICAgICAgICB2aW9sYXRpb25CcmVha2Rvd246IHtcbiAgICAgICAgICB0eXBlU2NyaXB0RXJyb3JzOiA1LFxuICAgICAgICAgIHJlYWN0VmlvbGF0aW9uczogMyxcbiAgICAgICAgICBpbXBvcnRWaW9sYXRpb25zOiAyLFxuICAgICAgICAgIGZvcm1hdHRpbmdJc3N1ZXM6IDgsXG4gICAgICAgICAgY3VzdG9tUGF0dGVybkZpeGVzOiAzLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIG1vY2tEZXBlbmRlbmN5U2VjdXJpdHkuZXhlY3V0ZURlcGVuZGVuY3lTZWN1cml0eU1vbml0b3JpbmcubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkZXBlbmRlbmNpZXNTY2FubmVkOiA1MCxcbiAgICAgICAgdnVsbmVyYWJpbGl0aWVzRm91bmQ6IDIsXG4gICAgICAgIHVwZGF0ZXNBdmFpbGFibGU6IDUsXG4gICAgICAgIHVwZGF0ZXNBcHBsaWVkOiAzLFxuICAgICAgICBzZWN1cml0eVBhdGNoZXNBcHBsaWVkOiAyLFxuICAgICAgICBjb21wYXRpYmlsaXR5VGVzdHNQYXNzZWQ6IHRydWUsXG4gICAgICAgIGVycm9yczogW10sXG4gICAgICAgIHdhcm5pbmdzOiBbXSxcbiAgICAgICAgc2VjdXJpdHlSZXBvcnQ6IHtcbiAgICAgICAgICB2dWxuZXJhYmlsaXRpZXM6IFtdLFxuICAgICAgICAgIHN1bW1hcnk6IHsgY3JpdGljYWw6IDAsIGhpZ2g6IDEsIG1vZGVyYXRlOiAxLCBsb3c6IDAsIHRvdGFsOiAyIH0sXG4gICAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXSxcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlUmVwb3J0OiB7XG4gICAgICAgICAgYXZhaWxhYmxlVXBkYXRlczogW10sXG4gICAgICAgICAgYXBwbGllZFVwZGF0ZXM6IFtdLFxuICAgICAgICAgIGZhaWxlZFVwZGF0ZXM6IFtdLFxuICAgICAgICAgIHN1bW1hcnk6IHsgbWFqb3I6IDAsIG1pbm9yOiAyLCBwYXRjaDogMywgc2VjdXJpdHk6IDIsIHRvdGFsOiA1IH0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0b21hdGlvblN5c3RlbS5leGVjdXRlQXV0b21hdGlvbigpO1xuXG4gICAgICBleHBlY3QocmVzdWx0Lm92ZXJhbGxTdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5waGFzZXNFeGVjdXRlZCkudG9CZSgzKTtcbiAgICAgIGV4cGVjdChyZXN1bHQucGhhc2VzU3VjY2VlZGVkKS50b0JlKDMpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5waGFzZXNGYWlsZWQpLnRvQmUoMCk7XG4gICAgICBleHBlY3QocmVzdWx0LnBoYXNlUmVzdWx0cykudG9IYXZlTGVuZ3RoKDMpO1xuXG4gICAgICAvLyBWZXJpZnkgZXhlY3V0aW9uIG9yZGVyXG4gICAgICBleHBlY3QocmVzdWx0LnBoYXNlUmVzdWx0c1swXS5waGFzZU5hbWUpLnRvQmUoJ0ltcG9ydCBDbGVhbnVwJyk7XG4gICAgICBleHBlY3QocmVzdWx0LnBoYXNlUmVzdWx0c1sxXS5waGFzZU5hbWUpLnRvQmUoJ0xpbnRpbmcgYW5kIEZvcm1hdHRpbmcnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQucGhhc2VSZXN1bHRzWzJdLnBoYXNlTmFtZSkudG9CZSgnRGVwZW5kZW5jeSBTZWN1cml0eScpO1xuXG4gICAgICAvLyBWZXJpZnkgZ2xvYmFsIG1ldHJpY3NcbiAgICAgIGV4cGVjdChyZXN1bHQuZ2xvYmFsTWV0cmljcy5pbXBvcnRJc3N1ZXNGaXhlZCkudG9CZSg4KTsgLy8gNSArIDNcbiAgICAgIGV4cGVjdChyZXN1bHQuZ2xvYmFsTWV0cmljcy5saW50aW5nVmlvbGF0aW9uc0ZpeGVkKS50b0JlKDEwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZ2xvYmFsTWV0cmljcy5mb3JtYXR0aW5nSXNzdWVzRml4ZWQpLnRvQmUoOCk7XG4gICAgICBleHBlY3QocmVzdWx0Lmdsb2JhbE1ldHJpY3Muc2VjdXJpdHlWdWxuZXJhYmlsaXRpZXNGaXhlZCkudG9CZSgyKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZ2xvYmFsTWV0cmljcy5kZXBlbmRlbmN5VXBkYXRlc0FwcGxpZWQpLnRvQmUoMyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdoYW5kbGVzIHBoYXNlIGZhaWx1cmVzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBTZXR1cCBpbXBvcnQgY2xlYW51cCB0byBmYWlsXG4gICAgICBtb2NrSW1wb3J0Q2xlYW51cC5leGVjdXRlQ2xlYW51cC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGZpbGVzUHJvY2Vzc2VkOiBbXSxcbiAgICAgICAgdW51c2VkSW1wb3J0c1JlbW92ZWQ6IDAsXG4gICAgICAgIGltcG9ydHNPcmdhbml6ZWQ6IDAsXG4gICAgICAgIHN0eWxlVmlvbGF0aW9uc0ZpeGVkOiAwLFxuICAgICAgICBidWlsZFZhbGlkYXRpb25QYXNzZWQ6IGZhbHNlLFxuICAgICAgICBlcnJvcnM6IFsnSW1wb3J0IGNsZWFudXAgZmFpbGVkJ10sXG4gICAgICAgIHdhcm5pbmdzOiBbXSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBTZXR1cCBvdGhlciBwaGFzZXMgdG8gc3VjY2VlZFxuICAgICAgbW9ja0xpbnRpbmdGb3JtYXR0aW5nLmV4ZWN1dGVMaW50aW5nQW5kRm9ybWF0dGluZy5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGZpbGVzUHJvY2Vzc2VkOiBbJ2ZpbGUxLnRzJ10sXG4gICAgICAgIGxpbnRpbmdWaW9sYXRpb25zRml4ZWQ6IDUsXG4gICAgICAgIGZvcm1hdHRpbmdJc3N1ZXNGaXhlZDogMyxcbiAgICAgICAgcGF0dGVybkJhc2VkRml4ZXNBcHBsaWVkOiAxLFxuICAgICAgICBidWlsZFZhbGlkYXRpb25QYXNzZWQ6IHRydWUsXG4gICAgICAgIGVycm9yczogW10sXG4gICAgICAgIHdhcm5pbmdzOiBbXSxcbiAgICAgICAgdmlvbGF0aW9uQnJlYWtkb3duOiB7XG4gICAgICAgICAgdHlwZVNjcmlwdEVycm9yczogMixcbiAgICAgICAgICByZWFjdFZpb2xhdGlvbnM6IDEsXG4gICAgICAgICAgaW1wb3J0VmlvbGF0aW9uczogMixcbiAgICAgICAgICBmb3JtYXR0aW5nSXNzdWVzOiAzLFxuICAgICAgICAgIGN1c3RvbVBhdHRlcm5GaXhlczogMSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBtb2NrRGVwZW5kZW5jeVNlY3VyaXR5LmV4ZWN1dGVEZXBlbmRlbmN5U2VjdXJpdHlNb25pdG9yaW5nLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGVwZW5kZW5jaWVzU2Nhbm5lZDogMTAsXG4gICAgICAgIHZ1bG5lcmFiaWxpdGllc0ZvdW5kOiAwLFxuICAgICAgICB1cGRhdGVzQXZhaWxhYmxlOiAwLFxuICAgICAgICB1cGRhdGVzQXBwbGllZDogMCxcbiAgICAgICAgc2VjdXJpdHlQYXRjaGVzQXBwbGllZDogMCxcbiAgICAgICAgY29tcGF0aWJpbGl0eVRlc3RzUGFzc2VkOiB0cnVlLFxuICAgICAgICBlcnJvcnM6IFtdLFxuICAgICAgICB3YXJuaW5nczogW10sXG4gICAgICAgIHNlY3VyaXR5UmVwb3J0OiB7XG4gICAgICAgICAgdnVsbmVyYWJpbGl0aWVzOiBbXSxcbiAgICAgICAgICBzdW1tYXJ5OiB7IGNyaXRpY2FsOiAwLCBoaWdoOiAwLCBtb2RlcmF0ZTogMCwgbG93OiAwLCB0b3RhbDogMCB9LFxuICAgICAgICAgIHJlY29tbWVuZGF0aW9uczogW10sXG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZVJlcG9ydDoge1xuICAgICAgICAgIGF2YWlsYWJsZVVwZGF0ZXM6IFtdLFxuICAgICAgICAgIGFwcGxpZWRVcGRhdGVzOiBbXSxcbiAgICAgICAgICBmYWlsZWRVcGRhdGVzOiBbXSxcbiAgICAgICAgICBzdW1tYXJ5OiB7IG1ham9yOiAwLCBtaW5vcjogMCwgcGF0Y2g6IDAsIHNlY3VyaXR5OiAwLCB0b3RhbDogMCB9LFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGF1dG9tYXRpb25TeXN0ZW0uZXhlY3V0ZUF1dG9tYXRpb24oKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5vdmVyYWxsU3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LnBoYXNlc0V4ZWN1dGVkKS50b0JlKDMpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5waGFzZXNTdWNjZWVkZWQpLnRvQmUoMik7XG4gICAgICBleHBlY3QocmVzdWx0LnBoYXNlc0ZhaWxlZCkudG9CZSgxKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JzKS50b0NvbnRhaW4oJ0ltcG9ydCBjbGVhbnVwIGZhaWxlZCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgncmVzcGVjdHMgcGhhc2UgZGVwZW5kZW5jaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQ29uZmlndXJlIGxpbnRpbmcgdG8gZGVwZW5kIG9uIGltcG9ydCBjbGVhbnVwXG4gICAgICBjb25zdCBjb25maWdXaXRoRGVwZW5kZW5jaWVzID0ge1xuICAgICAgICAuLi50ZXN0Q29uZmlnLFxuICAgICAgICBleGVjdXRpb25PcmRlcjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdJbXBvcnQgQ2xlYW51cCcsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0NsZWFuIHVwIGltcG9ydHMnLFxuICAgICAgICAgICAgc3lzdGVtOiAnaW1wb3J0Q2xlYW51cCcgYXMgY29uc3QsXG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgZGVwZW5kZW5jaWVzOiBbXSxcbiAgICAgICAgICAgIGNyaXRpY2FsRmFpbHVyZTogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnTGludGluZyBhbmQgRm9ybWF0dGluZycsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0ZpeCBsaW50aW5nJyxcbiAgICAgICAgICAgIHN5c3RlbTogJ2xpbnRpbmdGb3JtYXR0aW5nJyBhcyBjb25zdCxcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICBkZXBlbmRlbmNpZXM6IFsnSW1wb3J0IENsZWFudXAnXSxcbiAgICAgICAgICAgIGNyaXRpY2FsRmFpbHVyZTogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHN5c3RlbVdpdGhEZXBzID0gbmV3IENvZGVRdWFsaXR5QXV0b21hdGlvblN5c3RlbShjb25maWdXaXRoRGVwZW5kZW5jaWVzKTtcblxuICAgICAgLy8gTWFrZSBpbXBvcnQgY2xlYW51cCBmYWlsXG4gICAgICBtb2NrSW1wb3J0Q2xlYW51cC5leGVjdXRlQ2xlYW51cC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGZpbGVzUHJvY2Vzc2VkOiBbXSxcbiAgICAgICAgdW51c2VkSW1wb3J0c1JlbW92ZWQ6IDAsXG4gICAgICAgIGltcG9ydHNPcmdhbml6ZWQ6IDAsXG4gICAgICAgIHN0eWxlVmlvbGF0aW9uc0ZpeGVkOiAwLFxuICAgICAgICBidWlsZFZhbGlkYXRpb25QYXNzZWQ6IGZhbHNlLFxuICAgICAgICBlcnJvcnM6IFsnRmFpbGVkJ10sXG4gICAgICAgIHdhcm5pbmdzOiBbXSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzeXN0ZW1XaXRoRGVwcy5leGVjdXRlQXV0b21hdGlvbigpO1xuXG4gICAgICAvLyBMaW50aW5nIHNob3VsZCBzdGlsbCBleGVjdXRlIGJlY2F1c2UgZGVwZW5kZW5jaWVzIGFyZSBjaGVja2VkIGJhc2VkIG9uIHN1Y2Nlc3NcbiAgICAgIGV4cGVjdChyZXN1bHQucGhhc2VzRXhlY3V0ZWQpLnRvQmUoMik7XG4gICAgICBleHBlY3QobW9ja0xpbnRpbmdGb3JtYXR0aW5nLmV4ZWN1dGVMaW50aW5nQW5kRm9ybWF0dGluZykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc3RvcHMgZXhlY3V0aW9uIG9uIGNyaXRpY2FsIGZhaWx1cmUgd2hlbiBjb250aW51ZU9uRXJyb3IgaXMgZmFsc2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb25maWdTdG9wT25FcnJvciA9IHtcbiAgICAgICAgLi4udGVzdENvbmZpZyxcbiAgICAgICAgZ2xvYmFsU2V0dGluZ3M6IHtcbiAgICAgICAgICAuLi50ZXN0Q29uZmlnLmdsb2JhbFNldHRpbmdzLFxuICAgICAgICAgIGNvbnRpbnVlT25FcnJvcjogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgIGV4ZWN1dGlvbk9yZGVyOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ0NyaXRpY2FsIFBoYXNlJyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQ3JpdGljYWwgcGhhc2UgdGhhdCBmYWlscycsXG4gICAgICAgICAgICBzeXN0ZW06ICdpbXBvcnRDbGVhbnVwJyBhcyBjb25zdCxcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICBkZXBlbmRlbmNpZXM6IFtdLFxuICAgICAgICAgICAgY3JpdGljYWxGYWlsdXJlOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ05leHQgUGhhc2UnLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdTaG91bGQgbm90IGV4ZWN1dGUnLFxuICAgICAgICAgICAgc3lzdGVtOiAnbGludGluZ0Zvcm1hdHRpbmcnIGFzIGNvbnN0LFxuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIGRlcGVuZGVuY2llczogW10sXG4gICAgICAgICAgICBjcml0aWNhbEZhaWx1cmU6IGZhbHNlLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzeXN0ZW1TdG9wT25FcnJvciA9IG5ldyBDb2RlUXVhbGl0eUF1dG9tYXRpb25TeXN0ZW0oY29uZmlnU3RvcE9uRXJyb3IpO1xuXG4gICAgICAvLyBNYWtlIHRoZSBjcml0aWNhbCBwaGFzZSBmYWlsXG4gICAgICBtb2NrSW1wb3J0Q2xlYW51cC5leGVjdXRlQ2xlYW51cC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGZpbGVzUHJvY2Vzc2VkOiBbXSxcbiAgICAgICAgdW51c2VkSW1wb3J0c1JlbW92ZWQ6IDAsXG4gICAgICAgIGltcG9ydHNPcmdhbml6ZWQ6IDAsXG4gICAgICAgIHN0eWxlVmlvbGF0aW9uc0ZpeGVkOiAwLFxuICAgICAgICBidWlsZFZhbGlkYXRpb25QYXNzZWQ6IGZhbHNlLFxuICAgICAgICBlcnJvcnM6IFsnQ3JpdGljYWwgZmFpbHVyZSddLFxuICAgICAgICB3YXJuaW5nczogW10sXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3lzdGVtU3RvcE9uRXJyb3IuZXhlY3V0ZUF1dG9tYXRpb24oKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5vdmVyYWxsU3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LnBoYXNlc0V4ZWN1dGVkKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KG1vY2tMaW50aW5nRm9ybWF0dGluZy5leGVjdXRlTGludGluZ0FuZEZvcm1hdHRpbmcpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdza2lwcyBkaXNhYmxlZCBwaGFzZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb25maWdXaXRoRGlzYWJsZWQgPSB7XG4gICAgICAgIC4uLnRlc3RDb25maWcsXG4gICAgICAgIGV4ZWN1dGlvbk9yZGVyOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ0VuYWJsZWQgUGhhc2UnLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdUaGlzIHBoYXNlIGlzIGVuYWJsZWQnLFxuICAgICAgICAgICAgc3lzdGVtOiAnaW1wb3J0Q2xlYW51cCcgYXMgY29uc3QsXG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgZGVwZW5kZW5jaWVzOiBbXSxcbiAgICAgICAgICAgIGNyaXRpY2FsRmFpbHVyZTogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnRGlzYWJsZWQgUGhhc2UnLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdUaGlzIHBoYXNlIGlzIGRpc2FibGVkJyxcbiAgICAgICAgICAgIHN5c3RlbTogJ2xpbnRpbmdGb3JtYXR0aW5nJyBhcyBjb25zdCxcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZGVwZW5kZW5jaWVzOiBbXSxcbiAgICAgICAgICAgIGNyaXRpY2FsRmFpbHVyZTogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHN5c3RlbVdpdGhEaXNhYmxlZCA9IG5ldyBDb2RlUXVhbGl0eUF1dG9tYXRpb25TeXN0ZW0oY29uZmlnV2l0aERpc2FibGVkKTtcblxuICAgICAgbW9ja0ltcG9ydENsZWFudXAuZXhlY3V0ZUNsZWFudXAubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBmaWxlc1Byb2Nlc3NlZDogWydmaWxlMS50cyddLFxuICAgICAgICB1bnVzZWRJbXBvcnRzUmVtb3ZlZDogMSxcbiAgICAgICAgaW1wb3J0c09yZ2FuaXplZDogMSxcbiAgICAgICAgc3R5bGVWaW9sYXRpb25zRml4ZWQ6IDAsXG4gICAgICAgIGJ1aWxkVmFsaWRhdGlvblBhc3NlZDogdHJ1ZSxcbiAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgd2FybmluZ3M6IFtdLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN5c3RlbVdpdGhEaXNhYmxlZC5leGVjdXRlQXV0b21hdGlvbigpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnBoYXNlc0V4ZWN1dGVkKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KG1vY2tJbXBvcnRDbGVhbnVwLmV4ZWN1dGVDbGVhbnVwKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QobW9ja0xpbnRpbmdGb3JtYXR0aW5nLmV4ZWN1dGVMaW50aW5nQW5kRm9ybWF0dGluZykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2V4ZWN1dGVQaGFzZScsICgpID0+IHtcbiAgICB0ZXN0KCdleGVjdXRlcyBpbXBvcnQgY2xlYW51cCBwaGFzZSBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwaGFzZSA9IHtcbiAgICAgICAgbmFtZTogJ0ltcG9ydCBDbGVhbnVwJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdDbGVhbiB1cCBpbXBvcnRzJyxcbiAgICAgICAgc3lzdGVtOiAnaW1wb3J0Q2xlYW51cCcgYXMgY29uc3QsXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGRlcGVuZGVuY2llczogW10sXG4gICAgICAgIGNyaXRpY2FsRmFpbHVyZTogZmFsc2UsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBtb2NrUmVzdWx0ID0ge1xuICAgICAgICBmaWxlc1Byb2Nlc3NlZDogWydmaWxlMS50cyddLFxuICAgICAgICB1bnVzZWRJbXBvcnRzUmVtb3ZlZDogMyxcbiAgICAgICAgaW1wb3J0c09yZ2FuaXplZDogMixcbiAgICAgICAgc3R5bGVWaW9sYXRpb25zRml4ZWQ6IDEsXG4gICAgICAgIGJ1aWxkVmFsaWRhdGlvblBhc3NlZDogdHJ1ZSxcbiAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgd2FybmluZ3M6IFsnV2FybmluZyBtZXNzYWdlJ10sXG4gICAgICB9O1xuXG4gICAgICBtb2NrSW1wb3J0Q2xlYW51cC5leGVjdXRlQ2xlYW51cC5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUmVzdWx0KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0b21hdGlvblN5c3RlbS5leGVjdXRlUGhhc2UocGhhc2UpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnBoYXNlTmFtZSkudG9CZSgnSW1wb3J0IENsZWFudXAnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3lzdGVtKS50b0JlKCdpbXBvcnRDbGVhbnVwJyk7XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0LnJlc3VsdCkudG9FcXVhbChtb2NrUmVzdWx0KTtcbiAgICAgIGV4cGVjdChyZXN1bHQud2FybmluZ3MpLnRvRXF1YWwoWydXYXJuaW5nIG1lc3NhZ2UnXSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdleGVjdXRlcyBsaW50aW5nIGZvcm1hdHRpbmcgcGhhc2UgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcGhhc2UgPSB7XG4gICAgICAgIG5hbWU6ICdMaW50aW5nIGFuZCBGb3JtYXR0aW5nJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdGaXggbGludGluZyBhbmQgZm9ybWF0dGluZycsXG4gICAgICAgIHN5c3RlbTogJ2xpbnRpbmdGb3JtYXR0aW5nJyBhcyBjb25zdCxcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgZGVwZW5kZW5jaWVzOiBbXSxcbiAgICAgICAgY3JpdGljYWxGYWlsdXJlOiBmYWxzZSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG1vY2tSZXN1bHQgPSB7XG4gICAgICAgIGZpbGVzUHJvY2Vzc2VkOiBbJ2ZpbGUxLnRzJ10sXG4gICAgICAgIGxpbnRpbmdWaW9sYXRpb25zRml4ZWQ6IDUsXG4gICAgICAgIGZvcm1hdHRpbmdJc3N1ZXNGaXhlZDogMyxcbiAgICAgICAgcGF0dGVybkJhc2VkRml4ZXNBcHBsaWVkOiAyLFxuICAgICAgICBidWlsZFZhbGlkYXRpb25QYXNzZWQ6IHRydWUsXG4gICAgICAgIGVycm9yczogW10sXG4gICAgICAgIHdhcm5pbmdzOiBbXSxcbiAgICAgICAgdmlvbGF0aW9uQnJlYWtkb3duOiB7XG4gICAgICAgICAgdHlwZVNjcmlwdEVycm9yczogMixcbiAgICAgICAgICByZWFjdFZpb2xhdGlvbnM6IDEsXG4gICAgICAgICAgaW1wb3J0VmlvbGF0aW9uczogMixcbiAgICAgICAgICBmb3JtYXR0aW5nSXNzdWVzOiAzLFxuICAgICAgICAgIGN1c3RvbVBhdHRlcm5GaXhlczogMixcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tMaW50aW5nRm9ybWF0dGluZy5leGVjdXRlTGludGluZ0FuZEZvcm1hdHRpbmcubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Jlc3VsdCk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGF1dG9tYXRpb25TeXN0ZW0uZXhlY3V0ZVBoYXNlKHBoYXNlKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5waGFzZU5hbWUpLnRvQmUoJ0xpbnRpbmcgYW5kIEZvcm1hdHRpbmcnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3lzdGVtKS50b0JlKCdsaW50aW5nRm9ybWF0dGluZycpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5yZXN1bHQpLnRvRXF1YWwobW9ja1Jlc3VsdCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdleGVjdXRlcyBkZXBlbmRlbmN5IHNlY3VyaXR5IHBoYXNlIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHBoYXNlID0ge1xuICAgICAgICBuYW1lOiAnRGVwZW5kZW5jeSBTZWN1cml0eScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnTW9uaXRvciBkZXBlbmRlbmNpZXMgYW5kIHNlY3VyaXR5JyxcbiAgICAgICAgc3lzdGVtOiAnZGVwZW5kZW5jeVNlY3VyaXR5JyBhcyBjb25zdCxcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgZGVwZW5kZW5jaWVzOiBbXSxcbiAgICAgICAgY3JpdGljYWxGYWlsdXJlOiBmYWxzZSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG1vY2tSZXN1bHQgPSB7XG4gICAgICAgIGRlcGVuZGVuY2llc1NjYW5uZWQ6IDI1LFxuICAgICAgICB2dWxuZXJhYmlsaXRpZXNGb3VuZDogMSxcbiAgICAgICAgdXBkYXRlc0F2YWlsYWJsZTogMyxcbiAgICAgICAgdXBkYXRlc0FwcGxpZWQ6IDIsXG4gICAgICAgIHNlY3VyaXR5UGF0Y2hlc0FwcGxpZWQ6IDEsXG4gICAgICAgIGNvbXBhdGliaWxpdHlUZXN0c1Bhc3NlZDogdHJ1ZSxcbiAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgd2FybmluZ3M6IFtdLFxuICAgICAgICBzZWN1cml0eVJlcG9ydDoge1xuICAgICAgICAgIHZ1bG5lcmFiaWxpdGllczogW10sXG4gICAgICAgICAgc3VtbWFyeTogeyBjcml0aWNhbDogMCwgaGlnaDogMSwgbW9kZXJhdGU6IDAsIGxvdzogMCwgdG90YWw6IDEgfSxcbiAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtdLFxuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVSZXBvcnQ6IHtcbiAgICAgICAgICBhdmFpbGFibGVVcGRhdGVzOiBbXSxcbiAgICAgICAgICBhcHBsaWVkVXBkYXRlczogW10sXG4gICAgICAgICAgZmFpbGVkVXBkYXRlczogW10sXG4gICAgICAgICAgc3VtbWFyeTogeyBtYWpvcjogMCwgbWlub3I6IDEsIHBhdGNoOiAyLCBzZWN1cml0eTogMSwgdG90YWw6IDMgfSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tEZXBlbmRlbmN5U2VjdXJpdHkuZXhlY3V0ZURlcGVuZGVuY3lTZWN1cml0eU1vbml0b3JpbmcubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Jlc3VsdCk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGF1dG9tYXRpb25TeXN0ZW0uZXhlY3V0ZVBoYXNlKHBoYXNlKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5waGFzZU5hbWUpLnRvQmUoJ0RlcGVuZGVuY3kgU2VjdXJpdHknKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3lzdGVtKS50b0JlKCdkZXBlbmRlbmN5U2VjdXJpdHknKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQucmVzdWx0KS50b0VxdWFsKG1vY2tSZXN1bHQpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnaGFuZGxlcyB1bmtub3duIHN5c3RlbSBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcGhhc2UgPSB7XG4gICAgICAgIG5hbWU6ICdVbmtub3duIFBoYXNlJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdVbmtub3duIHN5c3RlbScsXG4gICAgICAgIHN5c3RlbTogJ3Vua25vd24nIGFzIHVua25vd24sXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGRlcGVuZGVuY2llczogW10sXG4gICAgICAgIGNyaXRpY2FsRmFpbHVyZTogZmFsc2UsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhdXRvbWF0aW9uU3lzdGVtLmV4ZWN1dGVQaGFzZShwaGFzZSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9ycykudG9Db250YWluKCdQaGFzZSBleGVjdXRpb24gZmFpbGVkOiBVbmtub3duIHN5c3RlbTogdW5rbm93bicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2VuZXJhdGVSZXBvcnQnLCAoKSA9PiB7XG4gICAgdGVzdCgnZ2VuZXJhdGVzIGNvbXByZWhlbnNpdmUgcmVwb3J0JywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1Jlc3VsdCA9IHtcbiAgICAgICAgb3ZlcmFsbFN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHBoYXNlc0V4ZWN1dGVkOiAyLFxuICAgICAgICBwaGFzZXNTdWNjZWVkZWQ6IDIsXG4gICAgICAgIHBoYXNlc0ZhaWxlZDogMCxcbiAgICAgICAgdG90YWxFeGVjdXRpb25UaW1lOiA1MDAwLFxuICAgICAgICBwaGFzZVJlc3VsdHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwaGFzZU5hbWU6ICdJbXBvcnQgQ2xlYW51cCcsXG4gICAgICAgICAgICBzeXN0ZW06ICdpbXBvcnRDbGVhbnVwJyxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBleGVjdXRpb25UaW1lOiAyMDAwLFxuICAgICAgICAgICAgcmVzdWx0OiB7fSxcbiAgICAgICAgICAgIGVycm9yczogW10sXG4gICAgICAgICAgICB3YXJuaW5nczogWydNaW5vciB3YXJuaW5nJ10sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwaGFzZU5hbWU6ICdMaW50aW5nIGFuZCBGb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHN5c3RlbTogJ2xpbnRpbmdGb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBleGVjdXRpb25UaW1lOiAzMDAwLFxuICAgICAgICAgICAgcmVzdWx0OiB7fSxcbiAgICAgICAgICAgIGVycm9yczogW10sXG4gICAgICAgICAgICB3YXJuaW5nczogW10sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgZ2xvYmFsTWV0cmljczoge1xuICAgICAgICAgIGZpbGVzUHJvY2Vzc2VkOiAxMCxcbiAgICAgICAgICBpbXBvcnRJc3N1ZXNGaXhlZDogNSxcbiAgICAgICAgICBsaW50aW5nVmlvbGF0aW9uc0ZpeGVkOiA4LFxuICAgICAgICAgIGZvcm1hdHRpbmdJc3N1ZXNGaXhlZDogMyxcbiAgICAgICAgICBzZWN1cml0eVZ1bG5lcmFiaWxpdGllc0ZpeGVkOiAxLFxuICAgICAgICAgIGRlcGVuZGVuY3lVcGRhdGVzQXBwbGllZDogMixcbiAgICAgICAgICBidWlsZFZhbGlkYXRpb25zUGFzc2VkOiAyLFxuICAgICAgICAgIGJ1aWxkVmFsaWRhdGlvbnNGYWlsZWQ6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yczogW10sXG4gICAgICAgIHdhcm5pbmdzOiBbJ0dsb2JhbCB3YXJuaW5nJ10sXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogWydHcmVhdCBqb2IhJ10sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXBvcnQgPSBhdXRvbWF0aW9uU3lzdGVtLmdlbmVyYXRlUmVwb3J0KG1vY2tSZXN1bHQpO1xuXG4gICAgICBleHBlY3QocmVwb3J0KS50b0NvbnRhaW4oJyMgQ29kZSBRdWFsaXR5IEF1dG9tYXRpb24gUmVwb3J0Jyk7XG4gICAgICBleHBlY3QocmVwb3J0KS50b0NvbnRhaW4oJyoqT3ZlcmFsbCBTdWNjZXNzOioqIOKchScpO1xuICAgICAgZXhwZWN0KHJlcG9ydCkudG9Db250YWluKCctIFBoYXNlcyBFeGVjdXRlZDogMicpO1xuICAgICAgZXhwZWN0KHJlcG9ydCkudG9Db250YWluKCctIEltcG9ydCBJc3N1ZXMgRml4ZWQ6IDUnKTtcbiAgICAgIGV4cGVjdChyZXBvcnQpLnRvQ29udGFpbignIyMjIOKchSBJbXBvcnQgQ2xlYW51cCcpO1xuICAgICAgZXhwZWN0KHJlcG9ydCkudG9Db250YWluKCctIE1pbm9yIHdhcm5pbmcnKTtcbiAgICAgIGV4cGVjdChyZXBvcnQpLnRvQ29udGFpbignIyMgUmVjb21tZW5kYXRpb25zJyk7XG4gICAgICBleHBlY3QocmVwb3J0KS50b0NvbnRhaW4oJy0gR3JlYXQgam9iIScpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnaW5jbHVkZXMgZXJyb3JzIGFuZCB3YXJuaW5ncyBpbiByZXBvcnQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVzdWx0ID0ge1xuICAgICAgICBvdmVyYWxsU3VjY2VzczogZmFsc2UsXG4gICAgICAgIHBoYXNlc0V4ZWN1dGVkOiAxLFxuICAgICAgICBwaGFzZXNTdWNjZWVkZWQ6IDAsXG4gICAgICAgIHBoYXNlc0ZhaWxlZDogMSxcbiAgICAgICAgdG90YWxFeGVjdXRpb25UaW1lOiAxMDAwLFxuICAgICAgICBwaGFzZVJlc3VsdHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwaGFzZU5hbWU6ICdGYWlsZWQgUGhhc2UnLFxuICAgICAgICAgICAgc3lzdGVtOiAnaW1wb3J0Q2xlYW51cCcsXG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIGV4ZWN1dGlvblRpbWU6IDEwMDAsXG4gICAgICAgICAgICByZXN1bHQ6IHt9LFxuICAgICAgICAgICAgZXJyb3JzOiBbJ1BoYXNlIGVycm9yJ10sXG4gICAgICAgICAgICB3YXJuaW5nczogW10sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgZ2xvYmFsTWV0cmljczoge1xuICAgICAgICAgIGZpbGVzUHJvY2Vzc2VkOiAwLFxuICAgICAgICAgIGltcG9ydElzc3Vlc0ZpeGVkOiAwLFxuICAgICAgICAgIGxpbnRpbmdWaW9sYXRpb25zRml4ZWQ6IDAsXG4gICAgICAgICAgZm9ybWF0dGluZ0lzc3Vlc0ZpeGVkOiAwLFxuICAgICAgICAgIHNlY3VyaXR5VnVsbmVyYWJpbGl0aWVzRml4ZWQ6IDAsXG4gICAgICAgICAgZGVwZW5kZW5jeVVwZGF0ZXNBcHBsaWVkOiAwLFxuICAgICAgICAgIGJ1aWxkVmFsaWRhdGlvbnNQYXNzZWQ6IDAsXG4gICAgICAgICAgYnVpbGRWYWxpZGF0aW9uc0ZhaWxlZDogMSxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3JzOiBbJ0dsb2JhbCBlcnJvciddLFxuICAgICAgICB3YXJuaW5nczogWydHbG9iYWwgd2FybmluZyddLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtdLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVwb3J0ID0gYXV0b21hdGlvblN5c3RlbS5nZW5lcmF0ZVJlcG9ydChtb2NrUmVzdWx0KTtcblxuICAgICAgZXhwZWN0KHJlcG9ydCkudG9Db250YWluKCcqKk92ZXJhbGwgU3VjY2VzczoqKiDinYwnKTtcbiAgICAgIGV4cGVjdChyZXBvcnQpLnRvQ29udGFpbignIyMjIOKdjCBGYWlsZWQgUGhhc2UnKTtcbiAgICAgIGV4cGVjdChyZXBvcnQpLnRvQ29udGFpbignIyMgRXJyb3JzJyk7XG4gICAgICBleHBlY3QocmVwb3J0KS50b0NvbnRhaW4oJy0g4p2MIEdsb2JhbCBlcnJvcicpO1xuICAgICAgZXhwZWN0KHJlcG9ydCkudG9Db250YWluKCcjIyBXYXJuaW5ncycpO1xuICAgICAgZXhwZWN0KHJlcG9ydCkudG9Db250YWluKCctIOKaoO+4jyBHbG9iYWwgd2FybmluZycpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY29uZmlndXJhdGlvbiB2YWxpZGF0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3VzZXMgZGVmYXVsdCBjb25maWd1cmF0aW9uIHdoZW4gbm90IHByb3ZpZGVkJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3lzdGVtID0gbmV3IENvZGVRdWFsaXR5QXV0b21hdGlvblN5c3RlbShERUZBVUxUX0NPREVfUVVBTElUWV9BVVRPTUFUSU9OX0NPTkZJRyk7XG4gICAgICBleHBlY3Qoc3lzdGVtKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgncmVzcGVjdHMgY3VzdG9tIGNvbmZpZ3VyYXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBjdXN0b21Db25maWc6IENvZGVRdWFsaXR5QXV0b21hdGlvbkNvbmZpZyA9IHtcbiAgICAgICAgaW1wb3J0Q2xlYW51cDoge1xuICAgICAgICAgIG1heEZpbGVzUGVyQmF0Y2g6IDEwLFxuICAgICAgICAgIHNhZmV0eVZhbGlkYXRpb25FbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICBidWlsZFZhbGlkYXRpb25GcmVxdWVuY3k6IDMsXG4gICAgICAgICAgaW1wb3J0U3R5bGVFbmZvcmNlbWVudDogZmFsc2UsXG4gICAgICAgICAgb3JnYW5pemF0aW9uUnVsZXM6IHtcbiAgICAgICAgICAgIGdyb3VwRXh0ZXJuYWxJbXBvcnRzOiBmYWxzZSxcbiAgICAgICAgICAgIGdyb3VwSW50ZXJuYWxJbXBvcnRzOiBmYWxzZSxcbiAgICAgICAgICAgIHNvcnRBbHBoYWJldGljYWxseTogZmFsc2UsXG4gICAgICAgICAgICBzZXBhcmF0ZVR5cGVJbXBvcnRzOiBmYWxzZSxcbiAgICAgICAgICAgIGVuZm9yY2VUcmFpbGluZ0NvbW1hczogZmFsc2UsXG4gICAgICAgICAgICBtYXhMaW5lTGVuZ3RoOiA4MCxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBsaW50aW5nRm9ybWF0dGluZzoge1xuICAgICAgICAgIG1heEZpbGVzUGVyQmF0Y2g6IDE1LFxuICAgICAgICAgIHNhZmV0eVZhbGlkYXRpb25FbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICBidWlsZFZhbGlkYXRpb25GcmVxdWVuY3k6IDIsXG4gICAgICAgICAgYXV0b0ZpeEVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgIGZvcm1hdHRpbmdFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICBsaW50aW5nUnVsZXM6IHtcbiAgICAgICAgICAgIGVuZm9yY2VUeXBlU2NyaXB0UnVsZXM6IGZhbHNlLFxuICAgICAgICAgICAgZW5mb3JjZVJlYWN0UnVsZXM6IGZhbHNlLFxuICAgICAgICAgICAgZW5mb3JjZUltcG9ydFJ1bGVzOiBmYWxzZSxcbiAgICAgICAgICAgIG1heFdhcm5pbmdzVGhyZXNob2xkOiA1MDAsXG4gICAgICAgICAgICBjdXN0b21SdWxlT3ZlcnJpZGVzOiB7fSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZvcm1hdHRpbmdSdWxlczoge1xuICAgICAgICAgICAgZW5mb3JjZUNvbnNpc3RlbnRJbmRlbnRhdGlvbjogZmFsc2UsXG4gICAgICAgICAgICBlbmZvcmNlVHJhaWxpbmdDb21tYXM6IGZhbHNlLFxuICAgICAgICAgICAgZW5mb3JjZVNlbWljb2xvbnM6IGZhbHNlLFxuICAgICAgICAgICAgZW5mb3JjZVF1b3RlU3R5bGU6ICdkb3VibGUnLFxuICAgICAgICAgICAgZW5mb3JjZUxpbmVMZW5ndGg6IDgwLFxuICAgICAgICAgICAgZW5mb3JjZVNwYWNpbmc6IGZhbHNlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcGF0dGVybkJhc2VkRml4ZXM6IFtdLFxuICAgICAgICB9LFxuICAgICAgICBkZXBlbmRlbmN5U2VjdXJpdHk6IHtcbiAgICAgICAgICBtYXhEZXBlbmRlbmNpZXNQZXJCYXRjaDogNSxcbiAgICAgICAgICBzYWZldHlWYWxpZGF0aW9uRW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgYXV0b1VwZGF0ZUVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgIHNlY3VyaXR5U2NhbkVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgIGNvbXBhdGliaWxpdHlUZXN0aW5nRW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgdXBkYXRlU3RyYXRlZ2llczogW10sXG4gICAgICAgICAgc2VjdXJpdHlUaHJlc2hvbGRzOiB7XG4gICAgICAgICAgICBjcml0aWNhbDogMCxcbiAgICAgICAgICAgIGhpZ2g6IDAsXG4gICAgICAgICAgICBtb2RlcmF0ZTogMCxcbiAgICAgICAgICAgIGxvdzogMCxcbiAgICAgICAgICAgIGF1dG9GaXhDcml0aWNhbDogZmFsc2UsXG4gICAgICAgICAgICBhdXRvRml4SGlnaDogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBleGNsdWRlZFBhY2thZ2VzOiBbXSxcbiAgICAgICAgfSxcbiAgICAgICAgZXhlY3V0aW9uT3JkZXI6IFtdLFxuICAgICAgICBnbG9iYWxTZXR0aW5nczoge1xuICAgICAgICAgIG1heENvbmN1cnJlbnRPcGVyYXRpb25zOiAyLFxuICAgICAgICAgIHNhZmV0eVZhbGlkYXRpb25FbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICBidWlsZFZhbGlkYXRpb25GcmVxdWVuY3k6IDEsXG4gICAgICAgICAgcm9sbGJhY2tPbkZhaWx1cmU6IHRydWUsXG4gICAgICAgICAgY29udGludWVPbkVycm9yOiBmYWxzZSxcbiAgICAgICAgICByZXBvcnRpbmdFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHN5c3RlbSA9IG5ldyBDb2RlUXVhbGl0eUF1dG9tYXRpb25TeXN0ZW0oY3VzdG9tQ29uZmlnKTtcbiAgICAgIGV4cGVjdChzeXN0ZW0pLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=