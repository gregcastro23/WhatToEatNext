{"file":"/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/services/campaign/CodeQualityAutomationSystem.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/services/campaign/CodeQualityAutomationSystem.test.ts"],"sourcesContent":["/**\n * Code Quality Automation System Tests\n * Comprehensive test suite for the unified automation system\n */\n\nimport {\n  CodeQualityAutomationSystem,\n  DEFAULT_CODE_QUALITY_AUTOMATION_CONFIG,\n  CodeQualityAutomationConfig,\n} from './CodeQualityAutomationSystem';\nimport { DependencySecurityMonitor } from './DependencySecurityMonitor';\nimport { ImportCleanupSystem } from './ImportCleanupSystem';\nimport { LintingFormattingSystem } from './LintingFormattingSystem';\n\n// Mock the subsystems\njest.mock('./ImportCleanupSystem');\njest.mock('./LintingFormattingSystem');\njest.mock('./DependencySecurityMonitor');\njest.mock('../../utils/logger');\njest.mock('child_process');\n\nconst MockImportCleanupSystem = ImportCleanupSystem as jest.MockedClass<typeof ImportCleanupSystem>;\nconst MockLintingFormattingSystem = LintingFormattingSystem as jest.MockedClass<typeof LintingFormattingSystem>;\nconst MockDependencySecurityMonitor = DependencySecurityMonitor as jest.MockedClass<typeof DependencySecurityMonitor>;\n\ndescribe('CodeQualityAutomationSystem', () => {\n  let automationSystem: CodeQualityAutomationSystem;\n  let testConfig: CodeQualityAutomationConfig;\n  let mockImportCleanup: jest.Mocked<ImportCleanupSystem>;\n  let mockLintingFormatting: jest.Mocked<LintingFormattingSystem>;\n  let mockDependencySecurity: jest.Mocked<DependencySecurityMonitor>;\n\n  beforeEach(() => {\n    testConfig = {\n      ...DEFAULT_CODE_QUALITY_AUTOMATION_CONFIG,\n      globalSettings: {\n        ...DEFAULT_CODE_QUALITY_AUTOMATION_CONFIG.globalSettings,\n        safetyValidationEnabled: false, // Disable for testing\n      },\n    };\n\n    // Create mock instances\n    mockImportCleanup = {\n      executeCleanup: jest.fn(),\n    } as unknown;\n\n    mockLintingFormatting = {\n      executeLintingAndFormatting: jest.fn(),\n    } as unknown;\n\n    mockDependencySecurity = {\n      executeDependencySecurityMonitoring: jest.fn(),\n    } as unknown;\n\n    // Setup mock constructors\n    MockImportCleanupSystem.mockImplementation(() => mockImportCleanup);\n    MockLintingFormattingSystem.mockImplementation(() => mockLintingFormatting);\n    MockDependencySecurityMonitor.mockImplementation(() => mockDependencySecurity);\n\n    automationSystem = new CodeQualityAutomationSystem(testConfig);\n\n    // Reset mocks\n    jest.clearAllMocks();\n  });\n\n  describe('executeAutomation', () => {\n    test('executes all enabled phases in order', async () => {\n      // Setup mock responses\n      mockImportCleanup.executeCleanup.mockResolvedValue({\n        filesProcessed: ['file1.ts', 'file2.ts'],\n        unusedImportsRemoved: 5,\n        importsOrganized: 3,\n        styleViolationsFixed: 2,\n        buildValidationPassed: true,\n        errors: [],\n        warnings: [],\n      });\n\n      mockLintingFormatting.executeLintingAndFormatting.mockResolvedValue({\n        filesProcessed: ['file1.ts', 'file2.ts'],\n        lintingViolationsFixed: 10,\n        formattingIssuesFixed: 8,\n        patternBasedFixesApplied: 3,\n        buildValidationPassed: true,\n        errors: [],\n        warnings: [],\n        violationBreakdown: {\n          typeScriptErrors: 5,\n          reactViolations: 3,\n          importViolations: 2,\n          formattingIssues: 8,\n          customPatternFixes: 3,\n        },\n      });\n\n      mockDependencySecurity.executeDependencySecurityMonitoring.mockResolvedValue({\n        dependenciesScanned: 50,\n        vulnerabilitiesFound: 2,\n        updatesAvailable: 5,\n        updatesApplied: 3,\n        securityPatchesApplied: 2,\n        compatibilityTestsPassed: true,\n        errors: [],\n        warnings: [],\n        securityReport: {\n          vulnerabilities: [],\n          summary: { critical: 0, high: 1, moderate: 1, low: 0, total: 2 },\n          recommendations: [],\n        },\n        updateReport: {\n          availableUpdates: [],\n          appliedUpdates: [],\n          failedUpdates: [],\n          summary: { major: 0, minor: 2, patch: 3, security: 2, total: 5 },\n        },\n      });\n\n      const result = await automationSystem.executeAutomation();\n\n      expect(result.overallSuccess).toBe(true);\n      expect(result.phasesExecuted).toBe(3);\n      expect(result.phasesSucceeded).toBe(3);\n      expect(result.phasesFailed).toBe(0);\n      expect(result.phaseResults).toHaveLength(3);\n\n      // Verify execution order\n      expect(result.phaseResults[0].phaseName).toBe('Import Cleanup');\n      expect(result.phaseResults[1].phaseName).toBe('Linting and Formatting');\n      expect(result.phaseResults[2].phaseName).toBe('Dependency Security');\n\n      // Verify global metrics\n      expect(result.globalMetrics.importIssuesFixed).toBe(8); // 5 + 3\n      expect(result.globalMetrics.lintingViolationsFixed).toBe(10);\n      expect(result.globalMetrics.formattingIssuesFixed).toBe(8);\n      expect(result.globalMetrics.securityVulnerabilitiesFixed).toBe(2);\n      expect(result.globalMetrics.dependencyUpdatesApplied).toBe(3);\n    });\n\n    test('handles phase failures gracefully', async () => {\n      // Setup import cleanup to fail\n      mockImportCleanup.executeCleanup.mockResolvedValue({\n        filesProcessed: [],\n        unusedImportsRemoved: 0,\n        importsOrganized: 0,\n        styleViolationsFixed: 0,\n        buildValidationPassed: false,\n        errors: ['Import cleanup failed'],\n        warnings: [],\n      });\n\n      // Setup other phases to succeed\n      mockLintingFormatting.executeLintingAndFormatting.mockResolvedValue({\n        filesProcessed: ['file1.ts'],\n        lintingViolationsFixed: 5,\n        formattingIssuesFixed: 3,\n        patternBasedFixesApplied: 1,\n        buildValidationPassed: true,\n        errors: [],\n        warnings: [],\n        violationBreakdown: {\n          typeScriptErrors: 2,\n          reactViolations: 1,\n          importViolations: 2,\n          formattingIssues: 3,\n          customPatternFixes: 1,\n        },\n      });\n\n      mockDependencySecurity.executeDependencySecurityMonitoring.mockResolvedValue({\n        dependenciesScanned: 10,\n        vulnerabilitiesFound: 0,\n        updatesAvailable: 0,\n        updatesApplied: 0,\n        securityPatchesApplied: 0,\n        compatibilityTestsPassed: true,\n        errors: [],\n        warnings: [],\n        securityReport: {\n          vulnerabilities: [],\n          summary: { critical: 0, high: 0, moderate: 0, low: 0, total: 0 },\n          recommendations: [],\n        },\n        updateReport: {\n          availableUpdates: [],\n          appliedUpdates: [],\n          failedUpdates: [],\n          summary: { major: 0, minor: 0, patch: 0, security: 0, total: 0 },\n        },\n      });\n\n      const result = await automationSystem.executeAutomation();\n\n      expect(result.overallSuccess).toBe(false);\n      expect(result.phasesExecuted).toBe(3);\n      expect(result.phasesSucceeded).toBe(2);\n      expect(result.phasesFailed).toBe(1);\n      expect(result.errors).toContain('Import cleanup failed');\n    });\n\n    test('respects phase dependencies', async () => {\n      // Configure linting to depend on import cleanup\n      const configWithDependencies = {\n        ...testConfig,\n        executionOrder: [\n          {\n            name: 'Import Cleanup',\n            description: 'Clean up imports',\n            system: 'importCleanup' as const,\n            enabled: true,\n            dependencies: [],\n            criticalFailure: false,\n          },\n          {\n            name: 'Linting and Formatting',\n            description: 'Fix linting',\n            system: 'lintingFormatting' as const,\n            enabled: true,\n            dependencies: ['Import Cleanup'],\n            criticalFailure: false,\n          },\n        ],\n      };\n\n      const systemWithDeps = new CodeQualityAutomationSystem(configWithDependencies);\n\n      // Make import cleanup fail\n      mockImportCleanup.executeCleanup.mockResolvedValue({\n        filesProcessed: [],\n        unusedImportsRemoved: 0,\n        importsOrganized: 0,\n        styleViolationsFixed: 0,\n        buildValidationPassed: false,\n        errors: ['Failed'],\n        warnings: [],\n      });\n\n      const result = await systemWithDeps.executeAutomation();\n\n      // Linting should still execute because dependencies are checked based on success\n      expect(result.phasesExecuted).toBe(2);\n      expect(mockLintingFormatting.executeLintingAndFormatting).toHaveBeenCalled();\n    });\n\n    test('stops execution on critical failure when continueOnError is false', async () => {\n      const configStopOnError = {\n        ...testConfig,\n        globalSettings: {\n          ...testConfig.globalSettings,\n          continueOnError: false,\n        },\n        executionOrder: [\n          {\n            name: 'Critical Phase',\n            description: 'Critical phase that fails',\n            system: 'importCleanup' as const,\n            enabled: true,\n            dependencies: [],\n            criticalFailure: true,\n          },\n          {\n            name: 'Next Phase',\n            description: 'Should not execute',\n            system: 'lintingFormatting' as const,\n            enabled: true,\n            dependencies: [],\n            criticalFailure: false,\n          },\n        ],\n      };\n\n      const systemStopOnError = new CodeQualityAutomationSystem(configStopOnError);\n\n      // Make the critical phase fail\n      mockImportCleanup.executeCleanup.mockResolvedValue({\n        filesProcessed: [],\n        unusedImportsRemoved: 0,\n        importsOrganized: 0,\n        styleViolationsFixed: 0,\n        buildValidationPassed: false,\n        errors: ['Critical failure'],\n        warnings: [],\n      });\n\n      const result = await systemStopOnError.executeAutomation();\n\n      expect(result.overallSuccess).toBe(false);\n      expect(result.phasesExecuted).toBe(1);\n      expect(mockLintingFormatting.executeLintingAndFormatting).not.toHaveBeenCalled();\n    });\n\n    test('skips disabled phases', async () => {\n      const configWithDisabled = {\n        ...testConfig,\n        executionOrder: [\n          {\n            name: 'Enabled Phase',\n            description: 'This phase is enabled',\n            system: 'importCleanup' as const,\n            enabled: true,\n            dependencies: [],\n            criticalFailure: false,\n          },\n          {\n            name: 'Disabled Phase',\n            description: 'This phase is disabled',\n            system: 'lintingFormatting' as const,\n            enabled: false,\n            dependencies: [],\n            criticalFailure: false,\n          },\n        ],\n      };\n\n      const systemWithDisabled = new CodeQualityAutomationSystem(configWithDisabled);\n\n      mockImportCleanup.executeCleanup.mockResolvedValue({\n        filesProcessed: ['file1.ts'],\n        unusedImportsRemoved: 1,\n        importsOrganized: 1,\n        styleViolationsFixed: 0,\n        buildValidationPassed: true,\n        errors: [],\n        warnings: [],\n      });\n\n      const result = await systemWithDisabled.executeAutomation();\n\n      expect(result.phasesExecuted).toBe(1);\n      expect(mockImportCleanup.executeCleanup).toHaveBeenCalled();\n      expect(mockLintingFormatting.executeLintingAndFormatting).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('executePhase', () => {\n    test('executes import cleanup phase correctly', async () => {\n      const phase = {\n        name: 'Import Cleanup',\n        description: 'Clean up imports',\n        system: 'importCleanup' as const,\n        enabled: true,\n        dependencies: [],\n        criticalFailure: false,\n      };\n\n      const mockResult = {\n        filesProcessed: ['file1.ts'],\n        unusedImportsRemoved: 3,\n        importsOrganized: 2,\n        styleViolationsFixed: 1,\n        buildValidationPassed: true,\n        errors: [],\n        warnings: ['Warning message'],\n      };\n\n      mockImportCleanup.executeCleanup.mockResolvedValue(mockResult);\n\n      const result = await automationSystem.executePhase(phase);\n\n      expect(result.phaseName).toBe('Import Cleanup');\n      expect(result.system).toBe('importCleanup');\n      expect(result.success).toBe(true);\n      expect(result.result).toEqual(mockResult);\n      expect(result.warnings).toEqual(['Warning message']);\n    });\n\n    test('executes linting formatting phase correctly', async () => {\n      const phase = {\n        name: 'Linting and Formatting',\n        description: 'Fix linting and formatting',\n        system: 'lintingFormatting' as const,\n        enabled: true,\n        dependencies: [],\n        criticalFailure: false,\n      };\n\n      const mockResult = {\n        filesProcessed: ['file1.ts'],\n        lintingViolationsFixed: 5,\n        formattingIssuesFixed: 3,\n        patternBasedFixesApplied: 2,\n        buildValidationPassed: true,\n        errors: [],\n        warnings: [],\n        violationBreakdown: {\n          typeScriptErrors: 2,\n          reactViolations: 1,\n          importViolations: 2,\n          formattingIssues: 3,\n          customPatternFixes: 2,\n        },\n      };\n\n      mockLintingFormatting.executeLintingAndFormatting.mockResolvedValue(mockResult);\n\n      const result = await automationSystem.executePhase(phase);\n\n      expect(result.phaseName).toBe('Linting and Formatting');\n      expect(result.system).toBe('lintingFormatting');\n      expect(result.success).toBe(true);\n      expect(result.result).toEqual(mockResult);\n    });\n\n    test('executes dependency security phase correctly', async () => {\n      const phase = {\n        name: 'Dependency Security',\n        description: 'Monitor dependencies and security',\n        system: 'dependencySecurity' as const,\n        enabled: true,\n        dependencies: [],\n        criticalFailure: false,\n      };\n\n      const mockResult = {\n        dependenciesScanned: 25,\n        vulnerabilitiesFound: 1,\n        updatesAvailable: 3,\n        updatesApplied: 2,\n        securityPatchesApplied: 1,\n        compatibilityTestsPassed: true,\n        errors: [],\n        warnings: [],\n        securityReport: {\n          vulnerabilities: [],\n          summary: { critical: 0, high: 1, moderate: 0, low: 0, total: 1 },\n          recommendations: [],\n        },\n        updateReport: {\n          availableUpdates: [],\n          appliedUpdates: [],\n          failedUpdates: [],\n          summary: { major: 0, minor: 1, patch: 2, security: 1, total: 3 },\n        },\n      };\n\n      mockDependencySecurity.executeDependencySecurityMonitoring.mockResolvedValue(mockResult);\n\n      const result = await automationSystem.executePhase(phase);\n\n      expect(result.phaseName).toBe('Dependency Security');\n      expect(result.system).toBe('dependencySecurity');\n      expect(result.success).toBe(true);\n      expect(result.result).toEqual(mockResult);\n    });\n\n    test('handles unknown system gracefully', async () => {\n      const phase = {\n        name: 'Unknown Phase',\n        description: 'Unknown system',\n        system: 'unknown' as unknown,\n        enabled: true,\n        dependencies: [],\n        criticalFailure: false,\n      };\n\n      const result = await automationSystem.executePhase(phase);\n\n      expect(result.success).toBe(false);\n      expect(result.errors).toContain('Phase execution failed: Unknown system: unknown');\n    });\n  });\n\n  describe('generateReport', () => {\n    test('generates comprehensive report', () => {\n      const mockResult = {\n        overallSuccess: true,\n        phasesExecuted: 2,\n        phasesSucceeded: 2,\n        phasesFailed: 0,\n        totalExecutionTime: 5000,\n        phaseResults: [\n          {\n            phaseName: 'Import Cleanup',\n            system: 'importCleanup',\n            success: true,\n            executionTime: 2000,\n            result: {},\n            errors: [],\n            warnings: ['Minor warning'],\n          },\n          {\n            phaseName: 'Linting and Formatting',\n            system: 'lintingFormatting',\n            success: true,\n            executionTime: 3000,\n            result: {},\n            errors: [],\n            warnings: [],\n          },\n        ],\n        globalMetrics: {\n          filesProcessed: 10,\n          importIssuesFixed: 5,\n          lintingViolationsFixed: 8,\n          formattingIssuesFixed: 3,\n          securityVulnerabilitiesFixed: 1,\n          dependencyUpdatesApplied: 2,\n          buildValidationsPassed: 2,\n          buildValidationsFailed: 0,\n        },\n        errors: [],\n        warnings: ['Global warning'],\n        recommendations: ['Great job!'],\n      };\n\n      const report = automationSystem.generateReport(mockResult);\n\n      expect(report).toContain('# Code Quality Automation Report');\n      expect(report).toContain('**Overall Success:** ✅');\n      expect(report).toContain('- Phases Executed: 2');\n      expect(report).toContain('- Import Issues Fixed: 5');\n      expect(report).toContain('### ✅ Import Cleanup');\n      expect(report).toContain('- Minor warning');\n      expect(report).toContain('## Recommendations');\n      expect(report).toContain('- Great job!');\n    });\n\n    test('includes errors and warnings in report', () => {\n      const mockResult = {\n        overallSuccess: false,\n        phasesExecuted: 1,\n        phasesSucceeded: 0,\n        phasesFailed: 1,\n        totalExecutionTime: 1000,\n        phaseResults: [\n          {\n            phaseName: 'Failed Phase',\n            system: 'importCleanup',\n            success: false,\n            executionTime: 1000,\n            result: {},\n            errors: ['Phase error'],\n            warnings: [],\n          },\n        ],\n        globalMetrics: {\n          filesProcessed: 0,\n          importIssuesFixed: 0,\n          lintingViolationsFixed: 0,\n          formattingIssuesFixed: 0,\n          securityVulnerabilitiesFixed: 0,\n          dependencyUpdatesApplied: 0,\n          buildValidationsPassed: 0,\n          buildValidationsFailed: 1,\n        },\n        errors: ['Global error'],\n        warnings: ['Global warning'],\n        recommendations: [],\n      };\n\n      const report = automationSystem.generateReport(mockResult);\n\n      expect(report).toContain('**Overall Success:** ❌');\n      expect(report).toContain('### ❌ Failed Phase');\n      expect(report).toContain('## Errors');\n      expect(report).toContain('- ❌ Global error');\n      expect(report).toContain('## Warnings');\n      expect(report).toContain('- ⚠️ Global warning');\n    });\n  });\n\n  describe('configuration validation', () => {\n    test('uses default configuration when not provided', () => {\n      const system = new CodeQualityAutomationSystem(DEFAULT_CODE_QUALITY_AUTOMATION_CONFIG);\n      expect(system).toBeDefined();\n    });\n\n    test('respects custom configuration', () => {\n      const customConfig: CodeQualityAutomationConfig = {\n        importCleanup: {\n          maxFilesPerBatch: 10,\n          safetyValidationEnabled: false,\n          buildValidationFrequency: 3,\n          importStyleEnforcement: false,\n          organizationRules: {\n            groupExternalImports: false,\n            groupInternalImports: false,\n            sortAlphabetically: false,\n            separateTypeImports: false,\n            enforceTrailingCommas: false,\n            maxLineLength: 80,\n          },\n        },\n        lintingFormatting: {\n          maxFilesPerBatch: 15,\n          safetyValidationEnabled: false,\n          buildValidationFrequency: 2,\n          autoFixEnabled: false,\n          formattingEnabled: false,\n          lintingRules: {\n            enforceTypeScriptRules: false,\n            enforceReactRules: false,\n            enforceImportRules: false,\n            maxWarningsThreshold: 500,\n            customRuleOverrides: {},\n          },\n          formattingRules: {\n            enforceConsistentIndentation: false,\n            enforceTrailingCommas: false,\n            enforceSemicolons: false,\n            enforceQuoteStyle: 'double',\n            enforceLineLength: 80,\n            enforceSpacing: false,\n          },\n          patternBasedFixes: [],\n        },\n        dependencySecurity: {\n          maxDependenciesPerBatch: 5,\n          safetyValidationEnabled: false,\n          autoUpdateEnabled: false,\n          securityScanEnabled: false,\n          compatibilityTestingEnabled: false,\n          updateStrategies: [],\n          securityThresholds: {\n            critical: 0,\n            high: 0,\n            moderate: 0,\n            low: 0,\n            autoFixCritical: false,\n            autoFixHigh: false,\n          },\n          excludedPackages: [],\n        },\n        executionOrder: [],\n        globalSettings: {\n          maxConcurrentOperations: 2,\n          safetyValidationEnabled: false,\n          buildValidationFrequency: 1,\n          rollbackOnFailure: true,\n          continueOnError: false,\n          reportingEnabled: false,\n        },\n      };\n\n      const system = new CodeQualityAutomationSystem(customConfig);\n      expect(system).toBeDefined();\n    });\n  });\n});\n"],"version":3}