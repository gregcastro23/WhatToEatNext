{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/errorHandler.ts","mappings":";AAAA;;GAEG;;;AAEH,qCAAwC;AAExC,MAAM,MAAM,GAAG,IAAA,qBAAY,EAAC,cAAc,CAAC,CAAC;AAE5C,IAAY,SAOX;AAPD,WAAY,SAAS;IACnB,sBAAS,CAAA;IACT,wBAAW,CAAA;IACX,0BAAa,CAAA;IACb,gCAAmB,CAAA;IACnB,oCAAuB,CAAA;IACvB,gCAAmB,CAAA;AACrB,CAAC,EAPW,SAAS,yBAAT,SAAS,QAOpB;AAED,IAAY,aAKX;AALD,WAAY,aAAa;IACvB,8BAAa,CAAA;IACb,oCAAmB,CAAA;IACnB,gCAAe,CAAA;IACf,sCAAqB,CAAA;AACvB,CAAC,EALW,aAAa,6BAAb,aAAa,QAKxB;AAcD;;GAEG;AACU,QAAA,YAAY,GAAG;IAC1B;;OAEG;IACH,GAAG,EAAE,CAAC,KAAY,EAAE,UAAwB,EAAE,EAAE,EAAE;QAChD,MAAM,EACJ,IAAI,GAAG,SAAS,CAAC,OAAO,EACxB,QAAQ,GAAG,aAAa,CAAC,KAAK,EAC9B,SAAS,GAAG,SAAS,EACrB,OAAO,GAAG,EAAE,EACZ,MAAM,GAAG,KAAK,EACf,GAAG,OAAO,CAAC;QAEZ,iBAAiB;QACjB,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,CAAC,KAAK,CACV,IAAI,QAAQ,KAAK,IAAI,KAAK,SAAS,KAAK,KAAK,CAAC,OAAO,EAAE,EACvD,EAAE,KAAK,EAAE,OAAO,EAAE,CACnB,CAAC;SACH;QAED,gEAAgE;QAChE,iGAAiG;QAEjG,OAAO;YACL,KAAK;YACL,IAAI;YACJ,QAAQ;YACR,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,WAAW,EAAE,CAAC,OAAe,EAAE,UAAwB,EAAE,EAAS,EAAE;QAClE,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;QACjC,qCAAqC;QACrC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE;YACnB,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,SAAS,CAAC,OAAO;YACvC,QAAQ,EAAE,OAAO,CAAC,QAAQ,IAAI,aAAa,CAAC,KAAK;YACjD,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,EAAE;SAC/B,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAC;AAEF,kBAAe,oBAAY,CAAC;AAE5B,iCAAiC;AACpB,QAAA,YAAY,GAAG,oBAAY,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/errorHandler.ts"],"sourcesContent":["/**\n * Error handling utilities\n */\n\nimport { createLogger } from './logger';\n\nconst logger = createLogger('ErrorHandler');\n\nexport enum ErrorType {\n  UI = 'UI',\n  API = 'API',\n  DATA = 'DATA',\n  NETWORK = 'NETWORK',\n  ASTROLOGY = 'ASTROLOGY',\n  UNKNOWN = 'UNKNOWN'\n}\n\nexport enum ErrorSeverity {\n  INFO = 'INFO',\n  WARNING = 'WARNING',\n  ERROR = 'ERROR',\n  CRITICAL = 'CRITICAL'\n}\n\ninterface ErrorContext {\n  [key: string]: any;\n}\n\ninterface ErrorOptions {\n  type?: ErrorType;\n  severity?: ErrorSeverity;\n  component?: string;\n  context?: ErrorContext;\n  silent?: boolean;\n}\n\n/**\n * Central error handler for the application\n */\nexport const ErrorHandler = {\n  /**\n   * Log an error with additional context\n   */\n  log: (error: Error, options: ErrorOptions = {}) => {\n    const {\n      type = ErrorType.UNKNOWN,\n      severity = ErrorSeverity.ERROR,\n      component = 'unknown',\n      context = {},\n      silent = false\n    } = options;\n\n    // Log to console\n    if (!silent) {\n      logger.error(\n        `[${severity}][${type}][${component}] ${error.message}`,\n        { error, context }\n      );\n    }\n\n    // You could add integration with error monitoring services here\n    // Example: Sentry.captureException(error, { extra: { type, severity, component, ...context } });\n\n    return {\n      error,\n      type,\n      severity,\n      timestamp: new Date().toISOString()\n    };\n  },\n\n  /**\n   * Create a custom application error\n   */\n  createError: (message: string, options: ErrorOptions = {}): Error => {\n    const error = new Error(message);\n    // Add custom properties to the error\n    Object.assign(error, {\n      type: options.type || ErrorType.UNKNOWN,\n      severity: options.severity || ErrorSeverity.ERROR,\n      context: options.context || {}\n    });\n    return error;\n  }\n};\n\nexport default ErrorHandler;\n\n// Export alias for compatibility\nexport const errorHandler = ErrorHandler; "],"version":3}