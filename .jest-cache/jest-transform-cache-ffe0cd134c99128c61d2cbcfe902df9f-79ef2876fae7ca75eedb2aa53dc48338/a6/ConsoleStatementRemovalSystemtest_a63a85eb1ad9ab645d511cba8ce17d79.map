{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ConsoleStatementRemovalSystem.test.ts","mappings":";AAAA;;;;;GAKG;;;;;;;;;;;;;;;;;;;;;;;;;AAMH,oBAAoB;AACpB,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AANhB,mFAA6J;AAC7J,iDAAyC;AACzC,uCAAyB;AAMzB,MAAM,YAAY,GAAG,wBAAgD,CAAC;AACtE,MAAM,MAAM,GAAG,EAA4B,CAAC;AAE5C,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;IAC7C,IAAI,aAA4C,CAAC;IAEjD,UAAU,CAAC,GAAG,EAAE;QACd,aAAa,GAAG,IAAI,6DAA6B,EAAE,CAAC;QACpD,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,oDAAoD;QACpD,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,MAAM,GAAG,IAAI,6DAA6B,EAAE,CAAC;YACnD,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,MAAM,GAAkC;gBAC5C,QAAQ,EAAE,EAAE;gBACZ,MAAM,EAAE,KAAK;gBACb,qBAAqB,EAAE,KAAK;gBAC5B,gBAAgB,EAAE,KAAK;aACxB,CAAC;YAEF,MAAM,MAAM,GAAG,IAAI,6DAA6B,CAAC,MAAM,CAAC,CAAC;YACzD,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,OAAO,GAAG;;;;;;OAMf,CAAC;YAEF,MAAM,UAAU,GAAI,aAAqB,CAAC,4BAA4B,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;YAEjG,MAAM,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACzC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC5D,MAAM,OAAO,GAAG;;;;OAIf,CAAC;YAEF,MAAM,UAAU,GAAI,aAAqB,CAAC,4BAA4B,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;YAEjG,MAAM,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,UAAU,GAAI,aAAqB,CAAC,0BAA0B,CAClE,eAAe,EACf,uCAAuC,EACvC,8DAA8D,EAC9D,OAAO,CACR,CAAC;YAEF,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,MAAM,UAAU,GAAI,aAAqB,CAAC,0BAA0B,CAClE,gBAAgB,EAChB,2BAA2B,EAC3B,4BAA4B,EAC5B,KAAK,CACN,CAAC;YAEF,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,UAAU,GAAI,aAAqB,CAAC,0BAA0B,CAClE,oBAAoB,EACpB,4BAA4B,EAC5B,6BAA6B,EAC7B,KAAK,CACN,CAAC;YAEF,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;YACxE,MAAM,OAAO,GAAG;;;;;;OAMf,CAAC;YAEF,MAAM,UAAU,GAAI,aAAqB,CAAC,0BAA0B,CAClE,eAAe,EACf,+BAA+B,EAC/B,OAAO,EACP,KAAK,CACN,CAAC;YAEF,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,MAAM,UAAU,GAAI,aAAqB,CAAC,0BAA0B,CAClE,eAAe,EACf,mCAAmC,EACnC,oCAAoC,EACpC,KAAK,CACN,CAAC;YAEF,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,MAAM,UAAU,GAAI,aAAqB,CAAC,0BAA0B,CAClE,8BAA8B,EAC9B,oCAAoC,EACpC,qCAAqC,EACrC,MAAM,CACP,CAAC;YAEF,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,MAAM,UAAU,GAAI,aAAqB,CAAC,0BAA0B,CAClE,8BAA8B,EAC9B,6BAA6B,EAC7B,8BAA8B,EAC9B,KAAK,CACN,CAAC;YAEF,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAEzC,MAAM,MAAM,CAAE,aAAqB,CAAC,qBAAqB,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;QACnH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,YAAY,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAEjC,MAAM,MAAM,CAAE,aAAqB,CAAC,qBAAqB,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;YACpF,MAAM,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,wBAAwB,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;QAC7F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,YAAY,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAEjC,MAAM,OAAO,GAAG,MAAO,aAAqB,CAAC,iBAAiB,EAAE,CAAC;YAEjE,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;YAC9C,MAAM,CAAC,YAAY,CAAC,CAAC,oBAAoB,CACvC,MAAM,CAAC,gBAAgB,CAAC,qCAAqC,CAAC,EAC9D,EAAE,QAAQ,EAAE,OAAO,EAAE,CACtB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,YAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACnC,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,MAAO,aAAqB,CAAC,iBAAiB,EAAE,CAAC;YACjE,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YACxE,MAAM,MAAM,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;YAC9C,MAAM,MAAM,GAAG,IAAI,6DAA6B,CAAC,MAAM,CAAC,CAAC;YAEzD,MAAM,YAAY,GAAuB;gBACvC;oBACE,IAAI,EAAE,eAAe;oBACrB,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE,CAAC;oBACT,IAAI,EAAE,KAAK;oBACX,OAAO,EAAE,qBAAqB;oBAC9B,OAAO,EAAE,sBAAsB;oBAC/B,UAAU,EAAE,KAAK;oBACjB,cAAc,EAAE,KAAK;iBACtB;aACF,CAAC;YAEF,YAAY,CAAC,eAAe,CAAC,wDAAwD,CAAC,CAAC;YAEvF,MAAM,MAAM,GAAG,MAAO,MAAc,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;YAEjE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAEjD,MAAM,CAAC,YAAY,CAAC,CAAC,oBAAoB,CACvC,MAAM,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,EACnD,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CACnB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,MAAM,YAAY,GAAuB;gBACvC;oBACE,IAAI,EAAE,eAAe;oBACrB,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE,CAAC;oBACT,IAAI,EAAE,OAAO;oBACb,OAAO,EAAE,2BAA2B;oBACpC,OAAO,EAAE,4BAA4B;oBACrC,UAAU,EAAE,IAAI;oBAChB,cAAc,EAAE,IAAI;iBACrB;gBACD;oBACE,IAAI,EAAE,eAAe;oBACrB,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE,CAAC;oBACT,IAAI,EAAE,KAAK;oBACX,OAAO,EAAE,uBAAuB;oBAChC,OAAO,EAAE,wBAAwB;oBACjC,UAAU,EAAE,KAAK;oBACjB,cAAc,EAAE,KAAK;iBACtB;aACF,CAAC;YAEF,YAAY,CAAC,eAAe,CAAC,uDAAuD,CAAC,CAAC;YAEtF,MAAM,MAAM,GAAG,MAAO,aAAqB,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;YAExE,MAAM,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,YAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACnC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAO,aAAqB,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YAE9D,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,CAAC,CAAC;QACtF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,MAAM,GAAG;;;;;OAKd,CAAC;YAEF,YAAY,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YAErC,MAAM,MAAM,GAAG,MAAO,aAAqB,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YAE9D,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,oCAAoC,CAAC,CAAC;YAC3E,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,+BAA+B,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,MAAM,GAAyB;gBACnC,OAAO,EAAE,IAAI;gBACb,cAAc,EAAE,EAAE;gBAClB,wBAAwB,EAAE,EAAE;gBAC5B,0BAA0B,EAAE,CAAC;gBAC7B,SAAS,EAAE,IAAI;gBACf,MAAM,EAAE,EAAE;gBACV,QAAQ,EAAE,CAAC,cAAc,CAAC;gBAC1B,cAAc,EAAE,CAAC,gBAAgB,CAAC;aACnC,CAAC;YAEF,MAAM,MAAM,GAAG,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAEpD,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,kCAAkC,CAAC,CAAC;YAC7D,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;YAChD,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,gCAAgC,CAAC,CAAC;YAC3D,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,iCAAiC,CAAC,CAAC;YAC5D,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,MAAM,GAAyB;gBACnC,OAAO,EAAE,KAAK;gBACd,cAAc,EAAE,CAAC;gBACjB,wBAAwB,EAAE,CAAC;gBAC3B,0BAA0B,EAAE,CAAC;gBAC7B,SAAS,EAAE,CAAC;gBACZ,MAAM,EAAE,CAAC,YAAY,CAAC;gBACtB,QAAQ,EAAE,EAAE;gBACZ,cAAc,EAAE,EAAE;aACnB,CAAC;YAEF,MAAM,MAAM,GAAG,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAEpD,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAClD,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,kCAAkC;YAClC,IAAI,CAAC,MAAM,CAAC,6BAA6B,EAAE,GAAG,EAAE;gBAC9C,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAO,aAAqB,CAAC,kCAAkC,EAAE,CAAC;YAEnF,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,MAAM,GAAyB;gBACnC,OAAO,EAAE,IAAI;gBACb,cAAc,EAAE,CAAC;gBACjB,wBAAwB,EAAE,EAAE;gBAC5B,0BAA0B,EAAE,CAAC;gBAC7B,SAAS,EAAE,IAAI;gBACf,MAAM,EAAE,EAAE;gBACV,QAAQ,EAAE,EAAE;gBACZ,cAAc,EAAE,CAAC,gBAAgB,CAAC;aACnC,CAAC;YAEF,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YAElD,MAAO,aAAqB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAEjD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,oBAAoB,CAC/C,MAAM,CAAC,gBAAgB,CAAC,+BAA+B,CAAC,EACxD,MAAM,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAC1C,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,MAAM,GAAyB;gBACnC,OAAO,EAAE,IAAI;gBACb,cAAc,EAAE,CAAC;gBACjB,wBAAwB,EAAE,EAAE;gBAC5B,0BAA0B,EAAE,CAAC;gBAC7B,SAAS,EAAE,IAAI;gBACf,MAAM,EAAE,EAAE;gBACV,QAAQ,EAAE,EAAE;gBACZ,cAAc,EAAE,EAAE;aACnB,CAAC;YAEF,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBAC3C,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,CAAE,aAAqB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QAClF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ConsoleStatementRemovalSystem.test.ts"],"sourcesContent":["/**\n * ConsoleStatementRemovalSystem.test.ts\n * \n * Test suite for ConsoleStatementRemovalSystem\n * Validates selective removal and critical statement preservation\n */\n\nimport { ConsoleStatementRemovalSystem, type ConsoleRemovalConfig, type ConsoleRemovalResult, type ConsoleStatement } from './ConsoleStatementRemovalSystem';\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\n\n// Mock dependencies\njest.mock('child_process');\njest.mock('fs');\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('ConsoleStatementRemovalSystem', () => {\n  let removalSystem: ConsoleStatementRemovalSystem;\n  \n  beforeEach(() => {\n    removalSystem = new ConsoleStatementRemovalSystem();\n    jest.clearAllMocks();\n    \n    // Mock fs.existsSync to return true for script path\n    mockFs.existsSync.mockReturnValue(true);\n  });\n\n  describe('constructor', () => {\n    it('should initialize with default configuration', () => {\n      const system = new ConsoleStatementRemovalSystem();\n      expect(system).toBeDefined();\n    });\n\n    it('should accept custom configuration', () => {\n      const config: Partial<ConsoleRemovalConfig> = {\n        maxFiles: 15,\n        dryRun: false,\n        preserveDebugCritical: false,\n        selectiveRemoval: false\n      };\n      \n      const system = new ConsoleStatementRemovalSystem(config);\n      expect(system).toBeDefined();\n    });\n  });\n\n  describe('analyzeFileConsoleStatements', () => {\n    it('should detect console statements in file content', () => {\n      const content = `\nconsole.log('debug message');\nconsole.error('error message');\nconsole.warn('warning message');\nconsole.info('info message');\nconsole.debug('debug message');\n      `;\n      \n      const statements = (removalSystem as any).analyzeFileConsoleStatements('/test/file.ts', content);\n      \n      expect(statements).toHaveLength(5);\n      expect(statements[0].type).toBe('log');\n      expect(statements[1].type).toBe('error');\n      expect(statements[2].type).toBe('warn');\n      expect(statements[3].type).toBe('info');\n      expect(statements[4].type).toBe('debug');\n    });\n\n    it('should extract correct line and column information', () => {\n      const content = `\nconst test = 'value';\nconsole.log('test message');\nconst another = 'value';\n      `;\n      \n      const statements = (removalSystem as any).analyzeFileConsoleStatements('/test/file.ts', content);\n      \n      expect(statements).toHaveLength(1);\n      expect(statements[0].line).toBe(3);\n      expect(statements[0].content).toBe(\"console.log('test message')\");\n    });\n  });\n\n  describe('isConsoleStatementCritical', () => {\n    it('should mark error statements as critical', () => {\n      const isCritical = (removalSystem as any).isConsoleStatementCritical(\n        '/test/file.ts',\n        'console.error(\"Something went wrong\")',\n        'try { } catch (e) { console.error(\"Something went wrong\"); }',\n        'error'\n      );\n      \n      expect(isCritical).toBe(true);\n    });\n\n    it('should mark statements in debug files as critical', () => {\n      const isCritical = (removalSystem as any).isConsoleStatementCritical(\n        '/test/debug.ts',\n        'console.log(\"Debug info\")',\n        'console.log(\"Debug info\");',\n        'log'\n      );\n      \n      expect(isCritical).toBe(true);\n    });\n\n    it('should mark statements in test files as critical', () => {\n      const isCritical = (removalSystem as any).isConsoleStatementCritical(\n        '/test/file.test.ts',\n        'console.log(\"Test output\")',\n        'console.log(\"Test output\");',\n        'log'\n      );\n      \n      expect(isCritical).toBe(true);\n    });\n\n    it('should mark statements with error handling context as critical', () => {\n      const context = `\n        try {\n          doSomething();\n        } catch (error) {\n          console.log(\"Error occurred\");\n        }\n      `;\n      \n      const isCritical = (removalSystem as any).isConsoleStatementCritical(\n        '/test/file.ts',\n        'console.log(\"Error occurred\")',\n        context,\n        'log'\n      );\n      \n      expect(isCritical).toBe(true);\n    });\n\n    it('should mark statements with important patterns as critical', () => {\n      const isCritical = (removalSystem as any).isConsoleStatementCritical(\n        '/test/file.ts',\n        'console.log(\"API request failed\")',\n        'console.log(\"API request failed\");',\n        'log'\n      );\n      \n      expect(isCritical).toBe(true);\n    });\n\n    it('should mark warn statements in production code as critical', () => {\n      const isCritical = (removalSystem as any).isConsoleStatementCritical(\n        '/src/components/Component.ts',\n        'console.warn(\"Deprecated feature\")',\n        'console.warn(\"Deprecated feature\");',\n        'warn'\n      );\n      \n      expect(isCritical).toBe(true);\n    });\n\n    it('should not mark simple log statements as critical', () => {\n      const isCritical = (removalSystem as any).isConsoleStatementCritical(\n        '/src/components/Component.ts',\n        'console.log(\"Simple debug\")',\n        'console.log(\"Simple debug\");',\n        'log'\n      );\n      \n      expect(isCritical).toBe(false);\n    });\n  });\n\n  describe('validatePreConditions', () => {\n    it('should validate script exists', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n      \n      await expect((removalSystem as any).validatePreConditions()).rejects.toThrow('Console removal script not found');\n    });\n\n    it('should check git status when git stash is enabled', async () => {\n      mockExecSync.mockReturnValue('');\n      \n      await expect((removalSystem as any).validatePreConditions()).resolves.not.toThrow();\n      expect(mockExecSync).toHaveBeenCalledWith('git status --porcelain', { encoding: 'utf-8' });\n    });\n  });\n\n  describe('createSafetyStash', () => {\n    it('should create git stash with timestamp', async () => {\n      mockExecSync.mockReturnValue('');\n      \n      const stashId = await (removalSystem as any).createSafetyStash();\n      \n      expect(stashId).toContain('console-removal-');\n      expect(mockExecSync).toHaveBeenCalledWith(\n        expect.stringContaining('git stash push -m \"console-removal-'),\n        { encoding: 'utf-8' }\n      );\n    });\n\n    it('should handle git stash errors gracefully', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Git error');\n      });\n      \n      const stashId = await (removalSystem as any).createSafetyStash();\n      expect(stashId).toBe('');\n    });\n  });\n\n  describe('executeScript', () => {\n    it('should execute script with correct arguments for dry run', async () => {\n      const config = { dryRun: true, maxFiles: 10 };\n      const system = new ConsoleStatementRemovalSystem(config);\n      \n      const mockAnalysis: ConsoleStatement[] = [\n        {\n          file: '/test/file.ts',\n          line: 1,\n          column: 1,\n          type: 'log',\n          content: 'console.log(\"test\")',\n          context: 'console.log(\"test\");',\n          isCritical: false,\n          shouldPreserve: false\n        }\n      ];\n      \n      mockExecSync.mockReturnValue('Files processed: 5\\nTotal console statements fixed: 10');\n      \n      const result = await (system as any).executeScript(mockAnalysis);\n      \n      expect(result.success).toBe(true);\n      expect(result.filesProcessed).toBe(5);\n      expect(result.consoleStatementsRemoved).toBe(10);\n      \n      expect(mockExecSync).toHaveBeenCalledWith(\n        expect.stringContaining('--dry-run --max-files 10'),\n        expect.any(Object)\n      );\n    });\n\n    it('should calculate preserved statements correctly', async () => {\n      const mockAnalysis: ConsoleStatement[] = [\n        {\n          file: '/test/file.ts',\n          line: 1,\n          column: 1,\n          type: 'error',\n          content: 'console.error(\"critical\")',\n          context: 'console.error(\"critical\");',\n          isCritical: true,\n          shouldPreserve: true\n        },\n        {\n          file: '/test/file.ts',\n          line: 2,\n          column: 1,\n          type: 'log',\n          content: 'console.log(\"normal\")',\n          context: 'console.log(\"normal\");',\n          isCritical: false,\n          shouldPreserve: false\n        }\n      ];\n      \n      mockExecSync.mockReturnValue('Files processed: 1\\nTotal console statements fixed: 1');\n      \n      const result = await (removalSystem as any).executeScript(mockAnalysis);\n      \n      expect(result.consoleStatementsPreserved).toBe(1);\n      expect(result.preservedFiles).toContain('/test/file.ts');\n    });\n\n    it('should handle script execution errors', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Script execution failed');\n      });\n      \n      const result = await (removalSystem as any).executeScript([]);\n      \n      expect(result.success).toBe(false);\n      expect(result.errors).toContain(expect.stringContaining('Script execution failed'));\n    });\n\n    it('should parse warnings and errors from output', async () => {\n      const output = `\n        Files processed: 5\n        ⚠️ Warning: Some statements preserved\n        ❌ Error: Failed to process file\n        Total console statements fixed: 10\n      `;\n      \n      mockExecSync.mockReturnValue(output);\n      \n      const result = await (removalSystem as any).executeScript([]);\n      \n      expect(result.warnings).toHaveLength(1);\n      expect(result.errors).toHaveLength(1);\n      expect(result.warnings[0]).toContain('Warning: Some statements preserved');\n      expect(result.errors[0]).toContain('Error: Failed to process file');\n    });\n  });\n\n  describe('generateReport', () => {\n    it('should generate single execution report', () => {\n      const result: ConsoleRemovalResult = {\n        success: true,\n        filesProcessed: 10,\n        consoleStatementsRemoved: 25,\n        consoleStatementsPreserved: 5,\n        buildTime: 2000,\n        errors: [],\n        warnings: ['Test warning'],\n        preservedFiles: ['/test/debug.ts']\n      };\n      \n      const report = removalSystem.generateReport(result);\n      \n      expect(report).toContain('Console Statement Removal Report');\n      expect(report).toContain('Success: ✅');\n      expect(report).toContain('Files Processed: 10');\n      expect(report).toContain('Console Statements Removed: 25');\n      expect(report).toContain('Console Statements Preserved: 5');\n      expect(report).toContain('Build Time: 2000ms');\n      expect(report).toContain('/test/debug.ts');\n      expect(report).toContain('Test warning');\n    });\n\n    it('should generate failure report', () => {\n      const result: ConsoleRemovalResult = {\n        success: false,\n        filesProcessed: 0,\n        consoleStatementsRemoved: 0,\n        consoleStatementsPreserved: 0,\n        buildTime: 0,\n        errors: ['Test error'],\n        warnings: [],\n        preservedFiles: []\n      };\n      \n      const report = removalSystem.generateReport(result);\n      \n      expect(report).toContain('Success: ❌');\n      expect(report).toContain('Test error');\n      expect(report).toContain('Console removal failed');\n    });\n  });\n\n  describe('estimateFilesWithConsoleStatements', () => {\n    it('should return default estimate when analyzer fails', async () => {\n      // Mock the dynamic import to fail\n      jest.doMock('./LintingWarningAnalyzer.js', () => {\n        throw new Error('Module not found');\n      });\n      \n      const estimate = await (removalSystem as any).estimateFilesWithConsoleStatements();\n      \n      expect(estimate).toBe(50);\n    });\n  });\n\n  describe('saveMetrics', () => {\n    it('should save metrics to file', async () => {\n      const result: ConsoleRemovalResult = {\n        success: true,\n        filesProcessed: 5,\n        consoleStatementsRemoved: 10,\n        consoleStatementsPreserved: 2,\n        buildTime: 1500,\n        errors: [],\n        warnings: [],\n        preservedFiles: ['/test/debug.ts']\n      };\n      \n      mockFs.writeFileSync.mockImplementation(() => {});\n      \n      await (removalSystem as any).saveMetrics(result);\n      \n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        expect.stringContaining('.console-removal-metrics.json'),\n        expect.stringContaining('\"success\":true')\n      );\n    });\n\n    it('should handle save metrics errors gracefully', async () => {\n      const result: ConsoleRemovalResult = {\n        success: true,\n        filesProcessed: 5,\n        consoleStatementsRemoved: 10,\n        consoleStatementsPreserved: 2,\n        buildTime: 1500,\n        errors: [],\n        warnings: [],\n        preservedFiles: []\n      };\n      \n      mockFs.writeFileSync.mockImplementation(() => {\n        throw new Error('Write failed');\n      });\n      \n      await expect((removalSystem as any).saveMetrics(result)).resolves.not.toThrow();\n    });\n  });\n});"],"version":3}