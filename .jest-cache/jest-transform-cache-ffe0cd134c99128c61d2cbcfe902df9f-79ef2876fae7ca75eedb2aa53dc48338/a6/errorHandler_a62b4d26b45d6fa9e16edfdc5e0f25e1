1389f9a2533249d686710102e73fe43d
"use strict";
/**
 * Error handling utilities
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorHandler = exports.ErrorHandler = exports.ErrorSeverity = exports.ErrorType = void 0;
const logger_1 = require("./logger");
const logger = (0, logger_1.createLogger)('ErrorHandler');
var ErrorType;
(function (ErrorType) {
    ErrorType["UI"] = "UI";
    ErrorType["API"] = "API";
    ErrorType["DATA"] = "DATA";
    ErrorType["NETWORK"] = "NETWORK";
    ErrorType["ASTROLOGY"] = "ASTROLOGY";
    ErrorType["UNKNOWN"] = "UNKNOWN";
})(ErrorType || (exports.ErrorType = ErrorType = {}));
var ErrorSeverity;
(function (ErrorSeverity) {
    ErrorSeverity["INFO"] = "INFO";
    ErrorSeverity["WARNING"] = "WARNING";
    ErrorSeverity["ERROR"] = "ERROR";
    ErrorSeverity["CRITICAL"] = "CRITICAL";
})(ErrorSeverity || (exports.ErrorSeverity = ErrorSeverity = {}));
/**
 * Central error handler for the application
 */
exports.ErrorHandler = {
    /**
     * Log an error with additional context
     */
    log: (error, options = {}) => {
        const { type = ErrorType.UNKNOWN, severity = ErrorSeverity.ERROR, component = 'unknown', context = {}, silent = false } = options;
        // Log to console
        if (!silent) {
            logger.error(`[${severity}][${type}][${component}] ${error.message}`, { error, context });
        }
        // You could add integration with error monitoring services here
        // Example: Sentry.captureException(error, { extra: { type, severity, component, ...context } });
        return {
            error,
            type,
            severity,
            timestamp: new Date().toISOString()
        };
    },
    /**
     * Create a custom application error
     */
    createError: (message, options = {}) => {
        const error = new Error(message);
        // Add custom properties to the error
        Object.assign(error, {
            type: options.type || ErrorType.UNKNOWN,
            severity: options.severity || ErrorSeverity.ERROR,
            context: options.context || {}
        });
        return error;
    }
};
exports.default = exports.ErrorHandler;
// Export alias for compatibility
exports.errorHandler = exports.ErrorHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy91dGlscy9lcnJvckhhbmRsZXIudHMiLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7QUFFSCxxQ0FBd0M7QUFFeEMsTUFBTSxNQUFNLEdBQUcsSUFBQSxxQkFBWSxFQUFDLGNBQWMsQ0FBQyxDQUFDO0FBRTVDLElBQVksU0FPWDtBQVBELFdBQVksU0FBUztJQUNuQixzQkFBUyxDQUFBO0lBQ1Qsd0JBQVcsQ0FBQTtJQUNYLDBCQUFhLENBQUE7SUFDYixnQ0FBbUIsQ0FBQTtJQUNuQixvQ0FBdUIsQ0FBQTtJQUN2QixnQ0FBbUIsQ0FBQTtBQUNyQixDQUFDLEVBUFcsU0FBUyx5QkFBVCxTQUFTLFFBT3BCO0FBRUQsSUFBWSxhQUtYO0FBTEQsV0FBWSxhQUFhO0lBQ3ZCLDhCQUFhLENBQUE7SUFDYixvQ0FBbUIsQ0FBQTtJQUNuQixnQ0FBZSxDQUFBO0lBQ2Ysc0NBQXFCLENBQUE7QUFDdkIsQ0FBQyxFQUxXLGFBQWEsNkJBQWIsYUFBYSxRQUt4QjtBQWNEOztHQUVHO0FBQ1UsUUFBQSxZQUFZLEdBQUc7SUFDMUI7O09BRUc7SUFDSCxHQUFHLEVBQUUsQ0FBQyxLQUFZLEVBQUUsVUFBd0IsRUFBRSxFQUFFLEVBQUU7UUFDaEQsTUFBTSxFQUNKLElBQUksR0FBRyxTQUFTLENBQUMsT0FBTyxFQUN4QixRQUFRLEdBQUcsYUFBYSxDQUFDLEtBQUssRUFDOUIsU0FBUyxHQUFHLFNBQVMsRUFDckIsT0FBTyxHQUFHLEVBQUUsRUFDWixNQUFNLEdBQUcsS0FBSyxFQUNmLEdBQUcsT0FBTyxDQUFDO1FBRVosaUJBQWlCO1FBQ2pCLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxNQUFNLENBQUMsS0FBSyxDQUNWLElBQUksUUFBUSxLQUFLLElBQUksS0FBSyxTQUFTLEtBQUssS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUN2RCxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FDbkIsQ0FBQztTQUNIO1FBRUQsZ0VBQWdFO1FBQ2hFLGlHQUFpRztRQUVqRyxPQUFPO1lBQ0wsS0FBSztZQUNMLElBQUk7WUFDSixRQUFRO1lBQ1IsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO1NBQ3BDLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXLEVBQUUsQ0FBQyxPQUFlLEVBQUUsVUFBd0IsRUFBRSxFQUFTLEVBQUU7UUFDbEUsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakMscUNBQXFDO1FBQ3JDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ25CLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxPQUFPO1lBQ3ZDLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUSxJQUFJLGFBQWEsQ0FBQyxLQUFLO1lBQ2pELE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxJQUFJLEVBQUU7U0FDL0IsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0YsQ0FBQztBQUVGLGtCQUFlLG9CQUFZLENBQUM7QUFFNUIsaUNBQWlDO0FBQ3BCLFFBQUEsWUFBWSxHQUFHLG9CQUFZLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy91dGlscy9lcnJvckhhbmRsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFcnJvciBoYW5kbGluZyB1dGlsaXRpZXNcbiAqL1xuXG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5cbmNvbnN0IGxvZ2dlciA9IGNyZWF0ZUxvZ2dlcignRXJyb3JIYW5kbGVyJyk7XG5cbmV4cG9ydCBlbnVtIEVycm9yVHlwZSB7XG4gIFVJID0gJ1VJJyxcbiAgQVBJID0gJ0FQSScsXG4gIERBVEEgPSAnREFUQScsXG4gIE5FVFdPUksgPSAnTkVUV09SSycsXG4gIEFTVFJPTE9HWSA9ICdBU1RST0xPR1knLFxuICBVTktOT1dOID0gJ1VOS05PV04nXG59XG5cbmV4cG9ydCBlbnVtIEVycm9yU2V2ZXJpdHkge1xuICBJTkZPID0gJ0lORk8nLFxuICBXQVJOSU5HID0gJ1dBUk5JTkcnLFxuICBFUlJPUiA9ICdFUlJPUicsXG4gIENSSVRJQ0FMID0gJ0NSSVRJQ0FMJ1xufVxuXG5pbnRlcmZhY2UgRXJyb3JDb250ZXh0IHtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5pbnRlcmZhY2UgRXJyb3JPcHRpb25zIHtcbiAgdHlwZT86IEVycm9yVHlwZTtcbiAgc2V2ZXJpdHk/OiBFcnJvclNldmVyaXR5O1xuICBjb21wb25lbnQ/OiBzdHJpbmc7XG4gIGNvbnRleHQ/OiBFcnJvckNvbnRleHQ7XG4gIHNpbGVudD86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQ2VudHJhbCBlcnJvciBoYW5kbGVyIGZvciB0aGUgYXBwbGljYXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IEVycm9ySGFuZGxlciA9IHtcbiAgLyoqXG4gICAqIExvZyBhbiBlcnJvciB3aXRoIGFkZGl0aW9uYWwgY29udGV4dFxuICAgKi9cbiAgbG9nOiAoZXJyb3I6IEVycm9yLCBvcHRpb25zOiBFcnJvck9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHR5cGUgPSBFcnJvclR5cGUuVU5LTk9XTixcbiAgICAgIHNldmVyaXR5ID0gRXJyb3JTZXZlcml0eS5FUlJPUixcbiAgICAgIGNvbXBvbmVudCA9ICd1bmtub3duJyxcbiAgICAgIGNvbnRleHQgPSB7fSxcbiAgICAgIHNpbGVudCA9IGZhbHNlXG4gICAgfSA9IG9wdGlvbnM7XG5cbiAgICAvLyBMb2cgdG8gY29uc29sZVxuICAgIGlmICghc2lsZW50KSB7XG4gICAgICBsb2dnZXIuZXJyb3IoXG4gICAgICAgIGBbJHtzZXZlcml0eX1dWyR7dHlwZX1dWyR7Y29tcG9uZW50fV0gJHtlcnJvci5tZXNzYWdlfWAsXG4gICAgICAgIHsgZXJyb3IsIGNvbnRleHQgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBZb3UgY291bGQgYWRkIGludGVncmF0aW9uIHdpdGggZXJyb3IgbW9uaXRvcmluZyBzZXJ2aWNlcyBoZXJlXG4gICAgLy8gRXhhbXBsZTogU2VudHJ5LmNhcHR1cmVFeGNlcHRpb24oZXJyb3IsIHsgZXh0cmE6IHsgdHlwZSwgc2V2ZXJpdHksIGNvbXBvbmVudCwgLi4uY29udGV4dCB9IH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yLFxuICAgICAgdHlwZSxcbiAgICAgIHNldmVyaXR5LFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBjdXN0b20gYXBwbGljYXRpb24gZXJyb3JcbiAgICovXG4gIGNyZWF0ZUVycm9yOiAobWVzc2FnZTogc3RyaW5nLCBvcHRpb25zOiBFcnJvck9wdGlvbnMgPSB7fSk6IEVycm9yID0+IHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAvLyBBZGQgY3VzdG9tIHByb3BlcnRpZXMgdG8gdGhlIGVycm9yXG4gICAgT2JqZWN0LmFzc2lnbihlcnJvciwge1xuICAgICAgdHlwZTogb3B0aW9ucy50eXBlIHx8IEVycm9yVHlwZS5VTktOT1dOLFxuICAgICAgc2V2ZXJpdHk6IG9wdGlvbnMuc2V2ZXJpdHkgfHwgRXJyb3JTZXZlcml0eS5FUlJPUixcbiAgICAgIGNvbnRleHQ6IG9wdGlvbnMuY29udGV4dCB8fCB7fVxuICAgIH0pO1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRXJyb3JIYW5kbGVyO1xuXG4vLyBFeHBvcnQgYWxpYXMgZm9yIGNvbXBhdGliaWxpdHlcbmV4cG9ydCBjb25zdCBlcnJvckhhbmRsZXIgPSBFcnJvckhhbmRsZXI7ICJdLCJ2ZXJzaW9uIjozfQ==