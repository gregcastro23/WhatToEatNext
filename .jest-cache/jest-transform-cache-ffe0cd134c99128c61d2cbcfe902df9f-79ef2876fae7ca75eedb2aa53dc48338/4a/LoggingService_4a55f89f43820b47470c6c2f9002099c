cb2489867806513846e33e43f3923ed7
"use strict";
/**
 * Centralized Logging Service for WhatToEatNext
 *
 * Provides structured logging with different levels and contexts.
 * Replaces console.log statements in production code while preserving
 * console.warn and console.error for debugging purposes.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggingService = exports.log = exports.LogLevel = void 0;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["WARN"] = 2] = "WARN";
    LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
    LogLevel[LogLevel["SILENT"] = 4] = "SILENT";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
class LoggingService {
    static instance;
    logLevel = LogLevel.INFO;
    isDevelopment;
    logBuffer = [];
    maxBufferSize = 1000;
    constructor() {
        this.isDevelopment = process.env.NODE_ENV === 'development';
        // Set log level based on environment
        if (this.isDevelopment) {
            this.logLevel = LogLevel.DEBUG;
        }
        else if (process.env.NODE_ENV === 'test') {
            this.logLevel = LogLevel.WARN;
        }
        else {
            this.logLevel = LogLevel.INFO;
        }
    }
    static getInstance() {
        if (!LoggingService.instance) {
            LoggingService.instance = new LoggingService();
        }
        return LoggingService.instance;
    }
    setLogLevel(level) {
        this.logLevel = level;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    debug(message, context, data) {
        this.log(LogLevel.DEBUG, message, context, undefined, data);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    info(message, context, data) {
        this.log(LogLevel.INFO, message, context, undefined, data);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    warn(message, context, data) {
        this.log(LogLevel.WARN, message, context, undefined, data);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    error(message, context, error, data) {
        this.log(LogLevel.ERROR, message, context, error, data);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    log(level, message, context, error, data) {
        if (level < this.logLevel) {
            return;
        }
        const logEntry = {
            timestamp: new Date(),
            level,
            message,
            context,
            error,
            data,
        };
        // Add to buffer
        this.addToBuffer(logEntry);
        // Output to console based on level and environment
        this.outputToConsole(logEntry);
    }
    addToBuffer(entry) {
        this.logBuffer.push(entry);
        // Maintain buffer size
        if (this.logBuffer.length > this.maxBufferSize) {
            this.logBuffer.shift();
        }
    }
    outputToConsole(entry) {
        const timestamp = entry.timestamp.toISOString();
        const contextStr = entry.context ? this.formatContext(entry.context) : '';
        const levelStr = LogLevel[entry.level];
        const baseMessage = `[${timestamp}] ${levelStr}: ${entry.message}${contextStr}`;
        switch (entry.level) {
            case LogLevel.DEBUG:
                if (this.isDevelopment) {
                    exports.log.info(`🐛 ${baseMessage}`, entry.data || '');
                }
                break;
            case LogLevel.INFO:
                exports.log.info(`ℹ️ ${baseMessage}`, entry.data || '');
                break;
            case LogLevel.WARN:
                console.warn(`⚠️ ${baseMessage}`, entry.data || '');
                break;
            case LogLevel.ERROR:
                console.error(`❌ ${baseMessage}`, entry.error || entry.data || '');
                break;
        }
    }
    formatContext(context) {
        const parts = [];
        if (context.component)
            parts.push(`component=${context.component}`);
        if (context.service)
            parts.push(`service=${context.service}`);
        if (context.function)
            parts.push(`function=${context.function}`);
        if (context.userId)
            parts.push(`user=${context.userId}`);
        if (context.sessionId)
            parts.push(`session=${context.sessionId}`);
        if (context.requestId)
            parts.push(`request=${context.requestId}`);
        // Add other context properties
        Object.keys(context).forEach(key => {
            if (!['component', 'service', 'function', 'userId', 'sessionId', 'requestId'].includes(key)) {
                parts.push(`${key}=${context[key]}`);
            }
        });
        return parts.length > 0 ? ` [${parts.join(', ')}]` : '';
    }
    getLogBuffer() {
        return [...this.logBuffer];
    }
    clearLogBuffer() {
        this.logBuffer = [];
    }
    exportLogs() {
        return this.logBuffer
            .map(entry => {
            const timestamp = entry.timestamp.toISOString();
            const level = LogLevel[entry.level];
            const context = entry.context ? this.formatContext(entry.context) : '';
            const errorStr = entry.error ? ` ERROR: ${entry.error.message}` : '';
            const dataStr = entry.data ? ` DATA: ${JSON.stringify(entry.data)}` : '';
            return `[${timestamp}] ${level}: ${entry.message}${context}${errorStr}${dataStr}`;
        })
            .join('\n');
    }
}
exports.LoggingService = LoggingService;
// Create singleton instance
const logger = LoggingService.getInstance();
// Export convenience functions
// eslint-disable-next-line @typescript-eslint/no-explicit-any
exports.log = {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    debug: (message, context, data) => logger.debug(message, context, data),
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    info: (message, context, data) => logger.info(message, context, data),
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    warn: (message, context, data) => logger.warn(message, context, data),
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    error: (message, context, error, data) => logger.error(message, context, error, data),
};
exports.default = logger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,