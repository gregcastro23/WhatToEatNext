{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/services/linting/LintingAnalysisService.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/services/linting/LintingAnalysisService.ts"],"sourcesContent":["/**\n * LintingAnalysisService - Main integration service for linting error analysis\n *\n * This service orchestrates the complete linting analysis workflow, integrating\n * error analysis, classification, domain detection, and resolution strategy generation.\n */\n\nimport { log } from '@/services/LoggingService';\n\nimport { DomainContextDetector, FileAnalysis, DomainContext } from './DomainContextDetector';\nimport { ErrorClassificationSystem, ErrorClassification } from './ErrorClassificationSystem';\nimport { LintingErrorAnalyzer, CategorizedErrors, LintingIssue } from './LintingErrorAnalyzer';\nimport {\n  ResolutionStrategyGenerator,\n  ResolutionStrategy,\n  StrategyGenerationContext,\n  ProjectContext,\n  OptimizedResolutionPlan,\n} from './ResolutionStrategyGenerator';\n\nexport interface ComprehensiveAnalysisResult {\n  summary: AnalysisSummary;\n  categorizedErrors: CategorizedErrors;\n  fileAnalyses: FileAnalysis[];\n  resolutionStrategies: ResolutionStrategy[];\n  optimizedPlan: OptimizedResolutionPlan;\n  recommendations: AnalysisRecommendation[];\n  metrics: AnalysisMetrics;\n}\n\nexport interface AnalysisSummary {\n  totalIssues: number;\n  errorCount: number;\n  warningCount: number;\n  autoFixableCount: number;\n  domainSpecificCount: number;\n  criticalIssuesCount: number;\n  estimatedResolutionTime: number;\n  overallRiskLevel: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport interface AnalysisRecommendation {\n  type: 'immediate' | 'short-term' | 'long-term' | 'strategic';\n  priority: 'critical' | 'high' | 'medium' | 'low';\n  title: string;\n  description: string;\n  rationale: string;\n  estimatedImpact: 'high' | 'medium' | 'low';\n  actionItems: string[];\n}\n\nexport interface AnalysisMetrics {\n  analysisTime: number;\n  filesAnalyzed: number;\n  rulesTriggered: string[];\n  domainDistribution: Record<string, number>;\n  severityDistribution: Record<string, number>;\n  complexityDistribution: Record<string, number>;\n  confidenceScores: {\n    average: number;\n    median: number;\n    distribution: Record<string, number>;\n  };\n}\n\nexport interface LintingAnalysisOptions {\n  includeFileAnalysis?: boolean;\n  generateStrategies?: boolean;\n  projectContext?: Partial<ProjectContext>;\n  focusAreas?: ('import' | 'typescript' | 'react' | 'style' | 'domain')[];\n  riskTolerance?: 'conservative' | 'moderate' | 'aggressive';\n}\n\n/**\n * Main LintingAnalysisService class\n */\nexport class LintingAnalysisService {\n  private errorAnalyzer: LintingErrorAnalyzer;\n  private classificationSystem: ErrorClassificationSystem;\n  private domainDetector: DomainContextDetector;\n  private strategyGenerator: ResolutionStrategyGenerator;\n\n  constructor(workspaceRoot?: string) {\n    this.errorAnalyzer = new LintingErrorAnalyzer(workspaceRoot);\n    this.classificationSystem = new ErrorClassificationSystem();\n    this.domainDetector = new DomainContextDetector(workspaceRoot);\n    this.strategyGenerator = new ResolutionStrategyGenerator();\n  }\n\n  /**\n   * Perform comprehensive linting analysis\n   */\n  async performComprehensiveAnalysis(\n    options: LintingAnalysisOptions = {},\n  ): Promise<ComprehensiveAnalysisResult> {\n    const startTime = Date.now();\n\n    log.info('🚀 Starting comprehensive linting analysis...');\n\n    try {\n      // Step 1: Analyze all linting issues\n      log.info('📊 Analyzing linting issues...');\n      const categorizedErrors = await this.errorAnalyzer.analyzeAllIssues();\n\n      // Step 2: Classify errors with detailed analysis\n      log.info('🔍 Classifying errors...');\n      const classifications = await this.classifyErrors(categorizedErrors, options.focusAreas);\n\n      // Step 3: Analyze files for domain context (if requested)\n      let fileAnalyses: FileAnalysis[] = [];\n      if (options.includeFileAnalysis !== false) {\n        log.info('🏗️ Analyzing domain contexts...');\n        fileAnalyses = await this.analyzeFileContexts(categorizedErrors);\n      }\n\n      // Step 4: Generate resolution strategies (if requested)\n      let resolutionStrategies: ResolutionStrategy[] = [];\n      let optimizedPlan: OptimizedResolutionPlan = this.createEmptyPlan();\n\n      if (options.generateStrategies !== false) {\n        log.info('🎯 Generating resolution strategies...');\n        const strategyResult = await this.generateResolutionStrategies(\n          categorizedErrors,\n          classifications,\n          fileAnalyses,\n          options.projectContext || {},\n        );\n        resolutionStrategies = strategyResult.strategies;\n        optimizedPlan = strategyResult.optimizedPlan;\n      }\n\n      // Step 5: Generate summary and recommendations\n      log.info('📋 Generating recommendations...');\n      const summary = this.generateSummary(\n        categorizedErrors,\n        classifications,\n        resolutionStrategies,\n      );\n      const recommendations = this.generateRecommendations(\n        categorizedErrors,\n        classifications,\n        resolutionStrategies,\n        options,\n      );\n\n      // Step 6: Calculate metrics\n      const metrics = this.calculateMetrics(\n        startTime,\n        categorizedErrors,\n        classifications,\n        fileAnalyses,\n        resolutionStrategies,\n      );\n\n      const result: ComprehensiveAnalysisResult = {\n        summary,\n        categorizedErrors,\n        fileAnalyses,\n        resolutionStrategies,\n        optimizedPlan,\n        recommendations,\n        metrics,\n      };\n\n      log.info('✅ Comprehensive analysis complete ?? undefined');\n      this.logAnalysisResults(result);\n\n      return result;\n    } catch (error) {\n      console.error('❌ Analysis failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Quick analysis for immediate insights\n   */\n  async performQuickAnalysis(): Promise<{\n    summary: AnalysisSummary;\n    topIssues: LintingIssue[];\n    quickWins: LintingIssue[];\n    criticalIssues: LintingIssue[];\n  }> {\n    log.info('⚡ Performing quick linting analysis...');\n\n    const categorizedErrors = await this.errorAnalyzer.analyzeAllIssues();\n    const classifications = await this.classifyErrors(categorizedErrors);\n\n    // Get top issues by frequency\n    const issueFrequency = new Map<string, number>();\n    for (const issue of Object.values(categorizedErrors.byCategory).flat()) {\n      const count = issueFrequency.get(issue.rule) || 0;\n      issueFrequency.set(issue.rule, count + 1);\n    }\n\n    const topIssues = Array.from(issueFrequency.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 5)\n      .map(([rule]) =>\n        Object.values(categorizedErrors.byCategory)\n          .flat()\n          .find(i => i.rule === rule),\n      )\n      .filter((issue): issue is LintingIssue => issue !== undefined)\n      .filter(Boolean);\n\n    // Get quick wins (auto-fixable, low risk)\n    const quickWins = categorizedErrors.autoFixable\n      .filter(issue => {\n        const classification = classifications.find(c => c.ruleId === issue.rule);\n        return classification && classification.riskProfile.overall === 'low';\n      })\n      .slice(0, 10);\n\n    // Get critical issues\n    const criticalIssues = Object.values(categorizedErrors.byCategory)\n      .flat()\n      .filter(issue => {\n        const classification = classifications.find(c => c.ruleId === issue.rule);\n        return classification && classification.severity.level === 'critical';\n      });\n\n    const summary = this.generateSummary(categorizedErrors, classifications, []);\n\n    return { summary, topIssues, quickWins, criticalIssues };\n  }\n\n  /**\n   * Classify all errors with detailed analysis\n   */\n  private async classifyErrors(\n    categorizedErrors: CategorizedErrors,\n    focusAreas?: string[],\n  ): Promise<ErrorClassification[]> {\n    const allIssues = Object.values(categorizedErrors.byCategory).flat();\n    const classifications: ErrorClassification[] = [];\n\n    for (const issue of allIssues) {\n      // Skip if not in focus areas\n      if (focusAreas && !focusAreas.includes(issue.category.primary)) {\n        continue;\n      }\n\n      const classification = this.classificationSystem.classifyError(\n        issue.rule,\n        issue.message,\n        issue.file,\n        issue.autoFixable,\n      );\n\n      classifications.push(classification);\n    }\n\n    return classifications;\n  }\n\n  /**\n   * Analyze file contexts for domain detection\n   */\n  private async analyzeFileContexts(categorizedErrors: CategorizedErrors): Promise<FileAnalysis[]> {\n    const uniqueFiles = Array.from(\n      new Set(\n        Object.values(categorizedErrors.byCategory)\n          .flat()\n          .map(issue => issue.file),\n      ),\n    );\n\n    return await this.domainDetector.analyzeFiles(uniqueFiles);\n  }\n\n  /**\n   * Generate resolution strategies\n   */\n  private async generateResolutionStrategies(\n    categorizedErrors: CategorizedErrors,\n    classifications: ErrorClassification[],\n    fileAnalyses: FileAnalysis[],\n    projectContext: Partial<ProjectContext>,\n  ): Promise<{ strategies: ResolutionStrategy[]; optimizedPlan: OptimizedResolutionPlan }> {\n    const contexts: StrategyGenerationContext[] = [];\n    const allIssues = Object.values(categorizedErrors.byCategory).flat();\n\n    // Create default project context\n    const fullProjectContext: ProjectContext = {\n      hasTests: true,\n      hasCICD: false,\n      teamSize: 'small',\n      riskTolerance: 'moderate',\n      timeConstraints: 'moderate',\n      ...projectContext,\n    };\n\n    for (const issue of allIssues) {\n      const classification = classifications.find(c => c.ruleId === issue.rule);\n      const fileAnalysis = fileAnalyses.find(f => f.filePath === issue.file);\n\n      if (classification && fileAnalysis) {\n        contexts.push({\n          errorClassification: classification,\n          domainContext: fileAnalysis.domainContext,\n          fileAnalysis,\n          projectContext: fullProjectContext,\n        });\n      }\n    }\n\n    return this.strategyGenerator.generateBatchStrategies(contexts);\n  }\n\n  /**\n   * Generate analysis summary\n   */\n  private generateSummary(\n    categorizedErrors: CategorizedErrors,\n    classifications: ErrorClassification[],\n    strategies: ResolutionStrategy[],\n  ): AnalysisSummary {\n    const criticalClassifications = classifications.filter(c => c.severity.level === 'critical');\n    const domainSpecificIssues = Object.values(categorizedErrors.byCategory)\n      .flat()\n      .filter(issue => issue.domainContext?.requiresSpecialHandling);\n\n    const estimatedTime = strategies.reduce((sum, s) => sum + s.estimatedTime, 0);\n\n    // Determine overall risk level\n    const highRiskCount = classifications.filter(c => c.riskProfile.overall === 'high').length;\n    const criticalRiskCount = classifications.filter(\n      c => c.riskProfile.overall === 'critical',\n    ).length;\n\n    let overallRiskLevel: AnalysisSummary['overallRiskLevel'] = 'low';\n    if (criticalRiskCount > 0) overallRiskLevel = 'critical';\n    else if (highRiskCount > 10) overallRiskLevel = 'high';\n    else if (highRiskCount > 0 || categorizedErrors.errors > 50) overallRiskLevel = 'medium';\n\n    return {\n      totalIssues: categorizedErrors.total,\n      errorCount: categorizedErrors.errors,\n      warningCount: categorizedErrors.warnings,\n      autoFixableCount: categorizedErrors.autoFixable.length,\n      domainSpecificCount: domainSpecificIssues.length,\n      criticalIssuesCount: criticalClassifications.length,\n      estimatedResolutionTime: estimatedTime,\n      overallRiskLevel,\n    };\n  }\n\n  /**\n   * Generate actionable recommendations\n   */\n  private generateRecommendations(\n    categorizedErrors: CategorizedErrors,\n    classifications: ErrorClassification[],\n    strategies: ResolutionStrategy[],\n    options: LintingAnalysisOptions,\n  ): AnalysisRecommendation[] {\n    const recommendations: AnalysisRecommendation[] = [];\n\n    // Immediate actions for critical issues\n    const criticalIssues = classifications.filter(c => c.severity.level === 'critical');\n    if (criticalIssues.length > 0) {\n      recommendations.push({\n        type: 'immediate',\n        priority: 'critical',\n        title: 'Address Critical Linting Issues',\n        description: `${criticalIssues.length} critical issues require immediate attention`,\n        rationale: 'Critical issues can block builds or cause runtime failures',\n        estimatedImpact: 'high',\n        actionItems: [\n          'Review each critical issue individually',\n          'Fix or suppress critical issues before proceeding',\n          'Validate fixes with comprehensive testing',\n        ],\n      });\n    }\n\n    // Quick wins for auto-fixable issues\n    if (categorizedErrors.autoFixable.length > 10) {\n      recommendations.push({\n        type: 'immediate',\n        priority: 'high',\n        title: 'Apply Automated Fixes',\n        description: `${categorizedErrors.autoFixable.length} issues can be automatically fixed`,\n        rationale: 'Automated fixes provide immediate improvement with minimal risk',\n        estimatedImpact: 'medium',\n        actionItems: [\n          'Run ESLint with --fix flag for safe auto-fixes',\n          'Validate changes with build and test suite',\n          'Review auto-fixed changes before committing',\n        ],\n      });\n    }\n\n    // Domain-specific handling\n    const domainIssues = Object.values(categorizedErrors.byCategory)\n      .flat()\n      .filter(issue => issue.domainContext?.requiresSpecialHandling);\n    if (domainIssues.length > 0) {\n      recommendations.push({\n        type: 'short-term',\n        priority: 'high',\n        title: 'Handle Domain-Specific Issues',\n        description: `${domainIssues.length} issues require domain expertise`,\n        rationale: 'Domain-specific code needs specialized knowledge for safe modification',\n        estimatedImpact: 'high',\n        actionItems: [\n          'Schedule review with domain experts',\n          'Create domain-specific linting rules',\n          'Document domain-specific patterns and exceptions',\n        ],\n      });\n    }\n\n    // TypeScript improvements\n    const tsIssues = categorizedErrors.byCategory['typescript'] || [];\n    if (tsIssues.length > 20) {\n      recommendations.push({\n        type: 'short-term',\n        priority: 'medium',\n        title: 'Improve TypeScript Usage',\n        description: `${tsIssues.length} TypeScript-related issues found`,\n        rationale: 'Better TypeScript usage improves code quality and maintainability',\n        estimatedImpact: 'medium',\n        actionItems: [\n          'Replace explicit any types with proper types',\n          'Fix unused variable warnings',\n          'Improve type definitions for better inference',\n        ],\n      });\n    }\n\n    // Long-term strategy\n    if (categorizedErrors.total > 100) {\n      recommendations.push({\n        type: 'long-term',\n        priority: 'medium',\n        title: 'Implement Systematic Linting Improvement',\n        description: 'Large number of issues suggests need for systematic approach',\n        rationale: 'Systematic improvement prevents issue accumulation',\n        estimatedImpact: 'high',\n        actionItems: [\n          'Implement pre-commit hooks for linting',\n          'Set up CI/CD linting validation',\n          'Create team linting standards and guidelines',\n          'Regular linting debt reduction sprints',\n        ],\n      });\n    }\n\n    // Strategic recommendations based on options\n    if (options.riskTolerance === 'conservative') {\n      recommendations.push({\n        type: 'strategic',\n        priority: 'low',\n        title: 'Enhance Code Quality Processes',\n        description: 'Conservative approach suggests focus on quality processes',\n        rationale: 'Strong processes prevent issues from being introduced',\n        estimatedImpact: 'high',\n        actionItems: [\n          'Implement stricter linting rules',\n          'Require code review for all changes',\n          'Set up automated quality gates',\n          'Regular code quality audits',\n        ],\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Calculate comprehensive metrics\n   */\n  private calculateMetrics(\n    startTime: number,\n    categorizedErrors: CategorizedErrors,\n    classifications: ErrorClassification[],\n    fileAnalyses: FileAnalysis[],\n    strategies: ResolutionStrategy[],\n  ): AnalysisMetrics {\n    const analysisTime = Date.now() - startTime;\n    const filesAnalyzed = fileAnalyses.length;\n\n    // Get unique rules triggered\n    const rulesTriggered = Array.from(\n      new Set(\n        Object.values(categorizedErrors.byCategory)\n          .flat()\n          .map(issue => issue.rule),\n      ),\n    );\n\n    // Calculate domain distribution\n    const domainDistribution: Record<string, number> = {};\n    for (const analysis of fileAnalyses) {\n      const domain = analysis.domainContext.type;\n      domainDistribution[domain] = (domainDistribution[domain] || 0) + 1;\n    }\n\n    // Calculate severity distribution\n    const severityDistribution: Record<string, number> = {};\n    for (const classification of classifications) {\n      const severity = classification.severity.level;\n      severityDistribution[severity] = (severityDistribution[severity] || 0) + 1;\n    }\n\n    // Calculate complexity distribution\n    const complexityDistribution: Record<string, number> = {};\n    for (const strategy of strategies) {\n      const complexity = strategy.complexity;\n      complexityDistribution[complexity] = (complexityDistribution[complexity] || 0) + 1;\n    }\n\n    // Calculate confidence scores\n    const confidenceScores = strategies.map(s => s.confidence);\n    const average =\n      confidenceScores.reduce((sum, score) => sum + score, 0) / confidenceScores.length || 0;\n    const sorted = [...confidenceScores].sort((a, b) => a - b);\n    const median = sorted[Math.floor(sorted.length / 2)] || 0;\n\n    const confidenceDistribution: Record<string, number> = {};\n    for (const score of confidenceScores) {\n      const bucket = score < 0.3 ? 'low' : score < 0.7 ? 'medium' : 'high';\n      confidenceDistribution[bucket] = (confidenceDistribution[bucket] || 0) + 1;\n    }\n\n    return {\n      analysisTime,\n      filesAnalyzed,\n      rulesTriggered,\n      domainDistribution,\n      severityDistribution,\n      complexityDistribution,\n      confidenceScores: {\n        average,\n        median,\n        distribution: confidenceDistribution,\n      },\n    };\n  }\n\n  /**\n   * Create empty optimization plan\n   */\n  private createEmptyPlan(): OptimizedResolutionPlan {\n    return {\n      totalStrategies: 0,\n      totalEstimatedTime: 0,\n      totalSteps: 0,\n      executionOrder: [],\n      parallelizableWork: 0,\n      riskDistribution: {},\n      recommendations: [],\n    };\n  }\n\n  /**\n   * Log analysis results\n   */\n  private logAnalysisResults(result: ComprehensiveAnalysisResult): void {\n    log.info('\\n🎯 COMPREHENSIVE LINTING ANALYSIS RESULTS');\n    log.info('==========================================');\n    log.info(`📊 Total Issues: ${result.summary.totalIssues}`);\n    log.info(`❌ Errors: ${result.summary.errorCount}`);\n    log.info(`⚠️  Warnings: ${result.summary.warningCount}`);\n    log.info(`🔧 Auto-fixable: ${result.summary.autoFixableCount}`);\n    log.info(`🏗️ Domain-specific: ${result.summary.domainSpecificCount}`);\n    log.info(`🚨 Critical: ${result.summary.criticalIssuesCount}`);\n    log.info(`⏱️ Estimated Resolution Time: ${result.summary.estimatedResolutionTime} minutes`);\n    log.info(`🎚️ Overall Risk Level: ${result.summary.overallRiskLevel.toUpperCase()}`);\n\n    log.info('\\n📋 TOP RECOMMENDATIONS:');\n    result.recommendations\n      .filter(r => r.priority === 'critical' || r.priority === 'high')\n      .slice(0, 3)\n      .forEach((rec, index) => {\n        log.info(`${index + 1}. ${rec.title} (${rec.priority.toUpperCase()})`);\n        log.info(`   ${rec.description}`);\n      });\n\n    log.info('\\n📈 ANALYSIS METRICS:');\n    log.info(`⏱️ Analysis Time: ${result.metrics.analysisTime}ms`);\n    log.info(`📁 Files Analyzed: ${result.metrics.filesAnalyzed}`);\n    log.info(`📏 Rules Triggered: ${result.metrics.rulesTriggered.length}`);\n    log.info(\n      `🎯 Average Confidence: ${Math.round(result.metrics.confidenceScores.average * 100)}%`,\n    );\n\n    log.info('==========================================\\n');\n  }\n}\n"],"version":3}