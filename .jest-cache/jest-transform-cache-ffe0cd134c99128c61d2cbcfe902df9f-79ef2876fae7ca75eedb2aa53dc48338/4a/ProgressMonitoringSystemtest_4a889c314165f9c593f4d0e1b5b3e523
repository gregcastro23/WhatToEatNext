6c55285cb0b223e6ee03180f74512027
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('../AnalysisTools');
jest.mock('child_process');
jest.mock('fs');
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const AnalysisTools_1 = require("../AnalysisTools");
const ProgressMonitoringSystem_1 = require("../ProgressMonitoringSystem");
const mockAnalysisTools = AnalysisTools_1.AnalysisTools;
const mockExecSync = child_process_1.execSync;
const mockFs = fs;
describe('ProgressMonitoringSystem', () => {
    let monitoringSystem;
    let mockAnalysisToolsInstance;
    beforeEach(() => {
        jest.clearAllMocks();
        // Mock file system operations
        mockFs.existsSync.mockReturnValue(false);
        mockFs.readFileSync.mockReturnValue('[]');
        mockFs.writeFileSync.mockImplementation(() => { });
        mockFs.mkdirSync.mockImplementation(() => '');
        // Mock AnalysisTools
        mockAnalysisToolsInstance = {
            generateComprehensiveReport: jest.fn(),
            analyzeDomainDistribution: jest.fn(),
            generateClassificationAccuracyReport: jest.fn(),
            generateSuccessRateAnalysis: jest.fn(),
            generateManualReviewRecommendations: jest.fn()
        };
        mockAnalysisTools.mockImplementation(() => mockAnalysisToolsInstance);
        // Mock successful TypeScript compilation by default
        mockExecSync.mockReturnValue('');
        monitoringSystem = new ProgressMonitoringSystem_1.ProgressMonitoringSystem();
    });
    afterEach(() => {
        monitoringSystem.stopMonitoring();
    });
    describe('constructor', () => {
        it('should initialize with default alert thresholds', () => {
            const thresholds = monitoringSystem.getAlertThresholds();
            expect(thresholds.successRateThreshold).toBe(70);
            expect(thresholds.buildFailureThreshold).toBe(3);
            expect(thresholds.classificationAccuracyThreshold).toBe(80);
            expect(thresholds.safetyEventThreshold).toBe(5);
            expect(thresholds.progressStallThreshold).toBe(24);
        });
        it('should initialize with custom alert thresholds', () => {
            const customThresholds = {
                successRateThreshold: 80,
                buildFailureThreshold: 2
            };
            const customMonitoringSystem = new ProgressMonitoringSystem_1.ProgressMonitoringSystem(customThresholds);
            const thresholds = customMonitoringSystem.getAlertThresholds();
            expect(thresholds.successRateThreshold).toBe(80);
            expect(thresholds.buildFailureThreshold).toBe(2);
            expect(thresholds.classificationAccuracyThreshold).toBe(80); // Default
        });
    });
    describe('monitoring lifecycle', () => {
        it('should start monitoring with specified interval', (done) => {
            const intervalMinutes = 1;
            monitoringSystem.on('monitoring_started', (data) => {
                expect(data.intervalMinutes).toBe(intervalMinutes);
                done();
            });
            monitoringSystem.startMonitoring(intervalMinutes);
            expect(monitoringSystem['isMonitoring']).toBe(true);
        });
        it('should not start monitoring if already running', () => {
            monitoringSystem.startMonitoring();
            const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            monitoringSystem.startMonitoring();
            expect(consoleSpy).toHaveBeenCalledWith('Progress monitoring is already running');
            consoleSpy.mockRestore();
        });
        it('should stop monitoring', (done) => {
            monitoringSystem.on('monitoring_stopped', () => {
                expect(monitoringSystem['isMonitoring']).toBe(false);
                done();
            });
            monitoringSystem.startMonitoring();
            monitoringSystem.stopMonitoring();
        });
        it('should not stop monitoring if not running', () => {
            const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            monitoringSystem.stopMonitoring();
            expect(consoleSpy).toHaveBeenCalledWith('Progress monitoring is not running');
            consoleSpy.mockRestore();
        });
    });
    describe('progress metrics', () => {
        beforeEach(() => {
            // Mock comprehensive report
            mockAnalysisToolsInstance.generateComprehensiveReport.mockResolvedValue({
                id: 'test-report',
                timestamp: new Date(),
                domainDistribution: {
                    totalAnyTypes: 1000,
                    intentionalVsUnintentional: {
                        intentional: { count: 300, percentage: 30 },
                        unintentional: { count: 700, percentage: 70 }
                    },
                    byDomain: [],
                    byCategory: [],
                    analysisDate: new Date()
                },
                accuracyReport: {
                    overallAccuracy: 85,
                    averageConfidence: 0.8,
                    sampleSize: 100,
                    categoryAccuracy: [],
                    confidenceDistribution: [],
                    reportDate: new Date()
                },
                successRateAnalysis: {
                    currentSuccessRate: 75,
                    targetSuccessRate: 85,
                    improvementNeeded: 10,
                    categorySuccessRates: [],
                    trendingData: {
                        date: new Date(),
                        successRate: 75,
                        totalAnyTypes: 1000,
                        unintentionalCount: 700,
                        classificationAccuracy: 85
                    },
                    projectedCompletion: new Date(),
                    recommendations: [],
                    analysisDate: new Date()
                },
                manualReviewRecommendations: [],
                summary: {
                    totalAnyTypes: 1000,
                    unintentionalCount: 700,
                    classificationAccuracy: 85,
                    currentSuccessRate: 75,
                    manualReviewCases: 50,
                    topDomain: 'utility',
                    topCategory: 'function_param'
                }
            });
        });
        it('should get current progress metrics', async () => {
            const progress = await monitoringSystem.getProgressMetrics();
            expect(progress.totalAnyTypes).toBe(1000);
            expect(progress.classifiedIntentional).toBe(300);
            expect(progress.classifiedUnintentional).toBe(700);
            expect(progress.averageSuccessRate).toBe(75);
            expect(progress.targetReductionPercentage).toBe(20);
            expect(progress.buildStable).toBe(true); // Default mock
            expect(progress.lastUpdate).toBeInstanceOf(Date);
        });
        it('should handle build failures in progress metrics', async () => {
            // Mock TypeScript compilation failure
            mockExecSync.mockImplementation(() => {
                throw new Error('Compilation failed');
            });
            const progress = await monitoringSystem.getProgressMetrics();
            expect(progress.buildStable).toBe(false);
        });
    });
    describe('build stability monitoring', () => {
        it('should detect stable builds', async () => {
            mockExecSync.mockReturnValue(''); // Successful compilation
            await monitoringSystem.monitorBuildStability();
            const history = monitoringSystem.getBuildStabilityHistory(1);
            expect(history[0].isStable).toBe(true);
            expect(history[0].errorCount).toBe(0);
            expect(history[0].buildTime).toBeGreaterThanOrEqual(0);
        });
        it('should detect build failures', async () => {
            const errorOutput = 'error TS2304: Cannot find name\nerror TS2345: Argument type';
            mockExecSync.mockImplementation(() => {
                const error = new Error('Compilation failed');
                error.stdout = errorOutput;
                throw error;
            });
            await monitoringSystem.monitorBuildStability();
            const history = monitoringSystem.getBuildStabilityHistory(1);
            expect(history[0].isStable).toBe(false);
            expect(history[0].errorCount).toBe(2); // Two TS errors
            expect(history[0].errorMessage).toContain('error TS2304');
        });
        it('should emit alert for build failures', (done) => {
            mockExecSync.mockImplementation(() => {
                throw new Error('Build failed');
            });
            monitoringSystem.on('alert', (alert) => {
                if (alert.type === 'build_failure') {
                    expect(alert.severity).toBe('high');
                    expect(alert.message).toContain('Build failure detected');
                    done();
                }
            });
            monitoringSystem.monitorBuildStability();
        });
        it('should emit alert for consecutive build failures', async () => {
            mockExecSync.mockImplementation(() => {
                throw new Error('Build failed');
            });
            const alertPromise = new Promise((resolve) => {
                monitoringSystem.on('alert', (alert) => {
                    if (alert.type === 'consecutive_build_failures') {
                        resolve(alert);
                    }
                });
            });
            // Trigger multiple build failures
            for (let i = 0; i < 3; i++) {
                await monitoringSystem.monitorBuildStability();
            }
            const alert = await alertPromise;
            expect(alert.severity).toBe('critical');
            expect(alert.message).toContain('consecutive build failures');
        });
    });
    describe('alert system', () => {
        beforeEach(() => {
            // Mock analysis report for alert checking
            mockAnalysisToolsInstance.generateComprehensiveReport.mockResolvedValue({
                domainDistribution: {
                    totalAnyTypes: 1000,
                    intentionalVsUnintentional: {
                        intentional: { count: 300, percentage: 30 },
                        unintentional: { count: 700, percentage: 70 }
                    }
                },
                summary: { currentSuccessRate: 60 },
                accuracyReport: { overallAccuracy: 70 } // Below threshold
            });
        });
        it('should emit low success rate alert', async () => {
            const alertPromise = new Promise((resolve) => {
                monitoringSystem.on('alert', (alert) => {
                    if (alert.type === 'low_success_rate') {
                        resolve(alert);
                    }
                });
            });
            await monitoringSystem.checkAlertConditions();
            const alert = await alertPromise;
            expect(alert.severity).toBe('medium');
            expect(alert.message).toContain('Success rate');
            expect(alert.data.currentRate).toBe(60);
            expect(alert.data.threshold).toBe(70);
        });
        it('should not emit duplicate alerts within one hour', async () => {
            let alertCount = 0;
            monitoringSystem.on('alert', (alert) => {
                if (alert.type === 'low_success_rate') {
                    alertCount++;
                }
            });
            // Check conditions twice
            await monitoringSystem.checkAlertConditions();
            await monitoringSystem.checkAlertConditions();
            expect(alertCount).toBe(1); // Should only emit once
        });
        it('should handle safety protocol activation', () => {
            const safetyEvent = {
                type: 'corruption_detected',
                severity: 'critical',
                description: 'File corruption detected',
                action: 'rollback_initiated',
                timestamp: new Date(),
                affectedFiles: ['test.ts']
            };
            const alertPromise = new Promise((resolve) => {
                monitoringSystem.on('alert', (alert) => {
                    if (alert.type === 'safety_protocol_activation') {
                        resolve(alert);
                    }
                });
            });
            const criticalEventPromise = new Promise((resolve) => {
                monitoringSystem.on('critical_safety_event', resolve);
            });
            monitoringSystem.handleSafetyProtocolActivation(safetyEvent);
            return Promise.all([alertPromise, criticalEventPromise]).then(([alert]) => {
                expect(alert.severity).toBe('critical');
                expect(alert.message).toContain('Safety protocol activated');
                expect(alert.data.safetyEvent).toEqual(safetyEvent);
            });
        });
        it('should update alert thresholds', () => {
            const newThresholds = {
                successRateThreshold: 80,
                buildFailureThreshold: 2
            };
            const updatePromise = new Promise((resolve) => {
                monitoringSystem.on('alert_thresholds_updated', resolve);
            });
            monitoringSystem.updateAlertThresholds(newThresholds);
            const thresholds = monitoringSystem.getAlertThresholds();
            expect(thresholds.successRateThreshold).toBe(80);
            expect(thresholds.buildFailureThreshold).toBe(2);
            return updatePromise;
        });
    });
    describe('dashboard data', () => {
        beforeEach(() => {
            mockAnalysisToolsInstance.generateComprehensiveReport.mockResolvedValue({
                id: 'test-report',
                timestamp: new Date(),
                domainDistribution: {
                    totalAnyTypes: 1000,
                    intentionalVsUnintentional: {
                        intentional: { count: 300, percentage: 30 },
                        unintentional: { count: 700, percentage: 70 }
                    }
                },
                accuracyReport: { overallAccuracy: 85 },
                summary: { currentSuccessRate: 75 }
            });
        });
        it('should update dashboard data', async () => {
            const updatePromise = new Promise((resolve) => {
                monitoringSystem.on('dashboard_updated', resolve);
            });
            await monitoringSystem['updateDashboard']();
            const dashboardData = await updatePromise;
            expect(dashboardData.lastUpdate).toBeInstanceOf(Date);
            expect(dashboardData.analysisReport).toBeDefined();
            expect(dashboardData.progressMetrics).toBeDefined();
            expect(dashboardData.buildStability).toBeDefined();
            expect(dashboardData.alertSummary).toBeDefined();
            expect(dashboardData.trendingData).toBeInstanceOf(Array);
            expect(dashboardData.systemHealth).toBeDefined();
        });
        it('should get current dashboard data', async () => {
            await monitoringSystem['updateDashboard']();
            const dashboardData = monitoringSystem.getDashboardData();
            expect(dashboardData).toBeDefined();
            expect(dashboardData.lastUpdate).toBeInstanceOf(Date);
        });
        it('should calculate system health', async () => {
            await monitoringSystem['updateDashboard']();
            const dashboardData = monitoringSystem.getDashboardData();
            const systemHealth = dashboardData.systemHealth;
            expect(systemHealth.score).toBeGreaterThanOrEqual(0);
            expect(systemHealth.score).toBeLessThanOrEqual(100);
            expect(['healthy', 'warning', 'critical']).toContain(systemHealth.status);
            expect(systemHealth.lastCheck).toBeInstanceOf(Date);
            expect(systemHealth.issues).toBeInstanceOf(Array);
        });
    });
    describe('alert history management', () => {
        it('should maintain alert history', async () => {
            // Trigger an alert
            mockAnalysisToolsInstance.generateComprehensiveReport.mockResolvedValue({
                domainDistribution: {
                    totalAnyTypes: 1000,
                    intentionalVsUnintentional: {
                        intentional: { count: 300, percentage: 30 },
                        unintentional: { count: 700, percentage: 70 }
                    }
                },
                summary: { currentSuccessRate: 60 }
            });
            await monitoringSystem.checkAlertConditions();
            const history = monitoringSystem.getAlertHistory();
            expect(history.length).toBeGreaterThan(0);
            expect(history[0].type).toBe('low_success_rate');
        });
        it('should limit alert history', () => {
            const history = monitoringSystem.getAlertHistory(5);
            expect(history.length).toBeLessThanOrEqual(5);
        });
        it('should clear alert history', () => {
            const clearPromise = new Promise((resolve) => {
                monitoringSystem.on('alert_history_cleared', resolve);
            });
            monitoringSystem.clearAlertHistory();
            const history = monitoringSystem.getAlertHistory();
            expect(history.length).toBe(0);
            return clearPromise;
        });
    });
    describe('error handling', () => {
        it('should handle dashboard update errors', async () => {
            mockAnalysisToolsInstance.generateComprehensiveReport.mockRejectedValue(new Error('Analysis failed'));
            await expect(monitoringSystem['updateDashboard']()).rejects.toThrow('Analysis failed');
        });
        it('should handle monitoring errors gracefully', (done) => {
            mockAnalysisToolsInstance.generateComprehensiveReport.mockRejectedValue(new Error('Monitoring error'));
            monitoringSystem.on('alert', (alert) => {
                if (alert.type === 'system_error') {
                    expect(alert.severity).toBe('high');
                    expect(alert.message).toContain('Monitoring system error');
                    done();
                }
            });
            // Start monitoring with very short interval for testing
            monitoringSystem.startMonitoring(0.01); // 0.6 seconds
        });
        it('should handle file system errors gracefully', () => {
            mockFs.writeFileSync.mockImplementation(() => {
                throw new Error('File system error');
            });
            // Should not throw error
            expect(() => monitoringSystem['saveAlertHistory']()).not.toThrow();
        });
    });
    describe('integration', () => {
        it('should integrate with analysis tools', async () => {
            // Mock the comprehensive report properly
            mockAnalysisToolsInstance.generateComprehensiveReport.mockResolvedValue({
                domainDistribution: {
                    totalAnyTypes: 1000,
                    intentionalVsUnintentional: {
                        intentional: { count: 300, percentage: 30 },
                        unintentional: { count: 700, percentage: 70 }
                    }
                },
                summary: { currentSuccessRate: 75, totalAnyTypes: 1000 }
            });
            const progress = await monitoringSystem.getProgressMetrics();
            expect(mockAnalysisToolsInstance.generateComprehensiveReport).toHaveBeenCalled();
            expect(progress).toBeDefined();
        });
        it('should persist data across restarts', () => {
            // Mock existing history file
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readFileSync.mockReturnValue(JSON.stringify([
                {
                    type: 'low_success_rate',
                    severity: 'medium',
                    message: 'Test alert',
                    timestamp: new Date().toISOString()
                }
            ]));
            const newMonitoringSystem = new ProgressMonitoringSystem_1.ProgressMonitoringSystem();
            const history = newMonitoringSystem.getAlertHistory();
            expect(history.length).toBe(1);
            expect(history[0].type).toBe('low_success_rate');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,