{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/__tests__/linting/LintingValidationDashboard.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/__tests__/linting/LintingValidationDashboard.test.ts"],"sourcesContent":["/**\n * Comprehensive tests for the Linting Validation Dashboard\n *\n * Tests the enhanced validation and monitoring system with\n * domain-specific tracking and performance monitoring.\n */\n\nimport { execSync } from 'child_process';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\n\nimport { LintingAlertingSystem } from '../../services/linting/LintingAlertingSystem';\nimport { LintingMetrics, LintingValidationDashboard } from '../../services/linting/LintingValidationDashboard';\n\n// Mock child_process\njest.mock('child_process');\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\n\n// Mock fs\njest.mock('fs');\nconst mockWriteFileSync = writeFileSync as jest.MockedFunction<typeof writeFileSync>;\nconst mockReadFileSync = readFileSync as jest.MockedFunction<typeof readFileSync>;\nconst mockExistsSync = existsSync as jest.MockedFunction<typeof existsSync>;\n\ndescribe('LintingValidationDashboard', () => {\n  let dashboard: LintingValidationDashboard;\n  let alerting: LintingAlertingSystem;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Mock directory existence\n    mockExistsSync.mockImplementation((path: string) => {\n      return path.includes('.kiro/metrics') || path.includes('eslint.config.cjs');\n    });\n\n    // Mock file operations\n    mockWriteFileSync.mockImplementation(() => {});\n    mockReadFileSync.mockImplementation((path: string) => {\n      if (path.includes('config.json')) {\n        return JSON.stringify({\n          thresholds: [],\n          alertingEnabled: true,\n          regressionDetectionEnabled: true,\n        });\n      }\n      if (path.includes('history.json')) {\n        return JSON.stringify([]);\n      }\n      return '{}';\n    });\n\n    dashboard = new LintingValidationDashboard();\n    alerting = new LintingAlertingSystem();\n  });\n\n  describe('Comprehensive Validation', () => {\n    test('should run comprehensive validation successfully', async () => {\n      // Mock successful ESLint output\n      const mockLintResults = [\n        {\n          filePath: '/src/components/TestComponent.tsx',\n          messages: [\n            {\n              ruleId: '@typescript-eslint/no-explicit-any',\n              severity: 2,\n              message: 'Unexpected any',\n              line: 10,\n              column: 5,\n            },\n            {\n              ruleId: 'import/order',\n              severity: 1,\n              message: 'Import order incorrect',\n              line: 1,\n              column: 1,\n            },\n          ],\n        },\n        {\n          filePath: '/src/calculations/astrology.ts',\n          messages: [\n            {\n              ruleId: '@typescript-eslint/no-unused-vars',\n              severity: 1,\n              message: 'Unused variable',\n              line: 5,\n              column: 10,\n            },\n          ],\n        },\n      ];\n\n      mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));\n\n      const result = await dashboard.runComprehensiveValidation();\n\n      expect(result).toBeDefined();\n      expect(result.metrics).toBeDefined();\n      expect(result.metrics.totalIssues).toBe(3);\n      expect(result.metrics.errors).toBe(1);\n      expect(result.metrics.warnings).toBe(2);\n      expect(result.metrics.explicitAnyErrors).toBe(1);\n      expect(result.metrics.importOrderIssues).toBe(1);\n      expect(result.metrics.unusedVariables).toBe(1);\n    });\n\n    test('should handle ESLint execution errors gracefully', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('ESLint execution failed');\n      });\n\n      const result = await dashboard.runComprehensiveValidation();\n      expect(result).toBeDefined();\n      expect(result.metrics.totalIssues).toBe(-1); // Error state\n      expect(result.metrics.qualityScore).toBe(0);\n      expect(result.passed).toBe(true); // No critical alerts in error state\n    });\n\n    test('should categorize domain-specific issues correctly', async () => {\n      const mockLintResults = [\n        {\n          filePath: '/src/calculations/culinary/astrology.ts',\n          messages: [\n            {\n              ruleId: '@typescript-eslint/no-explicit-any',\n              severity: 2,\n              message: 'Unexpected any',\n              line: 10,\n              column: 5,\n            },\n          ],\n        },\n        {\n          filePath: '/src/services/campaign/CampaignController.ts',\n          messages: [\n            {\n              ruleId: 'no-console',\n              severity: 1,\n              message: 'Console statement',\n              line: 15,\n              column: 8,\n            },\n          ],\n        },\n        {\n          filePath: '/src/__tests__/validation/test.spec.ts',\n          messages: [\n            {\n              ruleId: '@typescript-eslint/no-unused-vars',\n              severity: 1,\n              message: 'Unused variable',\n              line: 5,\n              column: 10,\n            },\n          ],\n        },\n      ];\n\n      mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));\n\n      const result = await dashboard.runComprehensiveValidation();\n\n      expect(result.metrics.domainSpecificIssues.astrologicalCalculations).toBe(1);\n      expect(result.metrics.domainSpecificIssues.campaignSystem).toBe(1);\n      expect(result.metrics.domainSpecificIssues.testFiles).toBe(1);\n    });\n  });\n\n  describe('Quality Score Calculation', () => {\n    test('should calculate quality score correctly for good metrics', async () => {\n      const mockLintResults = [\n        {\n          filePath: '/src/components/TestComponent.tsx',\n          messages: [\n            {\n              ruleId: 'import/order',\n              severity: 1,\n              message: 'Import order incorrect',\n              line: 1,\n              column: 1,\n            },\n          ],\n        },\n      ];\n\n      mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));\n\n      const result = await dashboard.runComprehensiveValidation();\n      expect(result.metrics.qualityScore).toBeGreaterThan(90); // Should be high with only minor issues\n    });\n\n    test('should penalize quality score for parser errors', async () => {\n      const mockLintResults = [\n        {\n          filePath: '/src/utils/recommendationEngine.ts',\n          messages: [\n            {\n              ruleId: 'parseForESLint',\n              severity: 2,\n              fatal: true,\n              message: 'Parser error',\n              line: 68,\n              column: 1,\n            },\n          ],\n        },\n      ];\n\n      mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));\n\n      const result = await dashboard.runComprehensiveValidation();\n      expect(result.metrics.parserErrors).toBe(1);\n      expect(result.metrics.qualityScore).toBeLessThan(60); // Should be heavily penalized\n    });\n\n    test('should penalize quality score for explicit any errors', async () => {\n      const mockLintResults = Array.from({ length: 150 }, (_, i) => ({\n        filePath: `/src/components/Component${i}.tsx`,\n        messages: [\n          {\n            ruleId: '@typescript-eslint/no-explicit-any',\n            severity: 2,\n            message: 'Unexpected any',\n            line: 10,\n            column: 5,\n          },\n        ],\n      }));\n\n      mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));\n\n      const result = await dashboard.runComprehensiveValidation();\n      expect(result.metrics.explicitAnyErrors).toBe(150);\n      expect(result.metrics.qualityScore).toBeLessThan(80); // Should be penalized for many explicit any\n    });\n  });\n\n  describe('Alert Generation', () => {\n    test('should generate critical alert for parser errors', async () => {\n      const mockLintResults = [\n        {\n          filePath: '/src/utils/recommendationEngine.ts',\n          messages: [\n            {\n              ruleId: 'parseForESLint',\n              severity: 2,\n              fatal: true,\n              message: 'Parser error',\n              line: 68,\n              column: 1,\n            },\n          ],\n        },\n      ];\n\n      mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));\n\n      const result = await dashboard.runComprehensiveValidation();\n      const criticalAlerts = result.alerts.filter(alert => alert.severity === 'critical');\n      expect(criticalAlerts.length).toBeGreaterThan(0);\n      expect(criticalAlerts[0].metric).toBe('parserErrors');\n    });\n\n    test('should generate error alert for excessive explicit any', async () => {\n      const mockLintResults = Array.from({ length: 150 }, (_, i) => ({\n        filePath: `/src/components/Component${i}.tsx`,\n        messages: [\n          {\n            ruleId: '@typescript-eslint/no-explicit-any',\n            severity: 2,\n            message: 'Unexpected any',\n            line: 10,\n            column: 5,\n          },\n        ],\n      }));\n\n      mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));\n\n      const result = await dashboard.runComprehensiveValidation();\n      const errorAlerts = result.alerts.filter(alert => alert.severity === 'error');\n      expect(errorAlerts.some(alert => alert.metric === 'explicitAnyErrors')).toBe(true);\n    });\n\n    test('should generate warning alert for performance issues', async () => {\n      // Mock slow linting performance\n      mockExecSync.mockImplementation(() => {\n        // Simulate slow execution\n        const start = Date.now();\n        while (Date.now() - start < 100) {\n          // Busy wait to simulate slow execution\n        }\n        return JSON.stringify([]);\n      });\n\n      const result = await dashboard.runComprehensiveValidation();\n      // Performance alerts are based on actual execution time\n      // This test verifies the alert generation logic exists\n      expect(result.alerts).toBeDefined();\n    });\n  });\n\n  describe('Regression Analysis', () => {\n    test('should detect regression when issues increase', async () => {\n      // Mock historical data with fewer issues\n      const historicalMetrics = [\n        {\n          timestamp: new Date(Date.now() - 86400000), // 1 day ago,\n          totalIssues: 100,\n          qualityScore: 85,\n          parserErrors: 0,\n          explicitAnyErrors: 50,\n        },\n      ];\n\n      mockReadFileSync.mockImplementation((path: string) => {\n        if (path.includes('history.json')) {\n          return JSON.stringify(historicalMetrics);\n        }\n        return JSON.stringify({ thresholds: [], alertingEnabled: true });\n      });\n\n      // Mock current results with more issues\n      const mockLintResults = Array.from({ length: 200 }, (_, i) => ({\n        filePath: `/src/components/Component${i}.tsx`,\n        messages: [\n          {\n            ruleId: '@typescript-eslint/no-explicit-any',\n            severity: 2,\n            message: 'Unexpected any',\n            line: 10,\n            column: 5,\n          },\n        ],\n      }));\n\n      mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));\n\n      const result = await dashboard.runComprehensiveValidation();\n\n      expect(result.regressionAnalysis.detected).toBe(true);\n      expect(result.regressionAnalysis.affectedMetrics).toContain('totalIssues');\n      expect(result.regressionAnalysis.severity).toBeDefined();\n    });\n\n    test('should not detect regression with insufficient historical data', async () => {\n      mockReadFileSync.mockImplementation((path: string) => {\n        if (path.includes('history.json')) {\n          return JSON.stringify([]); // No historical data\n        }\n        return JSON.stringify({ thresholds: [], alertingEnabled: true });\n      });\n\n      mockExecSync.mockReturnValue(JSON.stringify([]));\n\n      const result = await dashboard.runComprehensiveValidation();\n      expect(result.regressionAnalysis.detected).toBe(false);\n      expect(result.regressionAnalysis.recommendations).toContain(\n        'Insufficient historical data for regression analysis',\n      );\n    });\n  });\n\n  describe('Recommendations Generation', () => {\n    test('should generate parser error recommendations', async () => {\n      const mockLintResults = [\n        {\n          filePath: '/src/utils/recommendationEngine.ts',\n          messages: [\n            {\n              ruleId: 'parseForESLint',\n              severity: 2,\n              fatal: true,\n              message: 'Parser error',\n              line: 68,\n              column: 1,\n            },\n          ],\n        },\n      ];\n\n      mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));\n\n      const result = await dashboard.runComprehensiveValidation();\n      expect(result.recommendations.some(rec => rec.includes('URGENT: Fix parser errors immediately'))).toBe(true);\n      expect(result.recommendations.some(rec => rec.includes('recommendationEngine.ts'))).toBe(true);\n    });\n\n    test('should generate explicit any recommendations', async () => {\n      const mockLintResults = Array.from({ length: 150 }, (_, i) => ({\n        filePath: `/src/components/Component${i}.tsx`,\n        messages: [\n          {\n            ruleId: '@typescript-eslint/no-explicit-any',\n            severity: 2,\n            message: 'Unexpected any',\n            line: 10,\n            column: 5,\n          },\n        ],\n      }));\n\n      mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));\n\n      const result = await dashboard.runComprehensiveValidation();\n      expect(result.recommendations.some(rec => rec.includes('HIGH PRIORITY: Reduce explicit any types'))).toBe(true);\n      expect(result.recommendations.some(rec => rec.includes('systematic type inference'))).toBe(true);\n    });\n\n    test('should generate import organization recommendations', async () => {\n      const mockLintResults = Array.from({ length: 60 }, (_, i) => ({\n        filePath: `/src/components/Component${i}.tsx`,\n        messages: [\n          {\n            ruleId: 'import/order',\n            severity: 1,\n            message: 'Import order incorrect',\n            line: 1,\n            column: 1,\n          },\n        ],\n      }));\n\n      mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));\n\n      const result = await dashboard.runComprehensiveValidation();\n      expect(result.recommendations.some(rec => rec.includes('READY: Deploy enhanced import organization'))).toBe(true);\n      expect(result.recommendations.some(rec => rec.includes('alphabetical sorting'))).toBe(true);\n    });\n\n    test('should generate domain-specific recommendations', async () => {\n      const mockLintResults = Array.from({ length: 25 }, (_, i) => ({\n        filePath: `/src/calculations/astrology/calculation${i}.ts`,\n        messages: [\n          {\n            ruleId: '@typescript-eslint/no-explicit-any',\n            severity: 2,\n            message: 'Unexpected any',\n            line: 10,\n            column: 5,\n          },\n        ],\n      }));\n\n      mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));\n\n      const result = await dashboard.runComprehensiveValidation();\n      expect(result.recommendations.some(rec => rec.includes('DOMAIN: Review astrological calculation files'))).toBe(\n        true,\n      );\n      expect(result.recommendations.some(rec => rec.includes('lint:domain-astro'))).toBe(true);\n    });\n  });\n\n  describe('Performance Metrics', () => {\n    test('should collect performance metrics', async () => {\n      mockExecSync.mockReturnValue(JSON.stringify([]));\n\n      const result = await dashboard.runComprehensiveValidation();\n      expect(result.metrics.performanceMetrics).toBeDefined();\n      expect(result.metrics.performanceMetrics.lintingDuration).toBeGreaterThan(0);\n      expect(result.metrics.performanceMetrics.memoryUsage).toBeGreaterThan(0);\n      expect(result.metrics.performanceMetrics.filesProcessed).toBeGreaterThanOrEqual(0);\n      expect(result.metrics.performanceMetrics.cacheHitRate).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should generate performance recommendations when slow', async () => {\n      // Mock slow execution\n      mockExecSync.mockImplementation(() => {\n        const start = Date.now();\n        while (Date.now() - start < 100) {\n          // Simulate slow execution\n        }\n        return JSON.stringify([]);\n      });\n\n      const result = await dashboard.runComprehensiveValidation();\n      // Check if performance recommendations are generated\n      // (This depends on actual execution time, so we check the structure);\n      expect(result.recommendations).toBeDefined();\n      expect(Array.isArray(result.recommendations)).toBe(true);\n    });\n  });\n\n  describe('Dashboard Report Generation', () => {\n    test('should generate comprehensive dashboard report', async () => {\n      mockExecSync.mockReturnValue(JSON.stringify([]));\n\n      const _result = await dashboard.runComprehensiveValidation();\n      // Verify that writeFileSync was called to generate the report\n      expect(mockWriteFileSync).toHaveBeenCalledWith(\n        expect.stringContaining('linting-dashboard-report.md'),\n        expect.stringContaining('# Linting Excellence Dashboard Report'),\n        'utf8',\n      );\n    });\n\n    test('should include all required sections in report', async () => {\n      mockExecSync.mockReturnValue(JSON.stringify([]));\n\n      await dashboard.runComprehensiveValidation();\n\n      // Get the report content from the mock call\n      const reportCall = (mockWriteFileSync as jest.Mock).mock.calls.find(call =>\n        call[0].includes('linting-validation-report.md'),\n      );\n\n      expect(reportCall).toBeDefined();\n      const reportContent = reportCall[1];\n\n      expect(reportContent).toContain('📊 Overall Status');\n      expect(reportContent).toContain('🔍 DETAILED METRICS');\n      expect(reportContent).toContain('🌟 DOMAIN-SPECIFIC METRICS');\n      expect(reportContent).toContain('⚡ PERFORMANCE METRICS');\n      expect(reportContent).toContain('💡 RECOMMENDATIONS');\n      expect(reportContent).toContain('🎯 Next Actions');\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle JSON parsing errors gracefully', async () => {\n      mockExecSync.mockReturnValue('invalid json');\n\n      const result = await dashboard.runComprehensiveValidation();\n      expect(result.metrics.totalIssues).toBe(-1); // Error state\n      expect(result.passed).toBe(true); // No critical alerts in error state\n    });\n\n    test('should handle file system errors gracefully', async () => {\n      mockWriteFileSync.mockImplementation(() => {\n        throw new Error('File system error');\n      });\n\n      mockExecSync.mockReturnValue(JSON.stringify([]));\n\n      // Should not throw, but handle the error gracefully\n      await expect(dashboard.runComprehensiveValidation()).resolves.toBeDefined();\n    });\n\n    test('should handle missing configuration files', async () => {\n      mockExistsSync.mockReturnValue(false);\n      mockReadFileSync.mockImplementation(() => {\n        throw new Error('File not found');\n      });\n\n      // Should create dashboard with default configuration\n      const newDashboard = new LintingValidationDashboard();\n      expect(newDashboard).toBeDefined();\n    });\n  });\n\n  describe('Integration with Alerting System', () => {\n    test('should process alerts through alerting system', async () => {\n      const mockLintResults = [\n        {\n          filePath: '/src/utils/recommendationEngine.ts',\n          messages: [\n            {\n              ruleId: 'parseForESLint',\n              severity: 2,\n              fatal: true,\n              message: 'Parser error',\n              line: 68,\n              column: 1,\n            },\n          ],\n        },\n      ];\n\n      mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));\n\n      const result = await dashboard.runComprehensiveValidation();\n      // Verify alerts were generated\n      expect(result.alerts.length).toBeGreaterThan(0);\n\n      // Test alerting system processing\n      const processAlertsSpy = jest.spyOn(alerting, 'processAlerts');\n      alerting.processAlerts(result.alerts, result.metrics);\n\n      expect(processAlertsSpy).toHaveBeenCalledWith(result.alerts, result.metrics);\n    });\n  });\n});\n\ndescribe('LintingAlertingSystem', () => {\n  let alerting: LintingAlertingSystem;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    mockExistsSync.mockImplementation((path: string) => {\n      return path.includes('.kiro/metrics');\n    });\n\n    mockReadFileSync.mockImplementation(() => {\n      return JSON.stringify({\n        enabled: true,\n        channels: [{ type: 'console', config: {}, severityFilter: ['error', 'critical'] }],\n        regressionDetection: { enabled: true, sensitivity: 'medium', cooldownPeriod: 15 },\n        performanceMonitoring: { enabled: true, thresholds: [] },\n        autoResponse: { enabled: true, actions: [] },\n      });\n    });\n\n    alerting = new LintingAlertingSystem();\n  });\n\n  describe('Alert Processing', () => {\n    test('should process alerts when enabled', async () => {\n      const mockAlerts = [\n        {\n          id: 'test-alert-1',\n          timestamp: new Date(),\n          severity: 'critical' as const,\n          metric: 'parserErrors',\n          currentValue: 1,\n          threshold: 0,\n          message: 'Parser errors detected',\n          resolved: false,\n        },\n      ];\n\n      const mockMetrics: LintingMetrics = {\n        timestamp: new Date(),\n        totalIssues: 1,\n        errors: 1,\n        warnings: 0,\n        parserErrors: 1,\n        explicitAnyErrors: 0,\n        importOrderIssues: 0,\n        unusedVariables: 0,\n        reactHooksIssues: 0,\n        consoleStatements: 0,\n        domainSpecificIssues: {\n          astrologicalCalculations: 0,\n          campaignSystem: 0,\n          testFiles: 0,\n        },\n        performanceMetrics: {\n          lintingDuration: 5000,\n          cacheHitRate: 0.75,\n          memoryUsage: 256,\n          filesProcessed: 100,\n        },\n        qualityScore: 85,\n        regressionDetected: false,\n      };\n\n      // Should not throw\n      await expect(alerting.processAlerts(mockAlerts, mockMetrics)).resolves.toBeUndefined();\n    });\n\n    test('should skip processing when disabled', async () => {\n      // Mock disabled configuration\n      mockReadFileSync.mockImplementation(() => {\n        return JSON.stringify({\n          enabled: false,\n          channels: [],\n          regressionDetection: { enabled: false },\n          performanceMonitoring: { enabled: false },\n          autoResponse: { enabled: false },\n        });\n      });\n\n      const disabledAlerting = new LintingAlertingSystem();\n\n      const mockAlerts = [\n        {\n          id: 'test-alert-1',\n          timestamp: new Date(),\n          severity: 'critical' as const,\n          metric: 'parserErrors',\n          currentValue: 1,\n          threshold: 0,\n          message: 'Parser errors detected',\n          resolved: false,\n        },\n      ];\n\n      const mockMetrics: LintingMetrics = {\n        timestamp: new Date(),\n        totalIssues: 1,\n        errors: 1,\n        warnings: 0,\n        parserErrors: 1,\n        explicitAnyErrors: 0,\n        importOrderIssues: 0,\n        unusedVariables: 0,\n        reactHooksIssues: 0,\n        consoleStatements: 0,\n        domainSpecificIssues: {\n          astrologicalCalculations: 0,\n          campaignSystem: 0,\n          testFiles: 0,\n        },\n        performanceMetrics: {\n          lintingDuration: 5000,\n          cacheHitRate: 0.75,\n          memoryUsage: 256,\n          filesProcessed: 100,\n        },\n        qualityScore: 85,\n        regressionDetected: false,\n      };\n\n      // Should complete quickly when disabled\n      await expect(disabledAlerting.processAlerts(mockAlerts, mockMetrics)).resolves.toBeUndefined();\n    });\n  });\n\n  describe('Performance Monitoring', () => {\n    test('should detect performance threshold violations', async () => {\n      const mockMetrics: LintingMetrics = {\n        timestamp: new Date(),\n        totalIssues: 0,\n        errors: 0,\n        warnings: 0,\n        parserErrors: 0,\n        explicitAnyErrors: 0,\n        importOrderIssues: 0,\n        unusedVariables: 0,\n        reactHooksIssues: 0,\n        consoleStatements: 0,\n        domainSpecificIssues: {\n          astrologicalCalculations: 0,\n          campaignSystem: 0,\n          testFiles: 0,\n        },\n        performanceMetrics: {\n          lintingDuration: 35000, // Exceeds 30s threshold\n          cacheHitRate: 0.3, // Below 50% threshold\n          memoryUsage: 600, // Exceeds 512MB threshold\n          filesProcessed: 100,\n        },\n        qualityScore: 85,\n        regressionDetected: false,\n      };\n\n      // Should process performance monitoring\n      await expect(alerting.processAlerts([], mockMetrics)).resolves.toBeUndefined();\n    });\n  });\n});\n"],"version":3}