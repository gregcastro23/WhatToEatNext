{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/__tests__/ingredientValidation.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/__tests__/ingredientValidation.test.ts"],"sourcesContent":["/**\n * Tests for Ingredient Data Validation\n */\n\nimport { \n  validateIngredientData, \n  shouldRollbackIngredients,\n  IngredientValidationResult,\n  IngredientValidationError \n} from '../ingredientValidation';\n\n// Mock the ingredient data\njest.mock('../../data/ingredients', () => ({\n  allIngredients: {\n    basil: {\n      name: 'Basil',\n      category: 'culinary_herb',\n      elementalProperties: {\n        Fire: 0.2,\n        Water: 0.1,\n        Earth: 0.1,\n        Air: 0.6\n      },\n      qualities: ['aromatic', 'warming'],\n      storage: { duration: '1 week' }\n    },\n    tomato: {\n      name: 'Tomato',\n      category: 'vegetable',\n      elementalProperties: {\n        Fire: 0.4,\n        Water: 0.4,\n        Earth: 0.1,\n        Air: 0.1\n      },\n      qualities: ['juicy', 'acidic'],\n      storage: { duration: '1 week' }\n    },\n    invalidIngredient: {\n      name: 'Invalid',\n      category: 'invalid_category',\n      elementalProperties: {\n        Fire: 0.5,\n        Water: 0.3,\n        Earth: 0.3, // Sum > 1.0\n        Air: 0.2\n      }\n    }\n  }\n}));\n\n// Mock the elemental utils\njest.mock('../elementalUtils', () => ({\n  calculateElementalCompatibility: jest.fn()\n}));\n\n// Mock the logger\njest.mock('../logger', () => ({\n  logger: {\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    debug: jest.fn()\n  }\n}));\n\nimport { calculateElementalCompatibility } from '../elementalUtils';\n\nconst mockCalculateElementalCompatibility = calculateElementalCompatibility as jest.MockedFunction<typeof calculateElementalCompatibility>;\n\ndescribe('Ingredient Data Validation', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock compatibility calculations to return expected values\n    mockCalculateElementalCompatibility.mockImplementation((props1, props2) => {\n      // Self-compatibility should be high\n      if (props1 === props2) {\n        return 0.95;\n      }\n      // Cross-compatibility should be good\n      return 0.75;\n    });\n  });\n\n  describe('validateIngredientData', () => {\n    it('should pass validation with valid ingredient data', async () => {\n      const result = await validateIngredientData();\n\n      // Should have some warnings but no critical/high errors for the invalid ingredient\n      expect(result.errors.filter(e => e.severity === 'CRITICAL').length).toBe(0);\n      expect(result.timestamp).toBeInstanceOf(Date);\n      expect(result.summary).toContain('Ingredient Data Validation');\n    });\n\n    it('should detect elemental property sum errors', async () => {\n      const result = await validateIngredientData();\n\n      // Should detect that invalidIngredient has elemental properties that sum > 1.0\n      const sumErrors = result.errors.filter(e => \n        e.type === 'ELEMENTAL_INVALID' && \n        e.message.includes('sum')\n      );\n      \n      expect(sumErrors.length).toBeGreaterThan(0);\n    });\n\n    it('should detect invalid categories', async () => {\n      const result = await validateIngredientData();\n\n      // Should detect invalid category\n      const categoryErrors = result.errors.filter(e => \n        e.type === 'CATEGORY_MISMATCH' && \n        e.ingredient === 'invalidIngredient'\n      );\n      \n      expect(categoryErrors.length).toBeGreaterThan(0);\n    });\n\n    it('should validate compatibility calculations', async () => {\n      const result = await validateIngredientData();\n\n      // Should call compatibility calculations\n      expect(mockCalculateElementalCompatibility).toHaveBeenCalled();\n      \n      // Should not have compatibility violations with our mocked values\n      const compatibilityErrors = result.errors.filter(e => \n        e.type === 'COMPATIBILITY_VIOLATION'\n      );\n      \n      expect(compatibilityErrors.length).toBe(0);\n    });\n\n    it('should handle missing elemental properties', async () => {\n      // This test would require mocking ingredients without elemental properties\n      const result = await validateIngredientData();\n      \n      // All our mock ingredients have elemental properties, so no errors expected\n      expect(result).toBeDefined();\n    });\n\n    it('should validate data completeness', async () => {\n      const result = await validateIngredientData();\n\n      // Should check for required fields\n      const completenessErrors = result.errors.filter(e => \n        e.type === 'DATA_INCOMPLETE' && \n        e.message.includes('Missing required field')\n      );\n      \n      // Our mock data has all required fields, so should be 0\n      expect(completenessErrors.length).toBe(0);\n    });\n  });\n\n  describe('shouldRollbackIngredients', () => {\n    it('should recommend rollback for critical errors', () => {\n      const validationResult: IngredientValidationResult = {\n        isValid: false,\n        errors: [{\n          type: 'DATA_INCOMPLETE',\n          severity: 'CRITICAL',\n          message: 'Critical data corruption detected',\n          timestamp: new Date()\n        }],\n        warnings: [],\n        summary: 'Critical failure',\n        timestamp: new Date()\n      };\n\n      expect(shouldRollbackIngredients(validationResult)).toBe(true);\n    });\n\n    it('should recommend rollback for multiple high-severity errors', () => {\n      const validationResult: IngredientValidationResult = {\n        isValid: false,\n        errors: [\n          {\n            type: 'ELEMENTAL_INVALID',\n            severity: 'HIGH',\n            message: 'Elemental error 1',\n            timestamp: new Date()\n          },\n          {\n            type: 'COMPATIBILITY_VIOLATION',\n            severity: 'HIGH',\n            message: 'Compatibility error 2',\n            timestamp: new Date()\n          },\n          {\n            type: 'DATA_INCOMPLETE',\n            severity: 'HIGH',\n            message: 'Data error 3',\n            timestamp: new Date()\n          },\n          {\n            type: 'CATEGORY_MISMATCH',\n            severity: 'HIGH',\n            message: 'Category error 4',\n            timestamp: new Date()\n          }\n        ],\n        warnings: [],\n        summary: 'Multiple high-severity errors',\n        timestamp: new Date()\n      };\n\n      expect(shouldRollbackIngredients(validationResult)).toBe(true);\n    });\n\n    it('should not recommend rollback for minor issues', () => {\n      const validationResult: IngredientValidationResult = {\n        isValid: true,\n        errors: [{\n          type: 'ELEMENTAL_INVALID',\n          severity: 'LOW',\n          message: 'Minor elemental issue',\n          timestamp: new Date()\n        }],\n        warnings: [{\n          type: 'MINOR_INCONSISTENCY',\n          message: 'Minor warning',\n          timestamp: new Date()\n        }],\n        summary: 'Minor issues only',\n        timestamp: new Date()\n      };\n\n      expect(shouldRollbackIngredients(validationResult)).toBe(false);\n    });\n\n    it('should not recommend rollback for few high-severity errors', () => {\n      const validationResult: IngredientValidationResult = {\n        isValid: false,\n        errors: [\n          {\n            type: 'ELEMENTAL_INVALID',\n            severity: 'HIGH',\n            message: 'Single high-severity error',\n            timestamp: new Date()\n          },\n          {\n            type: 'COMPATIBILITY_VIOLATION',\n            severity: 'MEDIUM',\n            message: 'Medium severity error',\n            timestamp: new Date()\n          }\n        ],\n        warnings: [],\n        summary: 'Few high errors',\n        timestamp: new Date()\n      };\n\n      expect(shouldRollbackIngredients(validationResult)).toBe(false);\n    });\n  });\n\n  describe('Performance', () => {\n    it('should complete validation within reasonable time', async () => {\n      const startTime = Date.now();\n      const result = await validateIngredientData();\n      const duration = Date.now() - startTime;\n\n      expect(duration).toBeLessThan(10000); // Should complete within 10 seconds\n      expect(result).toBeDefined();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle empty ingredient data gracefully', async () => {\n      // Mock empty ingredients\n      jest.doMock('../../data/ingredients', () => ({\n        allIngredients: {}\n      }));\n\n      const result = await validateIngredientData();\n\n      expect(result).toBeDefined();\n      expect(result.timestamp).toBeInstanceOf(Date);\n    });\n\n    it('should handle malformed ingredient data', async () => {\n      // Mock malformed ingredients\n      jest.doMock('../../data/ingredients', () => ({\n        allIngredients: {\n          malformed: null,\n          invalid: undefined,\n          broken: 'not an object'\n        }\n      }));\n\n      const result = await validateIngredientData();\n\n      expect(result).toBeDefined();\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Elemental Properties Validation', () => {\n    it('should validate elemental property ranges', async () => {\n      const result = await validateIngredientData();\n\n      // Check that validation catches out-of-range values\n      const rangeErrors = result.errors.filter(e => \n        e.type === 'ELEMENTAL_INVALID' && \n        e.message.includes('out of range')\n      );\n      \n      // Our mock data has valid ranges, so should be 0\n      expect(rangeErrors.length).toBe(0);\n    });\n\n    it('should validate elemental property sums', async () => {\n      const result = await validateIngredientData();\n\n      // Should detect sum errors for invalidIngredient\n      const sumErrors = result.errors.filter(e => \n        e.type === 'ELEMENTAL_INVALID' && \n        e.message.includes('sum')\n      );\n      \n      expect(sumErrors.length).toBeGreaterThan(0);\n    });\n\n    it('should check for elemental dominance', async () => {\n      const result = await validateIngredientData();\n\n      // Should have warnings about elemental dominance if applicable\n      const dominanceWarnings = result.warnings.filter(w => \n        w.type === 'MINOR_INCONSISTENCY' && \n        w.message.includes('dominant element')\n      );\n      \n      // Our mock ingredients have clear dominance, so should be 0\n      expect(dominanceWarnings.length).toBe(0);\n    });\n  });\n\n  describe('Compatibility Validation', () => {\n    it('should validate self-compatibility scores', async () => {\n      mockCalculateElementalCompatibility.mockImplementation((props1, props2) => {\n        if (props1 === props2) {\n          return 0.85; // Below threshold\n        }\n        return 0.75;\n      });\n\n      const result = await validateIngredientData();\n\n      // Should detect low self-compatibility\n      const selfCompatibilityErrors = result.errors.filter(e => \n        e.type === 'COMPATIBILITY_VIOLATION' && \n        e.message.includes('Self-compatibility')\n      );\n      \n      expect(selfCompatibilityErrors.length).toBeGreaterThan(0);\n    });\n\n    it('should validate cross-compatibility scores', async () => {\n      mockCalculateElementalCompatibility.mockImplementation((props1, props2) => {\n        if (props1 === props2) {\n          return 0.95;\n        }\n        return 0.6; // Below threshold\n      });\n\n      const result = await validateIngredientData();\n\n      // Should detect low cross-compatibility\n      const crossCompatibilityErrors = result.errors.filter(e => \n        e.type === 'COMPATIBILITY_VIOLATION' && \n        e.message.includes('Cross-compatibility')\n      );\n      \n      expect(crossCompatibilityErrors.length).toBeGreaterThan(0);\n    });\n  });\n});"],"version":3}