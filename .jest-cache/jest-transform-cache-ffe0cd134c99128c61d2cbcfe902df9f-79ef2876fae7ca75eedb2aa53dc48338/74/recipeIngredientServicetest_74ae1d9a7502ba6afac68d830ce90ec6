0decc524be7ef7532e85669355035bb2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RecipeElementalService_1 = require("@/services/RecipeElementalService");
describe('Recipe Ingredient Processing', () => {
    it('should correctly process recipe ingredients', () => {
        const recipe = {
            id: 'test-recipe',
            name: 'Test Recipe',
            ingredients: [
                {
                    name: 'Tomato',
                    amount: 2,
                    unit: 'whole',
                    category: 'vegetables',
                    elementalProperties: { Fire: 0.7, Water: 0.2, Earth: 0.05, Air: 0.05 }
                },
                {
                    name: 'Onion',
                    amount: 1,
                    unit: 'medium',
                    category: 'vegetables',
                    elementalProperties: { Earth: 0.5, Fire: 0.2, Water: 0.2, Air: 0.1 }
                }
            ]
        };
        // Test that we can standardize a recipe with ingredients
        const result = RecipeElementalService_1.recipeElementalService.standardizeRecipe(recipe);
        // Verify the result has elemental properties
        expect(result.elementalProperties).toBeDefined();
        // Check that derived elemental properties reflect the ingredients
        const derivedProps = RecipeElementalService_1.recipeElementalService.deriveElementalProperties(recipe);
        expect(derivedProps.Fire).toBeGreaterThan(0.2); // Should have significant Fire due to tomato
    });
    it('should handle recipes with missing ingredient properties', () => {
        const recipe = {
            id: 'test-recipe',
            name: 'Test Recipe',
            ingredients: [
                {
                    name: 'Test Ingredient',
                    amount: 1,
                    unit: 'piece',
                    category: 'other'
                    // No elemental properties
                }
            ]
        };
        // Should not throw errors when ingredients lack elemental properties
        const result = RecipeElementalService_1.recipeElementalService.deriveElementalProperties(recipe);
        // Should still produce normalized elemental properties
        const sum = Object.values(result).reduce((a, b) => a + b, 0);
        expect(sum).toBeCloseTo(1, 6);
    });
    it('should correctly calculate recipe elemental properties based on ingredients', () => {
        const recipe = {
            id: 'test-recipe',
            name: 'Test Recipe',
            ingredients: [
                {
                    name: 'Ingredient1',
                    amount: 2,
                    unit: 'cup',
                    category: 'vegetables',
                    elementalProperties: { Fire: 0.8, Water: 0.1, Earth: 0.05, Air: 0.05 }
                },
                {
                    name: 'Ingredient2',
                    amount: 1,
                    unit: 'cup',
                    category: 'vegetables',
                    elementalProperties: { Fire: 0.1, Water: 0.8, Earth: 0.05, Air: 0.05 }
                }
            ],
            cuisine: 'Thai',
            cookingMethod: ['frying']
        };
        const result = RecipeElementalService_1.recipeElementalService.deriveElementalProperties(recipe);
        // Since we have one ingredient with high Fire and one with high Water,
        // plus Thai cuisine (Fire) and frying method (Fire), we expect Fire to be dominant
        expect(result.Fire).toBeGreaterThan(result.Water);
        expect(result.Fire).toBeGreaterThan(result.Earth);
        expect(result.Fire).toBeGreaterThan(result.Air);
    });
    it('should handle recipes with empty ingredients array', () => {
        const recipe = {
            id: 'test-recipe',
            name: 'Test Recipe',
            ingredients: []
        };
        // Should not throw errors with empty ingredients
        const result = RecipeElementalService_1.recipeElementalService.deriveElementalProperties(recipe);
        // Should still produce normalized elemental properties
        const sum = Object.values(result).reduce((a, b) => a + b, 0);
        expect(sum).toBeCloseTo(1, 6);
    });
    it('should handle recipes with undefined ingredients', () => {
        const recipe = {
            id: 'test-recipe',
            name: 'Test Recipe'
            // No ingredients property
        };
        // Should not throw errors with undefined ingredients
        const result = RecipeElementalService_1.recipeElementalService.deriveElementalProperties(recipe);
        // Should still produce normalized elemental properties
        const sum = Object.values(result).reduce((a, b) => a + b, 0);
        expect(sum).toBeCloseTo(1, 6);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,