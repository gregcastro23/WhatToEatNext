b1aef5568eac6a5a1cb8804996dd6878
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
require("@testing-library/jest-dom");
const react_1 = __importDefault(require("react"));
// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
    constructor() { }
    disconnect() { }
    observe() { }
    unobserve() { }
};
// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
    constructor() { }
    disconnect() { }
    observe() { }
    unobserve() { }
};
// Mock matchMedia
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation(query => ({
        matches: false,
        media: query,
        onchange: null,
        addListener: jest.fn(),
        removeListener: jest.fn(),
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
        dispatchEvent: jest.fn(),
    })),
});
// Mock scrollTo
Object.defineProperty(window, 'scrollTo', {
    value: jest.fn(),
    writable: true
});
// Mock localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
};
Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
});
// Mock sessionStorage
const sessionStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
};
Object.defineProperty(window, 'sessionStorage', {
    value: sessionStorageMock
});
// Mock requestAnimationFrame
global.requestAnimationFrame = jest.fn(cb => setTimeout(cb, 0));
global.cancelAnimationFrame = jest.fn();
// Mock performance.now
Object.defineProperty(window, 'performance', {
    value: {
        now: jest.fn(() => Date.now()),
        mark: jest.fn(),
        measure: jest.fn(),
        getEntriesByName: jest.fn(() => []),
        getEntriesByType: jest.fn(() => []),
    },
    writable: true
});
// Suppress console warnings for tests
const originalConsoleWarn = console.warn;
const originalConsoleError = console.error;
beforeEach(() => {
    // Reset mocks before each test
    jest.clearAllMocks();
    localStorageMock.getItem.mockClear();
    localStorageMock.setItem.mockClear();
    sessionStorageMock.getItem.mockClear();
    sessionStorageMock.setItem.mockClear();
});
// Suppress specific warnings that are expected in tests
console.warn = (...args) => {
    const message = args[0];
    if (typeof message === 'string' &&
        (message.includes('React.createFactory') ||
            message.includes('componentWillReceiveProps') ||
            message.includes('componentWillUpdate'))) {
        return;
    }
    originalConsoleWarn.apply(console, args);
};
console.error = (...args) => {
    const message = args[0];
    if (typeof message === 'string' &&
        (message.includes('Warning: ReactDOM.render') ||
            message.includes('Warning: componentWillReceiveProps') ||
            message.includes('The above error occurred'))) {
        return;
    }
    originalConsoleError.apply(console, args);
};
// Global test utilities
global.testUtils = {
    // Helper to wait for async operations
    waitForAsync: (ms = 0) => new Promise(resolve => setTimeout(resolve, ms)),
    // Helper to create mock functions with specific return values
    createMockFunction: (returnValue) => jest.fn(() => returnValue),
    // Helper to create mock component
    createMockComponent: (name, testId) => {
        const MockComponent = (props) => ((0, jsx_runtime_1.jsxs)("div", { "data-testid": testId || name.toLowerCase(), ...props, children: ["Mock ", name] }));
        MockComponent.displayName = `Mock${name}`;
        return MockComponent;
    },
    // Memory management utilities
    checkMemory: () => {
        if (global.getMemoryUsage) {
            return global.getMemoryUsage();
        }
        const usage = process.memoryUsage();
        return {
            heapUsed: `${(usage.heapUsed / 1024 / 1024).toFixed(2)}MB`,
            heapTotal: `${(usage.heapTotal / 1024 / 1024).toFixed(2)}MB`,
            external: `${(usage.external / 1024 / 1024).toFixed(2)}MB`,
            arrayBuffers: `${(usage.arrayBuffers / 1024 / 1024).toFixed(2)}MB`
        };
    },
    // Force cleanup for memory-intensive tests
    cleanupMemory: () => {
        if (global.cleanupTestMemory) {
            return global.cleanupTestMemory();
        }
        // Fallback cleanup
        jest.clearAllMocks();
        jest.resetModules();
        if (global.forceGC) {
            global.forceGC();
        }
        return null;
    }
};
// Extend Jest matchers
expect.extend({
    toBeWithinRange(received, floor, ceiling) {
        const pass = received >= floor && received <= ceiling;
        if (pass) {
            return {
                message: () => `expected ${received} not to be within range ${floor} - ${ceiling}`,
                pass: true,
            };
        }
        else {
            return {
                message: () => `expected ${received} to be within range ${floor} - ${ceiling}`,
                pass: false,
            };
        }
    },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,