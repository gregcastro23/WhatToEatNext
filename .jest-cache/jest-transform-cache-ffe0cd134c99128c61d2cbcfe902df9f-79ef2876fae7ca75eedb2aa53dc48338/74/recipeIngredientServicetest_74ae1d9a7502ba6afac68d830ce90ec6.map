{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/services/recipeIngredientService.test.ts","mappings":";;AAAA,8EAA2E;AAG3E,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;IAC5C,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,MAAM,MAAM,GAAoB;YAC9B,EAAE,EAAE,aAAa;YACjB,IAAI,EAAE,aAAa;YACnB,WAAW,EAAE;gBACX;oBACE,IAAI,EAAE,QAAQ;oBACd,MAAM,EAAE,CAAC;oBACT,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,YAAY;oBACtB,mBAAmB,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE;iBACvE;gBACD;oBACE,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,CAAC;oBACT,IAAI,EAAE,QAAQ;oBACd,QAAQ,EAAE,YAAY;oBACtB,mBAAmB,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;iBACrE;aACF;SACF,CAAC;QAEF,yDAAyD;QACzD,MAAM,MAAM,GAAG,+CAAsB,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAEhE,6CAA6C;QAC7C,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,WAAW,EAAE,CAAC;QAEjD,kEAAkE;QAClE,MAAM,YAAY,GAAG,+CAAsB,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;QAC9E,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,6CAA6C;IAC/F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;QAClE,MAAM,MAAM,GAAoB;YAC9B,EAAE,EAAE,aAAa;YACjB,IAAI,EAAE,aAAa;YACnB,WAAW,EAAE;gBACX;oBACE,IAAI,EAAE,iBAAiB;oBACvB,MAAM,EAAE,CAAC;oBACT,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,OAAO;oBACjB,0BAA0B;iBAC3B;aACF;SACF,CAAC;QAEF,qEAAqE;QACrE,MAAM,MAAM,GAAG,+CAAsB,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;QAExE,uDAAuD;QACvD,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7D,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6EAA6E,EAAE,GAAG,EAAE;QACrF,MAAM,MAAM,GAAoB;YAC9B,EAAE,EAAE,aAAa;YACjB,IAAI,EAAE,aAAa;YACnB,WAAW,EAAE;gBACX;oBACE,IAAI,EAAE,aAAa;oBACnB,MAAM,EAAE,CAAC;oBACT,IAAI,EAAE,KAAK;oBACX,QAAQ,EAAE,YAAY;oBACtB,mBAAmB,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE;iBACvE;gBACD;oBACE,IAAI,EAAE,aAAa;oBACnB,MAAM,EAAE,CAAC;oBACT,IAAI,EAAE,KAAK;oBACX,QAAQ,EAAE,YAAY;oBACtB,mBAAmB,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE;iBACvE;aACF;YACD,OAAO,EAAE,MAAM;YACf,aAAa,EAAE,CAAC,QAAQ,CAAa;SACtC,CAAC;QAEF,MAAM,MAAM,GAAG,+CAAsB,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;QAExE,uEAAuE;QACvE,mFAAmF;QACnF,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAClD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAClD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,MAAM,MAAM,GAAoB;YAC9B,EAAE,EAAE,aAAa;YACjB,IAAI,EAAE,aAAa;YACnB,WAAW,EAAE,EAAE;SAChB,CAAC;QAEF,iDAAiD;QACjD,MAAM,MAAM,GAAG,+CAAsB,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;QAExE,uDAAuD;QACvD,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7D,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC1D,MAAM,MAAM,GAAoB;YAC9B,EAAE,EAAE,aAAa;YACjB,IAAI,EAAE,aAAa;YACnB,0BAA0B;SAC3B,CAAC;QAEF,qDAAqD;QACrD,MAAM,MAAM,GAAG,+CAAsB,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;QAExE,uDAAuD;QACvD,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7D,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/services/recipeIngredientService.test.ts"],"sourcesContent":["import { recipeElementalService } from '@/services/RecipeElementalService';\nimport type { Recipe } from '@/types/recipe';\n\ndescribe('Recipe Ingredient Processing', () => {\n  it('should correctly process recipe ingredients', () => {\n    const recipe: Partial<Recipe> = {\n      id: 'test-recipe',\n      name: 'Test Recipe',\n      ingredients: [\n        {\n          name: 'Tomato',\n          amount: 2,\n          unit: 'whole',\n          category: 'vegetables',\n          elementalProperties: { Fire: 0.7, Water: 0.2, Earth: 0.05, Air: 0.05 }\n        },\n        {\n          name: 'Onion',\n          amount: 1,\n          unit: 'medium',\n          category: 'vegetables',\n          elementalProperties: { Earth: 0.5, Fire: 0.2, Water: 0.2, Air: 0.1 }\n        }\n      ]\n    };\n    \n    // Test that we can standardize a recipe with ingredients\n    const result = recipeElementalService.standardizeRecipe(recipe);\n    \n    // Verify the result has elemental properties\n    expect(result.elementalProperties).toBeDefined();\n    \n    // Check that derived elemental properties reflect the ingredients\n    const derivedProps = recipeElementalService.deriveElementalProperties(recipe);\n    expect(derivedProps.Fire).toBeGreaterThan(0.2); // Should have significant Fire due to tomato\n  });\n\n  it('should handle recipes with missing ingredient properties', () => {\n    const recipe: Partial<Recipe> = {\n      id: 'test-recipe',\n      name: 'Test Recipe',\n      ingredients: [\n        {\n          name: 'Test Ingredient',\n          amount: 1,\n          unit: 'piece',\n          category: 'other'\n          // No elemental properties\n        }\n      ]\n    };\n    \n    // Should not throw errors when ingredients lack elemental properties\n    const result = recipeElementalService.deriveElementalProperties(recipe);\n    \n    // Should still produce normalized elemental properties\n    const sum = Object.values(result).reduce((a, b) => a + b, 0);\n    expect(sum).toBeCloseTo(1, 6);\n  });\n\n  it('should correctly calculate recipe elemental properties based on ingredients', () => {\n    const recipe: Partial<Recipe> = {\n      id: 'test-recipe',\n      name: 'Test Recipe',\n      ingredients: [\n        {\n          name: 'Ingredient1',\n          amount: 2,\n          unit: 'cup',\n          category: 'vegetables',\n          elementalProperties: { Fire: 0.8, Water: 0.1, Earth: 0.05, Air: 0.05 }\n        },\n        {\n          name: 'Ingredient2',\n          amount: 1,\n          unit: 'cup',\n          category: 'vegetables',\n          elementalProperties: { Fire: 0.1, Water: 0.8, Earth: 0.05, Air: 0.05 }\n        }\n      ],\n      cuisine: 'Thai',\n      cookingMethod: ['frying'] as string[]\n    };\n    \n    const result = recipeElementalService.deriveElementalProperties(recipe);\n    \n    // Since we have one ingredient with high Fire and one with high Water,\n    // plus Thai cuisine (Fire) and frying method (Fire), we expect Fire to be dominant\n    expect(result.Fire).toBeGreaterThan(result.Water);\n    expect(result.Fire).toBeGreaterThan(result.Earth);\n    expect(result.Fire).toBeGreaterThan(result.Air);\n  });\n\n  it('should handle recipes with empty ingredients array', () => {\n    const recipe: Partial<Recipe> = {\n      id: 'test-recipe',\n      name: 'Test Recipe',\n      ingredients: []\n    };\n    \n    // Should not throw errors with empty ingredients\n    const result = recipeElementalService.deriveElementalProperties(recipe);\n    \n    // Should still produce normalized elemental properties\n    const sum = Object.values(result).reduce((a, b) => a + b, 0);\n    expect(sum).toBeCloseTo(1, 6);\n  });\n\n  it('should handle recipes with undefined ingredients', () => {\n    const recipe: Partial<Recipe> = {\n      id: 'test-recipe',\n      name: 'Test Recipe'\n      // No ingredients property\n    };\n    \n    // Should not throw errors with undefined ingredients\n    const result = recipeElementalService.deriveElementalProperties(recipe);\n    \n    // Should still produce normalized elemental properties\n    const sum = Object.values(result).reduce((a, b) => a + b, 0);\n    expect(sum).toBeCloseTo(1, 6);\n  });\n}); "],"version":3}