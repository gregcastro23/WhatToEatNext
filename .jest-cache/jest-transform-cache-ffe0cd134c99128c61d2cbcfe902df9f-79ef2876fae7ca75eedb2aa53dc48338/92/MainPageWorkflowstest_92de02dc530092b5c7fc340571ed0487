629191539719ed7009de2b71d99a62f7
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock all external dependencies for E2E simulation
jest.mock('next/navigation', () => ({
    useRouter: () => ({
        push: jest.fn(),
        back: jest.fn(),
        forward: jest.fn(),
        refresh: jest.fn(),
        replace: jest.fn(),
    }),
}));
jest.mock('@/utils/logger', () => ({
    logger: {
        debug: jest.fn(),
        info: jest.fn(),
        warn: jest.fn(),
        error: jest.fn(),
    },
}));
// Mock realistic component behaviors for E2E testing
jest.mock('@/components/CuisineRecommender', () => {
    return function MockCuisineRecommender() {
        const [selectedCuisine, setSelectedCuisine] = react_2.default.useState(null);
        const [showRecipes, setShowRecipes] = react_2.default.useState(false);
        const cuisines = [
            { name: 'Italian', score: 95, recipes: ['Pasta Marinara', 'Risotto', 'Pizza Margherita'] },
            { name: 'Chinese', score: 88, recipes: ['Fried Rice', 'Sweet and Sour Pork', 'Kung Pao Chicken'] },
            { name: 'Mexican', score: 82, recipes: ['Tacos', 'Enchiladas', 'Guacamole'] },
            { name: 'Indian', score: 79, recipes: ['Curry', 'Biryani', 'Naan'] },
        ];
        const handleCuisineSelect = (cuisine) => {
            setSelectedCuisine(cuisine.name);
            setShowRecipes(true);
        };
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'cuisine-recommender', children: [(0, jsx_runtime_1.jsx)("h3", { children: "Cuisine Recommendations" }), (0, jsx_runtime_1.jsx)("div", { className: 'cuisine-grid', children: cuisines.map(cuisine => ((0, jsx_runtime_1.jsx)("div", { className: 'cuisine-card', "data-testid": `cuisine-card-${cuisine.name.toLowerCase()}`, children: (0, jsx_runtime_1.jsxs)("button", { onClick: () => handleCuisineSelect(cuisine), className: selectedCuisine === cuisine.name ? 'selected' : '', "data-testid": `cuisine-${cuisine.name.toLowerCase()}`, children: [(0, jsx_runtime_1.jsx)("h4", { children: cuisine.name }), (0, jsx_runtime_1.jsxs)("div", { className: 'score', children: ["Match: ", cuisine.score, "%"] })] }) }, cuisine.name))) }), showRecipes && selectedCuisine && ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'recipe-recommendations', className: 'recipe-section', children: [(0, jsx_runtime_1.jsxs)("h4", { children: ["Recommended ", selectedCuisine, " Recipes"] }), (0, jsx_runtime_1.jsx)("div", { className: 'recipe-list', children: cuisines
                                .find(c => c.name === selectedCuisine)
                                ?.recipes.map(recipe => ((0, jsx_runtime_1.jsx)("button", { "data-testid": `recipe-${recipe.toLowerCase().replace(/\s+/g, '-')}`, className: 'recipe-button', children: recipe }, recipe))) })] }))] }));
    };
});
jest.mock('@/components/IngredientRecommender', () => {
    return function MockIngredientRecommender({ maxDisplayed = 8 }) {
        const [selectedIngredients, setSelectedIngredients] = react_2.default.useState([]);
        const [expandedIngredient, setExpandedIngredient] = react_2.default.useState(null);
        const ingredients = [
            { name: 'Tomatoes', category: 'Vegetables', properties: ['Umami', 'Acidic', 'Fresh'] },
            { name: 'Onions', category: 'Vegetables', properties: ['Sweet', 'Pungent', 'Aromatic'] },
            { name: 'Garlic', category: 'Aromatics', properties: ['Pungent', 'Savory', 'Aromatic'] },
            { name: 'Basil', category: 'Herbs', properties: ['Fresh', 'Aromatic', 'Sweet'] },
            { name: 'Olive Oil', category: 'Oils', properties: ['Rich', 'Fruity', 'Smooth'] },
            { name: 'Cheese', category: 'Dairy', properties: ['Creamy', 'Salty', 'Rich'] },
            { name: 'Pasta', category: 'Grains', properties: ['Neutral', 'Filling', 'Versatile'] },
            { name: 'Chicken', category: 'Proteins', properties: ['Lean', 'Mild', 'Versatile'] },
        ];
        const displayedIngredients = ingredients.slice(0, maxDisplayed);
        const toggleIngredient = (ingredient) => {
            setSelectedIngredients(prev => void prev.includes(ingredient) ? prev.filter(i => i !== ingredient) : [...prev, ingredient]);
        };
        const toggleExpanded = (ingredient) => {
            setExpandedIngredient(prev => (prev === ingredient ? null : ingredient));
        };
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'ingredient-recommender', children: [(0, jsx_runtime_1.jsx)("h3", { children: "Ingredient Recommendations" }), (0, jsx_runtime_1.jsx)("div", { className: 'ingredient-grid', children: displayedIngredients.map(ingredient => ((0, jsx_runtime_1.jsxs)("div", { className: 'ingredient-card', "data-testid": `ingredient-card-${ingredient.name.toLowerCase()}`, children: [(0, jsx_runtime_1.jsx)("button", { onClick: () => toggleIngredient(ingredient.name), className: selectedIngredients.includes(ingredient.name) ? 'selected' : '', "data-testid": `ingredient-${ingredient.name.toLowerCase()}`, children: ingredient.name }), (0, jsx_runtime_1.jsx)("button", { onClick: () => toggleExpanded(ingredient.name), "data-testid": `expand-${ingredient.name.toLowerCase()}`, className: 'expand-button', children: expandedIngredient === ingredient.name ? '▼' : '▶' }), expandedIngredient === ingredient.name && ((0, jsx_runtime_1.jsxs)("div", { "data-testid": `details-${ingredient.name.toLowerCase()}`, className: 'ingredient-details', children: [(0, jsx_runtime_1.jsxs)("div", { children: ["Category: ", ingredient.category] }), (0, jsx_runtime_1.jsxs)("div", { children: ["Properties: ", ingredient.properties.join(', ')] })] }))] }, ingredient.name))) }), selectedIngredients.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'selected-ingredients-summary', className: 'selection-summary', children: [(0, jsx_runtime_1.jsxs)("h4", { children: ["Selected Ingredients (", selectedIngredients.length, ")"] }), (0, jsx_runtime_1.jsx)("div", { children: selectedIngredients.join(', ') })] }))] }));
    };
});
jest.mock('@/components/CookingMethodsSection', () => {
    return function MockCookingMethodsSection({ maxDisplayed = 6, onViewMore, }) {
        const [selectedMethod, setSelectedMethod] = react_2.default.useState(null);
        const methods = [
            { name: 'Sauté', time: '5-10 min', difficulty: 'Easy', description: 'Quick cooking in a pan with oil' },
            { name: 'Roast', time: '30-60 min', difficulty: 'Medium', description: 'Cooking in the oven with dry heat' },
            { name: 'Grill', time: '10-20 min', difficulty: 'Medium', description: 'Cooking over direct heat' },
            { name: 'Steam', time: '10-15 min', difficulty: 'Easy', description: 'Cooking with steam heat' },
            { name: 'Braise', time: '60-120 min', difficulty: 'Hard', description: 'Slow cooking with liquid' },
            { name: 'Stir-fry', time: '5-8 min', difficulty: 'Medium', description: 'Quick cooking while stirring' },
        ];
        const displayedMethods = methods.slice(0, maxDisplayed);
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'cooking-methods', children: [(0, jsx_runtime_1.jsx)("h3", { children: "Cooking Methods" }), (0, jsx_runtime_1.jsx)("div", { className: 'methods-grid', children: displayedMethods.map(method => ((0, jsx_runtime_1.jsxs)("div", { className: 'method-card', "data-testid": `method-card-${method.name.toLowerCase()}`, children: [(0, jsx_runtime_1.jsxs)("button", { onClick: () => setSelectedMethod(method.name), className: selectedMethod === method.name ? 'selected' : '', "data-testid": `method-${method.name.toLowerCase()}`, children: [(0, jsx_runtime_1.jsx)("h4", { children: method.name }), (0, jsx_runtime_1.jsxs)("div", { className: 'method-info', children: [(0, jsx_runtime_1.jsxs)("div", { children: ["Time: ", method.time] }), (0, jsx_runtime_1.jsxs)("div", { children: ["Difficulty: ", method.difficulty] })] })] }), selectedMethod === method.name && ((0, jsx_runtime_1.jsx)("div", { "data-testid": `method-details-${method.name.toLowerCase()}`, className: 'method-details', children: (0, jsx_runtime_1.jsx)("p", { children: method.description }) }))] }, method.name))) }), (0, jsx_runtime_1.jsx)("button", { onClick: onViewMore, "data-testid": 'view-more-methods', className: 'view-more-button', children: "View All Cooking Methods" })] }));
    };
});
jest.mock('@/components/recipes/RecipeBuilderSimple', () => {
    return function MockRecipeBuilderSimple() {
        const [recipeName, setRecipeName] = react_2.default.useState('');
        const [ingredients, setIngredients] = react_2.default.useState([]);
        const [steps, setSteps] = react_2.default.useState([]);
        const [servings, setServings] = react_2.default.useState(4);
        const [prepTime, setPrepTime] = react_2.default.useState(15);
        const [cookTime, setCookTime] = react_2.default.useState(30);
        const addIngredient = () => {
            setIngredients(prev => [...prev, { name: '', quantity: '' }]);
        };
        const updateIngredient = (index, field, value) => {
            setIngredients(prev => prev.map((ing, i) => (i === index ? { ...ing, [field]: value } : ing)));
        };
        const removeIngredient = (index) => {
            setIngredients(prev => prev.filter((_, i) => i !== index));
        };
        const addStep = () => {
            setSteps(prev => [...prev, { instruction: '', timing: '' }]);
        };
        const updateStep = (index, field, value) => {
            setSteps(prev => prev.map((step, i) => (i === index ? { ...step, [field]: value } : step)));
        };
        const removeStep = (index) => {
            setSteps(prev => prev.filter((_, i) => i !== index));
        };
        const canSave = recipeName.trim() && ingredients.some(ing => ing.name.trim()) && void steps.some(step => step.instruction.trim());
        const totalTime = prepTime + cookTime;
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'recipe-builder', children: [(0, jsx_runtime_1.jsx)("h3", { children: "Recipe Builder" }), (0, jsx_runtime_1.jsxs)("div", { className: 'recipe-form', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'recipe-header', children: [(0, jsx_runtime_1.jsx)("input", { type: 'text', placeholder: 'Recipe Name', value: recipeName, onChange: e => setRecipeName(e.target.value), "data-testid": 'recipe-name-input' }), (0, jsx_runtime_1.jsxs)("div", { className: 'recipe-meta', children: [(0, jsx_runtime_1.jsx)("input", { type: 'number', value: servings, onChange: e => setServings(parseInt(e.target.value) || 1), "data-testid": 'servings-input', min: '1' }), (0, jsx_runtime_1.jsx)("input", { type: 'number', value: prepTime, onChange: e => setPrepTime(parseInt(e.target.value) || 0), "data-testid": 'prep-time-input', min: '0' }), (0, jsx_runtime_1.jsx)("input", { type: 'number', value: cookTime, onChange: e => setCookTime(parseInt(e.target.value) || 0), "data-testid": 'cook-time-input', min: '0' })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'ingredients-section', children: [(0, jsx_runtime_1.jsx)("h4", { children: "Ingredients" }), (0, jsx_runtime_1.jsx)("button", { onClick: addIngredient, "data-testid": 'add-ingredient', children: "Add Ingredient" }), ingredients.map((ingredient, index) => ((0, jsx_runtime_1.jsxs)("div", { className: 'ingredient-row', "data-testid": `ingredient-row-${index}`, children: [(0, jsx_runtime_1.jsx)("input", { type: 'text', placeholder: 'Quantity', value: ingredient.quantity, onChange: e => updateIngredient(index, 'quantity', e.target.value), "data-testid": `ingredient-quantity-${index}` }), (0, jsx_runtime_1.jsx)("input", { type: 'text', placeholder: 'Ingredient name', value: ingredient.name, onChange: e => updateIngredient(index, 'name', e.target.value), "data-testid": `ingredient-name-${index}` }), (0, jsx_runtime_1.jsx)("button", { onClick: () => removeIngredient(index), "data-testid": `remove-ingredient-${index}`, children: "Remove" })] }, index))), (0, jsx_runtime_1.jsxs)("div", { "data-testid": 'ingredients-count', children: [", Ingredients: ", ingredients.length] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'steps-section', children: [(0, jsx_runtime_1.jsx)("h4", { children: "Instructions" }), (0, jsx_runtime_1.jsx)("button", { onClick: addStep, "data-testid": 'add-step', children: "Add Step" }), steps.map((step, index) => ((0, jsx_runtime_1.jsxs)("div", { className: 'step-row', "data-testid": `step-row-${index}`, children: [(0, jsx_runtime_1.jsx)("span", { className: 'step-number', children: index + 1 }), (0, jsx_runtime_1.jsx)("textarea", { placeholder: 'Describe this step...', value: step.instruction, onChange: e => updateStep(index, 'instruction', e.target.value), "data-testid": `step-instruction-${index}` }), (0, jsx_runtime_1.jsx)("input", { type: 'text', placeholder: 'Timing', value: step.timing, onChange: e => updateStep(index, 'timing', e.target.value), "data-testid": `step-timing-${index}` }), (0, jsx_runtime_1.jsx)("button", { onClick: () => removeStep(index), "data-testid": `remove-step-${index}`, children: "Remove" })] }, index))), (0, jsx_runtime_1.jsxs)("div", { "data-testid": 'steps-count', children: [", Steps: ", steps.length] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'recipe-summary', "data-testid": 'recipe-summary', children: [(0, jsx_runtime_1.jsx)("h4", { children: "Recipe Summary" }), (0, jsx_runtime_1.jsxs)("div", { children: ["Name: ", recipeName || 'Untitled Recipe'] }), (0, jsx_runtime_1.jsxs)("div", { children: ["Servings: ", servings] }), (0, jsx_runtime_1.jsxs)("div", { children: ["Total Time: ", totalTime, " minutes"] }), (0, jsx_runtime_1.jsxs)("div", { children: ["Ingredients: ", ingredients.length] }), (0, jsx_runtime_1.jsxs)("div", { children: ["Steps: ", steps.length] })] }), (0, jsx_runtime_1.jsx)("button", { disabled: !canSave, "data-testid": 'save-recipe', className: canSave ? 'enabled' : 'disabled', children: "Save Recipe" })] })] }));
    };
});
/**
 * End-to-End Tests for Main Page Workflows
 *
 * These tests simulate complete user workflows on the main page,
 * testing the integration between all components and user interactions.
 *
 * Note: These tests use jsdom and testing-library to simulate E2E scenarios
 * without requiring a full browser environment.
 */
const react_1 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const react_2 = __importDefault(require("react"));
const MainPageLayout_1 = __importDefault(require("@/components/layout/MainPageLayout"));
const hooks_1 = require("@/contexts/AlchemicalContext/hooks");
const useStatePreservation_1 = require("@/hooks/useStatePreservation");
void jest.mock('@/contexts/AlchemicalContext/hooks');
void jest.mock('@/hooks/useStatePreservation');
describe('Main Page E2E Workflows', () => {
    const mockAlchemicalContext = {
        state: {
            astrologicalState: { sunSign: 'aries' },
            elementalState: { Fire: 0.3, Water: 0.2, Earth: 0.3, Air: 0.2 },
        },
        planetaryPositions: { sun: { sign: 'aries' } },
        isDaytime: true,
    };
    const mockNavigationState = {
        saveState: jest.fn(),
        getState: jest.fn(() => ({})),
    };
    const mockScrollPreservation = {
        restoreScrollPosition: jest.fn(),
    };
    beforeEach(() => {
        void jest.clearAllMocks();
        hooks_1.useAlchemical.mockReturnValue(mockAlchemicalContext);
        useStatePreservation_1.useNavigationState.mockReturnValue(mockNavigationState);
        useStatePreservation_1.useScrollPreservation.mockReturnValue(mockScrollPreservation);
        useStatePreservation_1.useAutoStateCleanup.mockReturnValue(undefined);
        // Mock DOM methods
        void Object.defineProperty(window, 'scrollY', { value: 0, writable: true });
        jest.spyOn(document, 'getElementById').mockImplementation(() => ({
            scrollIntoView: jest.fn(),
            style: {},
            classList: { add: jest.fn(), remove: jest.fn() },
        }));
    });
    afterEach(() => {
        void jest.restoreAllMocks();
    });
    it('completes full meal planning workflow', async () => {
        const user = user_event_1.default.setup();
        (0, react_1.act)(async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        // Wait for all components to load
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByTestId('cuisine-recommender')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('ingredient-recommender')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('cooking-methods')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('recipe-builder')).toBeInTheDocument();
        });
        // Step 1: Select a cuisine
        const italianCuisine = react_1.screen.getByTestId('italian-cuisine');
        void user.click(italianCuisine);
        // Verify cuisine selection and recipe recommendations appear
        expect(react_1.screen.getByTestId('recipe-recommendations')).toBeInTheDocument();
        expect(react_1.screen.getByText('Recommended Italian Recipes')).toBeInTheDocument();
        // Step 2: Select ingredients
        const tomatoes = react_1.screen.getByTestId('ingredient-tomatoes');
        const basil = react_1.screen.getByTestId('ingredient-basil');
        const oliveOil = react_1.screen.getByTestId('ingredient-olive oil');
        void user.click(tomatoes);
        void user.click(basil);
        void user.click(oliveOil);
        // Verify ingredient selection
        expect(react_1.screen.getByTestId('selected-ingredients-summary')).toBeInTheDocument();
        expect(react_1.screen.getByText('Selected Ingredients (3)')).toBeInTheDocument();
        // Step 3: Select cooking method
        const sauteMethod = react_1.screen.getByTestId('method-sauté');
        void user.click(sauteMethod);
        // Verify method selection and details
        expect(react_1.screen.getByTestId('method-details-sauté')).toBeInTheDocument();
        // Step 4: Build a recipe
        const recipeNameInput = react_1.screen.getByTestId('recipe-name-input');
        void user.type(recipeNameInput, 'Italian Tomato Basil Sauté');
        // Add ingredients to recipe
        const addIngredientButton = react_1.screen.getByTestId('add-ingredient');
        void user.click(addIngredientButton);
        void user.click(addIngredientButton);
        void user.click(addIngredientButton);
        // Fill in ingredient details
        void user.type(react_1.screen.getByTestId('ingredient-quantity-0'), '2 cups');
        void user.type(react_1.screen.getByTestId('ingredient-name-0'), 'Fresh Tomatoes');
        void user.type(react_1.screen.getByTestId('ingredient-quantity-1'), '1/4 cup');
        void user.type(react_1.screen.getByTestId('ingredient-name-1'), 'Fresh Basil');
        void user.type(react_1.screen.getByTestId('ingredient-quantity-2'), '2 tbsp');
        void user.type(react_1.screen.getByTestId('ingredient-name-2'), 'Olive Oil');
        // Add cooking steps
        const addStepButton = react_1.screen.getByTestId('add-step');
        void user.click(addStepButton);
        void user.click(addStepButton);
        user.type(react_1.screen.getByTestId('step-instruction-0'), 'Heat olive oil in a large pan over medium heat');
        void user.type(react_1.screen.getByTestId('step-timing-0'), '2 min');
        user.type(react_1.screen.getByTestId('step-instruction-1'), 'Add tomatoes and basil, sauté until tender');
        void user.type(react_1.screen.getByTestId('step-timing-1'), '8 min');
        // Verify recipe can be saved
        const saveButton = react_1.screen.getByTestId('save-recipe');
        expect(saveButton).toBeEnabled();
        // Save the recipe
        void user.click(saveButton);
        // Verify the complete workflow
        expect(react_1.screen.getByDisplayValue('Italian Tomato Basil Sauté')).toBeInTheDocument();
        expect(react_1.screen.getByText('Ingredients: 3')).toBeInTheDocument();
        expect(react_1.screen.getByText('Steps: 2')).toBeInTheDocument();
    });
    it('handles ingredient exploration workflow', async () => {
        const user = user_event_1.default.setup();
        (0, react_1.act)(async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByTestId('ingredient-recommender')).toBeInTheDocument();
        });
        // Expand ingredient details
        const expandTomatoes = react_1.screen.getByTestId('expand-tomatoes');
        void user.click(expandTomatoes);
        // Verify details are shown
        expect(react_1.screen.getByTestId('details-tomatoes')).toBeInTheDocument();
        expect(react_1.screen.getByText('Category: Vegetables')).toBeInTheDocument();
        expect(react_1.screen.getByText('Properties: Umami, Acidic, Fresh')).toBeInTheDocument();
        // Expand another ingredient
        const expandGarlic = react_1.screen.getByTestId('expand-garlic');
        void user.click(expandGarlic);
        expect(react_1.screen.getByTestId('details-garlic')).toBeInTheDocument();
        expect(react_1.screen.getByText('Category: Aromatics')).toBeInTheDocument();
        // Collapse first ingredient
        void user.click(expandTomatoes);
        expect(react_1.screen.queryByTestId('details-tomatoes')).not.toBeInTheDocument();
        // Select multiple ingredients
        void user.click(react_1.screen.getByTestId('ingredient-tomatoes'));
        void user.click(react_1.screen.getByTestId('ingredient-garlic'));
        void user.click(react_1.screen.getByTestId('ingredient-basil'));
        // Verify selection summary
        expect(react_1.screen.getByText('Selected Ingredients (3)')).toBeInTheDocument();
        expect(react_1.screen.getByText('Tomatoes, Garlic, Basil')).toBeInTheDocument();
    });
    it('handles cooking method exploration workflow', async () => {
        const user = user_event_1.default.setup();
        (0, react_1.act)(async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByTestId('cooking-methods')).toBeInTheDocument();
        });
        // Select different cooking methods and view details
        const roastMethod = react_1.screen.getByTestId('method-roast');
        void user.click(roastMethod);
        expect(react_1.screen.getByTestId('method-details-roast')).toBeInTheDocument();
        expect(react_1.screen.getByText('Cooking in the oven with dry heat')).toBeInTheDocument();
        // Switch to another method
        const grillMethod = react_1.screen.getByTestId('method-grill');
        void user.click(grillMethod);
        expect(react_1.screen.getByTestId('method-details-grill')).toBeInTheDocument();
        expect(react_1.screen.getByText('Cooking over direct heat')).toBeInTheDocument();
        // Previous method details should be hidden
        expect(react_1.screen.queryByTestId('method-details-roast')).not.toBeInTheDocument();
        // Test view more functionality
        const viewMoreButton = react_1.screen.getByTestId('view-more-methods');
        expect(viewMoreButton).toBeInTheDocument();
    });
    it('handles complete recipe creation workflow', async () => {
        const user = user_event_1.default.setup();
        (0, react_1.act)(async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByTestId('recipe-builder')).toBeInTheDocument();
        });
        // Create a complete recipe from scratch
        const recipeNameInput = react_1.screen.getByTestId('recipe-name-input');
        void user.type(recipeNameInput, 'Mediterranean Chicken');
        // Update recipe metadata
        const servingsInput = react_1.screen.getByTestId('servings-input');
        const prepTimeInput = react_1.screen.getByTestId('prep-time-input');
        const cookTimeInput = react_1.screen.getByTestId('cook-time-input');
        void user.clear(servingsInput);
        void user.type(servingsInput, '6');
        void user.clear(prepTimeInput);
        void user.type(prepTimeInput, '20');
        void user.clear(cookTimeInput);
        void user.type(cookTimeInput, '45');
        // Add multiple ingredients
        for (let i = 0; i < 4; i++) {
            void user.click(react_1.screen.getByTestId('add-ingredient'));
        }
        const ingredients = [
            { quantity: '2 lbs', name: 'Chicken Breast' },
            { quantity: '1 cup', name: 'Cherry Tomatoes' },
            { quantity: '1/2 cup', name: 'Kalamata Olives' },
            { quantity: '1/4 cup', name: 'Olive Oil' },
        ];
        for (let i = 0; i < ingredients.length; i++) {
            void user.type(react_1.screen.getByTestId(`ingredient-quantity-${i}`), ingredients[i].quantity);
            void user.type(react_1.screen.getByTestId(`ingredient-name-${i}`), ingredients[i].name);
        }
        // Add cooking steps
        for (let i = 0; i < 3; i++) {
            void user.click(react_1.screen.getByTestId('add-step'));
        }
        const steps = [
            { instruction: 'Preheat oven to 375°F and prepare chicken', timing: '5 min' },
            { instruction: 'Sear chicken in olive oil until golden', timing: '10 min' },
            { instruction: 'Add tomatoes and olives, bake until done', timing: '30 min' },
        ];
        for (let i = 0; i < steps.length; i++) {
            void user.type(react_1.screen.getByTestId(`step-instruction-${i}`), steps[i].instruction);
            void user.type(react_1.screen.getByTestId(`step-timing-${i}`), steps[i].timing);
        }
        // Verify recipe summary
        const summary = react_1.screen.getByTestId('recipe-summary');
        expect(summary).toHaveTextContent('Name: Mediterranean Chicken');
        expect(summary).toHaveTextContent('Servings: 6');
        expect(summary).toHaveTextContent('Total Time: 65 minutes');
        expect(summary).toHaveTextContent('Ingredients: 4');
        expect(summary).toHaveTextContent('Steps: 3');
        // Verify save button is enabled
        const saveButton = react_1.screen.getByTestId('save-recipe');
        expect(saveButton).toBeEnabled();
        expect(saveButton).toHaveClass('enabled');
        // Test ingredient removal
        void user.click(react_1.screen.getByTestId('remove-ingredient-3'));
        expect(react_1.screen.getByText('Ingredients: 3')).toBeInTheDocument();
        // Test step removal
        void user.click(react_1.screen.getByTestId('remove-step-0'));
        expect(react_1.screen.getByText('Steps: 2')).toBeInTheDocument();
        // Verify step renumbering
        expect(react_1.screen.getByDisplayValue('Sear chicken in olive oil until golden')).toBeInTheDocument();
    });
    it('handles navigation and state preservation workflow', async () => {
        const user = user_event_1.default.setup();
        const mockOnSectionNavigate = jest.fn();
        (0, react_1.act)(async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { onSectionNavigate: mockOnSectionNavigate }));
        });
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByTestId('cuisine-recommender')).toBeInTheDocument();
        });
        // Make selections across different components
        void user.click(react_1.screen.getByTestId('cuisine-italian'));
        void user.click(react_1.screen.getByTestId('ingredient-tomatoes'));
        void user.click(react_1.screen.getByTestId('method-sauté'));
        // Navigate between sections
        const cuisineNavButton = react_1.screen.getByText('Cuisine Recommendations');
        void user.click(cuisineNavButton);
        expect(mockOnSectionNavigate).toHaveBeenCalledWith('cuisine');
        const ingredientsNavButton = react_1.screen.getByText('Ingredient Recommendations');
        void user.click(ingredientsNavButton);
        expect(mockOnSectionNavigate).toHaveBeenCalledWith('ingredients');
        // Verify state preservation was called
        await (0, react_1.waitFor)(() => {
            expect(mockNavigationState.saveState).toHaveBeenCalled();
        });
        // Verify selections are maintained after navigation
        expect(react_1.screen.getByTestId('recipe-recommendations')).toBeInTheDocument();
        expect(react_1.screen.getByText('Selected Ingredients (1)')).toBeInTheDocument();
        expect(react_1.screen.getByTestId('method-details-sauté')).toBeInTheDocument();
    });
    it('handles error recovery workflow', async () => {
        const user = user_event_1.default.setup();
        // Mock console.error to avoid noise
        const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => { });
        (0, react_1.act)(async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByTestId('recipe-builder')).toBeInTheDocument();
        });
        // Simulate user creating a recipe and encountering an error
        const recipeNameInput = react_1.screen.getByTestId('recipe-name-input');
        void user.type(recipeNameInput, 'Test Recipe');
        // Add ingredient
        void user.click(react_1.screen.getByTestId('add-ingredient'));
        void user.type(react_1.screen.getByTestId('ingredient-name-0'), 'Test Ingredient');
        // Add step
        void user.click(react_1.screen.getByTestId('add-step'));
        void user.type(react_1.screen.getByTestId('step-instruction-0'), 'Test step');
        // Verify recipe is valid
        expect(react_1.screen.getByTestId('save-recipe')).toBeEnabled();
        // The main page should continue to function despite any errors
        expect(react_1.screen.getByText('What to Eat Next')).toBeInTheDocument();
        expect(react_1.screen.getByTestId('recipe-builder')).toBeInTheDocument();
        consoleSpy.mockRestore();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,