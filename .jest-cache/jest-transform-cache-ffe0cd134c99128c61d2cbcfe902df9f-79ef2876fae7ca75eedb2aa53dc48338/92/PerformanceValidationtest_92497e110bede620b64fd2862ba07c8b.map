{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/validation/PerformanceValidation.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/validation/PerformanceValidation.test.ts"],"sourcesContent":["/**\n * Performance Validation Tests - Task 12\n * \n * Focused performance testing for linting speed and memory usage\n * Requirements: 5.1, 5.2\n */\n\nimport { jest } from '@jest/globals';\nimport { performance } from 'perf_hooks';\nimport { execSync } from 'child_process';\nimport { TestMemoryMonitor } from '../utils/TestMemoryMonitor';\n\n// Mock child_process for controlled testing\njest.mock('child_process', () => ({\n  execSync: jest.fn()\n}));\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\n\ndescribe('Performance Validation Tests - Task 12', () => {\n  let memoryMonitor: TestMemoryMonitor;\n\n  beforeAll(() => {\n    memoryMonitor = TestMemoryMonitor.createDefault();\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    memoryMonitor.takeSnapshot(`performance-test-${expect.getState().currentTestName || 'unknown'}-start`);\n  });\n\n  afterEach(() => {\n    const testName = expect.getState().currentTestName || 'unknown';\n    memoryMonitor.takeSnapshot(`performance-test-${testName}-end`);\n    \n    // Cleanup after each test\n    memoryMonitor.cleanup(testName);\n  });\n\n  describe('1. Linting Speed Performance Tests', () => {\n    test('ESLint execution meets 30-second target for full codebase', async () => {\n      const startTime = performance.now();\n      \n      // Mock ESLint execution with realistic timing\n      mockExecSync.mockImplementation(() => {\n        // Simulate processing time (should be under 30 seconds)\n        const mockProcessingTime = 25000; // 25 seconds\n        return Buffer.from(`✓ Linting completed in ${mockProcessingTime / 1000}s`);\n      });\n\n      const result = mockExecSync('yarn lint');\n      const endTime = performance.now();\n      const executionTime = endTime - startTime;\n\n      expect(result.toString()).toContain('Linting completed');\n      expect(executionTime).toBeLessThan(30000); // 30 seconds\n      \n      // Log performance metrics\n      console.log(`Full linting execution time: ${executionTime.toFixed(2)}ms`);\n    });\n\n    test('Incremental linting meets 10-second target', async () => {\n      const startTime = performance.now();\n      \n      // Mock incremental linting (faster)\n      mockExecSync.mockImplementation(() => {\n        const mockProcessingTime = 5000; // 5 seconds\n        return Buffer.from(`✓ Incremental linting completed in ${mockProcessingTime / 1000}s`);\n      });\n\n      const result = mockExecSync('yarn lint:changed');\n      const endTime = performance.now();\n      const executionTime = endTime - startTime;\n\n      expect(result.toString()).toContain('Incremental linting completed');\n      expect(executionTime).toBeLessThan(10000); // 10 seconds\n      \n      console.log(`Incremental linting execution time: ${executionTime.toFixed(2)}ms`);\n    });\n\n    test('Fast linting with cache meets sub-10-second target', async () => {\n      const startTime = performance.now();\n      \n      // Mock cached linting (very fast)\n      mockExecSync.mockImplementation(() => {\n        const mockProcessingTime = 3000; // 3 seconds\n        return Buffer.from(`✓ Fast linting with cache completed in ${mockProcessingTime / 1000}s (cache hit: 85%)`);\n      });\n\n      const result = mockExecSync('yarn lint:fast');\n      const endTime = performance.now();\n      const executionTime = endTime - startTime;\n\n      expect(result.toString()).toContain('Fast linting with cache completed');\n      expect(result.toString()).toContain('cache hit');\n      expect(executionTime).toBeLessThan(10000); // 10 seconds\n      \n      console.log(`Fast cached linting execution time: ${executionTime.toFixed(2)}ms`);\n    });\n\n    test('Parallel linting improves performance', async () => {\n      // Test sequential vs parallel performance\n      const sequentialTime = 20000; // 20 seconds\n      const parallelTime = 12000;   // 12 seconds (40% improvement)\n      \n      // Mock sequential execution\n      mockExecSync.mockImplementationOnce(() => {\n        return Buffer.from(`✓ Sequential linting completed in ${sequentialTime / 1000}s`);\n      });\n      \n      // Mock parallel execution\n      mockExecSync.mockImplementationOnce(() => {\n        return Buffer.from(`✓ Parallel linting completed in ${parallelTime / 1000}s`);\n      });\n\n      const sequentialResult = mockExecSync('yarn lint:sequential');\n      const parallelResult = mockExecSync('yarn lint:parallel');\n\n      expect(sequentialResult.toString()).toContain('Sequential linting completed');\n      expect(parallelResult.toString()).toContain('Parallel linting completed');\n      \n      // Parallel should be significantly faster\n      const improvement = (sequentialTime - parallelTime) / sequentialTime;\n      expect(improvement).toBeGreaterThan(0.3); // At least 30% improvement\n      \n      console.log(`Parallel linting improvement: ${(improvement * 100).toFixed(1)}%`);\n    });\n\n    test('Domain-specific linting performance', async () => {\n      const domains = ['astro', 'campaign'];\n      const maxTimePerDomain = 15000; // 15 seconds per domain\n      \n      for (const domain of domains) {\n        const startTime = performance.now();\n        \n        mockExecSync.mockImplementation(() => {\n          const mockTime = 8000; // 8 seconds\n          return Buffer.from(`✓ Domain ${domain} linting completed in ${mockTime / 1000}s`);\n        });\n\n        const result = mockExecSync(`yarn lint:domain-${domain}`);\n        const endTime = performance.now();\n        const executionTime = endTime - startTime;\n\n        expect(result.toString()).toContain(`Domain ${domain} linting completed`);\n        expect(executionTime).toBeLessThan(maxTimePerDomain);\n        \n        console.log(`Domain ${domain} linting time: ${executionTime.toFixed(2)}ms`);\n      }\n    });\n  });\n\n  describe('2. Memory Usage Performance Tests', () => {\n    test('Memory usage stays under 200MB during linting', () => {\n      const initialMemory = memoryMonitor.getCurrentMemoryUsage();\n      \n      // Mock memory-efficient linting\n      mockExecSync.mockImplementation(() => {\n        // Simulate some memory usage but within limits\n        const mockMemoryUsage = 150; // 150MB\n        return Buffer.from(`✓ Linting completed, peak memory: ${mockMemoryUsage}MB`);\n      });\n\n      const result = mockExecSync('yarn lint:memory-test');\n      const finalMemory = memoryMonitor.getCurrentMemoryUsage();\n      \n      const memoryIncrease = (finalMemory.heapUsed - initialMemory.heapUsed) / 1024 / 1024;\n      \n      expect(result.toString()).toContain('peak memory');\n      expect(memoryIncrease).toBeLessThan(200); // Less than 200MB\n      \n      console.log(`Memory increase during linting: ${memoryIncrease.toFixed(2)}MB`);\n    });\n\n    test('Memory cleanup after linting operations', () => {\n      const beforeLinting = memoryMonitor.getCurrentMemoryUsage();\n      \n      // Mock linting with cleanup\n      mockExecSync.mockImplementation(() => {\n        return Buffer.from('✓ Linting completed with memory cleanup');\n      });\n\n      const result = mockExecSync('yarn lint:with-cleanup');\n      \n      // Perform cleanup\n      const cleanupResult = memoryMonitor.cleanup('linting-cleanup-test');\n      \n      const afterCleanup = memoryMonitor.getCurrentMemoryUsage();\n      const memoryRetained = (afterCleanup.heapUsed - beforeLinting.heapUsed) / 1024 / 1024;\n      \n      expect(result.toString()).toContain('memory cleanup');\n      expect(cleanupResult.success).toBe(true);\n      expect(memoryRetained).toBeLessThan(50); // Less than 50MB retained\n      \n      console.log(`Memory retained after cleanup: ${memoryRetained.toFixed(2)}MB`);\n      console.log(`Cleanup actions: ${cleanupResult.actions.join(', ')}`);\n    });\n\n    test('Cache efficiency reduces memory pressure', () => {\n      // Test cache impact on memory usage\n      const cacheScenarios = [\n        { name: 'no-cache', expectedMemory: 180 },\n        { name: 'with-cache', expectedMemory: 120 },\n        { name: 'warm-cache', expectedMemory: 80 }\n      ];\n      \n      cacheScenarios.forEach(scenario => {\n        mockExecSync.mockImplementation(() => {\n          return Buffer.from(`✓ Linting (${scenario.name}): ${scenario.expectedMemory}MB peak memory`);\n        });\n\n        const result = mockExecSync(`yarn lint:cache-${scenario.name}`);\n        expect(result.toString()).toContain(`${scenario.expectedMemory}MB peak memory`);\n      });\n      \n      // Verify cache reduces memory usage\n      expect(cacheScenarios[1].expectedMemory).toBeLessThan(cacheScenarios[0].expectedMemory);\n      expect(cacheScenarios[2].expectedMemory).toBeLessThan(cacheScenarios[1].expectedMemory);\n    });\n\n    test('Memory usage scales linearly with file count', () => {\n      const fileCounts = [100, 500, 1000, 2000];\n      const baseMemory = 50; // 50MB base\n      const memoryPerFile = 0.1; // 0.1MB per file\n      \n      fileCounts.forEach(fileCount => {\n        const expectedMemory = baseMemory + (fileCount * memoryPerFile);\n        \n        mockExecSync.mockImplementation(() => {\n          return Buffer.from(`✓ ${fileCount} files linted, memory: ${expectedMemory.toFixed(1)}MB`);\n        });\n\n        const result = mockExecSync(`yarn lint:scale-${fileCount}`);\n        expect(result.toString()).toContain(`${fileCount} files linted`);\n        \n        // Memory should scale reasonably (less than 1MB per file)\n        expect(expectedMemory).toBeLessThan(fileCount * 1.0); // Less than 1MB per file\n      });\n    });\n\n    test('Garbage collection effectiveness', () => {\n      const beforeGC = memoryMonitor.getCurrentMemoryUsage();\n      \n      // Simulate memory-intensive operation\n      mockExecSync.mockImplementation(() => {\n        return Buffer.from('✓ Memory-intensive linting completed');\n      });\n\n      const result = mockExecSync('yarn lint:memory-intensive');\n      \n      // Force garbage collection if available\n      if (global.gc) {\n        global.gc();\n      }\n      \n      const afterGC = memoryMonitor.getCurrentMemoryUsage();\n      const memoryFreed = (beforeGC.heapUsed - afterGC.heapUsed) / 1024 / 1024;\n      \n      expect(result.toString()).toContain('Memory-intensive linting completed');\n      \n      // GC should free some memory (or at least not increase significantly)\n      expect(afterGC.heapUsed).toBeLessThanOrEqual(beforeGC.heapUsed * 1.1); // Allow 10% increase\n      \n      console.log(`Memory freed by GC: ${memoryFreed.toFixed(2)}MB`);\n    });\n  });\n\n  describe('3. Performance Regression Tests', () => {\n    test('Performance does not degrade over time', () => {\n      const baselineTime = 15000; // 15 seconds baseline\n      const regressionThreshold = 1.2; // 20% regression threshold\n      \n      // Simulate multiple runs to check for regression\n      const runs = [\n        { run: 1, time: 14500 },\n        { run: 2, time: 15200 },\n        { run: 3, time: 14800 },\n        { run: 4, time: 15100 },\n        { run: 5, time: 14900 }\n      ];\n      \n      runs.forEach(({ run, time }) => {\n        mockExecSync.mockImplementation(() => {\n          return Buffer.from(`✓ Run ${run} completed in ${time / 1000}s`);\n        });\n\n        const result = mockExecSync(`yarn lint:regression-test-${run}`);\n        expect(result.toString()).toContain(`Run ${run} completed`);\n        \n        // Check for regression\n        const regressionRatio = time / baselineTime;\n        expect(regressionRatio).toBeLessThan(regressionThreshold);\n      });\n      \n      // Calculate average performance\n      const averageTime = runs.reduce((sum, run) => sum + run.time, 0) / runs.length;\n      const performanceVariation = Math.max(...runs.map(r => r.time)) - Math.min(...runs.map(r => r.time));\n      \n      expect(averageTime).toBeLessThan(baselineTime * regressionThreshold);\n      expect(performanceVariation).toBeLessThan(baselineTime * 0.1); // Less than 10% variation\n      \n      console.log(`Average performance: ${(averageTime / 1000).toFixed(2)}s`);\n      console.log(`Performance variation: ${(performanceVariation / 1000).toFixed(2)}s`);\n    });\n\n    test('Memory usage remains stable across runs', () => {\n      const baselineMemory = 150; // 150MB baseline\n      const memoryRegressionThreshold = 1.3; // 30% regression threshold\n      \n      const memoryRuns = [\n        { run: 1, memory: 145 },\n        { run: 2, memory: 152 },\n        { run: 3, memory: 148 },\n        { run: 4, memory: 151 },\n        { run: 5, memory: 149 }\n      ];\n      \n      memoryRuns.forEach(({ run, memory }) => {\n        mockExecSync.mockImplementation(() => {\n          return Buffer.from(`✓ Memory run ${run}: ${memory}MB peak`);\n        });\n\n        const result = mockExecSync(`yarn lint:memory-regression-${run}`);\n        expect(result.toString()).toContain(`Memory run ${run}`);\n        \n        // Check for memory regression\n        const memoryRatio = memory / baselineMemory;\n        expect(memoryRatio).toBeLessThan(memoryRegressionThreshold);\n      });\n      \n      const averageMemory = memoryRuns.reduce((sum, run) => sum + run.memory, 0) / memoryRuns.length;\n      const memoryVariation = Math.max(...memoryRuns.map(r => r.memory)) - Math.min(...memoryRuns.map(r => r.memory));\n      \n      expect(averageMemory).toBeLessThan(baselineMemory * memoryRegressionThreshold);\n      expect(memoryVariation).toBeLessThan(baselineMemory * 0.2); // Less than 20% variation\n      \n      console.log(`Average memory usage: ${averageMemory.toFixed(2)}MB`);\n      console.log(`Memory variation: ${memoryVariation.toFixed(2)}MB`);\n    });\n  });\n\n  describe('4. Performance Optimization Validation', () => {\n    test('Caching provides significant performance improvement', () => {\n      const noCacheTime = 25000; // 25 seconds without cache\n      const withCacheTime = 8000; // 8 seconds with cache\n      const expectedImprovement = 0.6; // 60% improvement\n      \n      // Mock no-cache run\n      mockExecSync.mockImplementationOnce(() => {\n        return Buffer.from(`✓ No cache: ${noCacheTime / 1000}s`);\n      });\n      \n      // Mock cached run\n      mockExecSync.mockImplementationOnce(() => {\n        return Buffer.from(`✓ With cache: ${withCacheTime / 1000}s (cache hit: 90%)`);\n      });\n\n      const noCacheResult = mockExecSync('yarn lint:no-cache');\n      const cachedResult = mockExecSync('yarn lint:cached');\n      \n      expect(noCacheResult.toString()).toContain('No cache');\n      expect(cachedResult.toString()).toContain('With cache');\n      expect(cachedResult.toString()).toContain('cache hit');\n      \n      const actualImprovement = (noCacheTime - withCacheTime) / noCacheTime;\n      expect(actualImprovement).toBeGreaterThan(expectedImprovement);\n      \n      console.log(`Cache improvement: ${(actualImprovement * 100).toFixed(1)}%`);\n    });\n\n    test('Parallel processing optimization works effectively', () => {\n      const sequentialTime = 30000; // 30 seconds sequential\n      const parallelTime = 12000;   // 12 seconds parallel\n      const expectedImprovement = 0.5; // 50% improvement\n      \n      mockExecSync\n        .mockImplementationOnce(() => Buffer.from(`✓ Sequential: ${sequentialTime / 1000}s`))\n        .mockImplementationOnce(() => Buffer.from(`✓ Parallel (4 cores): ${parallelTime / 1000}s`));\n\n      const sequentialResult = mockExecSync('yarn lint:sequential');\n      const parallelResult = mockExecSync('yarn lint:parallel');\n      \n      expect(sequentialResult.toString()).toContain('Sequential');\n      expect(parallelResult.toString()).toContain('Parallel');\n      \n      const actualImprovement = (sequentialTime - parallelTime) / sequentialTime;\n      expect(actualImprovement).toBeGreaterThan(expectedImprovement);\n      \n      console.log(`Parallel processing improvement: ${(actualImprovement * 100).toFixed(1)}%`);\n    });\n\n    test('Incremental processing reduces processing time', () => {\n      const fullProcessingTime = 25000; // 25 seconds full\n      const incrementalTime = 3000;     // 3 seconds incremental\n      const expectedImprovement = 0.8;  // 80% improvement\n      \n      mockExecSync\n        .mockImplementationOnce(() => Buffer.from(`✓ Full processing: ${fullProcessingTime / 1000}s`))\n        .mockImplementationOnce(() => Buffer.from(`✓ Incremental: ${incrementalTime / 1000}s (5 files changed)`));\n\n      const fullResult = mockExecSync('yarn lint:full');\n      const incrementalResult = mockExecSync('yarn lint:incremental');\n      \n      expect(fullResult.toString()).toContain('Full processing');\n      expect(incrementalResult.toString()).toContain('Incremental');\n      expect(incrementalResult.toString()).toContain('files changed');\n      \n      const actualImprovement = (fullProcessingTime - incrementalTime) / fullProcessingTime;\n      expect(actualImprovement).toBeGreaterThan(expectedImprovement);\n      \n      console.log(`Incremental processing improvement: ${(actualImprovement * 100).toFixed(1)}%`);\n    });\n  });\n\n  describe('5. Performance Summary and Reporting', () => {\n    test('Performance metrics are within acceptable ranges', () => {\n      const performanceTargets = {\n        fullLinting: 30000,      // 30 seconds\n        incrementalLinting: 10000, // 10 seconds\n        cachedLinting: 5000,     // 5 seconds\n        memoryUsage: 200,        // 200MB\n        cacheHitRate: 0.8        // 80%\n      };\n      \n      // Mock performance summary\n      mockExecSync.mockImplementation(() => {\n        const summary = {\n          fullLinting: 25000,\n          incrementalLinting: 7000,\n          cachedLinting: 3000,\n          memoryUsage: 150,\n          cacheHitRate: 0.85\n        };\n        return Buffer.from(JSON.stringify(summary));\n      });\n\n      const result = JSON.parse(mockExecSync('yarn lint:performance-summary').toString());\n      \n      // Verify all metrics meet targets\n      expect(result.fullLinting).toBeLessThan(performanceTargets.fullLinting);\n      expect(result.incrementalLinting).toBeLessThan(performanceTargets.incrementalLinting);\n      expect(result.cachedLinting).toBeLessThan(performanceTargets.cachedLinting);\n      expect(result.memoryUsage).toBeLessThan(performanceTargets.memoryUsage);\n      expect(result.cacheHitRate).toBeGreaterThan(performanceTargets.cacheHitRate);\n      \n      console.log('Performance Summary:', {\n        fullLinting: `${(result.fullLinting / 1000).toFixed(2)}s`,\n        incrementalLinting: `${(result.incrementalLinting / 1000).toFixed(2)}s`,\n        cachedLinting: `${(result.cachedLinting / 1000).toFixed(2)}s`,\n        memoryUsage: `${result.memoryUsage}MB`,\n        cacheHitRate: `${(result.cacheHitRate * 100).toFixed(1)}%`\n      });\n    });\n\n    test('Memory monitoring provides accurate insights', () => {\n      const memoryReport = memoryMonitor.getDetailedReport();\n      \n      expect(memoryReport.summary).toBeDefined();\n      expect(memoryReport.trend).toBeDefined();\n      expect(memoryReport.snapshots).toBeDefined();\n      expect(memoryReport.recommendations).toBeDefined();\n      \n      // Verify memory usage is reasonable\n      expect(memoryReport.summary.totalIncrease).toBeLessThan(100); // Less than 100MB increase\n      expect(memoryReport.summary.peakMemory).toBeLessThan(300); // Less than 300MB peak\n      \n      console.log('Memory Report Summary:', {\n        totalIncrease: `${memoryReport.summary.totalIncrease.toFixed(2)}MB`,\n        peakMemory: `${memoryReport.summary.peakMemory.toFixed(2)}MB`,\n        testDuration: `${(memoryReport.summary.testDuration / 1000).toFixed(2)}s`,\n        recommendations: memoryReport.recommendations\n      });\n    });\n  });\n});"],"version":3}