82c4966c6008111e8da48d3fe41dd6ce
"use strict";
/**
 * React hook for using the ingredient mapping service in components
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useIngredientMapping = void 0;
const react_1 = require("react");
const ingredientMappingService_1 = __importDefault(require("@/services/ingredientMappingService"));
function useIngredientMapping() {
    const [isLoading, setIsLoading] = (0, react_1.useState)(false);
    const [error, setError] = (0, react_1.useState)(null);
    /**
     * Map ingredients for a specific recipe
     */
    const mapRecipeIngredients = (0, react_1.useCallback)((recipe) => {
        try {
            setIsLoading(true);
            setError(null);
            const result = ingredientMappingService_1.default.mapRecipeIngredients(recipe);
            return result;
        }
        catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';
            setError(errorMessage);
            return [];
        }
        finally {
            setIsLoading(false);
        }
    }, []);
    /**
     * Find recipes matching the given criteria
     */
    const findMatchingRecipes = (0, react_1.useCallback)((options = {}) => {
        try {
            setIsLoading(true);
            setError(null);
            const result = ingredientMappingService_1.default.findMatchingRecipes(options);
            return result;
        }
        catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';
            setError(errorMessage);
            return [];
        }
        finally {
            setIsLoading(false);
        }
    }, []);
    /**
     * Suggest alternative ingredients with similar properties
     */
    const suggestAlternatives = (0, react_1.useCallback)((ingredientName, options = {}) => {
        try {
            setIsLoading(true);
            setError(null);
            const result = ingredientMappingService_1.default.suggestAlternativeIngredients(ingredientName, options);
            return result;
        }
        catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';
            setError(errorMessage);
            return {
                success: false,
                message: errorMessage,
                suggestions: []
            };
        }
        finally {
            setIsLoading(false);
        }
    }, []);
    /**
     * Calculate compatibility between two ingredients
     */
    const calculateCompatibility = (0, react_1.useCallback)((ingredient1, ingredient2) => {
        try {
            setIsLoading(true);
            setError(null);
            const result = ingredientMappingService_1.default.calculateCompatibility(ingredient1, ingredient2);
            return result;
        }
        catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';
            setError(errorMessage);
            return {
                success: false,
                message: errorMessage,
                compatibility: 0
            };
        }
        finally {
            setIsLoading(false);
        }
    }, []);
    /**
     * Analyze ingredient combinations in a recipe
     */
    const analyzeRecipeCombinations = (0, react_1.useCallback)((recipe) => {
        try {
            setIsLoading(true);
            setError(null);
            const result = ingredientMappingService_1.default.analyzeRecipeIngredientCombinations(recipe);
            return result;
        }
        catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';
            setError(errorMessage);
            return {
                success: false,
                message: errorMessage,
                mappingQuality: 0
            };
        }
        finally {
            setIsLoading(false);
        }
    }, []);
    return {
        isLoading,
        error,
        mapRecipeIngredients,
        findMatchingRecipes,
        suggestAlternatives,
        calculateCompatibility,
        analyzeRecipeCombinations
    };
}
exports.useIngredientMapping = useIngredientMapping;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,