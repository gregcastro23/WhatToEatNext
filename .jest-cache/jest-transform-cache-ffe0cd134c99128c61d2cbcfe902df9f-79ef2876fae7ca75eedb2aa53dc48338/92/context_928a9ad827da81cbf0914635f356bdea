06ecf57a45eb8f313101ba67da622a0b
"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlchemicalContext = exports.defaultState = void 0;
const react_1 = require("react");
// Define default state
exports.defaultState = {
    currentSeason: 'spring',
    timeOfDay: 'morning',
    astrologicalState: {
        currentZodiac: 'aries',
        sunSign: 'aries',
        lunarPhase: 'new moon',
        moonPhase: 'new moon',
        activePlanets: ['sun', 'moon'],
    },
    currentEnergy: {
        zodiacEnergy: '',
        lunarEnergy: '',
        planetaryEnergy: '',
    },
    elementalPreference: {
        Fire: 0.32,
        Water: 0.28,
        Earth: 0.18,
        Air: 0.22,
    },
    elementalState: {
        Fire: 0.32,
        Water: 0.28,
        Earth: 0.18,
        Air: 0.22,
    },
    celestialPositions: {
        sun: {
            sign: 'aries',
            degree: 0,
        },
        moon: {
            sign: 'taurus',
            degree: 0,
        },
    },
    error: false,
    errorMessage: '',
    errors: [],
    zodiacEnergy: '',
    lunarEnergy: '',
    planetaryEnergy: [],
    alchemicalValues: {
        Spirit: 0.29,
        Essence: 0.28,
        Matter: 0.21,
        Substance: 0.22,
    },
    lunarPhase: 'new moon',
    currentTime: new Date(),
    lastUpdated: new Date(),
    planetaryPositions: {},
    normalizedPositions: {},
    dominantElement: 'Fire',
    planetaryHour: 'Sun',
    svgRepresentation: null,
};
// Create the context with default values
exports.AlchemicalContext = (0, react_1.createContext)({
    state: exports.defaultState,
    dispatch: () => { },
    planetaryPositions: {},
    isDaytime: true,
    updatePlanetaryPositions: () => { },
    refreshPlanetaryPositions: async () => ({}),
    setDaytime: () => { },
    updateState: () => { },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9jb250ZXh0cy9BbGNoZW1pY2FsQ29udGV4dC9jb250ZXh0LnRzeCIsIm1hcHBpbmdzIjoiO0FBQUEsWUFBWSxDQUFDOzs7QUFFYixpQ0FBc0M7QUFPdEMsdUJBQXVCO0FBQ1YsUUFBQSxZQUFZLEdBQW9CO0lBQzNDLGFBQWEsRUFBRSxRQUFRO0lBQ3ZCLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLGlCQUFpQixFQUFFO1FBQ2pCLGFBQWEsRUFBRSxPQUFPO1FBQ3RCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLFNBQVMsRUFBRSxVQUFVO1FBQ3JCLGFBQWEsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUM7S0FDL0I7SUFDRCxhQUFhLEVBQUU7UUFDYixZQUFZLEVBQUUsRUFBRTtRQUNoQixXQUFXLEVBQUUsRUFBRTtRQUNmLGVBQWUsRUFBRSxFQUFFO0tBQ3BCO0lBQ0QsbUJBQW1CLEVBQUU7UUFDbkIsSUFBSSxFQUFFLElBQUk7UUFDVixLQUFLLEVBQUUsSUFBSTtRQUNYLEtBQUssRUFBRSxJQUFJO1FBQ1gsR0FBRyxFQUFFLElBQUk7S0FDVjtJQUNELGNBQWMsRUFBRTtRQUNkLElBQUksRUFBRSxJQUFJO1FBQ1YsS0FBSyxFQUFFLElBQUk7UUFDWCxLQUFLLEVBQUUsSUFBSTtRQUNYLEdBQUcsRUFBRSxJQUFJO0tBQ1Y7SUFDRCxrQkFBa0IsRUFBRTtRQUNsQixHQUFHLEVBQUU7WUFDSCxJQUFJLEVBQUUsT0FBTztZQUNiLE1BQU0sRUFBRSxDQUFDO1NBQ1Y7UUFDRCxJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUUsUUFBUTtZQUNkLE1BQU0sRUFBRSxDQUFDO1NBQ1Y7S0FDRjtJQUNELEtBQUssRUFBRSxLQUFLO0lBQ1osWUFBWSxFQUFFLEVBQUU7SUFDaEIsTUFBTSxFQUFFLEVBQUU7SUFDVixZQUFZLEVBQUUsRUFBRTtJQUNoQixXQUFXLEVBQUUsRUFBRTtJQUNmLGVBQWUsRUFBRSxFQUFFO0lBQ25CLGdCQUFnQixFQUFFO1FBQ2hCLE1BQU0sRUFBRSxJQUFJO1FBQ1osT0FBTyxFQUFFLElBQUk7UUFDYixNQUFNLEVBQUUsSUFBSTtRQUNaLFNBQVMsRUFBRSxJQUFJO0tBQ2hCO0lBQ0QsVUFBVSxFQUFFLFVBQVU7SUFDdEIsV0FBVyxFQUFFLElBQUksSUFBSSxFQUFFO0lBQ3ZCLFdBQVcsRUFBRSxJQUFJLElBQUksRUFBRTtJQUN2QixrQkFBa0IsRUFBRSxFQUFFO0lBQ3RCLG1CQUFtQixFQUFFLEVBQUU7SUFDdkIsZUFBZSxFQUFFLE1BQU07SUFDdkIsYUFBYSxFQUFFLEtBQUs7SUFDcEIsaUJBQWlCLEVBQUUsSUFBSTtDQUN4QixDQUFDO0FBRUYseUNBQXlDO0FBQzVCLFFBQUEsaUJBQWlCLEdBQUcsSUFBQSxxQkFBYSxFQUF3QjtJQUNwRSxLQUFLLEVBQUUsb0JBQVk7SUFDbkIsUUFBUSxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUM7SUFDbEIsa0JBQWtCLEVBQUUsRUFBRTtJQUN0QixTQUFTLEVBQUUsSUFBSTtJQUNmLHdCQUF3QixFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUM7SUFDbEMseUJBQXlCLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMzQyxVQUFVLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQztJQUNwQixXQUFXLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQztDQUN0QixDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9jb250ZXh0cy9BbGNoZW1pY2FsQ29udGV4dC9jb250ZXh0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBBbGNoZW1pY2FsU3RhdGUsXG4gIEFsY2hlbWljYWxDb250ZXh0VHlwZSxcbiAgUGxhbmV0YXJ5UG9zaXRpb25zVHlwZSxcbn0gZnJvbSAnLi90eXBlcyc7XG5cbi8vIERlZmluZSBkZWZhdWx0IHN0YXRlXG5leHBvcnQgY29uc3QgZGVmYXVsdFN0YXRlOiBBbGNoZW1pY2FsU3RhdGUgPSB7XG4gIGN1cnJlbnRTZWFzb246ICdzcHJpbmcnLFxuICB0aW1lT2ZEYXk6ICdtb3JuaW5nJyxcbiAgYXN0cm9sb2dpY2FsU3RhdGU6IHtcbiAgICBjdXJyZW50Wm9kaWFjOiAnYXJpZXMnLFxuICAgIHN1blNpZ246ICdhcmllcycsXG4gICAgbHVuYXJQaGFzZTogJ25ldyBtb29uJyxcbiAgICBtb29uUGhhc2U6ICduZXcgbW9vbicsXG4gICAgYWN0aXZlUGxhbmV0czogWydzdW4nLCAnbW9vbiddLFxuICB9LFxuICBjdXJyZW50RW5lcmd5OiB7XG4gICAgem9kaWFjRW5lcmd5OiAnJyxcbiAgICBsdW5hckVuZXJneTogJycsXG4gICAgcGxhbmV0YXJ5RW5lcmd5OiAnJyxcbiAgfSxcbiAgZWxlbWVudGFsUHJlZmVyZW5jZToge1xuICAgIEZpcmU6IDAuMzIsXG4gICAgV2F0ZXI6IDAuMjgsXG4gICAgRWFydGg6IDAuMTgsXG4gICAgQWlyOiAwLjIyLFxuICB9LFxuICBlbGVtZW50YWxTdGF0ZToge1xuICAgIEZpcmU6IDAuMzIsXG4gICAgV2F0ZXI6IDAuMjgsXG4gICAgRWFydGg6IDAuMTgsXG4gICAgQWlyOiAwLjIyLFxuICB9LFxuICBjZWxlc3RpYWxQb3NpdGlvbnM6IHtcbiAgICBzdW46IHtcbiAgICAgIHNpZ246ICdhcmllcycsXG4gICAgICBkZWdyZWU6IDAsXG4gICAgfSxcbiAgICBtb29uOiB7XG4gICAgICBzaWduOiAndGF1cnVzJyxcbiAgICAgIGRlZ3JlZTogMCxcbiAgICB9LFxuICB9LFxuICBlcnJvcjogZmFsc2UsXG4gIGVycm9yTWVzc2FnZTogJycsXG4gIGVycm9yczogW10sXG4gIHpvZGlhY0VuZXJneTogJycsXG4gIGx1bmFyRW5lcmd5OiAnJyxcbiAgcGxhbmV0YXJ5RW5lcmd5OiBbXSxcbiAgYWxjaGVtaWNhbFZhbHVlczoge1xuICAgIFNwaXJpdDogMC4yOSxcbiAgICBFc3NlbmNlOiAwLjI4LFxuICAgIE1hdHRlcjogMC4yMSxcbiAgICBTdWJzdGFuY2U6IDAuMjIsXG4gIH0sXG4gIGx1bmFyUGhhc2U6ICduZXcgbW9vbicsXG4gIGN1cnJlbnRUaW1lOiBuZXcgRGF0ZSgpLFxuICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKSxcbiAgcGxhbmV0YXJ5UG9zaXRpb25zOiB7fSxcbiAgbm9ybWFsaXplZFBvc2l0aW9uczoge30sXG4gIGRvbWluYW50RWxlbWVudDogJ0ZpcmUnLFxuICBwbGFuZXRhcnlIb3VyOiAnU3VuJyxcbiAgc3ZnUmVwcmVzZW50YXRpb246IG51bGwsXG59O1xuXG4vLyBDcmVhdGUgdGhlIGNvbnRleHQgd2l0aCBkZWZhdWx0IHZhbHVlc1xuZXhwb3J0IGNvbnN0IEFsY2hlbWljYWxDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxBbGNoZW1pY2FsQ29udGV4dFR5cGU+KHtcbiAgc3RhdGU6IGRlZmF1bHRTdGF0ZSxcbiAgZGlzcGF0Y2g6ICgpID0+IHt9LFxuICBwbGFuZXRhcnlQb3NpdGlvbnM6IHt9LFxuICBpc0RheXRpbWU6IHRydWUsXG4gIHVwZGF0ZVBsYW5ldGFyeVBvc2l0aW9uczogKCkgPT4ge30sXG4gIHJlZnJlc2hQbGFuZXRhcnlQb3NpdGlvbnM6IGFzeW5jICgpID0+ICh7fSksXG4gIHNldERheXRpbWU6ICgpID0+IHt9LFxuICB1cGRhdGVTdGF0ZTogKCkgPT4ge30sXG59KTtcblxuLy8gRXhwb3J0IHRoZSBBbGNoZW1pY2FsQ29udGV4dFR5cGUgZm9yIGRpcmVjdCBpbXBvcnRzXG5leHBvcnQgdHlwZSB7IEFsY2hlbWljYWxDb250ZXh0VHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuIl0sInZlcnNpb24iOjN9