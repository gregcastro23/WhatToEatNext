{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/hooks/useIngredientMapping.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/hooks/useIngredientMapping.ts"],"sourcesContent":["/**\n * React hook for using the ingredient mapping service in components\n */\n\nimport { useState, useCallback } from 'react';\nimport ingredientMappingService from '@/services/ingredientMappingService';\nimport type { Recipe } from '@/types/recipe';\nimport type { ElementalProperties } from '@/types/alchemy';\n\nexport function useIngredientMapping() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  /**\n   * Map ingredients for a specific recipe\n   */\n  const mapRecipeIngredients = useCallback((recipe: Recipe) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const result = ingredientMappingService.mapRecipeIngredients(recipe);\n      return result;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';\n      setError(errorMessage);\n      return [];\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * Find recipes matching the given criteria\n   */\n  const findMatchingRecipes = useCallback((options: {\n    elementalTarget?: ElementalProperties;\n    requiredIngredients?: string[];\n    excludedIngredients?: string[];\n    dietaryRestrictions?: string[];\n    emphasizedIngredients?: string[];\n    cuisineType?: string;\n    mealType?: string;\n    season?: string;\n  } = {}) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const result = ingredientMappingService.findMatchingRecipes(options);\n      return result;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';\n      setError(errorMessage);\n      return [];\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * Suggest alternative ingredients with similar properties\n   */\n  const suggestAlternatives = useCallback((ingredientName: string, options = {}) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const result = ingredientMappingService.suggestAlternativeIngredients(ingredientName, options);\n      return result;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';\n      setError(errorMessage);\n      return {\n        success: false,\n        message: errorMessage,\n        suggestions: []\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * Calculate compatibility between two ingredients\n   */\n  const calculateCompatibility = useCallback((ingredient1: string, ingredient2: string) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const result = ingredientMappingService.calculateCompatibility(ingredient1, ingredient2);\n      return result;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';\n      setError(errorMessage);\n      return {\n        success: false,\n        message: errorMessage,\n        compatibility: 0\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * Analyze ingredient combinations in a recipe\n   */\n  const analyzeRecipeCombinations = useCallback((recipe: Recipe) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const result = ingredientMappingService.analyzeRecipeIngredientCombinations(recipe);\n      return result;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';\n      setError(errorMessage);\n      return {\n        success: false,\n        message: errorMessage,\n        mappingQuality: 0\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  return {\n    isLoading,\n    error,\n    mapRecipeIngredients,\n    findMatchingRecipes,\n    suggestAlternatives,\n    calculateCompatibility,\n    analyzeRecipeCombinations\n  };\n} "],"version":3}