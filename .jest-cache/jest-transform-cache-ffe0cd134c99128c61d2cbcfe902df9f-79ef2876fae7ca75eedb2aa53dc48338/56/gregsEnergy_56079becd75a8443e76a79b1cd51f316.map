{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/gregsEnergy.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/gregsEnergy.ts"],"sourcesContent":["import { ElementalCharacter, AlchemicalProperty } from '../constants/planetaryElements';\n\n/**\n * A utility function for logging debug information\n * This is a safe replacement for console.log that can be disabled in production\n */\nconst debugLog = (_message: string, ...args: unknown[]): void => {\n  // Comment out console.log to avoid linting warnings\n  // console.log(message, ...args);\n};\n\n/**\n * Interface representing the count of each elemental and alchemical property\n */\nexport interface ElementalAlchemicalCounts {\n  // Alchemical properties\n  Spirit: number;\n  Essence: number;\n  Matter: number;\n  Substance: number;\n  \n  // Elemental characters\n  Fire: number;\n  Water: number;\n  Air: number;\n  Earth: number;\n}\n\n/**\n * Thermodynamic metrics for energy calculations\n */\nexport interface ThermodynamicMetrics {\n    heat: number;          // Thermal energy from celestial friction (0-1)\n    entropy: number;       // Disorder in planetary system (0-1) \n    reactivity: number;    // Chemical potential for transformation (0-1)\n    gregsEnergy: number;   // Free energy metric (0-1)\n}\n\n/**\n * Represents the state of elemental and alchemical properties in a system\n */\nexport interface ElementalState {\n    fire: number;    // Combustive/transformative energy\n    water: number;   // Fluid/adaptive capacity\n    air: number;     // Gaseous/diffusive quality\n    earth: number;   // Solid/stabilizing force\n    spirit: number;  // Ethereal/creative essence (non-material)\n    essence: number; // Vital/animating principle\n    matter: number;  // Physical manifestation\n    substance: number;// Structural integrity\n}\n\n/**\n * Mapping of planetary hours for each day of the week\n */\nconst planetaryHours: Record<string, string[]> = {\n    Sunday: ['Sun', 'Venus', 'Mercury', 'Moon', 'Saturn', 'Jupiter', 'Mars'],\n    Monday: ['Moon', 'Saturn', 'Jupiter', 'Mars', 'Sun', 'Venus', 'Mercury'],\n    Tuesday: ['Mars', 'Sun', 'Venus', 'Mercury', 'Moon', 'Saturn', 'Jupiter'],\n    Wednesday: ['Mercury', 'Moon', 'Saturn', 'Jupiter', 'Mars', 'Sun', 'Venus'],\n    Thursday: ['Jupiter', 'Mars', 'Sun', 'Venus', 'Mercury', 'Moon', 'Saturn'],\n    Friday: ['Venus', 'Mercury', 'Moon', 'Saturn', 'Jupiter', 'Mars', 'Sun'],\n    Saturday: ['Saturn', 'Jupiter', 'Mars', 'Sun', 'Venus', 'Mercury', 'Moon']\n};\n\n/**\n * Modifiers applied to elemental and alchemical properties based on planetary influence\n */\nconst planetaryModifiers: Record<string, Record<string, number>> = {\n    Sun: { Fire: 0.3, Water: -0.1, Air: 0.1, Earth: -0.1, Spirit: 0.2, Essence: 0, Matter: -0.1, Substance: 0 },\n    Moon: { Fire: -0.1, Water: 0.3, Air: 0, Earth: 0.1, Spirit: 0, Essence: 0.2, Matter: 0.1, Substance: 0 },\n    Mars: { Fire: 0.4, Water: -0.2, Air: -0.1, Earth: 0, Spirit: 0.3, Essence: -0.1, Matter: 0.2, Substance: -0.1 },\n    Mercury: { Fire: 0.1, Water: 0.1, Air: 0.3, Earth: -0.1, Spirit: 0.1, Essence: 0.2, Matter: 0, Substance: 0.1 },\n    Jupiter: { Fire: 0.2, Water: 0.2, Air: 0.1, Earth: 0.3, Spirit: 0.2, Essence: 0.1, Matter: 0.1, Substance: 0.2 },\n    Venus: { Fire: -0.1, Water: 0.2, Air: 0.2, Earth: 0.1, Spirit: 0.1, Essence: 0.3, Matter: -0.1, Substance: 0.1 },\n    Saturn: { Fire: -0.2, Water: -0.1, Air: -0.2, Earth: 0.4, Spirit: -0.1, Essence: -0.1, Matter: 0.3, Substance: 0.2 }\n};\n\n/**\n * Calculator class that processes elemental states to produce thermodynamic metrics\n */\nclass ThermodynamicCalculator {\n    private readonly MINIMUM_VALUE = 0.1;\n    private currentPlanetaryInfluence: keyof typeof planetaryModifiers = 'Sun';\n\n    /**\n     * Sets the planetary influence to use when calculating modifiers\n     * @param planet The planet to use as influence\n     */\n    setPlanetaryInfluence(planet: keyof typeof planetaryModifiers): void {\n        this.currentPlanetaryInfluence = planet;\n    }\n\n    /**\n     * Apply planetary modifiers to an elemental state\n     * @param state The elemental state to modify\n     * @returns Modified elemental state\n     */\n    private applyPlanetaryModifiers(state: ElementalState): ElementalState {\n        const modifiers = planetaryModifiers[this.currentPlanetaryInfluence];\n        \n        // Apply base modifiers without relying on potentially undefined positions\n        // This ensures we always have some valid calculation\n        const result = {\n            fire: state.fire * (1 + (modifiers.Fire || 0)),\n            water: state.water * (1 + (modifiers.Water || 0)),\n            air: state.air * (1 + (modifiers.Air || 0)),\n            earth: state.earth * (1 + (modifiers.Earth || 0)),\n            spirit: state.spirit * (1 + (modifiers.Spirit || 0)),\n            essence: state.essence * (1 + (modifiers.Essence || 0)),\n            matter: state.matter * (1 + (modifiers.Matter || 0)), \n            substance: state.substance * (1 + (modifiers.Substance || 0))\n        };\n\n        debugLog(`Applied ${this.currentPlanetaryInfluence} modifiers to state`);\n        return result;\n    }\n\n    /**\n     * Calculate heat based on elemental state\n     * @param state The elemental state\n     * @returns Heat value (0-1)\n     */\n    private calculateHeat(state: ElementalState): number {\n        /* Original alchemizer formula:\n           Heat = (spirit^2 + fire^2) / (substance + essence + matter + water + air + earth)^2 */\n        const numerator = Math.pow(state.spirit, 2) + Math.pow(state.fire, 2);\n        const denominator = Math.pow(state.substance + state.essence + state.matter + \n                                    state.water + state.air + state.earth, 2);\n        \n        // Prevent division by zero\n        if (denominator === 0) return 0;\n        \n        return numerator / denominator;\n    }\n\n    /**\n     * Calculate entropy based on elemental state\n     * @param state The elemental state\n     * @returns Entropy value (0-1)\n     */\n    private calculateEntropy(state: ElementalState): number {\n        /* Original alchemizer formula:\n           Entropy = (spirit^2 + substance^2 + fire^2 + air^2) / (essence + matter + earth + water)^2 */\n        const numerator = Math.pow(state.spirit, 2) + Math.pow(state.substance, 2) + \n                         Math.pow(state.fire, 2) + Math.pow(state.air, 2);\n        const denominator = Math.pow(state.essence + state.matter + state.earth + state.water, 2);\n        \n        // Prevent division by zero\n        if (denominator === 0) return 0;\n        \n        return numerator / denominator;\n    }\n\n    /**\n     * Calculate reactivity based on elemental state\n     * @param state The elemental state\n     * @returns Reactivity value (0-1)\n     */\n    private calculateReactivity(state: ElementalState): number {\n        /* Original alchemizer formula:\n           Reactivity = (spirit^2 + substance^2 + essence^2 + fire^2 + air^2 + water^2) / (matter + earth)^2 */\n        const numerator = Math.pow(state.spirit, 2) + Math.pow(state.substance, 2) + \n                         Math.pow(state.essence, 2) + Math.pow(state.fire, 2) + \n                         Math.pow(state.air, 2) + Math.pow(state.water, 2);\n        const denominator = Math.pow(state.matter + state.earth, 2);\n        \n        // Prevent division by zero\n        if (denominator === 0) return 0;\n        \n        return numerator / denominator;\n    }\n\n    /**\n     * Calculate Greg's Energy from heat, entropy, and reactivity\n     * @param heat Heat value (0-1)\n     * @param entropy Entropy value (0-1)\n     * @param reactivity Reactivity value (0-1)\n     * @returns Greg's Energy value (0-1)\n     */\n    calculateGregsEnergy(heat: number, entropy: number, reactivity: number): number {\n        // First, ensure all inputs are in valid ranges\n        const safeHeat = Math.max(0.1, Math.min(1.0, heat));\n        const safeEntropy = Math.max(0.1, Math.min(1.0, entropy));\n        const safeReactivity = Math.max(0.1, Math.min(1.0, reactivity));\n        \n        // Use the original formula from the alchemizer\n        // gregsEnergy = heat - (entropy * reactivity)\n        const rawValue = safeHeat - (safeEntropy * safeReactivity);\n        \n        // Apply consistently with other metrics - scale from (-1,1) to (0,1)\n        const scaledValue = (rawValue + 1) / 2;\n        \n        // Apply the same non-linear scaling we used on other metrics\n        let finalValue = Math.pow(scaledValue, 0.9); // Less aggressive curve\n        \n        // Ensure the value is within bounds\n        finalValue = Math.max(0.2, Math.min(1.0, finalValue));\n        \n        // Detailed logging of the calculation\n        debugLog(`Greg's Energy calculation:\n          Inputs: heat=${safeHeat.toFixed(2)}, entropy=${safeEntropy.toFixed(2)}, reactivity=${safeReactivity.toFixed(2)}\n          Raw: ${rawValue.toFixed(2)}, Scaled: ${scaledValue.toFixed(2)}, Final: ${finalValue.toFixed(2)}`);\n        \n        return finalValue;\n    }\n\n    /**\n     * Validate that an elemental state contains valid values\n     * @param state The elemental state to validate\n     * @throws Error if state values are invalid\n     */\n    private validateState(state: ElementalState): void {\n        const properties = Object.values(state);\n        if (properties.some(val => isNaN(val) || !isFinite(val))) {\n            throw new Error('Elemental state values must be valid numbers');\n        }\n        if (properties.some(val => val < 0)) {\n            throw new Error('Elemental state values cannot be negative');\n        }\n    }\n\n    /**\n     * Validate thermodynamic metrics\n     * @param metrics The metrics to validate\n     * @throws Error if metrics are invalid\n     */\n    private validateResult(metrics: ThermodynamicMetrics): void {\n        const { heat, entropy, reactivity, gregsEnergy } = metrics;\n        const values = [heat, entropy, reactivity, gregsEnergy];\n        if (values.some(val => isNaN(val) || !isFinite(val))) {\n            throw new Error('All thermodynamic metrics must be valid numbers');\n        }\n    }\n\n    /**\n     * Generate thermodynamic metrics from an elemental state\n     * @param state The elemental state\n     * @returns Thermodynamic metrics\n     */\n    generateMetrics(state: ElementalState): ThermodynamicMetrics {\n        this.validateState(state);\n        \n        debugLog(\"Initial state for thermodynamic calculations:\", state);\n        \n        // Apply minimum values to prevent division by zero\n        const safeState = {\n            spirit: Math.max(state.spirit, this.MINIMUM_VALUE),\n            essence: Math.max(state.essence, this.MINIMUM_VALUE),\n            matter: Math.max(state.matter, this.MINIMUM_VALUE),\n            substance: Math.max(state.substance, this.MINIMUM_VALUE),\n            fire: Math.max(state.fire, this.MINIMUM_VALUE),\n            water: Math.max(state.water, this.MINIMUM_VALUE),\n            air: Math.max(state.air, this.MINIMUM_VALUE),\n            earth: Math.max(state.earth, this.MINIMUM_VALUE)\n        };\n\n        debugLog(\"Safe state after minimum values:\", safeState);\n\n        // Apply planetary influences\n        const modifiedState = this.applyPlanetaryModifiers(safeState);\n        debugLog(\"Modified state after planetary influences:\", modifiedState, \n                 \"Current planetary influence:\", this.currentPlanetaryInfluence);\n\n        const heat = this.calculateHeat(modifiedState);\n        const entropy = this.calculateEntropy(modifiedState);\n        const reactivity = this.calculateReactivity(modifiedState);\n        const gregsEnergy = this.calculateGregsEnergy(heat, entropy, reactivity);\n\n        debugLog(\"Raw calculated values:\", { heat, entropy, reactivity, gregsEnergy });\n\n        const metrics: ThermodynamicMetrics = { \n            heat,\n            entropy,\n            reactivity,\n            gregsEnergy\n        };\n        \n        // Ensure no NaN values in final output\n        for (const key in metrics) {\n            if (isNaN(metrics[key as keyof ThermodynamicMetrics]) || \n                !isFinite(metrics[key as keyof ThermodynamicMetrics])) {\n                debugLog(`Fixed invalid value for ${key}`);\n                metrics[key as keyof ThermodynamicMetrics] = 0.5; // Default to middle value\n            }\n        }\n        \n        debugLog(\"Final metrics:\", metrics);\n        return metrics;\n    }\n\n    /**\n     * Normalize a value to be between 0 and 1\n     * @param value The value to normalize\n     * @returns Normalized value between 0 and 1\n     */\n    private normalizeValue(value: number): number {\n        if (isNaN(value) || !isFinite(value)) return 0;\n        return Math.max(0, Math.min(1, Number(value.toFixed(2))));\n    }\n}\n\n/**\n * Utility function to convert legacy format to new ElementalState\n * @param counts The elemental and alchemical property counts\n * @returns An ElementalState object\n */\nexport function convertToElementalState(counts: ElementalAlchemicalCounts): ElementalState {\n    return {\n        spirit: counts.Spirit,\n        essence: counts.Essence,\n        matter: counts.Matter,\n        substance: counts.Substance,\n        fire: counts.Fire,\n        water: counts.Water,\n        air: counts.Air,\n        earth: counts.Earth\n    };\n}\n\n// Export a singleton instance of the calculator\nexport const thermodynamicCalculator = new ThermodynamicCalculator();\n\n/**\n * Calculate heat based on elemental percentages\n * @param firePercentage Fire element percentage (0-1)\n * @param earthPercentage Earth element percentage (0-1)\n * @param airPercentage Air element percentage (0-1)\n * @param waterPercentage Water element percentage (0-1)\n * @returns Heat value (0-1)\n */\nexport function calculateHeat(\n  firePercentage: number,\n  earthPercentage: number,\n  airPercentage: number,\n  waterPercentage: number\n): number {\n  // Heat formula: fire contributes positively, water negatively, others neutral\n  return (firePercentage * 1.5) - (waterPercentage * 1.0) + (airPercentage * 0.3) - (earthPercentage * 0.2);\n}\n\n/**\n * Calculate entropy based on elemental percentages\n * @param firePercentage Fire element percentage (0-1)\n * @param earthPercentage Earth element percentage (0-1)\n * @param airPercentage Air element percentage (0-1)\n * @param waterPercentage Water element percentage (0-1)\n * @returns Entropy value (0-1)\n */\nexport function calculateEntropy(\n  firePercentage: number,\n  earthPercentage: number,\n  airPercentage: number,\n  waterPercentage: number\n): number {\n  // Entropy formula: air contributes positively, earth negatively, others mixed\n  return (airPercentage * 1.5) - (earthPercentage * 1.2) + (firePercentage * 0.5) + (waterPercentage * 0.2);\n}\n\n/**\n * Calculate reactivity based on elemental percentages\n * @param firePercentage Fire element percentage (0-1)\n * @param earthPercentage Earth element percentage (0-1)\n * @param airPercentage Air element percentage (0-1)\n * @param waterPercentage Water element percentage (0-1)\n * @returns Reactivity value (0-1)\n */\nexport function calculateReactivity(\n  firePercentage: number,\n  earthPercentage: number,\n  airPercentage: number,\n  waterPercentage: number\n): number {\n  // Reactivity formula: fire and air increase reactivity, earth decreases it\n  return (firePercentage * 1.0) + (airPercentage * 0.8) - (earthPercentage * 1.0) + (waterPercentage * 0.4);\n}\n\n/**\n * Calculate Greg's Energy from heat, entropy, and reactivity\n * @param heat Heat value (0-1)\n * @param entropy Entropy value (0-1)\n * @param reactivity Reactivity value (0-1)\n * @returns Greg's Energy value (0-1)\n */\nexport function calculateGregsEnergy(\n  heat: number,\n  entropy: number,\n  reactivity: number\n): number {\n  const calculator = new ThermodynamicCalculator();\n  return calculator.calculateGregsEnergy(heat, entropy, reactivity);\n}\n\n/**\n * Utility function to count elemental and alchemical properties from arrays of items\n * @param items Array of items with elemental and alchemical properties\n * @returns Object with counts of each property\n */\nexport const countElementalAlchemicalProperties = (\n  items: Array<{\n    elementalProperties?: Record<ElementalCharacter, number>;\n    alchemicalProperties?: Record<AlchemicalProperty, number>;\n  }>\n): ElementalAlchemicalCounts => {\n  const elementalCounts: Record<ElementalCharacter, number> = {\n    Fire: 0,\n    Water: 0,\n    Earth: 0,\n    Air: 0\n  };\n\n  const alchemicalCounts: Record<AlchemicalProperty, number> = {\n    Spirit: 0,\n    Essence: 0,\n    Matter: 0,\n    Substance: 0\n  };\n\n  items.forEach(item => {\n    if (item.elementalProperties) {\n      Object.entries(item.elementalProperties).forEach(([element, value]) => {\n        elementalCounts[element as ElementalCharacter] += value;\n      });\n    }\n    \n    if (item.alchemicalProperties) {\n      Object.entries(item.alchemicalProperties).forEach(([property, value]) => {\n        alchemicalCounts[property as AlchemicalProperty] += value;\n      });\n    }\n  });\n  \n  return {\n    ...elementalCounts,\n    ...alchemicalCounts\n  };\n};\n\n// Add utility functions\n/**\n * Ensure all values in ElementalAlchemicalCounts are at least the minimum threshold\n * @param counts The elemental and alchemical property counts\n * @returns ElementalAlchemicalCounts with minimum values applied\n */\nexport const ensureMinimumValues = (counts: ElementalAlchemicalCounts): ElementalAlchemicalCounts => ({\n  ...counts,\n  Spirit: Math.max(counts.Spirit, 0.1),\n  Essence: Math.max(counts.Essence, 0.1),\n  Matter: Math.max(counts.Matter, 0.1),\n  Substance: Math.max(counts.Substance, 0.1),\n  Fire: Math.max(counts.Fire, 0.1),\n  Water: Math.max(counts.Water, 0.1),\n  Air: Math.max(counts.Air, 0.1),\n  Earth: Math.max(counts.Earth, 0.1)\n});\n\n/**\n * Clamp a value between a minimum and maximum\n * @param value Value to clamp\n * @param min Minimum allowed value\n * @param max Maximum allowed value\n * @returns Clamped value\n */\nexport const clampValue = (value: number, min: number, max: number): number => \n  Math.min(Math.max(value, min), max); \n\nexport default {\n  calculateHeat,\n  calculateEntropy,\n  calculateReactivity,\n  calculateGregsEnergy,\n  thermodynamicCalculator,\n  convertToElementalState,\n  countElementalAlchemicalProperties,\n  ensureMinimumValues,\n  clampValue\n}; "],"version":3}