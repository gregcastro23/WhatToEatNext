60acccb7e93f705442cf281f5c668114
"use strict";
/**
 * Dependency Security Monitor Tests
 * Comprehensive test suite for dependency and security monitoring functionality
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('fs');
jest.mock('child_process');
jest.mock('../../utils/logger');
const DependencySecurityMonitor_1 = require("./DependencySecurityMonitor");
const fs = __importStar(require("fs"));
const child_process_1 = require("child_process");
const mockFs = fs;
const mockExecSync = child_process_1.execSync;
describe('DependencySecurityMonitor', () => {
    let dependencyMonitor;
    let testConfig;
    beforeEach(() => {
        testConfig = {
            ...DependencySecurityMonitor_1.DEFAULT_DEPENDENCY_SECURITY_CONFIG,
            maxDependenciesPerBatch: 5,
            safetyValidationEnabled: true,
        };
        dependencyMonitor = new DependencySecurityMonitor_1.DependencySecurityMonitor(testConfig);
        // Reset mocks
        jest.clearAllMocks();
    });
    describe('scanSecurityVulnerabilities', () => {
        test('detects and categorizes security vulnerabilities', async () => {
            const auditOutput = JSON.stringify({
                vulnerabilities: {
                    lodash: {
                        severity: 'high',
                        via: [
                            {
                                source: 'CVE-2021-23337',
                                title: 'Command Injection in lodash',
                                range: '>=1.0.0 <4.17.21',
                            },
                        ],
                        range: '>=1.0.0 <4.17.21',
                        fixAvailable: {
                            version: '4.17.21',
                        },
                    },
                    axios: {
                        severity: 'critical',
                        via: [
                            {
                                source: 'CVE-2021-3749',
                                title: 'Regular Expression Denial of Service in axios',
                                range: '>=0.8.1 <0.21.2',
                            },
                        ],
                        range: '>=0.8.1 <0.21.2',
                        fixAvailable: {
                            version: '0.21.2',
                        },
                    },
                },
            });
            mockExecSync.mockReturnValue(auditOutput);
            const securityReport = await dependencyMonitor.scanSecurityVulnerabilities();
            expect(securityReport.vulnerabilities).toHaveLength(2);
            expect(securityReport.summary.critical).toBe(1);
            expect(securityReport.summary.high).toBe(1);
            expect(securityReport.summary.total).toBe(2);
            const lodashVuln = securityReport.vulnerabilities.find(v => v.packageName === 'lodash');
            expect(lodashVuln).toBeDefined();
            expect(lodashVuln === null || lodashVuln === void 0 ? void 0 : lodashVuln.severity).toBe('high');
            expect(lodashVuln === null || lodashVuln === void 0 ? void 0 : lodashVuln.patchAvailable).toBe(true);
            expect(lodashVuln === null || lodashVuln === void 0 ? void 0 : lodashVuln.fixedVersion).toBe('4.17.21');
        });
        test('handles npm audit errors gracefully', async () => {
            mockExecSync.mockImplementation(() => {
                throw new Error('npm audit failed');
            });
            const securityReport = await dependencyMonitor.scanSecurityVulnerabilities();
            expect(securityReport.vulnerabilities).toHaveLength(0);
            expect(securityReport.summary.total).toBe(0);
            expect(securityReport.recommendations).toContain('Failed to scan for vulnerabilities. Please run npm audit manually.');
        });
        test('generates appropriate security recommendations', async () => {
            const auditOutput = JSON.stringify({
                vulnerabilities: {
                    'test-package': {
                        severity: 'critical',
                        via: [{ source: 'CVE-2021-0001', title: 'Test vulnerability' }],
                        fixAvailable: { version: '2.0.0' },
                    },
                },
            });
            mockExecSync.mockReturnValue(auditOutput);
            const securityReport = await dependencyMonitor.scanSecurityVulnerabilities();
            expect(securityReport.recommendations).toContain(expect.stringContaining('1 critical vulnerabilities found - immediate action required'));
            expect(securityReport.recommendations).toContain(expect.stringContaining('1 vulnerabilities have patches available'));
        });
    });
    describe('checkDependencyUpdates', () => {
        test('detects available dependency updates', async () => {
            const outdatedOutput = JSON.stringify({
                lodash: {
                    current: '4.17.20',
                    wanted: '4.17.21',
                    latest: '4.17.21',
                    location: 'node_modules/lodash',
                },
                react: {
                    current: '17.0.0',
                    wanted: '17.0.2',
                    latest: '18.0.0',
                    location: 'node_modules/react',
                },
            });
            const error = new Error('npm outdated found updates');
            error.stdout = outdatedOutput;
            mockExecSync.mockImplementation(() => {
                throw error;
            });
            const updateReport = await dependencyMonitor.checkDependencyUpdates();
            expect(updateReport.availableUpdates).toHaveLength(2);
            expect(updateReport.summary.total).toBe(2);
            const lodashUpdate = updateReport.availableUpdates.find(u => u.packageName === 'lodash');
            expect(lodashUpdate).toBeDefined();
            expect(lodashUpdate === null || lodashUpdate === void 0 ? void 0 : lodashUpdate.updateType).toBe('patch');
            expect(lodashUpdate === null || lodashUpdate === void 0 ? void 0 : lodashUpdate.breakingChanges).toBe(false);
            const reactUpdate = updateReport.availableUpdates.find(u => u.packageName === 'react');
            expect(reactUpdate).toBeDefined();
            expect(reactUpdate === null || reactUpdate === void 0 ? void 0 : reactUpdate.updateType).toBe('major');
            expect(reactUpdate === null || reactUpdate === void 0 ? void 0 : reactUpdate.breakingChanges).toBe(true);
        });
        test('handles no updates available', async () => {
            mockExecSync.mockReturnValue('{}');
            const updateReport = await dependencyMonitor.checkDependencyUpdates();
            expect(updateReport.availableUpdates).toHaveLength(0);
            expect(updateReport.summary.total).toBe(0);
        });
    });
    describe('applySecurityPatches', () => {
        test('applies security patches for critical vulnerabilities', async () => {
            const config = {
                ...testConfig,
                autoUpdateEnabled: true,
                securityThresholds: {
                    ...testConfig.securityThresholds,
                    autoFixCritical: true,
                },
            };
            const monitor = new DependencySecurityMonitor_1.DependencySecurityMonitor(config);
            const vulnerabilities = [
                {
                    packageName: 'lodash',
                    currentVersion: '4.17.20',
                    vulnerableVersions: '>=1.0.0 <4.17.21',
                    severity: 'critical',
                    cve: 'CVE-2021-23337',
                    description: 'Command Injection',
                    fixedVersion: '4.17.21',
                    patchAvailable: true,
                },
            ];
            mockExecSync.mockReturnValue('');
            const appliedUpdates = await monitor.applySecurityPatches(vulnerabilities);
            expect(appliedUpdates).toHaveLength(1);
            expect(appliedUpdates[0].packageName).toBe('lodash');
            expect(appliedUpdates[0].securityFix).toBe(true);
            expect(mockExecSync).toHaveBeenCalledWith('npm install lodash@4.17.21', expect.any(Object));
        });
        test('skips excluded packages', async () => {
            const config = {
                ...testConfig,
                autoUpdateEnabled: true,
                excludedPackages: ['lodash'],
                securityThresholds: {
                    ...testConfig.securityThresholds,
                    autoFixCritical: true,
                },
            };
            const monitor = new DependencySecurityMonitor_1.DependencySecurityMonitor(config);
            const vulnerabilities = [
                {
                    packageName: 'lodash',
                    currentVersion: '4.17.20',
                    vulnerableVersions: '>=1.0.0 <4.17.21',
                    severity: 'critical',
                    cve: 'CVE-2021-23337',
                    description: 'Command Injection',
                    fixedVersion: '4.17.21',
                    patchAvailable: true,
                },
            ];
            const appliedUpdates = await monitor.applySecurityPatches(vulnerabilities);
            expect(appliedUpdates).toHaveLength(0);
            expect(mockExecSync).not.toHaveBeenCalled();
        });
        test('respects security threshold settings', async () => {
            const config = {
                ...testConfig,
                autoUpdateEnabled: true,
                securityThresholds: {
                    ...testConfig.securityThresholds,
                    autoFixCritical: false,
                    autoFixHigh: false,
                },
            };
            const monitor = new DependencySecurityMonitor_1.DependencySecurityMonitor(config);
            const vulnerabilities = [
                {
                    packageName: 'lodash',
                    currentVersion: '4.17.20',
                    vulnerableVersions: '>=1.0.0 <4.17.21',
                    severity: 'high',
                    cve: 'CVE-2021-23337',
                    description: 'Command Injection',
                    fixedVersion: '4.17.21',
                    patchAvailable: true,
                },
            ];
            const appliedUpdates = await monitor.applySecurityPatches(vulnerabilities);
            expect(appliedUpdates).toHaveLength(0);
        });
    });
    describe('applySafeUpdates', () => {
        test('applies safe patch updates', async () => {
            const config = {
                ...testConfig,
                autoUpdateEnabled: true,
            };
            const monitor = new DependencySecurityMonitor_1.DependencySecurityMonitor(config);
            const availableUpdates = [
                {
                    packageName: 'lodash',
                    currentVersion: '4.17.20',
                    latestVersion: '4.17.21',
                    updateType: 'patch',
                    breakingChanges: false,
                    securityFix: false,
                    testingRequired: false,
                },
            ];
            mockExecSync.mockReturnValue('');
            const appliedUpdates = await monitor.applySafeUpdates(availableUpdates);
            expect(appliedUpdates).toHaveLength(1);
            expect(mockExecSync).toHaveBeenCalledWith('npm install lodash@4.17.21', expect.any(Object));
        });
        test('skips major updates requiring manual approval', async () => {
            const config = {
                ...testConfig,
                autoUpdateEnabled: true,
                updateStrategies: [
                    {
                        name: 'Default',
                        description: 'Default strategy',
                        pattern: /.*/,
                        updateType: 'minor',
                        requiresManualApproval: true,
                        testingRequired: false,
                    },
                ],
            };
            const monitor = new DependencySecurityMonitor_1.DependencySecurityMonitor(config);
            const availableUpdates = [
                {
                    packageName: 'react',
                    currentVersion: '17.0.0',
                    latestVersion: '18.0.0',
                    updateType: 'major',
                    breakingChanges: true,
                    securityFix: false,
                    testingRequired: true,
                },
            ];
            const appliedUpdates = await monitor.applySafeUpdates(availableUpdates);
            expect(appliedUpdates).toHaveLength(0);
            expect(mockExecSync).not.toHaveBeenCalledWith(expect.stringContaining('npm install react@18.0.0'), expect.any(Object));
        });
    });
    describe('runCompatibilityTests', () => {
        test('runs build and test commands successfully', async () => {
            mockExecSync.mockReturnValue('');
            const result = await dependencyMonitor.runCompatibilityTests();
            expect(result).toBe(true);
            expect(mockExecSync).toHaveBeenCalledWith('npm run build', expect.any(Object));
            expect(mockExecSync).toHaveBeenCalledWith('npm test', expect.any(Object));
        });
        test('returns false when tests fail', async () => {
            mockExecSync
                .mockReturnValueOnce('') // Build succeeds
                .mockImplementationOnce(() => {
                // Test fails
                throw new Error('Tests failed');
            });
            const result = await dependencyMonitor.runCompatibilityTests();
            expect(result).toBe(false);
        });
        test('returns false when build fails', async () => {
            mockExecSync.mockImplementation(() => {
                throw new Error('Build failed');
            });
            const result = await dependencyMonitor.runCompatibilityTests();
            expect(result).toBe(false);
        });
    });
    describe('executeDependencySecurityMonitoring', () => {
        test('executes complete monitoring workflow', async () => {
            const packageJson = {
                dependencies: { lodash: '4.17.20' },
                devDependencies: { jest: '29.0.0' },
            };
            mockFs.readFileSync.mockReturnValue(JSON.stringify(packageJson));
            // Mock npm audit (no vulnerabilities)
            mockExecSync.mockReturnValueOnce(JSON.stringify({ vulnerabilities: {} }));
            // Mock npm outdated (no updates)
            mockExecSync.mockReturnValueOnce('{}');
            const result = await dependencyMonitor.executeDependencySecurityMonitoring();
            expect(result.dependenciesScanned).toBe(2);
            expect(result.vulnerabilitiesFound).toBe(0);
            expect(result.updatesAvailable).toBe(0);
            expect(result.errors).toHaveLength(0);
        });
        test('handles security scan and update workflow', async () => {
            const config = {
                ...testConfig,
                autoUpdateEnabled: true,
                securityThresholds: {
                    ...testConfig.securityThresholds,
                    autoFixCritical: true,
                },
            };
            const monitor = new DependencySecurityMonitor_1.DependencySecurityMonitor(config);
            const packageJson = {
                dependencies: { lodash: '4.17.20' },
            };
            mockFs.readFileSync.mockReturnValue(JSON.stringify(packageJson));
            // Mock npm audit with vulnerability
            const auditOutput = JSON.stringify({
                vulnerabilities: {
                    lodash: {
                        severity: 'critical',
                        via: [{ source: 'CVE-2021-23337', title: 'Test vuln' }],
                        fixAvailable: { version: '4.17.21' },
                    },
                },
            });
            mockExecSync.mockReturnValueOnce(auditOutput);
            // Mock npm outdated
            const outdatedError = new Error('Updates available');
            outdatedError.stdout = JSON.stringify({
                lodash: {
                    current: '4.17.20',
                    latest: '4.17.21',
                },
            });
            mockExecSync.mockImplementationOnce(() => {
                throw outdatedError;
            });
            // Mock security patch application
            mockExecSync.mockReturnValueOnce(''); // npm install for security patch
            // Mock compatibility tests
            mockExecSync.mockReturnValueOnce(''); // npm run build
            mockExecSync.mockReturnValueOnce(''); // npm test
            const result = await monitor.executeDependencySecurityMonitoring();
            expect(result.vulnerabilitiesFound).toBe(1);
            expect(result.updatesAvailable).toBe(1);
            expect(result.securityPatchesApplied).toBe(1);
            expect(result.compatibilityTestsPassed).toBe(true);
        });
        test('handles errors gracefully', async () => {
            mockFs.readFileSync.mockImplementation(() => {
                throw new Error('Package.json not found');
            });
            const result = await dependencyMonitor.executeDependencySecurityMonitoring();
            expect(result.dependenciesScanned).toBe(0);
            expect(result.errors.length).toBeGreaterThan(0);
        });
    });
    describe('update type determination', () => {
        test('correctly identifies major updates', () => {
            const monitor = new DependencySecurityMonitor_1.DependencySecurityMonitor(testConfig);
            // Access private method through any cast for testing
            const determineUpdateType = monitor.determineUpdateType;
            expect(determineUpdateType('1.0.0', '2.0.0')).toBe('major');
            expect(determineUpdateType('17.0.0', '18.0.0')).toBe('major');
        });
        test('correctly identifies minor updates', () => {
            const monitor = new DependencySecurityMonitor_1.DependencySecurityMonitor(testConfig);
            const determineUpdateType = monitor.determineUpdateType;
            expect(determineUpdateType('1.0.0', '1.1.0')).toBe('minor');
            expect(determineUpdateType('17.0.0', '17.1.0')).toBe('minor');
        });
        test('correctly identifies patch updates', () => {
            const monitor = new DependencySecurityMonitor_1.DependencySecurityMonitor(testConfig);
            const determineUpdateType = monitor.determineUpdateType;
            expect(determineUpdateType('1.0.0', '1.0.1')).toBe('patch');
            expect(determineUpdateType('17.0.0', '17.0.1')).toBe('patch');
        });
    });
    describe('configuration validation', () => {
        test('uses default configuration when not provided', () => {
            const monitor = new DependencySecurityMonitor_1.DependencySecurityMonitor(DependencySecurityMonitor_1.DEFAULT_DEPENDENCY_SECURITY_CONFIG);
            expect(monitor).toBeDefined();
        });
        test('respects custom configuration', () => {
            const customConfig = {
                maxDependenciesPerBatch: 5,
                safetyValidationEnabled: false,
                autoUpdateEnabled: true,
                securityScanEnabled: false,
                compatibilityTestingEnabled: false,
                updateStrategies: [],
                securityThresholds: {
                    critical: 0,
                    high: 0,
                    moderate: 0,
                    low: 0,
                    autoFixCritical: false,
                    autoFixHigh: false,
                },
                excludedPackages: ['react', 'next'],
            };
            const monitor = new DependencySecurityMonitor_1.DependencySecurityMonitor(customConfig);
            expect(monitor).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,