{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/errorHandler.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/errorHandler.ts"],"sourcesContent":["/**\n * Error Handler Service\n * Centralized error handling and logging\n */\n\n// Simple logger functionality\nconst logError = (_message: string, _data?: unknown) => {\n  // No-op for production\n};\n\nconst logWarning = (_message: string, _data?: unknown) => {\n  // No-op for production\n};\n\nconst logInfo = (_message: string, _data?: unknown) => {\n  // No-op for production\n};\n\n// Error types\nexport enum ErrorType {\n  UI = 'UI',\n  API = 'API',\n  DATA = 'DATA',\n  NETWORK = 'NETWORK',\n  ASTROLOGY = 'ASTROLOGY',\n  UNKNOWN = 'UNKNOWN'\n}\n\n// Error severity levels\nexport enum ErrorSeverity {\n  INFO = 'INFO',\n  WARNING = 'WARNING',\n  ERROR = 'ERROR',\n  CRITICAL = 'CRITICAL',\n  FATAL = 'FATAL'\n}\n\n// Options for the error handler\nexport interface ErrorOptions {\n  type?: ErrorType;\n  severity?: ErrorSeverity;\n  component?: string;\n  context?: string;\n  data?: unknown;\n  isFatal?: boolean;\n  silent?: boolean;\n}\n\ninterface ErrorDetails {\n  message: string;\n  stack?: string;\n  componentStack?: string;\n  context?: string;\n  data?: unknown;\n  timestamp: string;\n  errorType: string;\n}\n\nclass ErrorHandlerService {\n  /**\n   * Log an error with additional context\n   */\n  log(error: unknown, options: ErrorOptions = {}) {\n    const {\n      type = ErrorType.UNKNOWN,\n      severity = ErrorSeverity.ERROR,\n      component = 'unknown',\n      context = {},\n      data = {},\n      isFatal = false,\n      silent = false\n    } = options;\n\n    const errorDetails = this.prepareErrorDetails(error, options);\n\n    // Log to console based on severity\n    if (!silent) {\n      switch (severity) {\n        case ErrorSeverity.INFO:\n          logInfo(`[${component}] ${errorDetails.message}`, { error, context, data });\n          break;\n        case ErrorSeverity.WARNING:\n          logWarning(`[${component}] ${errorDetails.message}`, { error, context, data });\n          break;\n        case ErrorSeverity.ERROR:\n        case ErrorSeverity.CRITICAL:\n        case ErrorSeverity.FATAL:\n          logError(`[${severity}][${type}][${component}] ${errorDetails.message}`, { error, context, data });\n          break;\n      }\n    }\n\n    // Here you could add integrations with error monitoring services\n    // Example: Sentry.captureException(error, { extra: { type, severity, component, ...context } });\n\n    return {\n      error,\n      type,\n      severity,\n      timestamp: new Date().toISOString(),\n      handled: true\n    };\n  }\n\n  /**\n   * Create a custom application error\n   */\n  createError(message: string, options: ErrorOptions = {}): Error {\n    const error = new Error(message);\n    // Add custom properties to the error\n    Object.assign(error, {\n      type: options.type || ErrorType.UNKNOWN,\n      severity: options.severity || ErrorSeverity.ERROR,\n      context: options.context || {}\n    });\n    return error;\n  }\n\n  /**\n   * Safely execute an async function and return a default value if it fails\n   */\n  async safeAsync<T>(fn: () => Promise<T>, defaultValue: T, context = 'unknown'): Promise<T> {\n    try {\n      return await fn();\n    } catch (error) {\n      this.log(error, { context });\n      return defaultValue;\n    }\n  }\n\n  /**\n   * Safely execute a function and return a default value if it fails\n   */\n  safeExecute<T>(fn: () => T, defaultValue: T, context = 'unknown'): T {\n    try {\n      return fn();\n    } catch (error) {\n      this.log(error, { context });\n      return defaultValue;\n    }\n  }\n\n  /**\n   * Legacy handleError method for backward compatibility\n   */\n  handleError(error: unknown, context?: unknown): void {\n    // Delegate to the main log method with proper options\n    this.log(error, {\n      context: (context as string) || 'unknown',\n      type: ErrorType.UNKNOWN,\n      severity: ErrorSeverity.ERROR\n    });\n  }\n\n  /**\n   * Prepare standardized error details object\n   */\n  private prepareErrorDetails(error: unknown, options: ErrorOptions): ErrorDetails {\n    let message = 'Unknown error';\n    let stack: string | undefined;\n    let errorType = 'unknown';\n    let componentStack: string | undefined;\n\n    if (error instanceof Error) {\n      message = error.message;\n      stack = error.stack;\n      errorType = error.name;\n      // @ts-expect-error: componentStack is not standard on Error\n      componentStack = error.componentStack;\n    } else if (typeof error === 'string') {\n      message = error;\n      errorType = 'string';\n    } else if (error !== null && typeof error === 'object') {\n      message = String(error);\n      errorType = 'object';\n      // @ts-expect-error: componentStack may exist\n      componentStack = error.componentStack;\n    }\n\n    return {\n      message,\n      stack,\n      context: options.context,\n      data: options.data,\n      timestamp: new Date().toISOString(),\n      errorType,\n      componentStack,\n    };\n  }\n}\n\n// Create singleton instance\nconst ErrorHandler = new ErrorHandlerService();\n\n// Export the singleton instance as default and for named imports\nexport default ErrorHandler;\nexport { ErrorHandler };\n\n// Export with lowercase name for compatibility\nexport const errorHandler = ErrorHandler;\n\n/**\n * Global function to safely check if a value exists and has the right type\n * Use this to validate critical values before using them\n */\nexport function safeValue<T>(\n  value: T | null | undefined, \n  fallback: T, \n  context: string,\n  variableName: string\n): T {\n  if (value === null || value === undefined) {\n    // Use standalone warnNullValue function since it's not a method on ErrorHandler\n    warnNullValue(variableName, context, value);\n    return fallback\n  }\n  return value\n}\n\n/**\n * Safely access a property from an object with proper error handling\n * @param obj The object to access\n * @param properties Array of nested property names to access\n * @param defaultValue Default value if property doesn't exist\n * @param context Context for error logging\n */\nexport function safePropertyAccess<T>(\n  obj: unknown,\n  properties: string[],\n  defaultValue: T,\n  context: string\n): T {\n  if (obj === null || obj === undefined) {\n    warnNullValue(properties.join('.'), context);\n    return defaultValue;\n  }\n\n  try {\n    let current: unknown = obj;\n    for (const prop of properties) {\n      if (current === null || current === undefined || typeof current !== 'object') {\n        warnNullValue(`${properties.join('.')}.${prop}`, context);\n        return defaultValue;\n      }\n      current = (current as Record<string, unknown>)[prop];\n    }\n    if (current === undefined || current === null) {\n      return defaultValue;\n    }\n    return current as T;\n  } catch (error) {\n    handlePropertyAccessError(error, properties.join('.'), context);\n    return defaultValue;\n  }\n}\n\n/**\n * Safely execute a function with error handling\n * @param fn Function to execute\n * @param defaultValue Default value to return if function throws\n * @param context Context for error logging\n */\nexport function safeExecuteWithContext<T>(\n  fn: () => T,\n  defaultValue: T,\n  context: string\n): T {\n  try {\n    return fn();\n  } catch (error) {\n    ErrorHandler.log(error, { context });\n    return defaultValue;\n  }\n}\n\n/**\n * Log a warning about a potentially undefined or null value\n */\nexport function warnNullValue(variableName: string, context: string, value?: unknown): void {\n  logWarning(\n    `Potential null / (undefined || 1) value: ${variableName} in ${context}`, \n    { value, timestamp: new Date().toISOString() }\n  )\n}\n\n/**\n * Detect issues with runtime type mismatches\n */\nexport function validateType(value: unknown, expectedType: string, context: string, variableName: string): boolean {\n  const actualType = value === null ? 'null' : typeof value\n  \n  // Handle array type special case\n  if (expectedType === 'array' && Array.isArray(value)) {\n    return true\n  }\n  \n  // Handle object type special case (but not null)\n  if (expectedType === 'object' && actualType === 'object' && value !== null) {\n    return true\n  }\n  \n  // Basic type checking\n  if (actualType !== expectedType && !(expectedType === 'object' && Array.isArray(value))) {\n    logWarning(\n      `Type mismatch in ${context}: ${variableName} should be ${expectedType}, but got ${actualType}`,\n      { value }\n    )\n    return false\n  }\n  \n  return true\n}\n\n/**\n * Handle property access errors with detailed reporting\n * Use this when accessing potentially undefined nested properties\n */\nexport function handlePropertyAccessError(error: unknown, propertyPath: string, context: string): void {\n  let message = \"Property access error\";\n  if (error instanceof TypeError && (\n    error.message.includes(\"Cannot read properties of undefined\") ||\n    error.message.includes(\"Cannot read properties of null\") ||\n    error.message.includes(\"is not a function\") ||\n    error.message.includes(\"is not iterable\")\n  )) {\n    message = `TypeError accessing ${propertyPath} in ${context}: ${error.message}`;\n  } else if (error instanceof Error) {\n    message = `Error accessing ${propertyPath} in ${context}: ${error.message}`;\n  }\n  \n  ErrorHandler.log(error, {\n    context,\n    data: { propertyPath }\n  });\n}\n\n/**\n * Track code execution paths for debugging\n */\nexport function trackExecution(functionName: string, step: string, data?: unknown): void {\n  logInfo(`[EXECUTION] ${functionName} - ${step}`, data);\n}\n\n/**\n * Log TypeScript specific errors (undefined access, type mismatches)\n */\nexport function logTypeError(error: unknown, context: string, operation: string): void {\n  ErrorHandler.log(error, {\n    context: `TypeScript:${context}`,\n    data: { operation }\n  });\n} "],"version":3}