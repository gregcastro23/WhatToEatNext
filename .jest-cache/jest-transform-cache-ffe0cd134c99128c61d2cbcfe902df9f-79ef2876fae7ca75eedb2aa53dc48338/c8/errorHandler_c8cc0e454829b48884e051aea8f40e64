a8e4ddedd5be98d2443aec792011066d
"use strict";
/**
 * Error Handler Service
 * Centralized error handling and logging
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.logTypeError = exports.trackExecution = exports.handlePropertyAccessError = exports.validateType = exports.warnNullValue = exports.safeExecuteWithContext = exports.safePropertyAccess = exports.safeValue = exports.errorHandler = exports.ErrorHandler = exports.ErrorSeverity = exports.ErrorType = void 0;
// Simple logger functionality
const logError = (_message, _data) => {
    // No-op for production
};
const logWarning = (_message, _data) => {
    // No-op for production
};
const logInfo = (_message, _data) => {
    // No-op for production
};
// Error types
var ErrorType;
(function (ErrorType) {
    ErrorType["UI"] = "UI";
    ErrorType["API"] = "API";
    ErrorType["DATA"] = "DATA";
    ErrorType["NETWORK"] = "NETWORK";
    ErrorType["ASTROLOGY"] = "ASTROLOGY";
    ErrorType["UNKNOWN"] = "UNKNOWN";
})(ErrorType || (exports.ErrorType = ErrorType = {}));
// Error severity levels
var ErrorSeverity;
(function (ErrorSeverity) {
    ErrorSeverity["INFO"] = "INFO";
    ErrorSeverity["WARNING"] = "WARNING";
    ErrorSeverity["ERROR"] = "ERROR";
    ErrorSeverity["CRITICAL"] = "CRITICAL";
    ErrorSeverity["FATAL"] = "FATAL";
})(ErrorSeverity || (exports.ErrorSeverity = ErrorSeverity = {}));
class ErrorHandlerService {
    /**
     * Log an error with additional context
     */
    log(error, options = {}) {
        const { type = ErrorType.UNKNOWN, severity = ErrorSeverity.ERROR, component = 'unknown', context = {}, data = {}, isFatal = false, silent = false } = options;
        const errorDetails = this.prepareErrorDetails(error, options);
        // Log to console based on severity
        if (!silent) {
            switch (severity) {
                case ErrorSeverity.INFO:
                    logInfo(`[${component}] ${errorDetails.message}`, { error, context, data });
                    break;
                case ErrorSeverity.WARNING:
                    logWarning(`[${component}] ${errorDetails.message}`, { error, context, data });
                    break;
                case ErrorSeverity.ERROR:
                case ErrorSeverity.CRITICAL:
                case ErrorSeverity.FATAL:
                    logError(`[${severity}][${type}][${component}] ${errorDetails.message}`, { error, context, data });
                    break;
            }
        }
        // Here you could add integrations with error monitoring services
        // Example: Sentry.captureException(error, { extra: { type, severity, component, ...context } });
        return {
            error,
            type,
            severity,
            timestamp: new Date().toISOString(),
            handled: true
        };
    }
    /**
     * Create a custom application error
     */
    createError(message, options = {}) {
        const error = new Error(message);
        // Add custom properties to the error
        Object.assign(error, {
            type: options.type || ErrorType.UNKNOWN,
            severity: options.severity || ErrorSeverity.ERROR,
            context: options.context || {}
        });
        return error;
    }
    /**
     * Safely execute an async function and return a default value if it fails
     */
    async safeAsync(fn, defaultValue, context = 'unknown') {
        try {
            return await fn();
        }
        catch (error) {
            this.log(error, { context });
            return defaultValue;
        }
    }
    /**
     * Safely execute a function and return a default value if it fails
     */
    safeExecute(fn, defaultValue, context = 'unknown') {
        try {
            return fn();
        }
        catch (error) {
            this.log(error, { context });
            return defaultValue;
        }
    }
    /**
     * Legacy handleError method for backward compatibility
     */
    handleError(error, context) {
        // Delegate to the main log method with proper options
        this.log(error, {
            context: context || 'unknown',
            type: ErrorType.UNKNOWN,
            severity: ErrorSeverity.ERROR
        });
    }
    /**
     * Prepare standardized error details object
     */
    prepareErrorDetails(error, options) {
        let message = 'Unknown error';
        let stack;
        let errorType = 'unknown';
        let componentStack;
        if (error instanceof Error) {
            message = error.message;
            stack = error.stack;
            errorType = error.name;
            // @ts-expect-error: componentStack is not standard on Error
            componentStack = error.componentStack;
        }
        else if (typeof error === 'string') {
            message = error;
            errorType = 'string';
        }
        else if (error !== null && typeof error === 'object') {
            message = String(error);
            errorType = 'object';
            // @ts-expect-error: componentStack may exist
            componentStack = error.componentStack;
        }
        return {
            message,
            stack,
            context: options.context,
            data: options.data,
            timestamp: new Date().toISOString(),
            errorType,
            componentStack,
        };
    }
}
// Create singleton instance
const ErrorHandler = new ErrorHandlerService();
exports.ErrorHandler = ErrorHandler;
// Export the singleton instance as default and for named imports
exports.default = ErrorHandler;
// Export with lowercase name for compatibility
exports.errorHandler = ErrorHandler;
/**
 * Global function to safely check if a value exists and has the right type
 * Use this to validate critical values before using them
 */
function safeValue(value, fallback, context, variableName) {
    if (value === null || value === undefined) {
        // Use standalone warnNullValue function since it's not a method on ErrorHandler
        warnNullValue(variableName, context, value);
        return fallback;
    }
    return value;
}
exports.safeValue = safeValue;
/**
 * Safely access a property from an object with proper error handling
 * @param obj The object to access
 * @param properties Array of nested property names to access
 * @param defaultValue Default value if property doesn't exist
 * @param context Context for error logging
 */
function safePropertyAccess(obj, properties, defaultValue, context) {
    if (obj === null || obj === undefined) {
        warnNullValue(properties.join('.'), context);
        return defaultValue;
    }
    try {
        let current = obj;
        for (const prop of properties) {
            if (current === null || current === undefined || typeof current !== 'object') {
                warnNullValue(`${properties.join('.')}.${prop}`, context);
                return defaultValue;
            }
            current = current[prop];
        }
        if (current === undefined || current === null) {
            return defaultValue;
        }
        return current;
    }
    catch (error) {
        handlePropertyAccessError(error, properties.join('.'), context);
        return defaultValue;
    }
}
exports.safePropertyAccess = safePropertyAccess;
/**
 * Safely execute a function with error handling
 * @param fn Function to execute
 * @param defaultValue Default value to return if function throws
 * @param context Context for error logging
 */
function safeExecuteWithContext(fn, defaultValue, context) {
    try {
        return fn();
    }
    catch (error) {
        ErrorHandler.log(error, { context });
        return defaultValue;
    }
}
exports.safeExecuteWithContext = safeExecuteWithContext;
/**
 * Log a warning about a potentially undefined or null value
 */
function warnNullValue(variableName, context, value) {
    logWarning(`Potential null / (undefined || 1) value: ${variableName} in ${context}`, { value, timestamp: new Date().toISOString() });
}
exports.warnNullValue = warnNullValue;
/**
 * Detect issues with runtime type mismatches
 */
function validateType(value, expectedType, context, variableName) {
    const actualType = value === null ? 'null' : typeof value;
    // Handle array type special case
    if (expectedType === 'array' && Array.isArray(value)) {
        return true;
    }
    // Handle object type special case (but not null)
    if (expectedType === 'object' && actualType === 'object' && value !== null) {
        return true;
    }
    // Basic type checking
    if (actualType !== expectedType && !(expectedType === 'object' && Array.isArray(value))) {
        logWarning(`Type mismatch in ${context}: ${variableName} should be ${expectedType}, but got ${actualType}`, { value });
        return false;
    }
    return true;
}
exports.validateType = validateType;
/**
 * Handle property access errors with detailed reporting
 * Use this when accessing potentially undefined nested properties
 */
function handlePropertyAccessError(error, propertyPath, context) {
    let message = "Property access error";
    if (error instanceof TypeError && (error.message.includes("Cannot read properties of undefined") ||
        error.message.includes("Cannot read properties of null") ||
        error.message.includes("is not a function") ||
        error.message.includes("is not iterable"))) {
        message = `TypeError accessing ${propertyPath} in ${context}: ${error.message}`;
    }
    else if (error instanceof Error) {
        message = `Error accessing ${propertyPath} in ${context}: ${error.message}`;
    }
    ErrorHandler.log(error, {
        context,
        data: { propertyPath }
    });
}
exports.handlePropertyAccessError = handlePropertyAccessError;
/**
 * Track code execution paths for debugging
 */
function trackExecution(functionName, step, data) {
    logInfo(`[EXECUTION] ${functionName} - ${step}`, data);
}
exports.trackExecution = trackExecution;
/**
 * Log TypeScript specific errors (undefined access, type mismatches)
 */
function logTypeError(error, context, operation) {
    ErrorHandler.log(error, {
        context: `TypeScript:${context}`,
        data: { operation }
    });
}
exports.logTypeError = logTypeError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,