{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/enhancedAlchemicalMatching.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/enhancedAlchemicalMatching.test.ts"],"sourcesContent":["import { \n  calculateAstrologicalAffinity, \n  calculateAlchemicalCompatibility,\n  generateEnhancedRecommendation,\n  validateAlgorithms\n} from './enhancedAlchemicalMatching';\nimport { ZodiacSign } from '@/types/alchemy';\n\ndescribe('Enhanced Alchemical Matching Algorithms', () => {\n  describe('calculateAstrologicalAffinity', () => {\n    it('should calculate compatibility between signs with the same element', () => {\n      // Test Fire signs (should be harmonious)\n      const compatibility = calculateAstrologicalAffinity('aries' as ZodiacSign, 'leo' as ZodiacSign);\n      expect(compatibility).toBeGreaterThan(0.5); // Should be above neutral\n    });\n    \n    it('should calculate compatibility between signs with different elements', () => {\n      // Test Fire and Water signs (should still have good compatibility)\n      const compatibility = calculateAstrologicalAffinity('aries' as ZodiacSign, 'cancer' as ZodiacSign);\n      expect(compatibility).toBeGreaterThanOrEqual(0.5); // All elements work well together\n    });\n    \n    it('should incorporate modality compatibility in scoring', () => {\n      // Aries (Cardinal Fire) and Leo (Fixed Fire)\n      // Same element but different modality\n      const compatibility = calculateAstrologicalAffinity('aries' as ZodiacSign, 'leo' as ZodiacSign);\n      \n      // Should be somewhat compatible (same element) but not perfect (different modality)\n      expect(compatibility).toBeGreaterThan(0.5);\n      expect(compatibility).toBeLessThan(0.9);\n    });\n    \n    it('should favor same-modality signs of the same element', () => {\n      // Aries (Cardinal Fire) and Sagittarius (Mutable Fire)\n      const differentModalityCompat = calculateAstrologicalAffinity(\n        'aries' as ZodiacSign, \n        'sagittarius' as ZodiacSign\n      );\n      \n      // Leo (Fixed Fire) and Sagittarius (Mutable Fire)\n      const differentModalityCompat2 = calculateAstrologicalAffinity(\n        'leo' as ZodiacSign, \n        'sagittarius' as ZodiacSign\n      );\n      \n      // Aries (Cardinal Fire) and Libra (Cardinal Air)\n      const sameModalityDiffElement = calculateAstrologicalAffinity(\n        'aries' as ZodiacSign, \n        'libra' as ZodiacSign\n      );\n      \n      // All combinations should have good compatibility\n      expect(differentModalityCompat).toBeGreaterThanOrEqual(0.5);\n      expect(sameModalityDiffElement).toBeGreaterThanOrEqual(0.5);\n    });\n    \n    it('should reflect element-modality natural affinities', () => {\n      // Gemini (Mutable Air) and Aquarius (Fixed Air)\n      // Air has high affinity with Mutability\n      const airSignsCompat = calculateAstrologicalAffinity(\n        'gemini' as ZodiacSign, \n        'aquarius' as ZodiacSign\n      );\n      \n      // Taurus (Fixed Earth) and Virgo (Mutable Earth)\n      // Earth has high affinity with Fixed quality\n      const earthSignsCompat = calculateAstrologicalAffinity(\n        'taurus' as ZodiacSign, \n        'virgo' as ZodiacSign\n      );\n      \n      // Cardinal Fire and Fixed Fire\n      const fireSignsCompat = calculateAstrologicalAffinity(\n        'aries' as ZodiacSign, \n        'leo' as ZodiacSign\n      );\n      \n      // The air signs compatibility should reflect air's natural affinity with mutability\n      expect(airSignsCompat).toBeGreaterThan(0.45);\n    });\n    \n    it('should incorporate tarot correspondences in scoring', () => {\n      // Signs with same element tarot cards\n      const compatibility = calculateAstrologicalAffinity('aries' as ZodiacSign, 'leo' as ZodiacSign);\n      \n      // The Emperor (Aries) and Strength (Leo) are both Fire-aligned Major Arcana\n      expect(compatibility).toBeGreaterThan(0.5);\n    });\n    \n    it('should incorporate rulership compatibility in scoring', () => {\n      // Aries (ruled by Mars) and Scorpio (traditionally ruled by Mars)\n      const compatibility = calculateAstrologicalAffinity('aries' as ZodiacSign, 'scorpio' as ZodiacSign);\n      \n      // Different elements, but shared ruler should prevent score from being too low\n      expect(compatibility).toBeGreaterThan(0.3);\n    });\n  });\n  \n  describe('calculateAlchemicalCompatibility', () => {\n    it('should calculate compatibility between similar elemental properties', () => {\n      const elemPropsA = { Fire: 0.6, Water: 0.1, Earth: 0.2, Air: 0.1 };\n      const elemPropsB = { Fire: 0.5, Water: 0.2, Earth: 0.2, Air: 0.1 };\n      \n      const compatibility = calculateAlchemicalCompatibility(elemPropsA, elemPropsB);\n      expect(compatibility).toBeGreaterThan(0.7); // Should be highly compatible\n    });\n    \n    it('should calculate compatibility between contrasting elemental properties', () => {\n      const elemPropsA = { Fire: 0.7, Water: 0.1, Earth: 0.1, Air: 0.1 };\n      const elemPropsB = { Fire: 0.1, Water: 0.7, Earth: 0.1, Air: 0.1 };\n      \n      const compatibility = calculateAlchemicalCompatibility(elemPropsA, elemPropsB);\n      // Different elements should still have good compatibility\n      expect(compatibility).toBeGreaterThanOrEqual(0.5);\n    });\n    \n    it('should incorporate zodiac affinity when signs are provided', () => {\n      const elemPropsA = { Fire: 0.4, Water: 0.2, Earth: 0.2, Air: 0.2 };\n      const elemPropsB = { Fire: 0.3, Water: 0.3, Earth: 0.2, Air: 0.2 };\n      \n      // With harmonious signs\n      const compatWithSigns = calculateAlchemicalCompatibility(\n        elemPropsA, \n        elemPropsB,\n        'aries' as ZodiacSign, \n        'leo' as ZodiacSign\n      );\n      \n      // Without signs\n      const compatWithoutSigns = calculateAlchemicalCompatibility(elemPropsA, elemPropsB);\n      \n      // Harmonious signs should boost compatibility\n      expect(compatWithSigns).toBeGreaterThan(compatWithoutSigns);\n    });\n  });\n  \n  describe('generateEnhancedRecommendation', () => {\n    it('should generate recommendations based on dominant element and modality', () => {\n      const mockResultCardinalFire = {\n        elements: { Fire: 0.6, Water: 0.2, Earth: 0.1, Air: 0.1 },\n        modalities: { Cardinal: 0.5, Fixed: 0.3, Mutable: 0.2 },\n        qualities: { Hot: 0.7, Dry: 0.5, Cold: 0.2, Wet: 0.1 },\n        dominant: {\n          element: 'Fire',\n          modality: 'Cardinal',\n          quality: 'Hot'\n        }\n      };\n      \n      const mockResultMutableAir = {\n        elements: { Fire: 0.2, Water: 0.2, Earth: 0.1, Air: 0.5 },\n        modalities: { Cardinal: 0.2, Fixed: 0.2, Mutable: 0.6 },\n        qualities: { Hot: 0.3, Dry: 0.6, Cold: 0.2, Wet: 0.3 },\n        dominant: {\n          element: 'Air',\n          modality: 'Mutable',\n          quality: 'Dry'\n        }\n      };\n      \n      const recCardinalFire = generateEnhancedRecommendation(mockResultCardinalFire);\n      const recMutableAir = generateEnhancedRecommendation(mockResultMutableAir);\n      \n      // Cardinal Fire should recommend techniques like grilling\n      expect(recCardinalFire.cookingMethod).toMatch(/grilling|roasting|flame cooking/);\n      \n      // Mutable Air should recommend techniques that enhance air's mutable nature\n      expect(recMutableAir.cookingMethod).toMatch(/whipping|aerating|cold infusing/);\n      \n      // Check that modality influence is included in reasoning\n      expect(recCardinalFire.reasoning.modalityInfluence).toContain('Cardinal Fire');\n      expect(recMutableAir.reasoning.modalityInfluence).toContain('Mutable Air');\n    });\n    \n    it('should adapt recommendations based on user preferences', () => {\n      const mockResult = {\n        elements: { Fire: 0.6, Water: 0.2, Earth: 0.1, Air: 0.1 },\n        modalities: { Cardinal: 0.5, Fixed: 0.3, Mutable: 0.2 },\n        qualities: { Hot: 0.7, Dry: 0.5, Cold: 0.2, Wet: 0.1 },\n        dominant: {\n          element: 'Fire',\n          modality: 'Cardinal',\n          quality: 'Hot'\n        }\n      };\n      \n      // User doesn't eat chicken\n      const userPreferences = ['chicken'];\n      const recommendation = generateEnhancedRecommendation(mockResult, userPreferences);\n      \n      // Should not recommend chicken\n      expect(recommendation.mainIngredient).not.toContain('chicken');\n    });\n    \n    it('should consider seasonal influences', () => {\n      const mockResult = {\n        elements: { Fire: 0.6, Water: 0.2, Earth: 0.1, Air: 0.1 },\n        modalities: { Cardinal: 0.5, Fixed: 0.3, Mutable: 0.2 },\n        qualities: { Hot: 0.7, Dry: 0.5, Cold: 0.2, Wet: 0.1 },\n        dominant: {\n          element: 'Fire',\n          modality: 'Cardinal',\n          quality: 'Hot'\n        }\n      };\n      \n      // Test winter recommendations\n      const winterRecommendation = generateEnhancedRecommendation(mockResult, [], 'winter');\n      \n      // Should mention seasonal effects in reasoning\n      expect(winterRecommendation.reasoning.seasonal).toContain('Winter');\n    });\n  });\n  \n  describe('validateAlgorithms', () => {\n    it('should validate all algorithm components', () => {\n      const validationResult = validateAlgorithms();\n      \n      // Should successfully validate all components\n      expect(validationResult.success).toBe(true);\n      \n      // All individual tests should pass\n      validationResult.results.forEach(result => {\n        expect(result.passed).toBe(true);\n      });\n    });\n  });\n}); "],"version":3}