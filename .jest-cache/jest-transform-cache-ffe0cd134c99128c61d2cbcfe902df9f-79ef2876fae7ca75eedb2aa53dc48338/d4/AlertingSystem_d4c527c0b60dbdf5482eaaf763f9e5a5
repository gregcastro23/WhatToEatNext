f0fddbc1fcb509c8e1b26a78f36d3357
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.alertingSystem = void 0;
const BuildPerformanceMonitor_1 = require("./BuildPerformanceMonitor");
const ErrorTrackingSystem_1 = require("./ErrorTrackingSystem");
const QualityMetricsService_1 = require("./QualityMetricsService");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
class AlertingSystem {
    constructor() {
        this.alerts = [];
        this.alertRules = [];
        this.escalationRules = [];
        this.alertResponses = [];
        this.subscribers = new Set();
        this.lastAlertTimes = new Map();
        this.loadConfiguration();
        this.initializeDefaultRules();
        this.startMonitoring();
    }
    loadConfiguration() {
        try {
            const configPath = path_1.default.join(process.cwd(), '.kiro', 'settings', 'alerting-config.json');
            if (fs_1.default.existsSync(configPath)) {
                const config = JSON.parse(fs_1.default.readFileSync(configPath, 'utf8'));
                this.alertRules = config.alertRules || [];
                this.escalationRules = config.escalationRules || [];
                this.alerts = config.alerts || [];
                this.alertResponses = config.alertResponses || [];
            }
        }
        catch (error) {
            console.warn('[Alerting System] Failed to load configuration:', error);
        }
    }
    saveConfiguration() {
        try {
            const settingsDir = path_1.default.join(process.cwd(), '.kiro', 'settings');
            if (!fs_1.default.existsSync(settingsDir)) {
                fs_1.default.mkdirSync(settingsDir, { recursive: true });
            }
            const configPath = path_1.default.join(settingsDir, 'alerting-config.json');
            const config = {
                alertRules: this.alertRules,
                escalationRules: this.escalationRules,
                alerts: this.alerts.slice(-500),
                alertResponses: this.alertResponses.slice(-200) // Keep last 200 responses
            };
            fs_1.default.writeFileSync(configPath, JSON.stringify(config, null, 2));
        }
        catch (error) {
            console.error('[Alerting System] Failed to save configuration:', error);
        }
    }
    initializeDefaultRules() {
        if (this.alertRules.length === 0) {
            const defaultRules = [
                {
                    id: 'build-time-critical',
                    name: 'Critical Build Time',
                    description: 'Build time exceeds critical threshold',
                    type: 'performance',
                    metric: 'build_time',
                    condition: 'greater_than',
                    threshold: 120000,
                    severity: 'critical',
                    enabled: true,
                    cooldownMinutes: 15,
                    escalationMinutes: 30,
                    autoResponse: true,
                    responseActions: [
                        {
                            id: 'analyze-build-bottlenecks',
                            name: 'Analyze Build Bottlenecks',
                            type: 'script',
                            config: { script: 'analyze-build-performance.js' },
                            conditions: [],
                            retryCount: 2,
                            timeoutSeconds: 300
                        },
                        {
                            id: 'clear-build-cache',
                            name: 'Clear Build Cache',
                            type: 'command',
                            config: { command: 'yarn cache clean' },
                            conditions: [],
                            retryCount: 1,
                            timeoutSeconds: 60
                        }
                    ],
                    notificationChannels: ['console', 'file']
                },
                {
                    id: 'typescript-errors-high',
                    name: 'High TypeScript Error Count',
                    description: 'TypeScript errors exceed acceptable threshold',
                    type: 'error',
                    metric: 'typescript_errors',
                    condition: 'greater_than',
                    threshold: 1000,
                    severity: 'error',
                    enabled: true,
                    cooldownMinutes: 30,
                    escalationMinutes: 60,
                    autoResponse: true,
                    responseActions: [
                        {
                            id: 'trigger-error-campaign',
                            name: 'Trigger Error Reduction Campaign',
                            type: 'campaign',
                            config: {
                                campaignType: 'typescript-error-reduction',
                                maxFiles: 20,
                                safetyLevel: 'HIGH'
                            },
                            conditions: ['error_count > 500'],
                            retryCount: 1,
                            timeoutSeconds: 1800
                        }
                    ],
                    notificationChannels: ['console', 'file']
                },
                {
                    id: 'code-quality-low',
                    name: 'Low Code Quality Score',
                    description: 'Code quality score below acceptable threshold',
                    type: 'quality',
                    metric: 'code_quality_score',
                    condition: 'less_than',
                    threshold: 60,
                    severity: 'warning',
                    enabled: true,
                    cooldownMinutes: 60,
                    escalationMinutes: 120,
                    autoResponse: false,
                    responseActions: [
                        {
                            id: 'generate-quality-report',
                            name: 'Generate Quality Report',
                            type: 'script',
                            config: { script: 'generate-quality-report.js' },
                            conditions: [],
                            retryCount: 1,
                            timeoutSeconds: 120
                        }
                    ],
                    notificationChannels: ['console', 'file']
                },
                {
                    id: 'memory-usage-high',
                    name: 'High Memory Usage',
                    description: 'Memory usage exceeds safe threshold',
                    type: 'system',
                    metric: 'memory_usage',
                    condition: 'greater_than',
                    threshold: 512 * 1024 * 1024,
                    severity: 'warning',
                    enabled: true,
                    cooldownMinutes: 10,
                    escalationMinutes: 30,
                    autoResponse: true,
                    responseActions: [
                        {
                            id: 'garbage-collect',
                            name: 'Force Garbage Collection',
                            type: 'script',
                            config: { script: 'force-gc.js' },
                            conditions: [],
                            retryCount: 1,
                            timeoutSeconds: 30
                        }
                    ],
                    notificationChannels: ['console']
                },
                {
                    id: 'technical-debt-critical',
                    name: 'Critical Technical Debt',
                    description: 'Technical debt score indicates critical issues',
                    type: 'quality',
                    metric: 'technical_debt_score',
                    condition: 'greater_than',
                    threshold: 80,
                    severity: 'critical',
                    enabled: true,
                    cooldownMinutes: 120,
                    escalationMinutes: 240,
                    autoResponse: false,
                    responseActions: [
                        {
                            id: 'schedule-debt-reduction',
                            name: 'Schedule Technical Debt Reduction',
                            type: 'campaign',
                            config: {
                                campaignType: 'technical-debt-reduction',
                                priority: 'high'
                            },
                            conditions: [],
                            retryCount: 1,
                            timeoutSeconds: 300
                        }
                    ],
                    notificationChannels: ['console', 'file']
                }
            ];
            this.alertRules = defaultRules;
        }
        if (this.escalationRules.length === 0) {
            const defaultEscalationRules = [
                {
                    id: 'critical-escalation',
                    name: 'Critical Alert Escalation',
                    alertTypes: ['performance', 'error', 'quality', 'system'],
                    severityLevels: ['critical'],
                    escalationDelayMinutes: 30,
                    escalationActions: [
                        {
                            id: 'notify-team',
                            name: 'Notify Development Team',
                            type: 'notification',
                            config: {
                                message: 'Critical alert requires immediate attention',
                                channels: ['console', 'file']
                            },
                            conditions: [],
                            retryCount: 1,
                            timeoutSeconds: 30
                        }
                    ],
                    maxEscalations: 3
                },
                {
                    id: 'error-escalation',
                    name: 'Error Alert Escalation',
                    alertTypes: ['error'],
                    severityLevels: ['error'],
                    escalationDelayMinutes: 60,
                    escalationActions: [
                        {
                            id: 'automated-fix-attempt',
                            name: 'Attempt Automated Fix',
                            type: 'campaign',
                            config: {
                                campaignType: 'automated-error-fix',
                                conservative: true
                            },
                            conditions: ['automation_opportunities > 5'],
                            retryCount: 1,
                            timeoutSeconds: 600
                        }
                    ],
                    maxEscalations: 2
                }
            ];
            this.escalationRules = defaultEscalationRules;
        }
    }
    startMonitoring() {
        // Monitor every 2 minutes
        setInterval(() => {
            this.checkAlertConditions();
            this.processEscalations();
            this.cleanupOldAlerts();
            this.saveConfiguration();
        }, 2 * 60 * 1000);
        // Subscribe to data sources
        BuildPerformanceMonitor_1.buildPerformanceMonitor.subscribe((data) => {
            this.evaluatePerformanceAlerts(data);
        });
        ErrorTrackingSystem_1.errorTrackingSystem.subscribe((data) => {
            this.evaluateErrorAlerts(data);
        });
        QualityMetricsService_1.qualityMetricsService.subscribe((data) => {
            this.evaluateQualityAlerts(data);
        });
    }
    checkAlertConditions() {
        for (const rule of this.alertRules) {
            if (!rule.enabled)
                continue;
            // Check cooldown
            const lastAlertTime = this.lastAlertTimes.get(rule.id);
            if (lastAlertTime && (Date.now() - lastAlertTime.getTime()) < rule.cooldownMinutes * 60 * 1000) {
                continue;
            }
            this.evaluateRule(rule);
        }
    }
    evaluateRule(rule) {
        let currentValue;
        let shouldAlert = false;
        // Get current metric value based on rule type
        switch (rule.type) {
            case 'performance':
                currentValue = this.getPerformanceMetric(rule.metric);
                break;
            case 'error':
                currentValue = this.getErrorMetric(rule.metric);
                break;
            case 'quality':
                currentValue = this.getQualityMetric(rule.metric);
                break;
            case 'system':
                currentValue = this.getSystemMetric(rule.metric);
                break;
            default:
                return;
        }
        // Evaluate condition
        switch (rule.condition) {
            case 'greater_than':
                shouldAlert = currentValue > rule.threshold;
                break;
            case 'less_than':
                shouldAlert = currentValue < rule.threshold;
                break;
            case 'equals':
                shouldAlert = currentValue === rule.threshold;
                break;
            case 'not_equals':
                shouldAlert = currentValue !== rule.threshold;
                break;
            case 'percentage_change':
                // This would require historical data comparison
                shouldAlert = false; // Placeholder
                break;
        }
        if (shouldAlert) {
            this.createAlert(rule, currentValue);
        }
    }
    getPerformanceMetric(metric) {
        const summary = BuildPerformanceMonitor_1.buildPerformanceMonitor.getPerformanceSummary();
        switch (metric) {
            case 'build_time':
                return summary.averageBuildTime;
            case 'compilation_time':
                return summary.averageCompilationTime;
            case 'bundle_size':
                return summary.averageBundleSize;
            case 'memory_usage':
                return summary.averageMemoryUsage;
            case 'cache_efficiency':
                return summary.cacheEfficiency;
            case 'performance_score':
                return summary.performanceScore;
            default:
                return 0;
        }
    }
    getErrorMetric(metric) {
        const summary = ErrorTrackingSystem_1.errorTrackingSystem.getErrorSummary();
        switch (metric) {
            case 'typescript_errors':
                return summary.totalActiveErrors;
            case 'linting_violations':
                return summary.totalActiveLintViolations;
            case 'build_failures':
                return summary.totalRecentFailures;
            case 'critical_issues':
                return summary.criticalIssues;
            case 'automation_opportunities':
                return summary.automationOpportunities;
            default:
                return 0;
        }
    }
    getQualityMetric(metric) {
        const qualityMetrics = ErrorTrackingSystem_1.errorTrackingSystem.getCurrentQualityMetrics();
        if (!qualityMetrics)
            return 0;
        switch (metric) {
            case 'code_quality_score':
                return qualityMetrics.codeQualityScore;
            case 'technical_debt_score':
                return qualityMetrics.technicalDebtScore;
            case 'maintainability_index':
                return qualityMetrics.maintainabilityIndex;
            case 'error_rate':
                return qualityMetrics.errorRate;
            case 'warning_rate':
                return qualityMetrics.warningRate;
            default:
                return 0;
        }
    }
    getSystemMetric(metric) {
        switch (metric) {
            case 'memory_usage':
                return process.memoryUsage().heapUsed;
            case 'cpu_usage':
                return process.cpuUsage().user + process.cpuUsage().system;
            case 'uptime':
                return process.uptime();
            default:
                return 0;
        }
    }
    createAlert(rule, currentValue) {
        const alert = {
            id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            type: rule.type,
            severity: rule.severity,
            title: rule.name,
            description: `${rule.description}. Current value: ${currentValue}, Threshold: ${rule.threshold}`,
            threshold: rule.threshold,
            currentValue,
            timestamp: new Date(),
            acknowledged: false,
            resolved: false,
            escalated: false,
            responseActions: rule.responseActions.map(a => a.name),
            metadata: {
                ruleId: rule.id,
                metric: rule.metric,
                condition: rule.condition
            }
        };
        this.alerts.push(alert);
        this.lastAlertTimes.set(rule.id, new Date());
        // Log alert
        console.log(`[ALERT ${alert.severity.toUpperCase()}] ${alert.title}: ${alert.description}`);
        // Notify subscribers
        this.notifySubscribers(alert);
        // Execute auto-response if enabled
        if (rule.autoResponse) {
            this.executeAlertActions(alert, rule.responseActions);
        }
        // Send notifications
        this.sendNotifications(alert, rule.notificationChannels);
    }
    async executeAlertActions(alert, actions) {
        for (const action of actions) {
            // Check conditions
            if (!this.evaluateActionConditions(action.conditions, alert)) {
                continue;
            }
            const response = {
                alertId: alert.id,
                actionId: action.id,
                status: 'pending',
                startTime: new Date(),
                retryCount: 0
            };
            this.alertResponses.push(response);
            try {
                response.status = 'running';
                const result = await this.executeAction(action);
                response.status = 'completed';
                response.endTime = new Date();
                response.result = result;
                console.log(`[Alert Response] Successfully executed ${action.name} for alert ${alert.id}`);
            }
            catch (error) {
                response.status = 'failed';
                response.endTime = new Date();
                response.error = error.message;
                console.error(`[Alert Response] Failed to execute ${action.name} for alert ${alert.id}:`, error);
                // Retry if configured
                if (response.retryCount < action.retryCount) {
                    response.retryCount++;
                    setTimeout(() => {
                        this.executeAlertActions(alert, [action]);
                    }, 30000); // Retry after 30 seconds
                }
            }
        }
    }
    evaluateActionConditions(conditions, alert) {
        if (conditions.length === 0)
            return true;
        for (const condition of conditions) {
            if (!this.evaluateCondition(condition, alert)) {
                return false;
            }
        }
        return true;
    }
    evaluateCondition(condition, alert) {
        // Simple condition evaluation
        // In a real implementation, this would be more sophisticated
        if (condition.includes('error_count >')) {
            const threshold = parseInt(condition.split('>')[1].trim());
            return alert.currentValue > threshold;
        }
        if (condition.includes('automation_opportunities >')) {
            const threshold = parseInt(condition.split('>')[1].trim());
            const errorSummary = ErrorTrackingSystem_1.errorTrackingSystem.getErrorSummary();
            return errorSummary.automationOpportunities > threshold;
        }
        return true;
    }
    async executeAction(action) {
        const timeout = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('Action timeout')), action.timeoutSeconds * 1000);
        });
        const execution = this.performAction(action);
        return Promise.race([execution, timeout]);
    }
    async performAction(action) {
        switch (action.type) {
            case 'script':
                return this.executeScript(action.config.script);
            case 'command':
                return this.executeCommand(action.config.command);
            case 'campaign':
                return this.triggerCampaign(action.config);
            case 'api_call':
                return this.makeApiCall(action.config);
            case 'notification':
                return this.sendNotification(action.config);
            default:
                throw new Error(`Unknown action type: ${action.type}`);
        }
    }
    async executeScript(scriptName) {
        // This would execute a script file
        // For now, return a placeholder
        console.log(`[Alert Action] Executing script: ${scriptName}`);
        return { success: true, message: `Script ${scriptName} executed` };
    }
    async executeCommand(command) {
        // This would execute a shell command
        // For now, return a placeholder
        console.log(`[Alert Action] Executing command: ${command}`);
        return { success: true, message: `Command ${command} executed` };
    }
    async triggerCampaign(config) {
        // This would integrate with the campaign system
        // For now, return a placeholder
        console.log(`[Alert Action] Triggering campaign: ${config.campaignType}`);
        return { success: true, message: `Campaign ${config.campaignType} triggered` };
    }
    async makeApiCall(config) {
        // This would make an HTTP API call
        // For now, return a placeholder
        console.log(`[Alert Action] Making API call to: ${config.url}`);
        return { success: true, message: `API call to ${config.url} completed` };
    }
    async sendNotification(config) {
        console.log(`[Alert Notification] ${config.message}`);
        return { success: true, message: 'Notification sent' };
    }
    sendNotifications(alert, channels) {
        for (const channel of channels) {
            switch (channel) {
                case 'console':
                    console.log(`[NOTIFICATION] ${alert.title}: ${alert.description}`);
                    break;
                case 'file':
                    this.writeAlertToFile(alert);
                    break;
                default:
                    console.log(`[NOTIFICATION] Unknown channel: ${channel}`);
            }
        }
    }
    writeAlertToFile(alert) {
        try {
            const alertsDir = path_1.default.join(process.cwd(), '.kiro', 'alerts');
            if (!fs_1.default.existsSync(alertsDir)) {
                fs_1.default.mkdirSync(alertsDir, { recursive: true });
            }
            const alertFile = path_1.default.join(alertsDir, 'alerts.log');
            const alertLine = `${alert.timestamp.toISOString()} [${alert.severity.toUpperCase()}] ${alert.title}: ${alert.description}\n`;
            fs_1.default.appendFileSync(alertFile, alertLine);
        }
        catch (error) {
            console.error('[Alerting System] Failed to write alert to file:', error);
        }
    }
    evaluatePerformanceAlerts(data) {
        // This would be called when performance data is updated
        // The main monitoring loop handles rule evaluation
    }
    evaluateErrorAlerts(data) {
        // This would be called when error data is updated
        // The main monitoring loop handles rule evaluation
    }
    evaluateQualityAlerts(data) {
        // This would be called when quality data is updated
        // The main monitoring loop handles rule evaluation
    }
    processEscalations() {
        const now = new Date();
        for (const alert of this.alerts) {
            if (alert.resolved || alert.escalated)
                continue;
            const alertAge = now.getTime() - alert.timestamp.getTime();
            for (const escalationRule of this.escalationRules) {
                if (!escalationRule.alertTypes.includes(alert.type))
                    continue;
                if (!escalationRule.severityLevels.includes(alert.severity))
                    continue;
                const escalationDelay = escalationRule.escalationDelayMinutes * 60 * 1000;
                if (alertAge >= escalationDelay) {
                    this.escalateAlert(alert, escalationRule);
                    break;
                }
            }
        }
    }
    escalateAlert(alert, escalationRule) {
        alert.escalated = true;
        alert.escalatedAt = new Date();
        console.log(`[ESCALATION] Alert ${alert.id} escalated using rule ${escalationRule.name}`);
        // Execute escalation actions
        this.executeAlertActions(alert, escalationRule.escalationActions);
    }
    cleanupOldAlerts() {
        const cutoffTime = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // 30 days
        this.alerts = this.alerts.filter(alert => alert.timestamp >= cutoffTime);
        this.alertResponses = this.alertResponses.filter(response => response.startTime >= cutoffTime);
    }
    notifySubscribers(alert) {
        this.subscribers.forEach(callback => {
            try {
                callback(alert);
            }
            catch (error) {
                console.error('[Alerting System] Subscriber error:', error);
            }
        });
    }
    // Public API methods
    subscribe(callback) {
        this.subscribers.add(callback);
        return () => this.subscribers.delete(callback);
    }
    getAlerts(options) {
        let filtered = this.alerts;
        if (options === null || options === void 0 ? void 0 : options.type) {
            filtered = filtered.filter(a => a.type === options.type);
        }
        if (options === null || options === void 0 ? void 0 : options.severity) {
            filtered = filtered.filter(a => a.severity === options.severity);
        }
        if ((options === null || options === void 0 ? void 0 : options.resolved) !== undefined) {
            filtered = filtered.filter(a => a.resolved === options.resolved);
        }
        // Sort by timestamp (newest first)
        filtered.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());
        if (options === null || options === void 0 ? void 0 : options.limit) {
            filtered = filtered.slice(0, options.limit);
        }
        return filtered;
    }
    getAlertRules() {
        return this.alertRules;
    }
    addAlertRule(rule) {
        const id = `rule-${Date.now()}`;
        const newRule = { ...rule, id };
        this.alertRules.push(newRule);
        this.saveConfiguration();
        return id;
    }
    updateAlertRule(id, updates) {
        const ruleIndex = this.alertRules.findIndex(r => r.id === id);
        if (ruleIndex === -1)
            return false;
        this.alertRules[ruleIndex] = { ...this.alertRules[ruleIndex], ...updates };
        this.saveConfiguration();
        return true;
    }
    deleteAlertRule(id) {
        const ruleIndex = this.alertRules.findIndex(r => r.id === id);
        if (ruleIndex === -1)
            return false;
        this.alertRules.splice(ruleIndex, 1);
        this.saveConfiguration();
        return true;
    }
    acknowledgeAlert(alertId) {
        const alert = this.alerts.find(a => a.id === alertId);
        if (!alert)
            return false;
        alert.acknowledged = true;
        this.saveConfiguration();
        return true;
    }
    resolveAlert(alertId) {
        const alert = this.alerts.find(a => a.id === alertId);
        if (!alert)
            return false;
        alert.resolved = true;
        alert.resolvedAt = new Date();
        this.saveConfiguration();
        return true;
    }
    getAlertResponses(alertId) {
        if (alertId) {
            return this.alertResponses.filter(r => r.alertId === alertId);
        }
        return this.alertResponses;
    }
    getAlertSummary() {
        const now = new Date();
        const last24Hours = new Date(now.getTime() - 24 * 60 * 60 * 1000);
        const recentAlerts = this.alerts.filter(a => a.timestamp >= last24Hours);
        return {
            totalAlerts: this.alerts.length,
            recentAlerts: recentAlerts.length,
            unresolvedAlerts: this.alerts.filter(a => !a.resolved).length,
            criticalAlerts: this.alerts.filter(a => a.severity === 'critical' && !a.resolved).length,
            escalatedAlerts: this.alerts.filter(a => a.escalated && !a.resolved).length,
            alertsByType: this.getAlertCountsByType(),
            alertsBySeverity: this.getAlertCountsBySeverity(),
            responseSuccessRate: this.calculateResponseSuccessRate(),
            averageResolutionTime: this.calculateAverageResolutionTime()
        };
    }
    getAlertCountsByType() {
        const counts = {};
        for (const alert of this.alerts.filter(a => !a.resolved)) {
            counts[alert.type] = (counts[alert.type] || 0) + 1;
        }
        return counts;
    }
    getAlertCountsBySeverity() {
        const counts = {};
        for (const alert of this.alerts.filter(a => !a.resolved)) {
            counts[alert.severity] = (counts[alert.severity] || 0) + 1;
        }
        return counts;
    }
    calculateResponseSuccessRate() {
        const totalResponses = this.alertResponses.length;
        if (totalResponses === 0)
            return 0;
        const successfulResponses = this.alertResponses.filter(r => r.status === 'completed').length;
        return (successfulResponses / totalResponses) * 100;
    }
    calculateAverageResolutionTime() {
        const resolvedAlerts = this.alerts.filter(a => a.resolved && a.resolvedAt);
        if (resolvedAlerts.length === 0)
            return 0;
        const totalResolutionTime = resolvedAlerts.reduce((sum, alert) => {
            return sum + (alert.resolvedAt.getTime() - alert.timestamp.getTime());
        }, 0);
        return totalResolutionTime / resolvedAlerts.length / (60 * 1000); // Return in minutes
    }
    testAlert(ruleId) {
        const rule = this.alertRules.find(r => r.id === ruleId);
        if (!rule)
            return false;
        // Create a test alert
        this.createAlert(rule, rule.threshold + 1);
        return true;
    }
    reset() {
        this.alerts = [];
        this.alertResponses = [];
        this.lastAlertTimes.clear();
        this.saveConfiguration();
    }
}
exports.alertingSystem = new AlertingSystem();
exports.default = AlertingSystem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,