{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/AlertingSystem.ts","mappings":";;;;;;AAAA,uEAAoE;AACpE,+DAA4D;AAC5D,mEAAgE;AAChE,4CAAoB;AACpB,gDAAwB;AAoExB,MAAM,cAAc;IAQlB;QAPQ,WAAM,GAAY,EAAE,CAAC;QACrB,eAAU,GAAgB,EAAE,CAAC;QAC7B,oBAAe,GAAqB,EAAE,CAAC;QACvC,mBAAc,GAAoB,EAAE,CAAC;QACrC,gBAAW,GAAgC,IAAI,GAAG,EAAE,CAAC;QACrD,mBAAc,GAAsB,IAAI,GAAG,EAAE,CAAC;QAGpD,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAEO,iBAAiB;QACvB,IAAI;YACF,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,sBAAsB,CAAC,CAAC;YACzF,IAAI,YAAE,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;gBAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,YAAE,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;gBAC/D,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,IAAI,EAAE,CAAC;gBAC1C,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,eAAe,IAAI,EAAE,CAAC;gBACpD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;gBAClC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,IAAI,EAAE,CAAC;aACnD;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,iDAAiD,EAAE,KAAK,CAAC,CAAC;SACxE;IACH,CAAC;IAEO,iBAAiB;QACvB,IAAI;YACF,MAAM,WAAW,GAAG,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;YAClE,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;gBAC/B,YAAE,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;aAChD;YAED,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,sBAAsB,CAAC,CAAC;YAClE,MAAM,MAAM,GAAG;gBACb,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,eAAe,EAAE,IAAI,CAAC,eAAe;gBACrC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;gBAC/B,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,0BAA0B;aAC3E,CAAC;YAEF,YAAE,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SAC/D;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,iDAAiD,EAAE,KAAK,CAAC,CAAC;SACzE;IACH,CAAC;IAEO,sBAAsB;QAC5B,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YAChC,MAAM,YAAY,GAAgB;gBAChC;oBACE,EAAE,EAAE,qBAAqB;oBACzB,IAAI,EAAE,qBAAqB;oBAC3B,WAAW,EAAE,uCAAuC;oBACpD,IAAI,EAAE,aAAa;oBACnB,MAAM,EAAE,YAAY;oBACpB,SAAS,EAAE,cAAc;oBACzB,SAAS,EAAE,MAAM;oBACjB,QAAQ,EAAE,UAAU;oBACpB,OAAO,EAAE,IAAI;oBACb,eAAe,EAAE,EAAE;oBACnB,iBAAiB,EAAE,EAAE;oBACrB,YAAY,EAAE,IAAI;oBAClB,eAAe,EAAE;wBACf;4BACE,EAAE,EAAE,2BAA2B;4BAC/B,IAAI,EAAE,2BAA2B;4BACjC,IAAI,EAAE,QAAQ;4BACd,MAAM,EAAE,EAAE,MAAM,EAAE,8BAA8B,EAAE;4BAClD,UAAU,EAAE,EAAE;4BACd,UAAU,EAAE,CAAC;4BACb,cAAc,EAAE,GAAG;yBACpB;wBACD;4BACE,EAAE,EAAE,mBAAmB;4BACvB,IAAI,EAAE,mBAAmB;4BACzB,IAAI,EAAE,SAAS;4BACf,MAAM,EAAE,EAAE,OAAO,EAAE,kBAAkB,EAAE;4BACvC,UAAU,EAAE,EAAE;4BACd,UAAU,EAAE,CAAC;4BACb,cAAc,EAAE,EAAE;yBACnB;qBACF;oBACD,oBAAoB,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;iBAC1C;gBACD;oBACE,EAAE,EAAE,wBAAwB;oBAC5B,IAAI,EAAE,6BAA6B;oBACnC,WAAW,EAAE,+CAA+C;oBAC5D,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,mBAAmB;oBAC3B,SAAS,EAAE,cAAc;oBACzB,SAAS,EAAE,IAAI;oBACf,QAAQ,EAAE,OAAO;oBACjB,OAAO,EAAE,IAAI;oBACb,eAAe,EAAE,EAAE;oBACnB,iBAAiB,EAAE,EAAE;oBACrB,YAAY,EAAE,IAAI;oBAClB,eAAe,EAAE;wBACf;4BACE,EAAE,EAAE,wBAAwB;4BAC5B,IAAI,EAAE,kCAAkC;4BACxC,IAAI,EAAE,UAAU;4BAChB,MAAM,EAAE;gCACN,YAAY,EAAE,4BAA4B;gCAC1C,QAAQ,EAAE,EAAE;gCACZ,WAAW,EAAE,MAAM;6BACpB;4BACD,UAAU,EAAE,CAAC,mBAAmB,CAAC;4BACjC,UAAU,EAAE,CAAC;4BACb,cAAc,EAAE,IAAI;yBACrB;qBACF;oBACD,oBAAoB,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;iBAC1C;gBACD;oBACE,EAAE,EAAE,kBAAkB;oBACtB,IAAI,EAAE,wBAAwB;oBAC9B,WAAW,EAAE,+CAA+C;oBAC5D,IAAI,EAAE,SAAS;oBACf,MAAM,EAAE,oBAAoB;oBAC5B,SAAS,EAAE,WAAW;oBACtB,SAAS,EAAE,EAAE;oBACb,QAAQ,EAAE,SAAS;oBACnB,OAAO,EAAE,IAAI;oBACb,eAAe,EAAE,EAAE;oBACnB,iBAAiB,EAAE,GAAG;oBACtB,YAAY,EAAE,KAAK;oBACnB,eAAe,EAAE;wBACf;4BACE,EAAE,EAAE,yBAAyB;4BAC7B,IAAI,EAAE,yBAAyB;4BAC/B,IAAI,EAAE,QAAQ;4BACd,MAAM,EAAE,EAAE,MAAM,EAAE,4BAA4B,EAAE;4BAChD,UAAU,EAAE,EAAE;4BACd,UAAU,EAAE,CAAC;4BACb,cAAc,EAAE,GAAG;yBACpB;qBACF;oBACD,oBAAoB,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;iBAC1C;gBACD;oBACE,EAAE,EAAE,mBAAmB;oBACvB,IAAI,EAAE,mBAAmB;oBACzB,WAAW,EAAE,qCAAqC;oBAClD,IAAI,EAAE,QAAQ;oBACd,MAAM,EAAE,cAAc;oBACtB,SAAS,EAAE,cAAc;oBACzB,SAAS,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;oBAC5B,QAAQ,EAAE,SAAS;oBACnB,OAAO,EAAE,IAAI;oBACb,eAAe,EAAE,EAAE;oBACnB,iBAAiB,EAAE,EAAE;oBACrB,YAAY,EAAE,IAAI;oBAClB,eAAe,EAAE;wBACf;4BACE,EAAE,EAAE,iBAAiB;4BACrB,IAAI,EAAE,0BAA0B;4BAChC,IAAI,EAAE,QAAQ;4BACd,MAAM,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE;4BACjC,UAAU,EAAE,EAAE;4BACd,UAAU,EAAE,CAAC;4BACb,cAAc,EAAE,EAAE;yBACnB;qBACF;oBACD,oBAAoB,EAAE,CAAC,SAAS,CAAC;iBAClC;gBACD;oBACE,EAAE,EAAE,yBAAyB;oBAC7B,IAAI,EAAE,yBAAyB;oBAC/B,WAAW,EAAE,gDAAgD;oBAC7D,IAAI,EAAE,SAAS;oBACf,MAAM,EAAE,sBAAsB;oBAC9B,SAAS,EAAE,cAAc;oBACzB,SAAS,EAAE,EAAE;oBACb,QAAQ,EAAE,UAAU;oBACpB,OAAO,EAAE,IAAI;oBACb,eAAe,EAAE,GAAG;oBACpB,iBAAiB,EAAE,GAAG;oBACtB,YAAY,EAAE,KAAK;oBACnB,eAAe,EAAE;wBACf;4BACE,EAAE,EAAE,yBAAyB;4BAC7B,IAAI,EAAE,mCAAmC;4BACzC,IAAI,EAAE,UAAU;4BAChB,MAAM,EAAE;gCACN,YAAY,EAAE,0BAA0B;gCACxC,QAAQ,EAAE,MAAM;6BACjB;4BACD,UAAU,EAAE,EAAE;4BACd,UAAU,EAAE,CAAC;4BACb,cAAc,EAAE,GAAG;yBACpB;qBACF;oBACD,oBAAoB,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;iBAC1C;aACF,CAAC;YAEF,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC;SAChC;QAED,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE;YACrC,MAAM,sBAAsB,GAAqB;gBAC/C;oBACE,EAAE,EAAE,qBAAqB;oBACzB,IAAI,EAAE,2BAA2B;oBACjC,UAAU,EAAE,CAAC,aAAa,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,CAAC;oBACzD,cAAc,EAAE,CAAC,UAAU,CAAC;oBAC5B,sBAAsB,EAAE,EAAE;oBAC1B,iBAAiB,EAAE;wBACjB;4BACE,EAAE,EAAE,aAAa;4BACjB,IAAI,EAAE,yBAAyB;4BAC/B,IAAI,EAAE,cAAc;4BACpB,MAAM,EAAE;gCACN,OAAO,EAAE,6CAA6C;gCACtD,QAAQ,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;6BAC9B;4BACD,UAAU,EAAE,EAAE;4BACd,UAAU,EAAE,CAAC;4BACb,cAAc,EAAE,EAAE;yBACnB;qBACF;oBACD,cAAc,EAAE,CAAC;iBAClB;gBACD;oBACE,EAAE,EAAE,kBAAkB;oBACtB,IAAI,EAAE,wBAAwB;oBAC9B,UAAU,EAAE,CAAC,OAAO,CAAC;oBACrB,cAAc,EAAE,CAAC,OAAO,CAAC;oBACzB,sBAAsB,EAAE,EAAE;oBAC1B,iBAAiB,EAAE;wBACjB;4BACE,EAAE,EAAE,uBAAuB;4BAC3B,IAAI,EAAE,uBAAuB;4BAC7B,IAAI,EAAE,UAAU;4BAChB,MAAM,EAAE;gCACN,YAAY,EAAE,qBAAqB;gCACnC,YAAY,EAAE,IAAI;6BACnB;4BACD,UAAU,EAAE,CAAC,8BAA8B,CAAC;4BAC5C,UAAU,EAAE,CAAC;4BACb,cAAc,EAAE,GAAG;yBACpB;qBACF;oBACD,cAAc,EAAE,CAAC;iBAClB;aACF,CAAC;YAEF,IAAI,CAAC,eAAe,GAAG,sBAAsB,CAAC;SAC/C;IACH,CAAC;IAEO,eAAe;QACrB,0BAA0B;QAC1B,WAAW,CAAC,GAAG,EAAE;YACf,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC5B,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC3B,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAElB,4BAA4B;QAC5B,iDAAuB,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YACzC,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,yCAAmB,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YACrC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,6CAAqB,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YACvC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,oBAAoB;QAC1B,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;YAClC,IAAI,CAAC,IAAI,CAAC,OAAO;gBAAE,SAAS;YAE5B,iBAAiB;YACjB,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACvD,IAAI,aAAa,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,aAAa,CAAC,OAAO,EAAE,CAAC,GAAG,IAAI,CAAC,eAAe,GAAG,EAAE,GAAG,IAAI,EAAE;gBAC9F,SAAS;aACV;YAED,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SACzB;IACH,CAAC;IAEO,YAAY,CAAC,IAAe;QAClC,IAAI,YAAoB,CAAC;QACzB,IAAI,WAAW,GAAG,KAAK,CAAC;QAExB,8CAA8C;QAC9C,QAAQ,IAAI,CAAC,IAAI,EAAE;YACjB,KAAK,aAAa;gBAChB,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACtD,MAAM;YACR,KAAK,OAAO;gBACV,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAChD,MAAM;YACR,KAAK,SAAS;gBACZ,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAClD,MAAM;YACR,KAAK,QAAQ;gBACX,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACjD,MAAM;YACR;gBACE,OAAO;SACV;QAED,qBAAqB;QACrB,QAAQ,IAAI,CAAC,SAAS,EAAE;YACtB,KAAK,cAAc;gBACjB,WAAW,GAAG,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC;gBAC5C,MAAM;YACR,KAAK,WAAW;gBACd,WAAW,GAAG,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC;gBAC5C,MAAM;YACR,KAAK,QAAQ;gBACX,WAAW,GAAG,YAAY,KAAK,IAAI,CAAC,SAAS,CAAC;gBAC9C,MAAM;YACR,KAAK,YAAY;gBACf,WAAW,GAAG,YAAY,KAAK,IAAI,CAAC,SAAS,CAAC;gBAC9C,MAAM;YACR,KAAK,mBAAmB;gBACtB,gDAAgD;gBAChD,WAAW,GAAG,KAAK,CAAC,CAAC,cAAc;gBACnC,MAAM;SACT;QAED,IAAI,WAAW,EAAE;YACf,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;SACtC;IACH,CAAC;IAEO,oBAAoB,CAAC,MAAc;QACzC,MAAM,OAAO,GAAG,iDAAuB,CAAC,qBAAqB,EAAE,CAAC;QAEhE,QAAQ,MAAM,EAAE;YACd,KAAK,YAAY;gBACf,OAAO,OAAO,CAAC,gBAAgB,CAAC;YAClC,KAAK,kBAAkB;gBACrB,OAAO,OAAO,CAAC,sBAAsB,CAAC;YACxC,KAAK,aAAa;gBAChB,OAAO,OAAO,CAAC,iBAAiB,CAAC;YACnC,KAAK,cAAc;gBACjB,OAAO,OAAO,CAAC,kBAAkB,CAAC;YACpC,KAAK,kBAAkB;gBACrB,OAAO,OAAO,CAAC,eAAe,CAAC;YACjC,KAAK,mBAAmB;gBACtB,OAAO,OAAO,CAAC,gBAAgB,CAAC;YAClC;gBACE,OAAO,CAAC,CAAC;SACZ;IACH,CAAC;IAEO,cAAc,CAAC,MAAc;QACnC,MAAM,OAAO,GAAG,yCAAmB,CAAC,eAAe,EAAE,CAAC;QAEtD,QAAQ,MAAM,EAAE;YACd,KAAK,mBAAmB;gBACtB,OAAO,OAAO,CAAC,iBAAiB,CAAC;YACnC,KAAK,oBAAoB;gBACvB,OAAO,OAAO,CAAC,yBAAyB,CAAC;YAC3C,KAAK,gBAAgB;gBACnB,OAAO,OAAO,CAAC,mBAAmB,CAAC;YACrC,KAAK,iBAAiB;gBACpB,OAAO,OAAO,CAAC,cAAc,CAAC;YAChC,KAAK,0BAA0B;gBAC7B,OAAO,OAAO,CAAC,uBAAuB,CAAC;YACzC;gBACE,OAAO,CAAC,CAAC;SACZ;IACH,CAAC;IAEO,gBAAgB,CAAC,MAAc;QACrC,MAAM,cAAc,GAAG,yCAAmB,CAAC,wBAAwB,EAAE,CAAC;QAEtE,IAAI,CAAC,cAAc;YAAE,OAAO,CAAC,CAAC;QAE9B,QAAQ,MAAM,EAAE;YACd,KAAK,oBAAoB;gBACvB,OAAO,cAAc,CAAC,gBAAgB,CAAC;YACzC,KAAK,sBAAsB;gBACzB,OAAO,cAAc,CAAC,kBAAkB,CAAC;YAC3C,KAAK,uBAAuB;gBAC1B,OAAO,cAAc,CAAC,oBAAoB,CAAC;YAC7C,KAAK,YAAY;gBACf,OAAO,cAAc,CAAC,SAAS,CAAC;YAClC,KAAK,cAAc;gBACjB,OAAO,cAAc,CAAC,WAAW,CAAC;YACpC;gBACE,OAAO,CAAC,CAAC;SACZ;IACH,CAAC;IAEO,eAAe,CAAC,MAAc;QACpC,QAAQ,MAAM,EAAE;YACd,KAAK,cAAc;gBACjB,OAAO,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;YACxC,KAAK,WAAW;gBACd,OAAO,OAAO,CAAC,QAAQ,EAAE,CAAC,IAAI,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC;YAC7D,KAAK,QAAQ;gBACX,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC;YAC1B;gBACE,OAAO,CAAC,CAAC;SACZ;IACH,CAAC;IAEO,WAAW,CAAC,IAAe,EAAE,YAAoB;QACvD,MAAM,KAAK,GAAU;YACnB,EAAE,EAAE,SAAS,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;YACpE,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,KAAK,EAAE,IAAI,CAAC,IAAI;YAChB,WAAW,EAAE,GAAG,IAAI,CAAC,WAAW,oBAAoB,YAAY,gBAAgB,IAAI,CAAC,SAAS,EAAE;YAChG,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,YAAY;YACZ,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,YAAY,EAAE,KAAK;YACnB,QAAQ,EAAE,KAAK;YACf,SAAS,EAAE,KAAK;YAChB,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;YACtD,QAAQ,EAAE;gBACR,MAAM,EAAE,IAAI,CAAC,EAAE;gBACf,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,SAAS,EAAE,IAAI,CAAC,SAAS;aAC1B;SACF,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;QAE7C,YAAY;QACZ,OAAO,CAAC,GAAG,CAAC,UAAU,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;QAE5F,qBAAqB;QACrB,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAE9B,mCAAmC;QACnC,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;SACvD;QAED,qBAAqB;QACrB,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAC3D,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,KAAY,EAAE,OAAsB;QACpE,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,mBAAmB;YACnB,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,UAAU,EAAE,KAAK,CAAC,EAAE;gBAC5D,SAAS;aACV;YAED,MAAM,QAAQ,GAAkB;gBAC9B,OAAO,EAAE,KAAK,CAAC,EAAE;gBACjB,QAAQ,EAAE,MAAM,CAAC,EAAE;gBACnB,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,UAAU,EAAE,CAAC;aACd,CAAC;YAEF,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAEnC,IAAI;gBACF,QAAQ,CAAC,MAAM,GAAG,SAAS,CAAC;gBAC5B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBAEhD,QAAQ,CAAC,MAAM,GAAG,WAAW,CAAC;gBAC9B,QAAQ,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;gBAC9B,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;gBAEzB,OAAO,CAAC,GAAG,CAAC,0CAA0C,MAAM,CAAC,IAAI,cAAc,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;aAC5F;YAAC,OAAO,KAAK,EAAE;gBACd,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC;gBAC3B,QAAQ,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;gBAC9B,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC;gBAE/B,OAAO,CAAC,KAAK,CAAC,sCAAsC,MAAM,CAAC,IAAI,cAAc,KAAK,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;gBAEjG,sBAAsB;gBACtB,IAAI,QAAQ,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,EAAE;oBAC3C,QAAQ,CAAC,UAAU,EAAE,CAAC;oBACtB,UAAU,CAAC,GAAG,EAAE;wBACd,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC5C,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,yBAAyB;iBACrC;aACF;SACF;IACH,CAAC;IAEO,wBAAwB,CAAC,UAAoB,EAAE,KAAY;QACjE,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,IAAI,CAAC;QAEzC,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;YAClC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;gBAC7C,OAAO,KAAK,CAAC;aACd;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,iBAAiB,CAAC,SAAiB,EAAE,KAAY;QACvD,8BAA8B;QAC9B,6DAA6D;QAE7D,IAAI,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE;YACvC,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;YAC3D,OAAO,KAAK,CAAC,YAAY,GAAG,SAAS,CAAC;SACvC;QAED,IAAI,SAAS,CAAC,QAAQ,CAAC,4BAA4B,CAAC,EAAE;YACpD,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;YAC3D,MAAM,YAAY,GAAG,yCAAmB,CAAC,eAAe,EAAE,CAAC;YAC3D,OAAO,YAAY,CAAC,uBAAuB,GAAG,SAAS,CAAC;SACzD;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,KAAK,CAAC,aAAa,CAAC,MAAmB;QAC7C,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE;YACxC,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,EAAE,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC;QACtF,CAAC,CAAC,CAAC;QAEH,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAE7C,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;IAC5C,CAAC;IAEO,KAAK,CAAC,aAAa,CAAC,MAAmB;QAC7C,QAAQ,MAAM,CAAC,IAAI,EAAE;YACnB,KAAK,QAAQ;gBACX,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAClD,KAAK,SAAS;gBACZ,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACpD,KAAK,UAAU;gBACb,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC7C,KAAK,UAAU;gBACb,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACzC,KAAK,cAAc;gBACjB,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC9C;gBACE,MAAM,IAAI,KAAK,CAAC,wBAAwB,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;SAC1D;IACH,CAAC;IAEO,KAAK,CAAC,aAAa,CAAC,UAAkB;QAC5C,mCAAmC;QACnC,gCAAgC;QAChC,OAAO,CAAC,GAAG,CAAC,oCAAoC,UAAU,EAAE,CAAC,CAAC;QAC9D,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,UAAU,WAAW,EAAE,CAAC;IACrE,CAAC;IAEO,KAAK,CAAC,cAAc,CAAC,OAAe;QAC1C,qCAAqC;QACrC,gCAAgC;QAChC,OAAO,CAAC,GAAG,CAAC,qCAAqC,OAAO,EAAE,CAAC,CAAC;QAC5D,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,OAAO,WAAW,EAAE,CAAC;IACnE,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,MAAW;QACvC,gDAAgD;QAChD,gCAAgC;QAChC,OAAO,CAAC,GAAG,CAAC,uCAAuC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;QAC1E,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,MAAM,CAAC,YAAY,YAAY,EAAE,CAAC;IACjF,CAAC;IAEO,KAAK,CAAC,WAAW,CAAC,MAAW;QACnC,mCAAmC;QACnC,gCAAgC;QAChC,OAAO,CAAC,GAAG,CAAC,sCAAsC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;QAChE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,eAAe,MAAM,CAAC,GAAG,YAAY,EAAE,CAAC;IAC3E,CAAC;IAEO,KAAK,CAAC,gBAAgB,CAAC,MAAW;QACxC,OAAO,CAAC,GAAG,CAAC,wBAAwB,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;QACtD,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;IACzD,CAAC;IAEO,iBAAiB,CAAC,KAAY,EAAE,QAAkB;QACxD,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC9B,QAAQ,OAAO,EAAE;gBACf,KAAK,SAAS;oBACZ,OAAO,CAAC,GAAG,CAAC,kBAAkB,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;oBACnE,MAAM;gBACR,KAAK,MAAM;oBACT,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;oBAC7B,MAAM;gBACR;oBACE,OAAO,CAAC,GAAG,CAAC,mCAAmC,OAAO,EAAE,CAAC,CAAC;aAC7D;SACF;IACH,CAAC;IAEO,gBAAgB,CAAC,KAAY;QACnC,IAAI;YACF,MAAM,SAAS,GAAG,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;YAC9D,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;gBAC7B,YAAE,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;aAC9C;YAED,MAAM,SAAS,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;YACrD,MAAM,SAAS,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC,WAAW,IAAI,CAAC;YAE9H,YAAE,CAAC,cAAc,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;SACzC;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,kDAAkD,EAAE,KAAK,CAAC,CAAC;SAC1E;IACH,CAAC;IAEO,yBAAyB,CAAC,IAAS;QACzC,wDAAwD;QACxD,mDAAmD;IACrD,CAAC;IAEO,mBAAmB,CAAC,IAAS;QACnC,kDAAkD;QAClD,mDAAmD;IACrD,CAAC;IAEO,qBAAqB,CAAC,IAAS;QACrC,oDAAoD;QACpD,mDAAmD;IACrD,CAAC;IAEO,kBAAkB;QACxB,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QAEvB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE;YAC/B,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,SAAS;gBAAE,SAAS;YAEhD,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;YAE3D,KAAK,MAAM,cAAc,IAAI,IAAI,CAAC,eAAe,EAAE;gBACjD,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;oBAAE,SAAS;gBAC9D,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC;oBAAE,SAAS;gBAEtE,MAAM,eAAe,GAAG,cAAc,CAAC,sBAAsB,GAAG,EAAE,GAAG,IAAI,CAAC;gBAE1E,IAAI,QAAQ,IAAI,eAAe,EAAE;oBAC/B,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;oBAC1C,MAAM;iBACP;aACF;SACF;IACH,CAAC;IAEO,aAAa,CAAC,KAAY,EAAE,cAA8B;QAChE,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;QACvB,KAAK,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QAE/B,OAAO,CAAC,GAAG,CAAC,sBAAsB,KAAK,CAAC,EAAE,yBAAyB,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC;QAE1F,6BAA6B;QAC7B,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,cAAc,CAAC,iBAAiB,CAAC,CAAC;IACpE,CAAC;IAEO,gBAAgB;QACtB,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,UAAU;QAE9E,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,IAAI,UAAU,CAAC,CAAC;QACzE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,IAAI,UAAU,CAAC,CAAC;IACjG,CAAC;IAEO,iBAAiB,CAAC,KAAY;QACpC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAClC,IAAI;gBACF,QAAQ,CAAC,KAAK,CAAC,CAAC;aACjB;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;aAC7D;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,qBAAqB;IACd,SAAS,CAAC,QAAgC;QAC/C,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC/B,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAC;IAEM,SAAS,CAAC,OAKhB;QACC,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC;QAE3B,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,EAAE;YACjB,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,IAAI,CAAC,CAAC;SAC1D;QAED,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,EAAE;YACrB,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,OAAO,CAAC,QAAQ,CAAC,CAAC;SAClE;QAED,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,MAAK,SAAS,EAAE;YACnC,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,OAAO,CAAC,QAAQ,CAAC,CAAC;SAClE;QAED,mCAAmC;QACnC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;QAEvE,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,EAAE;YAClB,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;SAC7C;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEM,aAAa;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAEM,YAAY,CAAC,IAA2B;QAC7C,MAAM,EAAE,GAAG,QAAQ,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QAChC,MAAM,OAAO,GAAc,EAAE,GAAG,IAAI,EAAE,EAAE,EAAE,CAAC;QAE3C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9B,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEzB,OAAO,EAAE,CAAC;IACZ,CAAC;IAEM,eAAe,CAAC,EAAU,EAAE,OAA2B;QAC5D,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QAC9D,IAAI,SAAS,KAAK,CAAC,CAAC;YAAE,OAAO,KAAK,CAAC;QAEnC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,GAAG,OAAO,EAAE,CAAC;QAC3E,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEzB,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,eAAe,CAAC,EAAU;QAC/B,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QAC9D,IAAI,SAAS,KAAK,CAAC,CAAC;YAAE,OAAO,KAAK,CAAC;QAEnC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEzB,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,gBAAgB,CAAC,OAAe;QACrC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC;QACtD,IAAI,CAAC,KAAK;YAAE,OAAO,KAAK,CAAC;QAEzB,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEzB,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,YAAY,CAAC,OAAe;QACjC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC;QACtD,IAAI,CAAC,KAAK;YAAE,OAAO,KAAK,CAAC;QAEzB,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;QACtB,KAAK,CAAC,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;QAC9B,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEzB,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,iBAAiB,CAAC,OAAgB;QACvC,IAAI,OAAO,EAAE;YACX,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC;SAC/D;QACD,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAEM,eAAe;QACpB,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,MAAM,WAAW,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAElE,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,WAAW,CAAC,CAAC;QAEzE,OAAO;YACL,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM;YAC/B,YAAY,EAAE,YAAY,CAAC,MAAM;YACjC,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM;YAC7D,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,UAAU,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM;YACxF,eAAe,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM;YAC3E,YAAY,EAAE,IAAI,CAAC,oBAAoB,EAAE;YACzC,gBAAgB,EAAE,IAAI,CAAC,wBAAwB,EAAE;YACjD,mBAAmB,EAAE,IAAI,CAAC,4BAA4B,EAAE;YACxD,qBAAqB,EAAE,IAAI,CAAC,8BAA8B,EAAE;SAC7D,CAAC;IACJ,CAAC;IAEO,oBAAoB;QAC1B,MAAM,MAAM,GAA2B,EAAE,CAAC;QAE1C,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE;YACxD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;SACpD;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,wBAAwB;QAC9B,MAAM,MAAM,GAA2B,EAAE,CAAC;QAE1C,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE;YACxD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;SAC5D;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,4BAA4B;QAClC,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;QAClD,IAAI,cAAc,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC;QAEnC,MAAM,mBAAmB,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,CAAC,MAAM,CAAC;QAC7F,OAAO,CAAC,mBAAmB,GAAG,cAAc,CAAC,GAAG,GAAG,CAAC;IACtD,CAAC;IAEO,8BAA8B;QACpC,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,UAAU,CAAC,CAAC;QAC3E,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC;QAE1C,MAAM,mBAAmB,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;YAC/D,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,UAAW,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;QACzE,CAAC,EAAE,CAAC,CAAC,CAAC;QAEN,OAAO,mBAAmB,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,oBAAoB;IACxF,CAAC;IAEM,SAAS,CAAC,MAAc;QAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC;QACxD,IAAI,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC;QAExB,sBAAsB;QACtB,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK;QACV,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;QAC5B,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;CACF;AAEY,QAAA,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;AACnD,kBAAe,cAAc,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/AlertingSystem.ts"],"sourcesContent":["import { buildPerformanceMonitor } from './BuildPerformanceMonitor';\nimport { errorTrackingSystem } from './ErrorTrackingSystem';\nimport { qualityMetricsService } from './QualityMetricsService';\nimport fs from 'fs';\nimport path from 'path';\n\nexport interface Alert {\n  id: string;\n  type: 'performance' | 'error' | 'quality' | 'system';\n  severity: 'info' | 'warning' | 'error' | 'critical';\n  title: string;\n  description: string;\n  threshold: number;\n  currentValue: number;\n  timestamp: Date;\n  acknowledged: boolean;\n  resolved: boolean;\n  resolvedAt?: Date;\n  escalated: boolean;\n  escalatedAt?: Date;\n  responseActions: string[];\n  metadata: Record<string, any>;\n}\n\nexport interface AlertRule {\n  id: string;\n  name: string;\n  description: string;\n  type: 'performance' | 'error' | 'quality' | 'system';\n  metric: string;\n  condition: 'greater_than' | 'less_than' | 'equals' | 'not_equals' | 'percentage_change';\n  threshold: number;\n  severity: 'info' | 'warning' | 'error' | 'critical';\n  enabled: boolean;\n  cooldownMinutes: number;\n  escalationMinutes: number;\n  autoResponse: boolean;\n  responseActions: AlertAction[];\n  notificationChannels: string[];\n}\n\nexport interface AlertAction {\n  id: string;\n  name: string;\n  type: 'script' | 'command' | 'api_call' | 'campaign' | 'notification';\n  config: Record<string, any>;\n  conditions: string[];\n  retryCount: number;\n  timeoutSeconds: number;\n}\n\nexport interface EscalationRule {\n  id: string;\n  name: string;\n  alertTypes: string[];\n  severityLevels: string[];\n  escalationDelayMinutes: number;\n  escalationActions: AlertAction[];\n  maxEscalations: number;\n}\n\nexport interface AlertResponse {\n  alertId: string;\n  actionId: string;\n  status: 'pending' | 'running' | 'completed' | 'failed';\n  startTime: Date;\n  endTime?: Date;\n  result?: any;\n  error?: string;\n  retryCount: number;\n}\n\nclass AlertingSystem {\n  private alerts: Alert[] = [];\n  private alertRules: AlertRule[] = [];\n  private escalationRules: EscalationRule[] = [];\n  private alertResponses: AlertResponse[] = [];\n  private subscribers: Set<(alert: Alert) => void> = new Set();\n  private lastAlertTimes: Map<string, Date> = new Map();\n\n  constructor() {\n    this.loadConfiguration();\n    this.initializeDefaultRules();\n    this.startMonitoring();\n  }\n\n  private loadConfiguration() {\n    try {\n      const configPath = path.join(process.cwd(), '.kiro', 'settings', 'alerting-config.json');\n      if (fs.existsSync(configPath)) {\n        const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n        this.alertRules = config.alertRules || [];\n        this.escalationRules = config.escalationRules || [];\n        this.alerts = config.alerts || [];\n        this.alertResponses = config.alertResponses || [];\n      }\n    } catch (error) {\n      console.warn('[Alerting System] Failed to load configuration:', error);\n    }\n  }\n\n  private saveConfiguration() {\n    try {\n      const settingsDir = path.join(process.cwd(), '.kiro', 'settings');\n      if (!fs.existsSync(settingsDir)) {\n        fs.mkdirSync(settingsDir, { recursive: true });\n      }\n\n      const configPath = path.join(settingsDir, 'alerting-config.json');\n      const config = {\n        alertRules: this.alertRules,\n        escalationRules: this.escalationRules,\n        alerts: this.alerts.slice(-500), // Keep last 500 alerts\n        alertResponses: this.alertResponses.slice(-200) // Keep last 200 responses\n      };\n\n      fs.writeFileSync(configPath, JSON.stringify(config, null, 2));\n    } catch (error) {\n      console.error('[Alerting System] Failed to save configuration:', error);\n    }\n  }\n\n  private initializeDefaultRules() {\n    if (this.alertRules.length === 0) {\n      const defaultRules: AlertRule[] = [\n        {\n          id: 'build-time-critical',\n          name: 'Critical Build Time',\n          description: 'Build time exceeds critical threshold',\n          type: 'performance',\n          metric: 'build_time',\n          condition: 'greater_than',\n          threshold: 120000, // 2 minutes\n          severity: 'critical',\n          enabled: true,\n          cooldownMinutes: 15,\n          escalationMinutes: 30,\n          autoResponse: true,\n          responseActions: [\n            {\n              id: 'analyze-build-bottlenecks',\n              name: 'Analyze Build Bottlenecks',\n              type: 'script',\n              config: { script: 'analyze-build-performance.js' },\n              conditions: [],\n              retryCount: 2,\n              timeoutSeconds: 300\n            },\n            {\n              id: 'clear-build-cache',\n              name: 'Clear Build Cache',\n              type: 'command',\n              config: { command: 'yarn cache clean' },\n              conditions: [],\n              retryCount: 1,\n              timeoutSeconds: 60\n            }\n          ],\n          notificationChannels: ['console', 'file']\n        },\n        {\n          id: 'typescript-errors-high',\n          name: 'High TypeScript Error Count',\n          description: 'TypeScript errors exceed acceptable threshold',\n          type: 'error',\n          metric: 'typescript_errors',\n          condition: 'greater_than',\n          threshold: 1000,\n          severity: 'error',\n          enabled: true,\n          cooldownMinutes: 30,\n          escalationMinutes: 60,\n          autoResponse: true,\n          responseActions: [\n            {\n              id: 'trigger-error-campaign',\n              name: 'Trigger Error Reduction Campaign',\n              type: 'campaign',\n              config: { \n                campaignType: 'typescript-error-reduction',\n                maxFiles: 20,\n                safetyLevel: 'HIGH'\n              },\n              conditions: ['error_count > 500'],\n              retryCount: 1,\n              timeoutSeconds: 1800\n            }\n          ],\n          notificationChannels: ['console', 'file']\n        },\n        {\n          id: 'code-quality-low',\n          name: 'Low Code Quality Score',\n          description: 'Code quality score below acceptable threshold',\n          type: 'quality',\n          metric: 'code_quality_score',\n          condition: 'less_than',\n          threshold: 60,\n          severity: 'warning',\n          enabled: true,\n          cooldownMinutes: 60,\n          escalationMinutes: 120,\n          autoResponse: false,\n          responseActions: [\n            {\n              id: 'generate-quality-report',\n              name: 'Generate Quality Report',\n              type: 'script',\n              config: { script: 'generate-quality-report.js' },\n              conditions: [],\n              retryCount: 1,\n              timeoutSeconds: 120\n            }\n          ],\n          notificationChannels: ['console', 'file']\n        },\n        {\n          id: 'memory-usage-high',\n          name: 'High Memory Usage',\n          description: 'Memory usage exceeds safe threshold',\n          type: 'system',\n          metric: 'memory_usage',\n          condition: 'greater_than',\n          threshold: 512 * 1024 * 1024, // 512MB\n          severity: 'warning',\n          enabled: true,\n          cooldownMinutes: 10,\n          escalationMinutes: 30,\n          autoResponse: true,\n          responseActions: [\n            {\n              id: 'garbage-collect',\n              name: 'Force Garbage Collection',\n              type: 'script',\n              config: { script: 'force-gc.js' },\n              conditions: [],\n              retryCount: 1,\n              timeoutSeconds: 30\n            }\n          ],\n          notificationChannels: ['console']\n        },\n        {\n          id: 'technical-debt-critical',\n          name: 'Critical Technical Debt',\n          description: 'Technical debt score indicates critical issues',\n          type: 'quality',\n          metric: 'technical_debt_score',\n          condition: 'greater_than',\n          threshold: 80,\n          severity: 'critical',\n          enabled: true,\n          cooldownMinutes: 120,\n          escalationMinutes: 240,\n          autoResponse: false,\n          responseActions: [\n            {\n              id: 'schedule-debt-reduction',\n              name: 'Schedule Technical Debt Reduction',\n              type: 'campaign',\n              config: { \n                campaignType: 'technical-debt-reduction',\n                priority: 'high'\n              },\n              conditions: [],\n              retryCount: 1,\n              timeoutSeconds: 300\n            }\n          ],\n          notificationChannels: ['console', 'file']\n        }\n      ];\n\n      this.alertRules = defaultRules;\n    }\n\n    if (this.escalationRules.length === 0) {\n      const defaultEscalationRules: EscalationRule[] = [\n        {\n          id: 'critical-escalation',\n          name: 'Critical Alert Escalation',\n          alertTypes: ['performance', 'error', 'quality', 'system'],\n          severityLevels: ['critical'],\n          escalationDelayMinutes: 30,\n          escalationActions: [\n            {\n              id: 'notify-team',\n              name: 'Notify Development Team',\n              type: 'notification',\n              config: { \n                message: 'Critical alert requires immediate attention',\n                channels: ['console', 'file']\n              },\n              conditions: [],\n              retryCount: 1,\n              timeoutSeconds: 30\n            }\n          ],\n          maxEscalations: 3\n        },\n        {\n          id: 'error-escalation',\n          name: 'Error Alert Escalation',\n          alertTypes: ['error'],\n          severityLevels: ['error'],\n          escalationDelayMinutes: 60,\n          escalationActions: [\n            {\n              id: 'automated-fix-attempt',\n              name: 'Attempt Automated Fix',\n              type: 'campaign',\n              config: { \n                campaignType: 'automated-error-fix',\n                conservative: true\n              },\n              conditions: ['automation_opportunities > 5'],\n              retryCount: 1,\n              timeoutSeconds: 600\n            }\n          ],\n          maxEscalations: 2\n        }\n      ];\n\n      this.escalationRules = defaultEscalationRules;\n    }\n  }\n\n  private startMonitoring() {\n    // Monitor every 2 minutes\n    setInterval(() => {\n      this.checkAlertConditions();\n      this.processEscalations();\n      this.cleanupOldAlerts();\n      this.saveConfiguration();\n    }, 2 * 60 * 1000);\n\n    // Subscribe to data sources\n    buildPerformanceMonitor.subscribe((data) => {\n      this.evaluatePerformanceAlerts(data);\n    });\n\n    errorTrackingSystem.subscribe((data) => {\n      this.evaluateErrorAlerts(data);\n    });\n\n    qualityMetricsService.subscribe((data) => {\n      this.evaluateQualityAlerts(data);\n    });\n  }\n\n  private checkAlertConditions() {\n    for (const rule of this.alertRules) {\n      if (!rule.enabled) continue;\n\n      // Check cooldown\n      const lastAlertTime = this.lastAlertTimes.get(rule.id);\n      if (lastAlertTime && (Date.now() - lastAlertTime.getTime()) < rule.cooldownMinutes * 60 * 1000) {\n        continue;\n      }\n\n      this.evaluateRule(rule);\n    }\n  }\n\n  private evaluateRule(rule: AlertRule) {\n    let currentValue: number;\n    let shouldAlert = false;\n\n    // Get current metric value based on rule type\n    switch (rule.type) {\n      case 'performance':\n        currentValue = this.getPerformanceMetric(rule.metric);\n        break;\n      case 'error':\n        currentValue = this.getErrorMetric(rule.metric);\n        break;\n      case 'quality':\n        currentValue = this.getQualityMetric(rule.metric);\n        break;\n      case 'system':\n        currentValue = this.getSystemMetric(rule.metric);\n        break;\n      default:\n        return;\n    }\n\n    // Evaluate condition\n    switch (rule.condition) {\n      case 'greater_than':\n        shouldAlert = currentValue > rule.threshold;\n        break;\n      case 'less_than':\n        shouldAlert = currentValue < rule.threshold;\n        break;\n      case 'equals':\n        shouldAlert = currentValue === rule.threshold;\n        break;\n      case 'not_equals':\n        shouldAlert = currentValue !== rule.threshold;\n        break;\n      case 'percentage_change':\n        // This would require historical data comparison\n        shouldAlert = false; // Placeholder\n        break;\n    }\n\n    if (shouldAlert) {\n      this.createAlert(rule, currentValue);\n    }\n  }\n\n  private getPerformanceMetric(metric: string): number {\n    const summary = buildPerformanceMonitor.getPerformanceSummary();\n    \n    switch (metric) {\n      case 'build_time':\n        return summary.averageBuildTime;\n      case 'compilation_time':\n        return summary.averageCompilationTime;\n      case 'bundle_size':\n        return summary.averageBundleSize;\n      case 'memory_usage':\n        return summary.averageMemoryUsage;\n      case 'cache_efficiency':\n        return summary.cacheEfficiency;\n      case 'performance_score':\n        return summary.performanceScore;\n      default:\n        return 0;\n    }\n  }\n\n  private getErrorMetric(metric: string): number {\n    const summary = errorTrackingSystem.getErrorSummary();\n    \n    switch (metric) {\n      case 'typescript_errors':\n        return summary.totalActiveErrors;\n      case 'linting_violations':\n        return summary.totalActiveLintViolations;\n      case 'build_failures':\n        return summary.totalRecentFailures;\n      case 'critical_issues':\n        return summary.criticalIssues;\n      case 'automation_opportunities':\n        return summary.automationOpportunities;\n      default:\n        return 0;\n    }\n  }\n\n  private getQualityMetric(metric: string): number {\n    const qualityMetrics = errorTrackingSystem.getCurrentQualityMetrics();\n    \n    if (!qualityMetrics) return 0;\n    \n    switch (metric) {\n      case 'code_quality_score':\n        return qualityMetrics.codeQualityScore;\n      case 'technical_debt_score':\n        return qualityMetrics.technicalDebtScore;\n      case 'maintainability_index':\n        return qualityMetrics.maintainabilityIndex;\n      case 'error_rate':\n        return qualityMetrics.errorRate;\n      case 'warning_rate':\n        return qualityMetrics.warningRate;\n      default:\n        return 0;\n    }\n  }\n\n  private getSystemMetric(metric: string): number {\n    switch (metric) {\n      case 'memory_usage':\n        return process.memoryUsage().heapUsed;\n      case 'cpu_usage':\n        return process.cpuUsage().user + process.cpuUsage().system;\n      case 'uptime':\n        return process.uptime();\n      default:\n        return 0;\n    }\n  }\n\n  private createAlert(rule: AlertRule, currentValue: number) {\n    const alert: Alert = {\n      id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      type: rule.type,\n      severity: rule.severity,\n      title: rule.name,\n      description: `${rule.description}. Current value: ${currentValue}, Threshold: ${rule.threshold}`,\n      threshold: rule.threshold,\n      currentValue,\n      timestamp: new Date(),\n      acknowledged: false,\n      resolved: false,\n      escalated: false,\n      responseActions: rule.responseActions.map(a => a.name),\n      metadata: {\n        ruleId: rule.id,\n        metric: rule.metric,\n        condition: rule.condition\n      }\n    };\n\n    this.alerts.push(alert);\n    this.lastAlertTimes.set(rule.id, new Date());\n\n    // Log alert\n    console.log(`[ALERT ${alert.severity.toUpperCase()}] ${alert.title}: ${alert.description}`);\n\n    // Notify subscribers\n    this.notifySubscribers(alert);\n\n    // Execute auto-response if enabled\n    if (rule.autoResponse) {\n      this.executeAlertActions(alert, rule.responseActions);\n    }\n\n    // Send notifications\n    this.sendNotifications(alert, rule.notificationChannels);\n  }\n\n  private async executeAlertActions(alert: Alert, actions: AlertAction[]) {\n    for (const action of actions) {\n      // Check conditions\n      if (!this.evaluateActionConditions(action.conditions, alert)) {\n        continue;\n      }\n\n      const response: AlertResponse = {\n        alertId: alert.id,\n        actionId: action.id,\n        status: 'pending',\n        startTime: new Date(),\n        retryCount: 0\n      };\n\n      this.alertResponses.push(response);\n\n      try {\n        response.status = 'running';\n        const result = await this.executeAction(action);\n        \n        response.status = 'completed';\n        response.endTime = new Date();\n        response.result = result;\n\n        console.log(`[Alert Response] Successfully executed ${action.name} for alert ${alert.id}`);\n      } catch (error) {\n        response.status = 'failed';\n        response.endTime = new Date();\n        response.error = error.message;\n\n        console.error(`[Alert Response] Failed to execute ${action.name} for alert ${alert.id}:`, error);\n\n        // Retry if configured\n        if (response.retryCount < action.retryCount) {\n          response.retryCount++;\n          setTimeout(() => {\n            this.executeAlertActions(alert, [action]);\n          }, 30000); // Retry after 30 seconds\n        }\n      }\n    }\n  }\n\n  private evaluateActionConditions(conditions: string[], alert: Alert): boolean {\n    if (conditions.length === 0) return true;\n\n    for (const condition of conditions) {\n      if (!this.evaluateCondition(condition, alert)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private evaluateCondition(condition: string, alert: Alert): boolean {\n    // Simple condition evaluation\n    // In a real implementation, this would be more sophisticated\n    \n    if (condition.includes('error_count >')) {\n      const threshold = parseInt(condition.split('>')[1].trim());\n      return alert.currentValue > threshold;\n    }\n    \n    if (condition.includes('automation_opportunities >')) {\n      const threshold = parseInt(condition.split('>')[1].trim());\n      const errorSummary = errorTrackingSystem.getErrorSummary();\n      return errorSummary.automationOpportunities > threshold;\n    }\n\n    return true;\n  }\n\n  private async executeAction(action: AlertAction): Promise<any> {\n    const timeout = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error('Action timeout')), action.timeoutSeconds * 1000);\n    });\n\n    const execution = this.performAction(action);\n\n    return Promise.race([execution, timeout]);\n  }\n\n  private async performAction(action: AlertAction): Promise<any> {\n    switch (action.type) {\n      case 'script':\n        return this.executeScript(action.config.script);\n      case 'command':\n        return this.executeCommand(action.config.command);\n      case 'campaign':\n        return this.triggerCampaign(action.config);\n      case 'api_call':\n        return this.makeApiCall(action.config);\n      case 'notification':\n        return this.sendNotification(action.config);\n      default:\n        throw new Error(`Unknown action type: ${action.type}`);\n    }\n  }\n\n  private async executeScript(scriptName: string): Promise<any> {\n    // This would execute a script file\n    // For now, return a placeholder\n    console.log(`[Alert Action] Executing script: ${scriptName}`);\n    return { success: true, message: `Script ${scriptName} executed` };\n  }\n\n  private async executeCommand(command: string): Promise<any> {\n    // This would execute a shell command\n    // For now, return a placeholder\n    console.log(`[Alert Action] Executing command: ${command}`);\n    return { success: true, message: `Command ${command} executed` };\n  }\n\n  private async triggerCampaign(config: any): Promise<any> {\n    // This would integrate with the campaign system\n    // For now, return a placeholder\n    console.log(`[Alert Action] Triggering campaign: ${config.campaignType}`);\n    return { success: true, message: `Campaign ${config.campaignType} triggered` };\n  }\n\n  private async makeApiCall(config: any): Promise<any> {\n    // This would make an HTTP API call\n    // For now, return a placeholder\n    console.log(`[Alert Action] Making API call to: ${config.url}`);\n    return { success: true, message: `API call to ${config.url} completed` };\n  }\n\n  private async sendNotification(config: any): Promise<any> {\n    console.log(`[Alert Notification] ${config.message}`);\n    return { success: true, message: 'Notification sent' };\n  }\n\n  private sendNotifications(alert: Alert, channels: string[]) {\n    for (const channel of channels) {\n      switch (channel) {\n        case 'console':\n          console.log(`[NOTIFICATION] ${alert.title}: ${alert.description}`);\n          break;\n        case 'file':\n          this.writeAlertToFile(alert);\n          break;\n        default:\n          console.log(`[NOTIFICATION] Unknown channel: ${channel}`);\n      }\n    }\n  }\n\n  private writeAlertToFile(alert: Alert) {\n    try {\n      const alertsDir = path.join(process.cwd(), '.kiro', 'alerts');\n      if (!fs.existsSync(alertsDir)) {\n        fs.mkdirSync(alertsDir, { recursive: true });\n      }\n\n      const alertFile = path.join(alertsDir, 'alerts.log');\n      const alertLine = `${alert.timestamp.toISOString()} [${alert.severity.toUpperCase()}] ${alert.title}: ${alert.description}\\n`;\n      \n      fs.appendFileSync(alertFile, alertLine);\n    } catch (error) {\n      console.error('[Alerting System] Failed to write alert to file:', error);\n    }\n  }\n\n  private evaluatePerformanceAlerts(data: any) {\n    // This would be called when performance data is updated\n    // The main monitoring loop handles rule evaluation\n  }\n\n  private evaluateErrorAlerts(data: any) {\n    // This would be called when error data is updated\n    // The main monitoring loop handles rule evaluation\n  }\n\n  private evaluateQualityAlerts(data: any) {\n    // This would be called when quality data is updated\n    // The main monitoring loop handles rule evaluation\n  }\n\n  private processEscalations() {\n    const now = new Date();\n    \n    for (const alert of this.alerts) {\n      if (alert.resolved || alert.escalated) continue;\n\n      const alertAge = now.getTime() - alert.timestamp.getTime();\n      \n      for (const escalationRule of this.escalationRules) {\n        if (!escalationRule.alertTypes.includes(alert.type)) continue;\n        if (!escalationRule.severityLevels.includes(alert.severity)) continue;\n        \n        const escalationDelay = escalationRule.escalationDelayMinutes * 60 * 1000;\n        \n        if (alertAge >= escalationDelay) {\n          this.escalateAlert(alert, escalationRule);\n          break;\n        }\n      }\n    }\n  }\n\n  private escalateAlert(alert: Alert, escalationRule: EscalationRule) {\n    alert.escalated = true;\n    alert.escalatedAt = new Date();\n\n    console.log(`[ESCALATION] Alert ${alert.id} escalated using rule ${escalationRule.name}`);\n\n    // Execute escalation actions\n    this.executeAlertActions(alert, escalationRule.escalationActions);\n  }\n\n  private cleanupOldAlerts() {\n    const cutoffTime = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // 30 days\n    \n    this.alerts = this.alerts.filter(alert => alert.timestamp >= cutoffTime);\n    this.alertResponses = this.alertResponses.filter(response => response.startTime >= cutoffTime);\n  }\n\n  private notifySubscribers(alert: Alert) {\n    this.subscribers.forEach(callback => {\n      try {\n        callback(alert);\n      } catch (error) {\n        console.error('[Alerting System] Subscriber error:', error);\n      }\n    });\n  }\n\n  // Public API methods\n  public subscribe(callback: (alert: Alert) => void) {\n    this.subscribers.add(callback);\n    return () => this.subscribers.delete(callback);\n  }\n\n  public getAlerts(options?: {\n    type?: string;\n    severity?: string;\n    resolved?: boolean;\n    limit?: number;\n  }): Alert[] {\n    let filtered = this.alerts;\n\n    if (options?.type) {\n      filtered = filtered.filter(a => a.type === options.type);\n    }\n\n    if (options?.severity) {\n      filtered = filtered.filter(a => a.severity === options.severity);\n    }\n\n    if (options?.resolved !== undefined) {\n      filtered = filtered.filter(a => a.resolved === options.resolved);\n    }\n\n    // Sort by timestamp (newest first)\n    filtered.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n    if (options?.limit) {\n      filtered = filtered.slice(0, options.limit);\n    }\n\n    return filtered;\n  }\n\n  public getAlertRules(): AlertRule[] {\n    return this.alertRules;\n  }\n\n  public addAlertRule(rule: Omit<AlertRule, 'id'>): string {\n    const id = `rule-${Date.now()}`;\n    const newRule: AlertRule = { ...rule, id };\n    \n    this.alertRules.push(newRule);\n    this.saveConfiguration();\n    \n    return id;\n  }\n\n  public updateAlertRule(id: string, updates: Partial<AlertRule>): boolean {\n    const ruleIndex = this.alertRules.findIndex(r => r.id === id);\n    if (ruleIndex === -1) return false;\n    \n    this.alertRules[ruleIndex] = { ...this.alertRules[ruleIndex], ...updates };\n    this.saveConfiguration();\n    \n    return true;\n  }\n\n  public deleteAlertRule(id: string): boolean {\n    const ruleIndex = this.alertRules.findIndex(r => r.id === id);\n    if (ruleIndex === -1) return false;\n    \n    this.alertRules.splice(ruleIndex, 1);\n    this.saveConfiguration();\n    \n    return true;\n  }\n\n  public acknowledgeAlert(alertId: string): boolean {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (!alert) return false;\n    \n    alert.acknowledged = true;\n    this.saveConfiguration();\n    \n    return true;\n  }\n\n  public resolveAlert(alertId: string): boolean {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (!alert) return false;\n    \n    alert.resolved = true;\n    alert.resolvedAt = new Date();\n    this.saveConfiguration();\n    \n    return true;\n  }\n\n  public getAlertResponses(alertId?: string): AlertResponse[] {\n    if (alertId) {\n      return this.alertResponses.filter(r => r.alertId === alertId);\n    }\n    return this.alertResponses;\n  }\n\n  public getAlertSummary() {\n    const now = new Date();\n    const last24Hours = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n    \n    const recentAlerts = this.alerts.filter(a => a.timestamp >= last24Hours);\n    \n    return {\n      totalAlerts: this.alerts.length,\n      recentAlerts: recentAlerts.length,\n      unresolvedAlerts: this.alerts.filter(a => !a.resolved).length,\n      criticalAlerts: this.alerts.filter(a => a.severity === 'critical' && !a.resolved).length,\n      escalatedAlerts: this.alerts.filter(a => a.escalated && !a.resolved).length,\n      alertsByType: this.getAlertCountsByType(),\n      alertsBySeverity: this.getAlertCountsBySeverity(),\n      responseSuccessRate: this.calculateResponseSuccessRate(),\n      averageResolutionTime: this.calculateAverageResolutionTime()\n    };\n  }\n\n  private getAlertCountsByType(): Record<string, number> {\n    const counts: Record<string, number> = {};\n    \n    for (const alert of this.alerts.filter(a => !a.resolved)) {\n      counts[alert.type] = (counts[alert.type] || 0) + 1;\n    }\n    \n    return counts;\n  }\n\n  private getAlertCountsBySeverity(): Record<string, number> {\n    const counts: Record<string, number> = {};\n    \n    for (const alert of this.alerts.filter(a => !a.resolved)) {\n      counts[alert.severity] = (counts[alert.severity] || 0) + 1;\n    }\n    \n    return counts;\n  }\n\n  private calculateResponseSuccessRate(): number {\n    const totalResponses = this.alertResponses.length;\n    if (totalResponses === 0) return 0;\n    \n    const successfulResponses = this.alertResponses.filter(r => r.status === 'completed').length;\n    return (successfulResponses / totalResponses) * 100;\n  }\n\n  private calculateAverageResolutionTime(): number {\n    const resolvedAlerts = this.alerts.filter(a => a.resolved && a.resolvedAt);\n    if (resolvedAlerts.length === 0) return 0;\n    \n    const totalResolutionTime = resolvedAlerts.reduce((sum, alert) => {\n      return sum + (alert.resolvedAt!.getTime() - alert.timestamp.getTime());\n    }, 0);\n    \n    return totalResolutionTime / resolvedAlerts.length / (60 * 1000); // Return in minutes\n  }\n\n  public testAlert(ruleId: string): boolean {\n    const rule = this.alertRules.find(r => r.id === ruleId);\n    if (!rule) return false;\n    \n    // Create a test alert\n    this.createAlert(rule, rule.threshold + 1);\n    return true;\n  }\n\n  public reset() {\n    this.alerts = [];\n    this.alertResponses = [];\n    this.lastAlertTimes.clear();\n    this.saveConfiguration();\n  }\n}\n\nexport const alertingSystem = new AlertingSystem();\nexport default AlertingSystem;"],"version":3}