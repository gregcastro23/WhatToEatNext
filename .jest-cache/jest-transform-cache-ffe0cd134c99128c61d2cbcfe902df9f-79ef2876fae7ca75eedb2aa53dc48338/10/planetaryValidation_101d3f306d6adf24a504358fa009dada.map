{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/planetaryValidation.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/planetaryValidation.ts"],"sourcesContent":["/**\n * Planetary Data Validation Utilities\n *\n * This module provides comprehensive validation for planetary data integrity,\n * transit date accuracy, and astronomical calculation consistency.\n */\n\nimport { getReliablePlanetaryPositions } from './reliableAstronomy';\nimport { logger } from './logger';\n\n// Validation result interfaces\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n  summary: string;\n  timestamp: Date;\n}\n\nexport interface ValidationError {\n  type:\n    | 'POSITION_DRIFT'\n    | 'TRANSIT_MISMATCH'\n    | 'TEST_FAILURE'\n    | 'API_TIMEOUT'\n    | 'DATA_CORRUPTION';\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  planet?: string;\n  expectedValue?: unknown;\n  actualValue?: unknown;\n  message: string;\n  timestamp: Date;\n}\n\nexport interface ValidationWarning {\n  type: 'MINOR_DRIFT' | 'CACHE_STALE' | 'API_SLOW' | 'DATA_OUTDATED';\n  planet?: string;\n  message: string;\n  timestamp: Date;\n}\n\nexport interface TestResult {\n  testName: string;\n  passed: boolean;\n  duration: number;\n  error?: string;\n  details?: Record<string, unknown>;\n}\n\n// Validation tolerances\nconst VALIDATION_TOLERANCES = {\n  POSITION_DEGREES: 0.1,\n  TRANSIT_DAYS: 1,\n  TEST_PASS_THRESHOLD: 95,\n  API_TIMEOUT_MS: 5000,\n};\n\n/**\n * Main validation function for planetary data\n */\nexport async function validatePlanetaryData(): Promise<ValidationResult> {\n  const startTime = Date.now();\n  const errors: ValidationError[] = [];\n  const warnings: ValidationWarning[] = [];\n\n  try {\n    logger.info('Starting comprehensive planetary data validation');\n\n    // 1. Validate transit dates\n    const transitValidation = await validateTransitDates();\n    errors.push(...transitValidation.errors);\n    warnings.push(...transitValidation.warnings);\n\n    // 2. Check position consistency\n    const positionValidation = await validatePositionConsistency();\n    errors.push(...positionValidation.errors);\n    warnings.push(...positionValidation.warnings);\n\n    // 3. Run astronomical tests\n    const testResults = await runAstronomicalTests();\n    const testValidation = analyzeTestResults(testResults);\n    errors.push(...testValidation.errors);\n    warnings.push(...testValidation.warnings);\n\n    // 4. Validate elemental properties consistency\n    const elementalValidation = await validateElementalProperties();\n    errors.push(...elementalValidation.errors);\n    warnings.push(...elementalValidation.warnings);\n\n    const duration = Date.now() - startTime;\n    const isValid =\n      errors.filter(e => e.severity === 'CRITICAL' || e.severity === 'HIGH')\n        .length === 0;\n\n    const summary = generateValidationSummary(\n      isValid,\n      errors,\n      warnings,\n      duration\n    );\n\n    logger.info(\n      `Planetary validation completed in ${duration}ms: ${isValid ? 'PASSED' : 'FAILED'}`\n    );\n\n    return {\n      isValid,\n      errors,\n      warnings,\n      summary,\n      timestamp: new Date(),\n    };\n  } catch (error) {\n    const criticalError: ValidationError = {\n      type: 'DATA_CORRUPTION',\n      severity: 'CRITICAL',\n      message: `Validation process failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      timestamp: new Date(),\n    };\n\n    return {\n      isValid: false,\n      errors: [criticalError],\n      warnings,\n      summary: 'Critical validation failure - process could not complete',\n      timestamp: new Date(),\n    };\n  }\n}\n\n/**\n * Validate transit dates against current astronomical data\n */\nasync function validateTransitDates(): Promise<{\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n}> {\n  const errors: ValidationError[] = [];\n  const warnings: ValidationWarning[] = [];\n\n  try {\n    const planets = ['mars', 'venus', 'mercury', 'jupiter', 'saturn'];\n    const currentDate = new Date();\n\n    for (const planetName of planets) {\n      try {\n        // Dynamically import planet data\n        const planetModule = await import(`../data/planets/${planetName}`);\n        const planetData = planetModule.default;\n\n        if (planetData?.PlanetSpecific?.TransitDates) {\n          const transitDates = planetData.PlanetSpecific.TransitDates;\n          const validation = validatePlanetTransitDates(\n            planetName,\n            transitDates,\n            currentDate\n          );\n\n          errors.push(...validation.errors);\n          warnings.push(...validation.warnings);\n        } else {\n          // This is just a warning, not an error, since not all planets may have transit dates\n          warnings.push({\n            type: 'DATA_OUTDATED',\n            planet: planetName,\n            message: `No transit dates found for ${planetName}`,\n            timestamp: new Date(),\n          });\n        }\n      } catch (error) {\n        // Only treat as medium severity since missing transit data is not critical\n        warnings.push({\n          type: 'DATA_OUTDATED',\n          planet: planetName,\n          message: `Could not load transit data for ${planetName}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          timestamp: new Date(),\n        });\n      }\n    }\n  } catch (error) {\n    errors.push({\n      type: 'DATA_CORRUPTION',\n      severity: 'MEDIUM',\n      message: `Transit date validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      timestamp: new Date(),\n    });\n  }\n\n  return { errors, warnings };\n}\n\n/**\n * Validate individual planet transit dates\n */\nfunction validatePlanetTransitDates(\n  planetName: string,\n  transitDates: Record<string, any>,\n  currentDate: Date\n): { errors: ValidationError[]; warnings: ValidationWarning[] } {\n  const errors: ValidationError[] = [];\n  const warnings: ValidationWarning[] = [];\n\n  try {\n    const signs = Object.keys(transitDates);\n\n    for (const sign of signs) {\n      const transit = transitDates[sign];\n\n      // Skip complex structures like RetrogradePhases that don't have simple Start/End\n      if (!transit || typeof transit !== 'object') {\n        continue;\n      }\n\n      // Handle different transit data structures\n      if (transit.Start && transit.End) {\n        // Standard transit format\n        const startDate = new Date(transit.Start);\n        const endDate = new Date(transit.End);\n\n        // Check date validity\n        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n          // Only warn for invalid dates, don't treat as high severity\n          warnings.push({\n            type: 'DATA_OUTDATED',\n            planet: planetName,\n            message: `Invalid transit dates for ${planetName} in ${sign}: Start=${transit.Start}, End=${transit.End}`,\n            timestamp: new Date(),\n          });\n          continue;\n        }\n\n        // Check logical order\n        if (startDate >= endDate) {\n          warnings.push({\n            type: 'DATA_OUTDATED',\n            planet: planetName,\n            message: `Transit start date is after end date for ${planetName} in ${sign}`,\n            timestamp: new Date(),\n          });\n        }\n\n        // Check if dates are too far in the past or future\n        const daysDiff =\n          Math.abs(currentDate.getTime() - startDate.getTime()) /\n          (1000 * 60 * 60 * 24);\n        if (daysDiff > 365 * 2) {\n          // More than 2 years old\n          warnings.push({\n            type: 'DATA_OUTDATED',\n            planet: planetName,\n            message: `Transit data for ${planetName} in ${sign} is ${Math.round(daysDiff)} days old`,\n            timestamp: new Date(),\n          });\n        }\n      } else if (\n        typeof transit === 'object' &&\n        Object.keys(transit).length > 0\n      ) {\n        // Complex structure like RetrogradePhases - validate nested structures\n        for (const [key, value] of Object.entries(transit)) {\n          if (\n            value &&\n            typeof value === 'object' &&\n            'Start' in value &&\n            'End' in value\n          ) {\n            const nestedTransit = value as any;\n            const startDate = new Date(nestedTransit.Start);\n            const endDate = new Date(nestedTransit.End);\n\n            if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n              warnings.push({\n                type: 'DATA_OUTDATED',\n                planet: planetName,\n                message: `Invalid nested transit dates for ${planetName} in ${sign}.${key}`,\n                timestamp: new Date(),\n              });\n            }\n          }\n        }\n      }\n    }\n  } catch (error) {\n    warnings.push({\n      type: 'DATA_OUTDATED',\n      planet: planetName,\n      message: `Error validating transit dates for ${planetName}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      timestamp: new Date(),\n    });\n  }\n\n  return { errors, warnings };\n}\n\n/**\n * Check position consistency between calculated and stored data\n */\nasync function validatePositionConsistency(): Promise<{\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n}> {\n  const errors: ValidationError[] = [];\n  const warnings: ValidationWarning[] = [];\n\n  try {\n    // Get current calculated positions\n    const currentPositions = await getReliablePlanetaryPositions();\n\n    // Compare with expected ranges based on transit dates\n    for (const [planetName, position] of Object.entries(currentPositions)) {\n      if (typeof position === 'object' && position !== null) {\n        const pos = position as any;\n\n        if (\n          typeof pos.degree === 'number' &&\n          typeof pos.exactLongitude === 'number'\n        ) {\n          // Validate degree is within valid range (0-30)\n          if (pos.degree < 0 || pos.degree >= 30) {\n            errors.push({\n              type: 'POSITION_DRIFT',\n              severity: 'HIGH',\n              planet: planetName,\n              actualValue: pos.degree,\n              message: `Invalid degree value for ${planetName}: ${pos.degree} (should be 0-30)`,\n              timestamp: new Date(),\n            });\n          }\n\n          // Validate longitude is within valid range (0-360)\n          if (pos.exactLongitude < 0 || pos.exactLongitude >= 360) {\n            errors.push({\n              type: 'POSITION_DRIFT',\n              severity: 'HIGH',\n              planet: planetName,\n              actualValue: pos.exactLongitude,\n              message: `Invalid longitude value for ${planetName}: ${pos.exactLongitude} (should be 0-360)`,\n              timestamp: new Date(),\n            });\n          }\n\n          // Check for reasonable position changes (not too rapid)\n          const positionValidation = await validatePositionChange(\n            planetName,\n            pos\n          );\n          errors.push(...positionValidation.errors);\n          warnings.push(...positionValidation.warnings);\n        }\n      }\n    }\n  } catch (error) {\n    errors.push({\n      type: 'API_TIMEOUT',\n      severity: 'MEDIUM',\n      message: `Position consistency check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      timestamp: new Date(),\n    });\n  }\n\n  return { errors, warnings };\n}\n\n/**\n * Validate position changes are within reasonable bounds\n */\nasync function validatePositionChange(\n  planetName: string,\n  currentPosition: { degree: number; exactLongitude: number; sign: string }\n): Promise<{ errors: ValidationError[]; warnings: ValidationWarning[] }> {\n  const errors: ValidationError[] = [];\n  const warnings: ValidationWarning[] = [];\n\n  try {\n    // Get expected daily motion for the planet\n    const dailyMotion = getPlanetaryDailyMotion(planetName);\n\n    // For now, just validate the position is reasonable\n    // In a full implementation, we would compare with previous positions\n\n    // Check if position seems reasonable for the planet\n    const expectedSigns = await getExpectedSignsForPlanet(planetName);\n    if (\n      expectedSigns.length > 0 &&\n      !expectedSigns.includes(currentPosition.sign)\n    ) {\n      warnings.push({\n        type: 'MINOR_DRIFT',\n        planet: planetName,\n        message: `${planetName} in unexpected sign ${currentPosition.sign}, expected one of: ${expectedSigns.join(', ')}`,\n        timestamp: new Date(),\n      });\n    }\n  } catch (error) {\n    // Non-critical error, just log it\n    warnings.push({\n      type: 'MINOR_DRIFT',\n      planet: planetName,\n      message: `Could not validate position change for ${planetName}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      timestamp: new Date(),\n    });\n  }\n\n  return { errors, warnings };\n}\n\n/**\n * Get expected daily motion for a planet (approximate values)\n */\nfunction getPlanetaryDailyMotion(planetName: string): number {\n  const dailyMotions: Record<string, number> = {\n    sun: 1.0,\n    moon: 13.2,\n    mercury: 1.4,\n    venus: 1.2,\n    mars: 0.5,\n    jupiter: 0.08,\n    saturn: 0.03,\n    uranus: 0.01,\n    neptune: 0.006,\n    pluto: 0.004,\n  };\n\n  return dailyMotions[planetName.toLowerCase()] || 0.1;\n}\n\n/**\n * Get expected signs for a planet based on current transit data\n */\nasync function getExpectedSignsForPlanet(\n  planetName: string\n): Promise<string[]> {\n  try {\n    const planetModule = await import(\n      `../data/planets/${planetName.toLowerCase()}`\n    );\n    const planetData = planetModule.default;\n\n    if (planetData.PlanetSpecific?.TransitDates) {\n      const currentDate = new Date();\n      const transitDates = planetData.PlanetSpecific.TransitDates;\n\n      // Find signs where the planet could currently be\n      const possibleSigns: string[] = [];\n\n      for (const [sign, dates] of Object.entries(transitDates)) {\n        const startDate = new Date(dates.Start);\n        const endDate = new Date(dates.End);\n\n        // Add some buffer for date accuracy\n        const bufferDays = 7;\n        const bufferedStart = new Date(\n          startDate.getTime() - bufferDays * 24 * 60 * 60 * 1000\n        );\n        const bufferedEnd = new Date(\n          endDate.getTime() + bufferDays * 24 * 60 * 60 * 1000\n        );\n\n        if (currentDate >= bufferedStart && currentDate <= bufferedEnd) {\n          possibleSigns.push(sign);\n        }\n      }\n\n      return possibleSigns;\n    }\n  } catch (error) {\n    // If we can't load the data, return empty array (no validation)\n    return [];\n  }\n\n  return [];\n}\n\n/**\n * Run comprehensive astronomical calculation tests\n */\nasync function runAstronomicalTests(): Promise<TestResult[]> {\n  const testResults: TestResult[] = [];\n\n  // Test 1: Planetary position calculation accuracy\n  testResults.push(await testPlanetaryPositionAccuracy());\n\n  // Test 2: Transit date validation\n  testResults.push(await testTransitDateValidation());\n\n  // Test 3: Retrograde detection\n  testResults.push(await testRetrogradeDetection());\n\n  // Test 4: Lunar node calculation\n  testResults.push(await testLunarNodeCalculation());\n\n  // Test 5: API fallback mechanism\n  testResults.push(await testApiFallbackMechanism());\n\n  return testResults;\n}\n\n/**\n * Test planetary position calculation accuracy\n */\nasync function testPlanetaryPositionAccuracy(): Promise<TestResult> {\n  const startTime = Date.now();\n\n  try {\n    const positions = await getReliablePlanetaryPositions();\n    const requiredPlanets = [\n      'sun',\n      'moon',\n      'mercury',\n      'venus',\n      'mars',\n      'jupiter',\n      'saturn',\n    ];\n\n    let passedChecks = 0;\n    const totalChecks = requiredPlanets.length;\n\n    for (const planet of requiredPlanets) {\n      if (positions[planet] && typeof positions[planet] === 'object') {\n        const pos = positions[planet] as any;\n        if (\n          typeof pos.degree === 'number' &&\n          typeof pos.exactLongitude === 'number' &&\n          pos.sign\n        ) {\n          passedChecks++;\n        }\n      }\n    }\n\n    const passed = passedChecks === totalChecks;\n    const duration = Date.now() - startTime;\n\n    return {\n      testName: 'Planetary Position Accuracy',\n      passed,\n      duration,\n      details: {\n        passedChecks,\n        totalChecks,\n        successRate: (passedChecks / totalChecks) * 100,\n      },\n    };\n  } catch (error) {\n    return {\n      testName: 'Planetary Position Accuracy',\n      passed: false,\n      duration: Date.now() - startTime,\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n\n/**\n * Test transit date validation\n */\nasync function testTransitDateValidation(): Promise<TestResult> {\n  const startTime = Date.now();\n\n  try {\n    const planets = ['mars', 'venus', 'mercury'];\n    let validTransits = 0;\n    const totalPlanets = planets.length;\n\n    for (const planet of planets) {\n      try {\n        const planetModule = await import(`../data/planets/${planet}`);\n        const transitDates = planetModule.default.PlanetSpecific?.TransitDates;\n\n        if (transitDates && Object.keys(transitDates).length > 0) {\n          validTransits++;\n        }\n      } catch (error) {\n        // Planet data not found or invalid\n      }\n    }\n\n    const passed = validTransits === totalPlanets;\n    const duration = Date.now() - startTime;\n\n    return {\n      testName: 'Transit Date Validation',\n      passed,\n      duration,\n      details: {\n        validTransits,\n        totalPlanets,\n        successRate: (validTransits / totalPlanets) * 100,\n      },\n    };\n  } catch (error) {\n    return {\n      testName: 'Transit Date Validation',\n      passed: false,\n      duration: Date.now() - startTime,\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n\n/**\n * Test retrograde detection\n */\nasync function testRetrogradeDetection(): Promise<TestResult> {\n  const startTime = Date.now();\n\n  try {\n    const positions = await getReliablePlanetaryPositions();\n    const retrogradeCapablePlanets = [\n      'mercury',\n      'venus',\n      'mars',\n      'jupiter',\n      'saturn',\n      'uranus',\n      'neptune',\n      'pluto',\n    ];\n\n    let validRetrogradeData = 0;\n    const totalPlanets = retrogradeCapablePlanets.length;\n\n    for (const planet of retrogradeCapablePlanets) {\n      if (positions[planet] && typeof positions[planet] === 'object') {\n        const pos = positions[planet] as any;\n        if (typeof pos.isRetrograde === 'boolean') {\n          validRetrogradeData++;\n        }\n      }\n    }\n\n    const passed = validRetrogradeData === totalPlanets;\n    const duration = Date.now() - startTime;\n\n    return {\n      testName: 'Retrograde Detection',\n      passed,\n      duration,\n      details: {\n        validRetrogradeData,\n        totalPlanets,\n        successRate: (validRetrogradeData / totalPlanets) * 100,\n      },\n    };\n  } catch (error) {\n    return {\n      testName: 'Retrograde Detection',\n      passed: false,\n      duration: Date.now() - startTime,\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n\n/**\n * Test lunar node calculation\n */\nasync function testLunarNodeCalculation(): Promise<TestResult> {\n  const startTime = Date.now();\n\n  try {\n    const positions = await getReliablePlanetaryPositions();\n\n    const northNode = positions.northNode as any;\n    const southNode = positions.southNode as any;\n\n    let passed = true;\n    const details: Record<string, unknown> = {};\n\n    // Check north node\n    if (!northNode || typeof northNode.degree !== 'number' || !northNode.sign) {\n      passed = false;\n      details.northNodeError = 'Invalid north node data';\n    }\n\n    // Check south node\n    if (!southNode || typeof southNode.degree !== 'number' || !southNode.sign) {\n      passed = false;\n      details.southNodeError = 'Invalid south node data';\n    }\n\n    // Check that nodes are opposite (180 degrees apart)\n    if (passed && northNode && southNode) {\n      const longitudeDiff = Math.abs(\n        northNode.exactLongitude - southNode.exactLongitude\n      );\n      const isOpposite = Math.abs(longitudeDiff - 180) < 1; // Within 1 degree tolerance\n\n      if (!isOpposite) {\n        passed = false;\n        details.oppositionError = `Nodes not opposite: ${longitudeDiff} degrees apart`;\n      }\n    }\n\n    const duration = Date.now() - startTime;\n\n    return {\n      testName: 'Lunar Node Calculation',\n      passed,\n      duration,\n      details,\n      error: passed\n        ? undefined\n        : `Lunar nodes validation failed: ${JSON.stringify(details)}`,\n    };\n  } catch (error) {\n    return {\n      testName: 'Lunar Node Calculation',\n      passed: false,\n      duration: Date.now() - startTime,\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n\n/**\n * Test API fallback mechanism\n */\nasync function testApiFallbackMechanism(): Promise<TestResult> {\n  const startTime = Date.now();\n\n  try {\n    // Test that we can get positions even if APIs fail\n    // This should fall back to the March 2025 positions\n    const positions = await getReliablePlanetaryPositions();\n\n    const requiredPlanets = ['sun', 'moon', 'mercury', 'venus', 'mars'];\n    let validPositions = 0;\n\n    for (const planet of requiredPlanets) {\n      if (positions[planet] && typeof positions[planet] === 'object') {\n        const pos = positions[planet] as any;\n        if (pos.sign && typeof pos.degree === 'number') {\n          validPositions++;\n        }\n      }\n    }\n\n    const passed = validPositions === requiredPlanets.length;\n    const duration = Date.now() - startTime;\n\n    return {\n      testName: 'API Fallback Mechanism',\n      passed,\n      duration,\n      details: {\n        validPositions,\n        totalRequired: requiredPlanets.length,\n        successRate: (validPositions / requiredPlanets.length) * 100,\n      },\n    };\n  } catch (error) {\n    return {\n      testName: 'API Fallback Mechanism',\n      passed: false,\n      duration: Date.now() - startTime,\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n\n/**\n * Validate elemental properties consistency\n */\nasync function validateElementalProperties(): Promise<{\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n}> {\n  const errors: ValidationError[] = [];\n  const warnings: ValidationWarning[] = [];\n\n  try {\n    const planets = [\n      'sun',\n      'moon',\n      'mercury',\n      'venus',\n      'mars',\n      'jupiter',\n      'saturn',\n    ];\n\n    for (const planetName of planets) {\n      try {\n        const planetModule = await import(`../data/planets/${planetName}`);\n        const planetData = planetModule.default;\n\n        // Check elemental properties\n        if (planetData?.Elements && Array.isArray(planetData.Elements)) {\n          const validElements = ['Fire', 'Water', 'Earth', 'Air'];\n          const invalidElements = planetData.Elements.filter(\n            (el: string) => !validElements.includes(el)\n          );\n\n          if (invalidElements.length > 0) {\n            errors.push({\n              type: 'DATA_CORRUPTION',\n              severity: 'MEDIUM',\n              planet: planetName,\n              message: `Invalid elements for ${planetName}: ${invalidElements.join(', ')}`,\n              timestamp: new Date(),\n            });\n          }\n        }\n\n        // Check alchemical properties\n        if (planetData?.Alchemy) {\n          const requiredAlchemical = [\n            'Spirit',\n            'Essence',\n            'Matter',\n            'Substance',\n          ];\n          const missingAlchemical = requiredAlchemical.filter(\n            prop => typeof planetData.Alchemy[prop] !== 'number'\n          );\n\n          if (missingAlchemical.length > 0) {\n            warnings.push({\n              type: 'DATA_OUTDATED',\n              planet: planetName,\n              message: `Missing alchemical properties for ${planetName}: ${missingAlchemical.join(', ')}`,\n              timestamp: new Date(),\n            });\n          }\n        }\n      } catch (error) {\n        // Only treat as warning since elemental properties validation is not critical\n        warnings.push({\n          type: 'DATA_OUTDATED',\n          planet: planetName,\n          message: `Could not validate elemental properties for ${planetName}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          timestamp: new Date(),\n        });\n      }\n    }\n  } catch (error) {\n    warnings.push({\n      type: 'DATA_OUTDATED',\n      message: `Elemental properties validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      timestamp: new Date(),\n    });\n  }\n\n  return { errors, warnings };\n}\n\n/**\n * Analyze test results and generate validation errors\n */\nfunction analyzeTestResults(testResults: TestResult[]): {\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n} {\n  const errors: ValidationError[] = [];\n  const warnings: ValidationWarning[] = [];\n\n  const totalTests = testResults.length;\n  const passedTests = testResults.filter(t => t.passed).length;\n  const passRate = (passedTests / totalTests) * 100;\n\n  if (passRate < VALIDATION_TOLERANCES.TEST_PASS_THRESHOLD) {\n    errors.push({\n      type: 'TEST_FAILURE',\n      severity: 'HIGH',\n      message: `Test pass rate ${passRate.toFixed(1)}% below threshold ${VALIDATION_TOLERANCES.TEST_PASS_THRESHOLD}%`,\n      timestamp: new Date(),\n    });\n  }\n\n  // Check individual test failures\n  for (const test of testResults) {\n    if (!test.passed) {\n      const severity =\n        test.testName.includes('Accuracy') || test.testName.includes('Fallback')\n          ? 'HIGH'\n          : 'MEDIUM';\n\n      errors.push({\n        type: 'TEST_FAILURE',\n        severity: severity as 'HIGH' | 'MEDIUM',\n        message: `Test failed: ${test.testName}${test.error ? ` - ${test.error}` : ''}`,\n        timestamp: new Date(),\n      });\n    }\n\n    // Check for slow tests\n    if (test.duration > 10000) {\n      // More than 10 seconds\n      warnings.push({\n        type: 'API_SLOW',\n        message: `Test ${test.testName} took ${test.duration}ms (>10s)`,\n        timestamp: new Date(),\n      });\n    }\n  }\n\n  return { errors, warnings };\n}\n\n/**\n * Generate validation summary\n */\nfunction generateValidationSummary(\n  isValid: boolean,\n  errors: ValidationError[],\n  warnings: ValidationWarning[],\n  duration: number\n): string {\n  const criticalErrors = errors.filter(e => e.severity === 'CRITICAL').length;\n  const highErrors = errors.filter(e => e.severity === 'HIGH').length;\n  const mediumErrors = errors.filter(e => e.severity === 'MEDIUM').length;\n  const lowErrors = errors.filter(e => e.severity === 'LOW').length;\n\n  let summary = `Planetary Data Validation ${isValid ? 'PASSED' : 'FAILED'} (${duration}ms)\\n`;\n  summary += `Errors: ${errors.length} (Critical: ${criticalErrors}, High: ${highErrors}, Medium: ${mediumErrors}, Low: ${lowErrors})\\n`;\n  summary += `Warnings: ${warnings.length}\\n`;\n\n  if (!isValid) {\n    summary += '\\nCritical Issues:\\n';\n    errors\n      .filter(e => e.severity === 'CRITICAL' || e.severity === 'HIGH')\n      .forEach(error => {\n        summary += `- ${error.message}\\n`;\n      });\n  }\n\n  if (warnings.length > 0) {\n    summary += '\\nWarnings:\\n';\n    warnings.slice(0, 5).forEach(warning => {\n      summary += `- ${warning.message}\\n`;\n    });\n\n    if (warnings.length > 5) {\n      summary += `... and ${warnings.length - 5} more warnings\\n`;\n    }\n  }\n\n  return summary;\n}\n\n/**\n * Check if validation should trigger rollback\n */\nexport function shouldRollback(validationResult: ValidationResult): boolean {\n  const criticalErrors = validationResult.errors.filter(\n    e => e.severity === 'CRITICAL'\n  ).length;\n  const highErrors = validationResult.errors.filter(\n    e => e.severity === 'HIGH'\n  ).length;\n\n  // Rollback if there are any critical errors or more than 2 high-severity errors\n  return criticalErrors > 0 || highErrors > 2;\n}\n\n/**\n * Export validation functions for testing\n */\nexport {\n  validateTransitDates,\n  validatePositionConsistency,\n  runAstronomicalTests,\n  validateElementalProperties,\n};\n"],"version":3}