{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/__tests__/performance/BundleSize.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/__tests__/performance/BundleSize.test.ts"],"sourcesContent":["/**\n * Performance Tests for Bundle Size Regression Testing\n * Perfect Codebase Campaign - Bundle Size Performance Testing\n */\n\nimport { ProgressTracker } from '../../ProgressTracker';\nimport { CampaignController } from '../../CampaignController';\nimport {\n  CampaignConfig,\n  SafetySettings,\n  SafetyLevel,\n} from '../../../../types/campaign';\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\n\n// Mock dependencies\njest.mock('child_process');\njest.mock('fs');\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('Bundle Size Performance Tests', () => {\n  let progressTracker: ProgressTracker;\n  let campaignController: CampaignController;\n  let mockConfig: CampaignConfig;\n\n  beforeEach(() => {\n    const safetySettings: SafetySettings = {\n      maxFilesPerBatch: 25,\n      buildValidationFrequency: 5,\n      testValidationFrequency: 10,\n      corruptionDetectionEnabled: true,\n      automaticRollbackEnabled: true,\n      stashRetentionDays: 7,\n    };\n\n    mockConfig = {\n      phases: [\n        {\n          id: 'bundle-test-phase',\n          name: 'Bundle Test Phase',\n          description: 'Phase for bundle size testing',\n          tools: [\n            {\n              scriptPath: 'scripts/bundle/optimize-script.js',\n              parameters: { optimizeBundle: true },\n              batchSize: 50,\n              safetyLevel: SafetyLevel.MEDIUM,\n            },\n          ],\n          successCriteria: { buildTime: 10 },\n          safetyCheckpoints: [],\n        },\n      ],\n      safetySettings,\n      progressTargets: {\n        typeScriptErrors: 0,\n        lintingWarnings: 0,\n        buildTime: 10,\n        enterpriseSystems: 200,\n      },\n      toolConfiguration: {\n        enhancedErrorFixer:\n          'scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js',\n        explicitAnyFixer:\n          'scripts/typescript-fixes/fix-explicit-any-systematic.js',\n        unusedVariablesFixer:\n          'scripts/typescript-fixes/fix-unused-variables-enhanced.js',\n        consoleStatementFixer:\n          'scripts/lint-fixes/fix-console-statements-only.js',\n      },\n    };\n\n    progressTracker = new ProgressTracker();\n    campaignController = new CampaignController(mockConfig);\n\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Default mock implementations\n    mockExecSync.mockReturnValue('');\n    mockFs.existsSync.mockReturnValue(true);\n  });\n\n  describe('Bundle Size Validation', () => {\n    it('should validate bundle size under 420kB target', async () => {\n      // Mock optimal bundle size\n      mockFs.existsSync.mockImplementation(path => {\n        return path === '.next' || path === 'dist';\n      });\n\n      mockExecSync.mockImplementation(command => {\n        const cmd = command.toString();\n        if (cmd.includes('du -sk .next')) {\n          return '300'; // 300kB\n        }\n        if (cmd.includes('du -sk dist')) {\n          return '100'; // 100kB\n        }\n        return '';\n      });\n\n      const bundleSize = await progressTracker.getBundleSize();\n\n      expect(bundleSize).toBe(400); // 300 + 100 = 400kB\n      expect(bundleSize).toBeLessThan(420); // Under 420kB target\n    });\n\n    it('should detect bundle size regression', async () => {\n      // Mock bundle size that exceeds target\n      mockFs.existsSync.mockReturnValue(true);\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('du -sk')) {\n          return '450'; // 450kB - exceeds 420kB target\n        }\n        return '';\n      });\n\n      const bundleSize = await progressTracker.getBundleSize();\n\n      expect(bundleSize).toBe(450);\n      expect(bundleSize).toBeGreaterThan(420); // Exceeds target\n    });\n\n    it('should handle missing build directories', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      const bundleSize = await progressTracker.getBundleSize();\n\n      expect(bundleSize).toBe(0); // No build directories found\n    });\n\n    it('should track bundle size trends over campaign execution', async () => {\n      const bundleSizes: number[] = [];\n      let optimizationStep = 0;\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('du -sk')) {\n          optimizationStep++;\n          // Simulate bundle size optimization over time\n          const baseSize = 500; // Start with large bundle\n          const optimization = Math.min(100, optimizationStep * 20); // Up to 100kB reduction\n          return Math.max(350, baseSize - optimization).toString();\n        }\n        return '';\n      });\n\n      // Collect bundle sizes over multiple measurements\n      for (let i = 0; i < 6; i++) {\n        const bundleSize = await progressTracker.getBundleSize();\n        bundleSizes.push(bundleSize);\n      }\n\n      expect(bundleSizes.length).toBe(6);\n\n      // Bundle size should decrease over time (optimization)\n      const firstSize = bundleSizes[0];\n      const lastSize = bundleSizes[bundleSizes.length - 1];\n      expect(lastSize).toBeLessThan(firstSize);\n      expect(lastSize).toBeLessThan(420); // Should reach target\n    });\n  });\n\n  describe('Bundle Composition Analysis', () => {\n    it('should analyze bundle composition across different build outputs', async () => {\n      const buildOutputs = [\n        { dir: '.next', expectedSize: 250 },\n        { dir: 'dist', expectedSize: 120 },\n        { dir: 'build', expectedSize: 50 },\n      ];\n\n      mockFs.existsSync.mockImplementation(path => {\n        return buildOutputs.some(output => output.dir === path);\n      });\n\n      mockExecSync.mockImplementation(command => {\n        const cmd = command.toString();\n        for (const output of buildOutputs) {\n          if (cmd.includes(`du -sk ${output.dir}`)) {\n            return output.expectedSize.toString();\n          }\n        }\n        return '';\n      });\n\n      const bundleSize = await progressTracker.getBundleSize();\n\n      const expectedTotal = buildOutputs.reduce(\n        (sum, output) => sum + output.expectedSize,\n        0\n      );\n      expect(bundleSize).toBe(expectedTotal); // 250 + 120 + 50 = 420kB\n      expect(bundleSize).toBeLessThanOrEqual(420); // At target limit\n    });\n\n    it('should handle partial build outputs', async () => {\n      // Only some build directories exist\n      mockFs.existsSync.mockImplementation(path => {\n        return path === '.next'; // Only .next exists\n      });\n\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('du -sk .next')) {\n          return '380'; // 380kB\n        }\n        return '';\n      });\n\n      const bundleSize = await progressTracker.getBundleSize();\n\n      expect(bundleSize).toBe(380);\n      expect(bundleSize).toBeLessThan(420); // Under target\n    });\n\n    it('should detect bundle bloat in specific directories', async () => {\n      const bloatedBuild = {\n        '.next': 350, // Normal size\n        dist: 200, // Bloated - should be ~120kB\n        build: 50, // Normal size\n      };\n\n      mockFs.existsSync.mockImplementation(path => {\n        return Object.keys(bloatedBuild).includes(path as string);\n      });\n\n      mockExecSync.mockImplementation(command => {\n        const cmd = command.toString();\n        for (const [dir, size] of Object.entries(bloatedBuild)) {\n          if (cmd.includes(`du -sk ${dir}`)) {\n            return size.toString();\n          }\n        }\n        return '';\n      });\n\n      const bundleSize = await progressTracker.getBundleSize();\n\n      expect(bundleSize).toBe(600); // 350 + 200 + 50 = 600kB\n      expect(bundleSize).toBeGreaterThan(420); // Exceeds target due to bloat\n    });\n  });\n\n  describe('Bundle Optimization Performance', () => {\n    it('should validate lazy loading impact on bundle size', async () => {\n      let lazyLoadingEnabled = false;\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('du -sk')) {\n          // Lazy loading should reduce main bundle size\n          return lazyLoadingEnabled ? '320' : '450';\n        }\n        return '';\n      });\n\n      // Before lazy loading\n      let bundleSize = await progressTracker.getBundleSize();\n      expect(bundleSize).toBe(450);\n      expect(bundleSize).toBeGreaterThan(420); // Exceeds target\n\n      // After enabling lazy loading\n      lazyLoadingEnabled = true;\n      bundleSize = await progressTracker.getBundleSize();\n      expect(bundleSize).toBe(320);\n      expect(bundleSize).toBeLessThan(420); // Under target\n    });\n\n    it('should validate tree shaking effectiveness', async () => {\n      let treeShakingEnabled = false;\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('du -sk')) {\n          // Tree shaking should remove unused code\n          return treeShakingEnabled ? '380' : '480';\n        }\n        return '';\n      });\n\n      // Before tree shaking\n      let bundleSize = await progressTracker.getBundleSize();\n      expect(bundleSize).toBe(480);\n      expect(bundleSize).toBeGreaterThan(420); // Exceeds target\n\n      // After enabling tree shaking\n      treeShakingEnabled = true;\n      bundleSize = await progressTracker.getBundleSize();\n      expect(bundleSize).toBe(380);\n      expect(bundleSize).toBeLessThan(420); // Under target\n    });\n\n    it('should validate code splitting impact', async () => {\n      let codeSplittingEnabled = false;\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('du -sk')) {\n          if (codeSplittingEnabled) {\n            // Code splitting creates multiple smaller bundles\n            // Main bundle should be smaller\n            return '280';\n          } else {\n            // Single large bundle\n            return '440';\n          }\n        }\n        return '';\n      });\n\n      // Before code splitting\n      let bundleSize = await progressTracker.getBundleSize();\n      expect(bundleSize).toBe(440);\n      expect(bundleSize).toBeGreaterThan(420); // Exceeds target\n\n      // After enabling code splitting\n      codeSplittingEnabled = true;\n      bundleSize = await progressTracker.getBundleSize();\n      expect(bundleSize).toBe(280);\n      expect(bundleSize).toBeLessThan(420); // Well under target\n    });\n\n    it('should validate compression effectiveness', async () => {\n      let compressionEnabled = false;\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('du -sk')) {\n          // Compression should reduce bundle size significantly\n          return compressionEnabled ? '300' : '500';\n        }\n        return '';\n      });\n\n      // Before compression\n      let bundleSize = await progressTracker.getBundleSize();\n      expect(bundleSize).toBe(500);\n      expect(bundleSize).toBeGreaterThan(420); // Exceeds target\n\n      // After enabling compression\n      compressionEnabled = true;\n      bundleSize = await progressTracker.getBundleSize();\n      expect(bundleSize).toBe(300);\n      expect(bundleSize).toBeLessThan(420); // Well under target\n    });\n  });\n\n  describe('Bundle Size Regression Testing', () => {\n    it('should detect bundle size regression during campaign', async () => {\n      const phase = mockConfig.phases[0];\n      let executionCount = 0;\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('du -sk')) {\n          executionCount++;\n          // Simulate bundle size regression over time\n          const baseSize = 350;\n          const regression = executionCount * 25; // 25kB increase per execution\n          return (baseSize + regression).toString();\n        }\n        return '';\n      });\n\n      const bundleSizes: number[] = [];\n\n      // Execute phase multiple times to simulate regression\n      for (let i = 0; i < 4; i++) {\n        await campaignController.executePhase(phase);\n        const bundleSize = await progressTracker.getBundleSize();\n        bundleSizes.push(bundleSize);\n      }\n\n      expect(bundleSizes.length).toBe(4);\n\n      // Should detect increasing bundle size (regression)\n      const firstSize = bundleSizes[0];\n      const lastSize = bundleSizes[bundleSizes.length - 1];\n      expect(lastSize).toBeGreaterThan(firstSize);\n      expect(lastSize).toBeGreaterThan(420); // Should exceed target\n    });\n\n    it('should validate bundle size improvements during optimization', async () => {\n      const phase = mockConfig.phases[0];\n      let optimizationStep = 0;\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('du -sk')) {\n          optimizationStep++;\n          // Simulate bundle size optimization\n          const baseSize = 500;\n          const optimization = optimizationStep * 30; // 30kB reduction per step\n          return Math.max(320, baseSize - optimization).toString();\n        }\n        return '';\n      });\n\n      const bundleSizes: number[] = [];\n\n      // Execute optimization phases\n      for (let i = 0; i < 5; i++) {\n        await campaignController.executePhase(phase);\n        const bundleSize = await progressTracker.getBundleSize();\n        bundleSizes.push(bundleSize);\n      }\n\n      expect(bundleSizes.length).toBe(5);\n\n      // Should show decreasing bundle size (optimization)\n      const firstSize = bundleSizes[0];\n      const lastSize = bundleSizes[bundleSizes.length - 1];\n      expect(lastSize).toBeLessThan(firstSize);\n      expect(lastSize).toBeLessThan(420); // Should be under target\n    });\n\n    it('should track bundle size across different optimization strategies', async () => {\n      const optimizationStrategies = [\n        { name: 'baseline', expectedSize: 480 },\n        { name: 'minification', expectedSize: 420 },\n        { name: 'tree-shaking', expectedSize: 380 },\n        { name: 'code-splitting', expectedSize: 340 },\n        { name: 'compression', expectedSize: 300 },\n      ];\n\n      const results: Array<{\n        strategy: string;\n        size: number;\n        underTarget: boolean;\n      }> = [];\n\n      for (const strategy of optimizationStrategies) {\n        mockFs.existsSync.mockReturnValue(true);\n        mockExecSync.mockImplementation(command => {\n          if (command.toString().includes('du -sk')) {\n            return strategy.expectedSize.toString();\n          }\n          return '';\n        });\n\n        const bundleSize = await progressTracker.getBundleSize();\n        results.push({\n          strategy: strategy.name,\n          size: bundleSize,\n          underTarget: bundleSize < 420,\n        });\n      }\n\n      expect(results.length).toBe(5);\n\n      // Baseline should exceed target\n      expect(results[0].underTarget).toBe(false);\n      expect(results[0].size).toBe(480);\n\n      // Progressive optimization should reduce bundle size\n      for (let i = 1; i < results.length; i++) {\n        expect(results[i].size).toBeLessThan(results[i - 1].size);\n      }\n\n      // Final optimizations should be under target\n      expect(results[results.length - 1].underTarget).toBe(true);\n      expect(results[results.length - 1].size).toBe(300);\n    });\n  });\n\n  describe('Bundle Size Performance Benchmarks', () => {\n    it('should benchmark bundle analysis performance', async () => {\n      const analysisTimes: number[] = [];\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('du -sk')) {\n          const startTime = Date.now();\n          // Simulate bundle analysis time\n          const delay = 20 + Math.random() * 30; // 20-50ms\n          const endTime = startTime + delay;\n          while (Date.now() < endTime) {\n            // Busy wait\n          }\n          analysisTimes.push(Date.now() - startTime);\n          return '400';\n        }\n        return '';\n      });\n\n      // Perform multiple bundle size analyses\n      for (let i = 0; i < 10; i++) {\n        await progressTracker.getBundleSize();\n      }\n\n      expect(analysisTimes.length).toBe(10);\n      expect(analysisTimes.every(time => time > 0)).toBe(true);\n\n      // Average analysis time should be reasonable\n      const averageTime =\n        analysisTimes.reduce((sum, time) => sum + time, 0) /\n        analysisTimes.length;\n      expect(averageTime).toBeLessThan(100); // Should be under 100ms\n    });\n\n    it('should handle large bundle analysis efficiently', async () => {\n      // Mock very large bundle\n      mockFs.existsSync.mockReturnValue(true);\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('du -sk')) {\n          // Simulate longer analysis time for large bundle\n          const delay = 50; // 50ms for large bundle\n          const endTime = Date.now() + delay;\n          while (Date.now() < endTime) {\n            // Busy wait\n          }\n          return '2000'; // 2MB bundle - very large\n        }\n        return '';\n      });\n\n      const startTime = Date.now();\n      const bundleSize = await progressTracker.getBundleSize();\n      const analysisTime = Date.now() - startTime;\n\n      expect(bundleSize).toBe(2000);\n      expect(bundleSize).toBeGreaterThan(420); // Significantly exceeds target\n      expect(analysisTime).toBeLessThan(200); // Should still be reasonably fast\n    });\n\n    it('should benchmark concurrent bundle analyses', async () => {\n      mockFs.existsSync.mockReturnValue(true);\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('du -sk')) {\n          // Simulate concurrent analysis\n          const delay = 30 + Math.random() * 20; // 30-50ms\n          const endTime = Date.now() + delay;\n          while (Date.now() < endTime) {\n            // Busy wait\n          }\n          return '400';\n        }\n        return '';\n      });\n\n      // Run concurrent bundle size analyses\n      const promises = Array.from({ length: 5 }, () =>\n        progressTracker.getBundleSize()\n      );\n\n      const startTime = Date.now();\n      const results = await Promise.all(promises);\n      const totalTime = Date.now() - startTime;\n\n      expect(results.length).toBe(5);\n      expect(results.every(size => size === 400)).toBe(true);\n      expect(totalTime).toBeLessThan(500); // Should complete efficiently\n    });\n  });\n\n  describe('Bundle Size Monitoring Integration', () => {\n    it('should integrate bundle size monitoring with campaign execution', async () => {\n      const phase = mockConfig.phases[0];\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('du -sk')) {\n          return '390'; // Under target\n        }\n        return '';\n      });\n\n      // Mock campaign execution with bundle monitoring\n      jest\n        .spyOn(campaignController as any, 'getCurrentMetrics')\n        .mockImplementation(async () => {\n          const bundleSize = await progressTracker.getBundleSize();\n          return {\n            typeScriptErrors: {\n              current: 86,\n              target: 0,\n              reduction: 0,\n              percentage: 0,\n            },\n            lintingWarnings: {\n              current: 4506,\n              target: 0,\n              reduction: 0,\n              percentage: 0,\n            },\n            buildPerformance: {\n              currentTime: 8.5,\n              targetTime: 10,\n              cacheHitRate: 0.8,\n              memoryUsage: 45,\n            },\n            enterpriseSystems: {\n              current: 0,\n              target: 200,\n              transformedExports: 0,\n            },\n            bundleSize: bundleSize, // Additional bundle size tracking\n          };\n        });\n\n      const result = await campaignController.executePhase(phase);\n\n      expect(result.success).toBe(true);\n\n      // Verify bundle size is monitored\n      const bundleSize = await progressTracker.getBundleSize();\n      expect(bundleSize).toBe(390);\n      expect(bundleSize).toBeLessThan(420);\n    });\n\n    it('should alert on bundle size threshold violations', async () => {\n      const thresholds = {\n        warning: 400, // 400kB warning threshold\n        critical: 420, // 420kB critical threshold\n      };\n\n      const testSizes = [350, 410, 450]; // Under warning, over warning, over critical\n      const alerts: Array<{ size: number; level: string }> = [];\n\n      for (const testSize of testSizes) {\n        mockFs.existsSync.mockReturnValue(true);\n        mockExecSync.mockImplementation(command => {\n          if (command.toString().includes('du -sk')) {\n            return testSize.toString();\n          }\n          return '';\n        });\n\n        const bundleSize = await progressTracker.getBundleSize();\n\n        if (bundleSize > thresholds.critical) {\n          alerts.push({ size: bundleSize, level: 'critical' });\n        } else if (bundleSize > thresholds.warning) {\n          alerts.push({ size: bundleSize, level: 'warning' });\n        }\n      }\n\n      expect(alerts.length).toBe(2); // Should have warning and critical alerts\n      expect(alerts[0].level).toBe('warning');\n      expect(alerts[0].size).toBe(410);\n      expect(alerts[1].level).toBe('critical');\n      expect(alerts[1].size).toBe(450);\n    });\n  });\n});\n"],"version":3}