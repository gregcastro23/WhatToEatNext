{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/steeringFileIntelligence.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/steeringFileIntelligence.ts"],"sourcesContent":["/**\n * Steering File Intelligence Integration\n * \n * This utility integrates the guidance from Kiro steering files to enhance\n * component development with astrological calculation guidelines, elemental\n * principles enforcement, and cultural sensitivity guidelines.\n */\n\nimport { logger } from '@/utils/logger';\nimport { getReliablePlanetaryPositions } from '@/utils/reliableAstronomy';\n\n// Elemental Principles from steering files\nexport interface ElementalCompatibilityMatrix {\n  Fire: { Fire: number; Water: number; Earth: number; Air: number };\n  Water: { Water: number; Fire: number; Earth: number; Air: number };\n  Earth: { Earth: number; Fire: number; Water: number; Air: number };\n  Air: { Air: number; Fire: number; Water: number; Earth: number };\n}\n\n// Self-reinforcement compatibility matrix from elemental-principles.md\nexport const ELEMENTAL_COMPATIBILITY: ElementalCompatibilityMatrix = {\n  Fire: { Fire: 0.9, Water: 0.7, Earth: 0.7, Air: 0.8 },\n  Water: { Water: 0.9, Fire: 0.7, Earth: 0.8, Air: 0.7 },\n  Earth: { Earth: 0.9, Fire: 0.7, Water: 0.8, Air: 0.7 },\n  Air: { Air: 0.9, Fire: 0.8, Water: 0.7, Earth: 0.7 }\n};\n\nexport type Element = 'Fire' | 'Water' | 'Earth' | 'Air';\n\nexport interface ElementalProperties {\n  Fire: number;\n  Water: number;\n  Earth: number;\n  Air: number;\n}\n\nexport interface AstrologicalGuidance {\n  planetaryPositions: Record<string, any>;\n  dominantElement: Element;\n  elementalBalance: ElementalProperties;\n  culturalSensitivity: CulturalGuidance;\n  performanceOptimizations: PerformanceGuidance;\n}\n\nexport interface CulturalGuidance {\n  inclusiveDesign: boolean;\n  respectfulRepresentation: boolean;\n  diverseCulinaryTraditions: boolean;\n  accessibilityCompliant: boolean;\n}\n\nexport interface PerformanceGuidance {\n  lazyLoading: boolean;\n  memoization: boolean;\n  contextOptimization: boolean;\n  bundleSplitting: boolean;\n}\n\n/**\n * Core steering file intelligence class that provides guidance for component development\n */\nexport class SteeringFileIntelligence {\n  private static instance: SteeringFileIntelligence;\n  private cachedGuidance: AstrologicalGuidance | null = null;\n  private lastUpdate: number = 0;\n  private readonly CACHE_DURATION = 30 * 60 * 1000; // 30 minutes\n\n  private constructor() {}\n\n  public static getInstance(): SteeringFileIntelligence {\n    if (!SteeringFileIntelligence.instance) {\n      SteeringFileIntelligence.instance = new SteeringFileIntelligence();\n    }\n    return SteeringFileIntelligence.instance;\n  }\n\n  /**\n   * Get comprehensive astrological guidance for component development\n   */\n  public async getAstrologicalGuidance(): Promise<AstrologicalGuidance> {\n    // Check cache first\n    if (this.cachedGuidance && (Date.now() - this.lastUpdate) < this.CACHE_DURATION) {\n      return this.cachedGuidance;\n    }\n\n    try {\n      // Get current planetary positions using reliable astronomy\n      const planetaryPositions = await getReliablePlanetaryPositions();\n      \n      // Calculate dominant element based on current astrological conditions\n      const dominantElement = this.calculateDominantElement(planetaryPositions);\n      \n      // Calculate elemental balance\n      const elementalBalance = this.calculateElementalBalance(planetaryPositions);\n      \n      // Apply cultural sensitivity guidelines\n      const culturalSensitivity = this.getCulturalGuidance();\n      \n      // Apply performance optimizations\n      const performanceOptimizations = this.getPerformanceGuidance();\n\n      this.cachedGuidance = {\n        planetaryPositions,\n        dominantElement,\n        elementalBalance,\n        culturalSensitivity,\n        performanceOptimizations\n      };\n\n      this.lastUpdate = Date.now();\n      \n      logger.debug('Updated astrological guidance from steering file intelligence');\n      return this.cachedGuidance;\n    } catch (error) {\n      logger.error('Error getting astrological guidance:', error);\n      \n      // Return fallback guidance\n      return this.getFallbackGuidance();\n    }\n  }\n\n  /**\n   * Calculate elemental compatibility using self-reinforcement principles\n   */\n  public calculateElementalCompatibility(\n    sourceProps: ElementalProperties,\n    targetProps: ElementalProperties\n  ): number {\n    const sourceDominant = this.getDominantElement(sourceProps);\n    const targetDominant = this.getDominantElement(targetProps);\n    \n    // Self-reinforcement: same elements have highest compatibility (≥0.9)\n    if (sourceDominant === targetDominant) {\n      return Math.max(0.9, ELEMENTAL_COMPATIBILITY[sourceDominant][targetDominant]);\n    }\n    \n    // Different elements have good compatibility (≥0.7)\n    return Math.max(0.7, ELEMENTAL_COMPATIBILITY[sourceDominant][targetDominant]);\n  }\n\n  /**\n   * Validate elemental properties according to steering file principles\n   */\n  public validateElementalProperties(properties: ElementalProperties): boolean {\n    const elements: Element[] = ['Fire', 'Water', 'Earth', 'Air'];\n    \n    // Check all elements are present and non-negative\n    for (const element of elements) {\n      if (typeof properties[element] !== 'number' || properties[element] < 0) {\n        logger.warn(`Invalid elemental property for ${element}: ${properties[element]}`);\n        return false;\n      }\n    }\n    \n    // Check total doesn't exceed reasonable bounds (allow for strong elemental presence)\n    const total = Object.values(properties).reduce((sum, val) => sum + val, 0);\n    if (total > 4.0) {\n      logger.warn(`Elemental properties total exceeds maximum: ${total}`);\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * Validate compatibility score according to steering file principles\n   */\n  public validateCompatibilityScore(score: number): boolean {\n    // All compatibility scores must be at least 0.7 (no opposing elements)\n    if (score < 0.7) {\n      logger.error(`Compatibility score ${score} violates minimum 0.7 principle`);\n      return false;\n    }\n    \n    // Scores should not exceed 1.0\n    if (score > 1.0) {\n      logger.warn(`Compatibility score ${score} exceeds maximum 1.0`);\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * Enhance elemental properties using self-reinforcement principles\n   */\n  public enhanceDominantElement(properties: ElementalProperties): ElementalProperties {\n    const dominant = this.getDominantElement(properties);\n    const enhancedProperties = { ...properties };\n    \n    // Self-reinforcement: boost the dominant element\n    enhancedProperties[dominant] = Math.min(1.0, properties[dominant] * 1.1);\n    \n    return enhancedProperties;\n  }\n\n  /**\n   * Apply architectural patterns from steering files\n   */\n  public getArchitecturalGuidance(): {\n    componentPatterns: string[];\n    stateManagement: string[];\n    errorHandling: string[];\n    performance: string[];\n  } {\n    return {\n      componentPatterns: [\n        'Use React.memo for expensive components',\n        'Implement lazy loading for non-critical components',\n        'Apply error boundaries with cosmic-aware error handling',\n        'Use context providers for astrological state sharing'\n      ],\n      stateManagement: [\n        'Centralized astrological state with real-time updates',\n        'Context consolidation to prevent provider nesting',\n        'Performance optimization through selective subscriptions',\n        'Fallback state management for calculation failures'\n      ],\n      errorHandling: [\n        'Multi-layered error handling with graceful degradation',\n        'Fallback mechanisms for API failures',\n        'User-friendly error messages with cosmic context',\n        'Error recovery mechanisms with automatic retry'\n      ],\n      performance: [\n        'Bundle splitting for astrological features',\n        'Intelligent caching with cosmic timing considerations',\n        'Memory optimization for planetary calculations',\n        'Real-time monitoring and optimization'\n      ]\n    };\n  }\n\n  /**\n   * Apply technology stack guidance from steering files\n   */\n  public getTechnologyStackGuidance(): {\n    typescript: string[];\n    react: string[];\n    nextjs: string[];\n    testing: string[];\n  } {\n    return {\n      typescript: [\n        'Use strict typing for astrological calculations',\n        'Domain-specific types for elemental properties',\n        'Generic constraints for recommendation algorithms',\n        'Utility types for data transformations'\n      ],\n      react: [\n        'Concurrent features for real-time astrological updates',\n        'Suspense for graceful loading states',\n        'Error boundaries with cosmic-aware error handling',\n        'Custom hooks for astrological calculations'\n      ],\n      nextjs: [\n        'App Router architecture with route-based organization',\n        'Server components for optimized rendering',\n        'API routes for external service connections',\n        'Static generation for pre-rendered pages'\n      ],\n      testing: [\n        'Unit tests for astrological calculation accuracy',\n        'Integration tests for component interactions',\n        'E2E tests for complete user workflows',\n        'Performance monitoring with Web Vitals'\n      ]\n    };\n  }\n\n  // Private helper methods\n\n  private calculateDominantElement(planetaryPositions: Record<string, any>): Element {\n    // Calculate dominant element based on planetary positions\n    const elementCounts = { Fire: 0, Water: 0, Earth: 0, Air: 0 };\n    \n    const zodiacElementMap: Record<string, Element> = {\n      'aries': 'Fire', 'leo': 'Fire', 'sagittarius': 'Fire',\n      'taurus': 'Earth', 'virgo': 'Earth', 'capricorn': 'Earth',\n      'gemini': 'Air', 'libra': 'Air', 'aquarius': 'Air',\n      'cancer': 'Water', 'scorpio': 'Water', 'pisces': 'Water'\n    };\n\n    // Count elements from planetary positions\n    Object.values(planetaryPositions).forEach((position: any) => {\n      if (position?.sign && zodiacElementMap[position.sign]) {\n        elementCounts[zodiacElementMap[position.sign]]++;\n      }\n    });\n\n    // Return the element with the highest count\n    return Object.entries(elementCounts).reduce((a, b) => \n      elementCounts[a[0] as Element] > elementCounts[b[0] as Element] ? a : b\n    )[0] as Element;\n  }\n\n  private calculateElementalBalance(planetaryPositions: Record<string, any>): ElementalProperties {\n    const elementCounts = { Fire: 0, Water: 0, Earth: 0, Air: 0 };\n    const totalPlanets = Object.keys(planetaryPositions).length;\n    \n    const zodiacElementMap: Record<string, Element> = {\n      'aries': 'Fire', 'leo': 'Fire', 'sagittarius': 'Fire',\n      'taurus': 'Earth', 'virgo': 'Earth', 'capricorn': 'Earth',\n      'gemini': 'Air', 'libra': 'Air', 'aquarius': 'Air',\n      'cancer': 'Water', 'scorpio': 'Water', 'pisces': 'Water'\n    };\n\n    // Count elements from planetary positions\n    Object.values(planetaryPositions).forEach((position: any) => {\n      if (position?.sign && zodiacElementMap[position.sign]) {\n        elementCounts[zodiacElementMap[position.sign]]++;\n      }\n    });\n\n    // Normalize to proportions\n    return {\n      Fire: totalPlanets > 0 ? elementCounts.Fire / totalPlanets : 0.25,\n      Water: totalPlanets > 0 ? elementCounts.Water / totalPlanets : 0.25,\n      Earth: totalPlanets > 0 ? elementCounts.Earth / totalPlanets : 0.25,\n      Air: totalPlanets > 0 ? elementCounts.Air / totalPlanets : 0.25\n    };\n  }\n\n  private getDominantElement(properties: ElementalProperties): Element {\n    return Object.entries(properties).reduce((a, b) => \n      properties[a[0] as Element] > properties[b[0] as Element] ? a : b\n    )[0] as Element;\n  }\n\n  private getCulturalGuidance(): CulturalGuidance {\n    return {\n      inclusiveDesign: true,\n      respectfulRepresentation: true,\n      diverseCulinaryTraditions: true,\n      accessibilityCompliant: true\n    };\n  }\n\n  private getPerformanceGuidance(): PerformanceGuidance {\n    return {\n      lazyLoading: true,\n      memoization: true,\n      contextOptimization: true,\n      bundleSplitting: true\n    };\n  }\n\n  private getFallbackGuidance(): AstrologicalGuidance {\n    return {\n      planetaryPositions: {},\n      dominantElement: 'Fire',\n      elementalBalance: { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 },\n      culturalSensitivity: this.getCulturalGuidance(),\n      performanceOptimizations: this.getPerformanceGuidance()\n    };\n  }\n}\n\n/**\n * Convenience function to get steering file intelligence instance\n */\nexport function getSteeringFileIntelligence(): SteeringFileIntelligence {\n  return SteeringFileIntelligence.getInstance();\n}\n\n/**\n * Hook for components to use steering file intelligence\n */\nexport function useSteeringFileIntelligence() {\n  const intelligence = getSteeringFileIntelligence();\n  \n  return {\n    getGuidance: async () => await intelligence.getAstrologicalGuidance(),\n    validateElementalProperties: (props: ElementalProperties) => \n      intelligence.validateElementalProperties(props),\n    calculateCompatibility: (source: ElementalProperties, target: ElementalProperties) => \n      intelligence.calculateElementalCompatibility(source, target),\n    enhanceDominantElement: (props: ElementalProperties) => \n      intelligence.enhanceDominantElement(props),\n    getArchitecturalGuidance: () => intelligence.getArchitecturalGuidance(),\n    getTechnologyStackGuidance: () => intelligence.getTechnologyStackGuidance()\n  };\n}"],"version":3}