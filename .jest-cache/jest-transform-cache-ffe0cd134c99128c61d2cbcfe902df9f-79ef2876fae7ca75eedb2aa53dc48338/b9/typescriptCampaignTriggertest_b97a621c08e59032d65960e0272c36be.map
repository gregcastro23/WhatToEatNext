{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/__tests__/typescriptCampaignTrigger.test.ts","mappings":";AAAA;;GAEG;;AAWH,qBAAqB;AACrB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE,CAAC,CAAC;IAChC,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;CACpB,CAAC,CAAC,CAAC;AAEJ,kBAAkB;AAClB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,CAAC;IAC5B,MAAM,EAAE;QACN,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;QACf,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;QACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;QAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;KACjB;CACF,CAAC,CAAC,CAAC;AAtBJ,4EAOsC;AAiBtC,iDAAyC;AAEzC,MAAM,YAAY,GAAG,wBAAgD,CAAC;AAEtE,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,8EAA8E,EAAE,KAAK,IAAI,EAAE;YAC5F,kEAAkE;YAClE,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACzD,WAAW,CAAC,kDAAkD,CAAC,IAAI,CACpE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,YAAY,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAE5C,MAAM,MAAM,GAAG,MAAM,IAAA,mDAAuB,GAAE,CAAC;YAE/C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,wCAAY,CAAC,QAAQ,CAAC,CAAC;YACxD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnD,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,uCAAW,CAAC,MAAM,CAAC,CAAC;YACpD,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;YACzE,gEAAgE;YAChE,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACzD,WAAW,CAAC,wEAAwE,CACrF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,YAAY,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAE5C,MAAM,MAAM,GAAG,MAAM,IAAA,mDAAuB,GAAE,CAAC;YAE/C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,wCAAY,CAAC,UAAU,CAAC,CAAC;YAC1D,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnD,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,uCAAW,CAAC,IAAI,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;YAC5E,oEAAoE;YACpE,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACzD,WAAW,CAAC,qGAAqG,CAClH,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,YAAY,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAE5C,MAAM,MAAM,GAAG,MAAM,IAAA,mDAAuB,GAAE,CAAC;YAE/C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,wCAAY,CAAC,SAAS,CAAC,CAAC;YACzD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnD,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,uCAAW,CAAC,OAAO,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,iEAAiE;YACjE,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACxD,WAAW,CAAC,kDAAkD,CAAC,IAAI,CACpE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,YAAY,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAE5C,MAAM,MAAM,GAAG,MAAM,IAAA,mDAAuB,GAAE,CAAC;YAE/C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,wCAAY,CAAC,UAAU,CAAC,CAAC;YAC1D,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,2CAA2C;YAC3C,YAAY,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAEjC,MAAM,MAAM,GAAG,MAAM,IAAA,mDAAuB,GAAE,CAAC;YAE/C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,wCAAY,CAAC,UAAU,CAAC,CAAC;YAC1D,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,aAAa,GAAG;gBACpB,qFAAqF;gBACrF,wEAAwE;gBACxE,mFAAmF;gBACnF,wFAAwF;gBACxF,mFAAmF;gBACnF,2DAA2D;aAC5D,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,YAAY,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAE5C,MAAM,MAAM,GAAG,MAAM,IAAA,mDAAuB,GAAE,CAAC;YAE/C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,yCAAa,CAAC,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACpF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,yCAAa,CAAC,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACpF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,yCAAa,CAAC,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACpF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,yCAAa,CAAC,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACpF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,yCAAa,CAAC,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACpF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,yCAAa,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,gDAAgD;YAChD,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACxD,2BAA2B,EAAE,GAAG,CAAC,4CAA4C,CAAC,IAAI,CACnF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,YAAY,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAE5C,MAAM,MAAM,GAAG,MAAM,IAAA,mDAAuB,GAAE,CAAC;YAE/C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACvE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;YACzF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACtE,wEAAwE;YACxE,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,gBAAgB,CAAQ,CAAC;YACjD,KAAK,CAAC,MAAM,GAAG,6DAA6D,CAAC;YAC7E,YAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACnC,MAAM,KAAK,CAAC;YACd,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,IAAA,mDAAuB,GAAE,CAAC;YAE/C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,6BAA6B;QACzE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,iDAAiD;YACjD,YAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACnC,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,IAAA,mDAAuB,GAAE,CAAC;YAE/C,8BAA8B;YAC9B,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,wCAAY,CAAC,UAAU,CAAC,CAAC;YAC1D,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,uCAAW,CAAC,OAAO,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACxD,WAAW,CAAC,kDAAkD,CAAC,IAAI,CACpE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,YAAY,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAE5C,MAAM,KAAK,GAAG,MAAM,IAAA,0DAA8B,GAAE,CAAC;YAErD,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,YAAY,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAEjC,MAAM,KAAK,GAAG,MAAM,IAAA,0DAA8B,GAAE,CAAC;YAErD,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,YAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACnC,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG,MAAM,IAAA,0DAA8B,GAAE,CAAC;YAErD,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACzD,WAAW,CAAC,kDAAkD,CAAC,IAAI,CACpE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,YAAY,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAE5C,MAAM,aAAa,GAAG,MAAM,IAAA,0DAA8B,GAAE,CAAC;YAE7D,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACxD,WAAW,CAAC,kDAAkD,CAAC,IAAI,CACpE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,YAAY,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAE5C,MAAM,aAAa,GAAG,MAAM,IAAA,0DAA8B,GAAE,CAAC;YAE7D,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC5C,YAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACnC,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,MAAM,IAAA,0DAA8B,GAAE,CAAC;YAE7D,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,aAAa,GAAG,uFAAuF,CAAC;YAE9G,YAAY,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAE5C,MAAM,MAAM,GAAG,MAAM,IAAA,mDAAuB,GAAE,CAAC;YAE/C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEjD,MAAM,KAAK,GAAG,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;YACvD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC5B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC9B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAClC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,yCAAa,CAAC,MAAM,CAAC,CAAC;YAClD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,aAAa,GAAG;gBACpB,2CAA2C;gBAC3C,6DAA6D;gBAC7D,kDAAkD;gBAClD,sDAAsD;aACvD,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,YAAY,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAE5C,MAAM,MAAM,GAAG,MAAM,IAAA,mDAAuB,GAAE,CAAC;YAE/C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,sEAAsE,EAAE,KAAK,IAAI,EAAE;YACpF,MAAM,aAAa,GAAG;gBACpB,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,4CAA4C,CAAC;gBACjG,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,6CAA6C,CAAC;gBAClG,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,2CAA2C,CAAC;aACjG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,YAAY,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAE5C,MAAM,MAAM,GAAG,MAAM,IAAA,mDAAuB,GAAE,CAAC;YAE/C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC/D,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAEnE,6DAA6D;YAC7D,MAAM,UAAU,GAAG,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YACtE,MAAM,CAAC,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,iCAAiC;QACxF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACzD,WAAW,CAAC,kDAAkD,CAAC,IAAI,CACpE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,YAAY,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAE5C,MAAM,MAAM,GAAG,MAAM,IAAA,mDAAuB,GAAE,CAAC;YAE/C,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,wCAAY,CAAC,SAAS,CAAC,CAAC;YACzD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACvE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACzD,WAAW,CAAC,kDAAkD,CAAC,IAAI,CACpE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,YAAY,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAE5C,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC7B,MAAM,MAAM,GAAG,MAAM,IAAA,mDAAuB,GAAE,CAAC;YAC/C,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAExC,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,mCAAmC;YACxE,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/__tests__/typescriptCampaignTrigger.test.ts"],"sourcesContent":["/**\n * Tests for TypeScript Campaign Trigger\n */\n\nimport { \n  analyzeTypeScriptErrors,\n  getCurrentTypeScriptErrorCount,\n  checkCampaignTriggerConditions,\n  CampaignMode,\n  ErrorCategory,\n  SafetyLevel\n} from '../typescriptCampaignTrigger';\n\n// Mock child_process\njest.mock('child_process', () => ({\n  execSync: jest.fn()\n}));\n\n// Mock the logger\njest.mock('../logger', () => ({\n  logger: {\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    debug: jest.fn()\n  }\n}));\n\nimport { execSync } from 'child_process';\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\n\ndescribe('TypeScript Campaign Trigger', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('analyzeTypeScriptErrors', () => {\n    it('should analyze errors and recommend standard campaign for medium error count', async () => {\n      // Mock TypeScript output with 150 errors (above medium threshold)\n      const mockTscOutput = Array.from({ length: 150 }, (_, i) => \n        `src/test${i}.ts(10,5): error TS2304: Cannot find name 'test${i}'.`\n      ).join('\\n');\n      \n      mockExecSync.mockReturnValue(mockTscOutput);\n\n      const result = await analyzeTypeScriptErrors();\n\n      expect(result.shouldTrigger).toBe(true);\n      expect(result.campaignMode).toBe(CampaignMode.STANDARD);\n      expect(result.errorAnalysis.totalErrors).toBe(150);\n      expect(result.safetyLevel).toBe(SafetyLevel.MEDIUM);\n      expect(result.recommendations.length).toBeGreaterThan(0);\n    });\n\n    it('should recommend aggressive campaign for high error count', async () => {\n      // Mock TypeScript output with 250 errors (above high threshold)\n      const mockTscOutput = Array.from({ length: 250 }, (_, i) => \n        `src/test${i}.ts(10,5): error TS2352: Conversion of type 'string' to type 'number'.`\n      ).join('\\n');\n      \n      mockExecSync.mockReturnValue(mockTscOutput);\n\n      const result = await analyzeTypeScriptErrors();\n\n      expect(result.shouldTrigger).toBe(true);\n      expect(result.campaignMode).toBe(CampaignMode.AGGRESSIVE);\n      expect(result.errorAnalysis.totalErrors).toBe(250);\n      expect(result.safetyLevel).toBe(SafetyLevel.HIGH);\n    });\n\n    it('should recommend emergency campaign for critical error count', async () => {\n      // Mock TypeScript output with 600 errors (above critical threshold)\n      const mockTscOutput = Array.from({ length: 600 }, (_, i) => \n        `src/test${i}.ts(10,5): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.`\n      ).join('\\n');\n      \n      mockExecSync.mockReturnValue(mockTscOutput);\n\n      const result = await analyzeTypeScriptErrors();\n\n      expect(result.shouldTrigger).toBe(true);\n      expect(result.campaignMode).toBe(CampaignMode.EMERGENCY);\n      expect(result.errorAnalysis.totalErrors).toBe(600);\n      expect(result.safetyLevel).toBe(SafetyLevel.MAXIMUM);\n    });\n\n    it('should not trigger campaign for low error count', async () => {\n      // Mock TypeScript output with 50 errors (below medium threshold)\n      const mockTscOutput = Array.from({ length: 50 }, (_, i) => \n        `src/test${i}.ts(10,5): error TS2304: Cannot find name 'test${i}'.`\n      ).join('\\n');\n      \n      mockExecSync.mockReturnValue(mockTscOutput);\n\n      const result = await analyzeTypeScriptErrors();\n\n      expect(result.shouldTrigger).toBe(false);\n      expect(result.campaignMode).toBe(CampaignMode.MONITORING);\n      expect(result.errorAnalysis.totalErrors).toBe(50);\n    });\n\n    it('should handle no errors gracefully', async () => {\n      // Mock empty TypeScript output (no errors)\n      mockExecSync.mockReturnValue('');\n\n      const result = await analyzeTypeScriptErrors();\n\n      expect(result.shouldTrigger).toBe(false);\n      expect(result.campaignMode).toBe(CampaignMode.MONITORING);\n      expect(result.errorAnalysis.totalErrors).toBe(0);\n      expect(result.recommendations.length).toBe(0);\n    });\n\n    it('should categorize different error types correctly', async () => {\n      const mockTscOutput = [\n        'src/test1.ts(10,5): error TS2352: Conversion of type \\'string\\' to type \\'number\\'.',\n        'src/test2.ts(15,10): error TS2304: Cannot find name \\'undefined_var\\'.',\n        'src/test3.ts(20,15): error TS2345: Argument of type \\'string\\' is not assignable.',\n        'src/test4.ts(25,20): error TS2698: Spread types may only be created from object types.',\n        'src/test5.ts(30,25): error TS2362: The left-hand side of an arithmetic operation.',\n        'src/test6.ts(35,30): error TS9999: Some other error type.'\n      ].join('\\n');\n      \n      mockExecSync.mockReturnValue(mockTscOutput);\n\n      const result = await analyzeTypeScriptErrors();\n\n      expect(result.errorAnalysis.totalErrors).toBe(6);\n      expect(result.errorAnalysis.errorsByCategory[ErrorCategory.TS2352]).toHaveLength(1);\n      expect(result.errorAnalysis.errorsByCategory[ErrorCategory.TS2304]).toHaveLength(1);\n      expect(result.errorAnalysis.errorsByCategory[ErrorCategory.TS2345]).toHaveLength(1);\n      expect(result.errorAnalysis.errorsByCategory[ErrorCategory.TS2698]).toHaveLength(1);\n      expect(result.errorAnalysis.errorsByCategory[ErrorCategory.TS2362]).toHaveLength(1);\n      expect(result.errorAnalysis.errorsByCategory[ErrorCategory.OTHER]).toHaveLength(1);\n    });\n\n    it('should identify high-impact files', async () => {\n      // Mock errors with multiple errors in same file\n      const mockTscOutput = Array.from({ length: 10 }, (_, i) => \n        `src/high-impact-file.ts(${10 + i},5): error TS2304: Cannot find name 'test${i}'.`\n      ).join('\\n');\n      \n      mockExecSync.mockReturnValue(mockTscOutput);\n\n      const result = await analyzeTypeScriptErrors();\n\n      expect(result.errorAnalysis.highImpactFiles.length).toBeGreaterThan(0);\n      expect(result.errorAnalysis.highImpactFiles[0].filePath).toBe('src/high-impact-file.ts');\n      expect(result.errorAnalysis.highImpactFiles[0].errorCount).toBe(10);\n    });\n\n    it('should handle TypeScript compilation errors gracefully', async () => {\n      // Mock execSync throwing an error (which is normal for tsc with errors)\n      const error = new Error('Command failed') as any;\n      error.stdout = 'src/test.ts(10,5): error TS2304: Cannot find name \\'test\\'.';\n      mockExecSync.mockImplementation(() => {\n        throw error;\n      });\n\n      const result = await analyzeTypeScriptErrors();\n\n      expect(result.errorAnalysis.totalErrors).toBe(1);\n      expect(result.shouldTrigger).toBe(false); // 1 error is below threshold\n    });\n\n    it('should handle complete TypeScript failure gracefully', async () => {\n      // Mock execSync throwing an error with no stdout\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Complete failure');\n      });\n\n      const result = await analyzeTypeScriptErrors();\n\n      // Should return safe defaults\n      expect(result.shouldTrigger).toBe(false);\n      expect(result.campaignMode).toBe(CampaignMode.MONITORING);\n      expect(result.errorAnalysis.totalErrors).toBe(-1);\n      expect(result.safetyLevel).toBe(SafetyLevel.MAXIMUM);\n    });\n  });\n\n  describe('getCurrentTypeScriptErrorCount', () => {\n    it('should return correct error count', async () => {\n      const mockTscOutput = Array.from({ length: 25 }, (_, i) => \n        `src/test${i}.ts(10,5): error TS2304: Cannot find name 'test${i}'.`\n      ).join('\\n');\n      \n      mockExecSync.mockReturnValue(mockTscOutput);\n\n      const count = await getCurrentTypeScriptErrorCount();\n\n      expect(count).toBe(25);\n    });\n\n    it('should return 0 for no errors', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const count = await getCurrentTypeScriptErrorCount();\n\n      expect(count).toBe(0);\n    });\n\n    it('should return -1 on failure', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Command failed');\n      });\n\n      const count = await getCurrentTypeScriptErrorCount();\n\n      expect(count).toBe(-1);\n    });\n  });\n\n  describe('checkCampaignTriggerConditions', () => {\n    it('should return true when error count exceeds threshold', async () => {\n      const mockTscOutput = Array.from({ length: 150 }, (_, i) => \n        `src/test${i}.ts(10,5): error TS2304: Cannot find name 'test${i}'.`\n      ).join('\\n');\n      \n      mockExecSync.mockReturnValue(mockTscOutput);\n\n      const shouldTrigger = await checkCampaignTriggerConditions();\n\n      expect(shouldTrigger).toBe(true);\n    });\n\n    it('should return false when error count is below threshold', async () => {\n      const mockTscOutput = Array.from({ length: 50 }, (_, i) => \n        `src/test${i}.ts(10,5): error TS2304: Cannot find name 'test${i}'.`\n      ).join('\\n');\n      \n      mockExecSync.mockReturnValue(mockTscOutput);\n\n      const shouldTrigger = await checkCampaignTriggerConditions();\n\n      expect(shouldTrigger).toBe(false);\n    });\n\n    it('should return false on error', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Command failed');\n      });\n\n      const shouldTrigger = await checkCampaignTriggerConditions();\n\n      expect(shouldTrigger).toBe(false);\n    });\n  });\n\n  describe('Error Parsing', () => {\n    it('should parse TypeScript error format correctly', async () => {\n      const mockTscOutput = 'src/components/test.tsx(45,12): error TS2304: Cannot find name \\'UndefinedVariable\\'.';\n      \n      mockExecSync.mockReturnValue(mockTscOutput);\n\n      const result = await analyzeTypeScriptErrors();\n\n      expect(result.errorAnalysis.totalErrors).toBe(1);\n      \n      const error = result.errorAnalysis.priorityRanking[0];\n      expect(error.filePath).toBe('src/components/test.tsx');\n      expect(error.line).toBe(45);\n      expect(error.column).toBe(12);\n      expect(error.code).toBe('TS2304');\n      expect(error.category).toBe(ErrorCategory.TS2304);\n      expect(error.message).toBe('Cannot find name \\'UndefinedVariable\\'.');\n    });\n\n    it('should ignore non-error lines', async () => {\n      const mockTscOutput = [\n        'Found 5 errors watching for file changes.',\n        'src/test.ts(10,5): error TS2304: Cannot find name \\'test\\'.',\n        'Compilation complete. Watching for file changes.',\n        'src/test2.ts(15,10): error TS2352: Conversion error.'\n      ].join('\\n');\n      \n      mockExecSync.mockReturnValue(mockTscOutput);\n\n      const result = await analyzeTypeScriptErrors();\n\n      expect(result.errorAnalysis.totalErrors).toBe(2);\n    });\n  });\n\n  describe('Batch Scheduling', () => {\n    it('should create appropriate batch sizes for different error categories', async () => {\n      const mockTscOutput = [\n        ...Array.from({ length: 50 }, (_, i) => `src/test${i}.ts(10,5): error TS2352: Conversion error.`),\n        ...Array.from({ length: 30 }, (_, i) => `src/test${i}.ts(15,10): error TS2304: Cannot find name.`),\n        ...Array.from({ length: 20 }, (_, i) => `src/test${i}.ts(20,15): error TS2345: Argument error.`)\n      ].join('\\n');\n      \n      mockExecSync.mockReturnValue(mockTscOutput);\n\n      const result = await analyzeTypeScriptErrors();\n\n      expect(result.batchSchedule.batches.length).toBeGreaterThan(0);\n      expect(result.batchSchedule.totalEstimatedTime).toBeGreaterThan(0);\n      \n      // Should have different batch sizes for different categories\n      const batchSizes = result.batchSchedule.batches.map(b => b.batchSize);\n      expect(new Set(batchSizes).size).toBeGreaterThan(1); // Multiple different batch sizes\n    });\n\n    it('should include safety protocols based on campaign mode', async () => {\n      const mockTscOutput = Array.from({ length: 600 }, (_, i) => \n        `src/test${i}.ts(10,5): error TS2304: Cannot find name 'test${i}'.`\n      ).join('\\n');\n      \n      mockExecSync.mockReturnValue(mockTscOutput);\n\n      const result = await analyzeTypeScriptErrors();\n\n      expect(result.campaignMode).toBe(CampaignMode.EMERGENCY);\n      expect(result.batchSchedule.safetyProtocols.length).toBeGreaterThan(0);\n      expect(result.batchSchedule.safetyProtocols[0].name).toContain('Emergency');\n    });\n  });\n\n  describe('Performance', () => {\n    it('should complete analysis within reasonable time', async () => {\n      const mockTscOutput = Array.from({ length: 100 }, (_, i) => \n        `src/test${i}.ts(10,5): error TS2304: Cannot find name 'test${i}'.`\n      ).join('\\n');\n      \n      mockExecSync.mockReturnValue(mockTscOutput);\n\n      const startTime = Date.now();\n      const result = await analyzeTypeScriptErrors();\n      const duration = Date.now() - startTime;\n\n      expect(duration).toBeLessThan(5000); // Should complete within 5 seconds\n      expect(result).toBeDefined();\n    });\n  });\n});"],"version":3}