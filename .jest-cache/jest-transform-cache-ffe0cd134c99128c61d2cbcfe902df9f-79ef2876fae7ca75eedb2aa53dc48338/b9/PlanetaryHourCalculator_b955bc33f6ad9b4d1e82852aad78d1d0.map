{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/lib/PlanetaryHourCalculator.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/lib/PlanetaryHourCalculator.ts"],"sourcesContent":["import { Planet } from '@/types/celestial';\nimport SunCalc from 'suncalc';\n\nexport class PlanetaryHourCalculator {\n    // Planetary hour configuration according to traditional planetary rulers\n    private static planetaryHours: Record<string, Planet[]> = {\n        Sunday:    ['Sun', 'Venus', 'Mercury', 'Moon', 'Saturn', 'Jupiter', 'Mars'],\n        Monday:    ['Moon', 'Saturn', 'Jupiter', 'Mars', 'Sun', 'Venus', 'Mercury'],\n        Tuesday:   ['Mars', 'Sun', 'Venus', 'Mercury', 'Moon', 'Saturn', 'Jupiter'],\n        Wednesday: ['Mercury', 'Moon', 'Saturn', 'Jupiter', 'Mars', 'Sun', 'Venus'],\n        Thursday:  ['Jupiter', 'Mars', 'Sun', 'Venus', 'Mercury', 'Moon', 'Saturn'],\n        Friday:    ['Venus', 'Mercury', 'Moon', 'Saturn', 'Jupiter', 'Mars', 'Sun'],\n        Saturday:  ['Saturn', 'Jupiter', 'Mars', 'Sun', 'Venus', 'Mercury', 'Moon']\n    };\n    \n    private static dayNames: string[] = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    \n    // Planetary rulers for each day of the week (0 = Sunday)\n    private static dayRulers: Planet[] = ['Sun', 'Moon', 'Mars', 'Mercury', 'Jupiter', 'Venus', 'Saturn'];\n    \n    // Minute rulers - each planet rules approximately 8.57 minutes in sequence\n    private static minuteRulers: Planet[] = ['Sun', 'Venus', 'Mercury', 'Moon', 'Saturn', 'Jupiter', 'Mars'];\n    \n    private readonly planetaryRulers = [\n        'Sun', 'Moon', 'Mars', 'Mercury', 'Jupiter', 'Venus', 'Saturn'\n    ];\n    \n    private coordinates = {\n        latitude: 40.7128, // Default to New York\n        longitude: -74.0060\n    };\n    \n    constructor(latitude?: number, longitude?: number) {\n        if (latitude !== undefined && longitude !== undefined) {\n            this.coordinates = { latitude, longitude };\n        }\n    }\n    \n    /**\n     * Set the location coordinates\n     */\n    public setCoordinates(latitude: number, longitude: number): void {\n        this.coordinates = { latitude, longitude };\n    }\n    \n    /**\n     * Calculate the current planetary day\n     * @returns The planet ruling the current day\n     */\n    getCurrentPlanetaryDay(): Planet {\n        return this.getPlanetaryDay(new Date());\n    }\n    \n    /**\n     * Calculate the planetary day for a given date\n     * @param date The date to calculate the planetary day for\n     * @returns The planet ruling that day\n     */\n    getPlanetaryDay(date: Date): Planet {\n        // Day of the week (0 = Sunday, 1 = Monday, etc.)\n        const dayOfWeek = date.getDay();\n        \n        // Return the planetary ruler for that day\n        return PlanetaryHourCalculator.dayRulers[dayOfWeek];\n    }\n    \n    /**\n     * Calculate the current planetary minute\n     * @returns The planet ruling the current minute\n     */\n    getCurrentPlanetaryMinute(): Planet {\n        return this.getPlanetaryMinute(new Date());\n    }\n    \n    /**\n     * Calculate the planetary minute for a given date\n     * @param date The date to calculate the planetary minute for\n     * @returns The planet ruling that minute\n     */\n    getPlanetaryMinute(date: Date): Planet {\n        // Day of the week (0 = Sunday, 1 = Monday, etc.)\n        const dayOfWeek = date.getDay();\n        \n        // Current hour and minute\n        const hour = date.getHours();\n        const minute = date.getMinutes();\n        \n        // Total minutes since the day began\n        const totalMinutesSinceDayBegan = hour * 60 + minute;\n        \n        // In traditional planetary hour systems, each planet rules for about 8.57 minutes \n        // (60 minutes / 7 planets) within each hour, and follows the same sequence as planetary hours\n        // We'll calculate the planet ruling the current minute based on this\n        \n        // First, determine which planetary sequence to use (based on day of week)\n        const planetarySequence = PlanetaryHourCalculator.planetaryHours[PlanetaryHourCalculator.dayNames[dayOfWeek]];\n        \n        // Calculate the hour ruler index (0-6) to determine start of sequence\n        const hourSinceDay = hour % 24;\n        const rulerSequenceStart = hourSinceDay % 7;\n        \n        // Calculate which 8.57-minute segment of the hour we're in (0-6)\n        const minuteWithinHour = minute % 60;\n        const minuteSegment = Math.floor(minuteWithinHour / (60 / 7));\n        \n        // The minute ruler is the hour ruler + minute segment, wrapping around if needed\n        const minuteRulerIndex = (rulerSequenceStart + minuteSegment) % 7;\n        \n        return planetarySequence[minuteRulerIndex];\n    }\n    \n    /**\n     * Calculate the current planetary hour\n     * @returns The planet ruling the current hour\n     */\n    getCurrentPlanetaryHour(): { planet: Planet, hourNumber: number, isDaytime: boolean } {\n        return this.getPlanetaryHour(new Date());\n    }\n    \n    /**\n     * Calculate the planetary hour for a given date\n     * @param date The date to calculate the planetary hour for\n     * @returns Object containing the planet ruling the hour, hour number and if it's daytime\n     */\n    getPlanetaryHour(date: Date): { planet: Planet, hourNumber: number, isDaytime: boolean } {\n        // Get sun times for the day\n        const times = SunCalc.getTimes(\n            new Date(date.getFullYear(), date.getMonth(), date.getDate()),\n            this.coordinates.latitude,\n            this.coordinates.longitude\n        );\n        \n        const sunrise = times.sunrise;\n        const sunset = times.sunset;\n        \n        if (!sunrise || !sunset) {\n            console.warn('Could not calculate sunrise or sunset times');\n            // Fallback to approximate calculation\n            return this.getFallbackPlanetaryHour(date);\n        }\n        \n        // Check if it's day or night\n        const isDaytime = date >= sunrise && date <= sunset;\n        \n        // Calculate length of day and night in milliseconds\n        const dayLength = sunset.getTime() - sunrise.getTime();\n        const nightLength = (sunrise.getTime() + 24 * 60 * 60 * 1000) - sunset.getTime();\n        \n        // Length of each hour (day and night hours have different lengths)\n        const hourLength = isDaytime ? dayLength / 12 : nightLength / 12;\n        \n        // Time since start of day/night period\n        const timeSinceStart = isDaytime\n            ? date.getTime() - sunrise.getTime()\n            : date.getTime() - sunset.getTime();\n        \n        // Calculate hour index (0-11)\n        let hourIndex = Math.floor(timeSinceStart / hourLength);\n        if (hourIndex < 0) hourIndex = 0;\n        if (hourIndex > 11) hourIndex = 11;\n        \n        // Determine day of week (0 = Sunday, 1 = Monday, etc.)\n        const dayOfWeek = date.getDay();\n        \n        // The first hour of the day is ruled by the planet that rules the day\n        // The day ruler is the first planet in the sequence starting from the \n        // planet that rules the day of the week\n        const dayRulerIndex = dayOfWeek % 7; // Match day of week to planetary rulers\n        \n        // Calculate the hour ruler\n        const hourRulerIndex = (dayRulerIndex + hourIndex) % 7;\n        const planetName = this.planetaryRulers[hourRulerIndex];\n        \n        return {\n            planet: PlanetaryHourCalculator.planetaryHours[PlanetaryHourCalculator.dayNames[dayOfWeek]][dayRulerIndex],\n            hourNumber: hourIndex,\n            isDaytime\n        };\n    }\n    \n    /**\n     * Determine if the current time is during daylight hours\n     * @param date The date to check\n     * @returns True if it's daytime (6am-6pm), false otherwise\n     */\n    isDaytime(date: Date): boolean {\n        const hour = date.getHours();\n        return hour >= 6 && hour < 18;\n    }\n    \n    /**\n     * Get all planetary hours for a specific day\n     * @param date The date to calculate hours for\n     * @returns Map of hour (0-23) to ruling planet\n     */\n    getDailyPlanetaryHours(date: Date): Map<number, Planet> {\n        const day = date.getDay();\n        const dayName = PlanetaryHourCalculator.dayNames[day];\n        const rulers = PlanetaryHourCalculator.planetaryHours[dayName];\n        const result = new Map<number, Planet>();\n        \n        // Calculate all 24 hours - 12 daytime hours and 12 nighttime hours\n        // Each planetary hour spans approximately 1.714 clock hours\n        \n        // Day hours (6am to 6pm)\n        for (let i = 0; i < 7; i++) {\n            const startHour = Math.floor(6 + (i * 1.714));\n            const endHour = Math.floor(6 + ((i + 1) * 1.714)) - 1;\n            \n            for (let hour = startHour; hour <= endHour; hour++) {\n                result.set(hour, rulers[i]);\n            }\n        }\n        \n        // Night hours (6pm to 6am)\n        for (let i = 0; i < 7; i++) {\n            const startHour = Math.floor(18 + (i * 1.714)) % 24;\n            const endHour = Math.floor(18 + ((i + 1) * 1.714)) % 24 - 1;\n            \n            if (endHour < startHour) {\n                // Handle hours that cross midnight\n                for (let hour = startHour; hour < 24; hour++) {\n                    result.set(hour, rulers[i]);\n                }\n                for (let hour = 0; hour <= endHour; hour++) {\n                    result.set(hour, rulers[i]);\n                }\n            } else {\n                for (let hour = startHour; hour <= endHour; hour++) {\n                    result.set(hour, rulers[i]);\n                }\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Calculate planetary hour using the traditional system\n     * This is the legacy method for compatibility\n     * @param date The date to calculate for\n     * @returns The ruling planet for that hour\n     */\n    calculatePlanetaryHour(date: Date): Planet {\n        return this.getPlanetaryHour(date).planet;\n    }\n    \n    // Fallback calculation in case SunCalc fails\n    private getFallbackPlanetaryHour(date: Date): { planet: Planet, hourNumber: number, isDaytime: boolean } {\n        const hour = date.getHours();\n        const dayOfWeek = date.getDay();\n        \n        // Approximate planetary hour based on 24-hour day divided into 12 day and 12 night hours\n        let hourIndex;\n        if (hour >= 6 && hour < 18) {\n            // Daytime hour\n            hourIndex = Math.floor((hour - 6) / 12 * 12);\n        } else {\n            // Nighttime hour\n            hourIndex = Math.floor(((hour < 6 ? hour + 24 : hour) - 18) / 12 * 12);\n        }\n        \n        const dayRulerIndex = dayOfWeek % 7;\n        const hourRulerIndex = (dayRulerIndex + hourIndex) % 7;\n        const planetName = this.planetaryRulers[hourRulerIndex];\n        \n        return {\n            planet: PlanetaryHourCalculator.planetaryHours[PlanetaryHourCalculator.dayNames[dayOfWeek]][dayRulerIndex],\n            hourNumber: hourIndex,\n            isDaytime: this.isDaytime(date)\n        };\n    }\n} "],"version":3}