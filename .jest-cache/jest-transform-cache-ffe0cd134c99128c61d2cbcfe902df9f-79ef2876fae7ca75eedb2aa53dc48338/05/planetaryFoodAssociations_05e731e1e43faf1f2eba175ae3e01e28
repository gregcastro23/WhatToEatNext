c75587f52d4fa8a33449a3e341e50963
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatelementalState = exports.getNutritionalSynergy = exports.getFlavorBoost = exports.getLunarPhaseBoost = exports.getZodiacBoost = exports.getDignityMultiplier = exports.calculatePlanetaryBoost = exports.planetaryFoodAssociations = void 0;
exports.planetaryFoodAssociations = {
    Sun: {
        name: 'Sun',
        elements: ['Fire'],
        qualities: ['Hot', 'Dry'],
        foodCategories: ['Fruits', 'Spices', 'Grains'],
        specificFoods: ['Oranges', 'Lemons', 'Honey', 'Saffron', 'Cinnamon', 'Wheat'],
        cuisines: ['Mediterranean', 'Indian', 'Middle Eastern'],
        elementalBoost: { 'Fire': 0.3, 'Air': 0.1 }
    },
    Moon: {
        name: 'Moon',
        elements: ['Water'],
        qualities: ['Cold', 'Moist'],
        foodCategories: ['Vegetables', 'Dairy', 'Seafood'],
        specificFoods: ['Cucumber', 'Lettuce', 'Milk', 'Yogurt', 'White fish', 'Rice'],
        cuisines: ['Japanese', 'Nordic', 'Coastal'],
        elementalBoost: { 'Water': 0.3, 'Earth': 0.1 }
    },
    Mercury: {
        name: 'Mercury',
        elements: ['Air', 'Earth'],
        qualities: ['Mixed', 'Adaptable'],
        foodCategories: ['Nuts', 'Seeds', 'Herbs'],
        specificFoods: ['Almonds', 'Fennel', 'Mint', 'Celery', 'Mixed greens'],
        cuisines: ['Fusion', 'Contemporary', 'Diverse'],
        elementalBoost: { 'Air': 0.2, 'Earth': 0.2 }
    },
    Venus: {
        name: 'Venus',
        elements: ['Earth', 'Water'],
        qualities: ['Cool', 'Moist'],
        foodCategories: ['Fruits', 'Sweets', 'Dairy'],
        specificFoods: ['Apples', 'Berries', 'Chocolate', 'Vanilla', 'Cream'],
        cuisines: ['French', 'Italian', 'Dessert-focused'],
        elementalBoost: { 'Earth': 0.2, 'Water': 0.2 }
    },
    Mars: {
        name: 'Mars',
        elements: ['Fire'],
        qualities: ['Hot', 'Dry'],
        foodCategories: ['Meats', 'Spices', 'Alcohol'],
        specificFoods: ['Red meat', 'Chili', 'Garlic', 'Onions', 'Red wine'],
        cuisines: ['Spicy', 'BBQ', 'Grilled'],
        elementalBoost: { 'Fire': 0.4 }
    },
    Jupiter: {
        name: 'Jupiter',
        elements: ['Fire', 'Air'],
        qualities: ['Warm', 'Moist'],
        foodCategories: ['Rich foods', 'Fruits', 'Meats'],
        specificFoods: ['Fig', 'Asparagus', 'Salmon', 'Sage', 'Nutmeg'],
        cuisines: ['Abundant', 'Festive', 'Celebratory'],
        elementalBoost: { 'Fire': 0.2, 'Air': 0.2 }
    },
    Saturn: {
        name: 'Saturn',
        elements: ['Earth'],
        qualities: ['Cold', 'Dry'],
        foodCategories: ['Root vegetables', 'Grains', 'Legumes'],
        specificFoods: ['Potatoes', 'Beets', 'Rye', 'Lentils', 'Black tea'],
        cuisines: ['Rustic', 'Traditional', 'Preserved'],
        elementalBoost: { 'Earth': 0.4 }
    },
    Uranus: {
        name: 'Uranus',
        elements: ['Air'],
        qualities: ['Cold', 'Dry'],
        foodCategories: ['Unusual foods', 'Novel ingredients'],
        specificFoods: ['Exotic fruits', 'Molecular gastronomy items', 'Fermented foods'],
        cuisines: ['Experimental', 'Avant-garde', 'Futuristic'],
        elementalBoost: { 'Air': 0.4 }
    },
    Neptune: {
        name: 'Neptune',
        elements: ['Water'],
        qualities: ['Cold', 'Moist'],
        foodCategories: ['Seafood', 'Alcohol', 'Elusive flavors'],
        specificFoods: ['Seaweed', 'White wine', 'Delicate fish', 'Coconut'],
        cuisines: ['Ethereal', 'Subtle', 'Inspired'],
        elementalBoost: { 'Water': 0.4 }
    },
    Pluto: {
        name: 'Pluto',
        elements: ['Water', 'Fire'],
        qualities: ['Transformative'],
        foodCategories: ['Fermented foods', 'Strong flavors', 'Transformed ingredients'],
        specificFoods: ['Dark chocolate', 'Coffee', 'Mushrooms', 'Aged cheese'],
        cuisines: ['Intense', 'Complex', 'Deep'],
        elementalBoost: { 'Water': 0.2, 'Fire': 0.2 }
    },
    Rahu: {
        name: 'Rahu',
        elements: ['Air', 'Fire'],
        qualities: ['Expansive', 'Chaotic'],
        foodCategories: ['Foreign foods', 'Unusual combinations', 'Addictive tastes'],
        specificFoods: ['Exotic spices', 'Foreign delicacies', 'Smoky flavors', 'Powerful stimulants'],
        cuisines: ['Fusion', 'Unexpected combinations', 'Foreign cuisines'],
        elementalBoost: { 'Air': 0.2, 'Fire': 0.2 }
    },
    Ketu: {
        name: 'Ketu',
        elements: ['Fire', 'Water'],
        qualities: ['Spiritual', 'Subtle'],
        foodCategories: ['Simple foods', 'Healing herbs', 'Purifying ingredients'],
        specificFoods: ['Healing teas', 'Cleansing herbs', 'Simple grains', 'Pure water'],
        cuisines: ['Ascetic', 'Monastic', 'Purifying'],
        elementalBoost: { 'Fire': 0.2, 'Water': 0.2 }
    }
};
/**
 * Calculate planetary boost for an ingredient based on current astrological state
 */
const calculatePlanetaryBoost = (item, // ElementalItem type
planetPositions, currentZodiac, lunarPhase) => {
    let boost = 0;
    const dominantPlanets = [];
    const dignities = {};
    // Planetary position calculations
    Object.entries(planetPositions).forEach(([_planet, _position]) => {
        const planetInfo = exports.planetaryFoodAssociations[_planet];
        if (!planetInfo)
            return;
        // Basic planetary boost
        const baseBoost = planetInfo.boostValue || 0.1;
        boost += baseBoost;
        // Add planet to dominant list if significant
        if (baseBoost > 0.2) {
            dominantPlanets.push(_planet);
            // Add dignity information for dominant planets
            dignities[_planet] = {
                type: 'Neutral',
                strength: baseBoost,
                favorableZodiacSigns: currentZodiac ? [currentZodiac] : [],
            };
        }
    });
    // Zodiac sign boost if available
    if (currentZodiac) {
        boost += (0, exports.getZodiacBoost)(currentZodiac, item);
    }
    // Lunar phase boost if available
    if (lunarPhase) {
        boost += (0, exports.getLunarPhaseBoost)(lunarPhase);
    }
    return {
        boost: parseFloat(boost.toFixed(2)),
        dominantPlanets: Array.from(new Set(dominantPlanets)),
        dignities
    };
};
exports.calculatePlanetaryBoost = calculatePlanetaryBoost;
// Helper functions for calculations
const getTriplicityRulers = (_zodiacSign) => {
    // Implementation depends on your zodiac mappings
    return ['Sun', 'Mars', 'Jupiter'];
};
const getSeasonalMultiplier = () => {
    // Implementation depends on your seasonal logic
    return 1.0;
};
/**
 * Get dignity multiplier for calculations
 */
const getDignityMultiplier = (dignity) => {
    const multipliers = {
        'Domicile': 1.5,
        'Exaltation': 1.3,
        'Triplicity': 1.2,
        'Term': 1.1,
        'Face': 1.05,
        'Mooltrikona': 1.4,
        'Nakshatra': 1.25,
        'Detriment': 0.7,
        'Fall': 0.5,
        'Neutral': 1.0
    };
    return multipliers[dignity] || 1.0;
};
exports.getDignityMultiplier = getDignityMultiplier;
/**
 * Get zodiac boost based on elemental properties
 */
const getZodiacBoost = (zodiacSign, item) => {
    // Get zodiac sign element
    const zodiacElements = {
        aries: 'Fire', leo: 'Fire', sagittarius: 'Fire',
        taurus: 'Earth', virgo: 'Earth', capricorn: 'Earth',
        gemini: 'Air', libra: 'Air', aquarius: 'Air',
        cancer: 'Water', scorpio: 'Water', pisces: 'Water'
    };
    // Normalize zodiac sign to lowercase for lookup
    const normalizedSign = zodiacSign.toLowerCase();
    const zodiacElement = zodiacElements[normalizedSign] || 'Fire';
    // Check if item has elemental properties
    const itemData = item;
    if (!itemData.elementalProperties) {
        return 0.1; // Minimum boost if no elemental data
    }
    // Calculate boost based on elemental affinity
    // Higher boost if the cuisine's dominant element matches the zodiac element
    const elementValue = itemData.elementalProperties[zodiacElement] || 0;
    const elementBoost = elementValue * 0.8; // Scale based on how strong the element is
    // Check if cuisine explicitly lists this zodiac sign as favorable
    const zodiacBoost = itemData.zodiacInfluences?.includes(normalizedSign) ? 0.3 : 0;
    // Apply modality boost based on cardinal/fixed/mutable qualities
    let modalityBoost = 0;
    const cardinalSigns = ['aries', 'cancer', 'libra', 'capricorn'];
    const fixedSigns = ['taurus', 'leo', 'scorpio', 'aquarius'];
    // If not cardinal or fixed, it's mutable (gemini, virgo, sagittarius, pisces)
    if (cardinalSigns.includes(normalizedSign)) {
        // Cardinal signs prefer bold, distinctive cuisines
        modalityBoost = (itemData.elementalProperties['Fire'] || 0) * 0.2;
    }
    else if (fixedSigns.includes(normalizedSign)) {
        // Fixed signs prefer substantial, traditional cuisines
        modalityBoost = (itemData.elementalProperties['Earth'] || 0) * 0.2;
    }
    else {
        // Mutable signs prefer adaptable, fusion cuisines
        modalityBoost = (itemData.elementalProperties['Air'] || 0) * 0.2;
    }
    // Calculate seasonal alignment (certain cuisines are better aligned with seasons)
    const seasonalBoost = calculateSeasonalAlignment(normalizedSign, item) * 0.15;
    // Combine all boost factors
    const totalBoost = elementBoost + zodiacBoost + modalityBoost + seasonalBoost;
    // Return normalized boost value (0-1 range)
    return Math.min(0.7, Math.max(0.1, totalBoost));
};
exports.getZodiacBoost = getZodiacBoost;
// Helper function to calculate seasonal alignment
const calculateSeasonalAlignment = (zodiacSign, item) => {
    // Map zodiac signs to seasons
    const seasonMap = {
        'aries': 'spring', 'taurus': 'spring', 'gemini': 'spring',
        'cancer': 'summer', 'leo': 'summer', 'virgo': 'summer',
        'libra': 'autumn', 'scorpio': 'autumn', 'sagittarius': 'autumn',
        'capricorn': 'winter', 'aquarius': 'winter', 'pisces': 'winter'
    };
    const season = seasonMap[zodiacSign];
    // Seasonal elemental correspondences
    const seasonalElements = {
        'spring': 'Air',
        'summer': 'Fire',
        'autumn': 'Earth',
        'winter': 'Water'
    };
    const seasonalElement = seasonalElements[season];
    // Calculate alignment based on the cuisine's elemental properties
    // Higher value if the cuisine aligns with the season's element
    const itemData = item;
    return itemData.elementalProperties?.[seasonalElement] || 0.1;
};
/**
 * Calculate boost based on lunar phase
 */
const getLunarPhaseBoost = (lunarPhase) => {
    // New calculation based on lunar phase energy patterns
    // Different lunar phases enhance different elemental and alchemical properties
    // Map lunar phases to elemental and alchemical influences
    const lunarInfluences = {
        'new moon': { element: 'Fire', alchemical: 'Spirit', intensity: 0.8 },
        'waxing crescent': { element: 'Fire', alchemical: 'Spirit', intensity: 0.7 },
        'first quarter': { element: 'Air', alchemical: 'Substance', intensity: 0.6 },
        'waxing gibbous': { element: 'Air', alchemical: 'Substance', intensity: 0.7 },
        'full moon': { element: 'Water', alchemical: 'Essence', intensity: 0.8 },
        'waning gibbous': { element: 'Water', alchemical: 'Essence', intensity: 0.7 },
        'last quarter': { element: 'Earth', alchemical: 'Matter', intensity: 0.6 },
        'waning crescent': { element: 'Earth', alchemical: 'Matter', intensity: 0.7 }
    };
    // Get lunar influence data or provide fallback
    const influence = lunarInfluences[lunarPhase] || {
        element: 'Water',
        alchemical: 'Essence',
        intensity: 0.5
    };
    // Calculate boost based on lunar phase intensity
    // This will vary between 0.15 and 0.4 depending on the phase
    return 0.15 + (influence.intensity * 0.25);
};
exports.getLunarPhaseBoost = getLunarPhaseBoost;
/**
 * Get flavor boost from planetary associations
 */
const getFlavorBoost = (_planet, _ingredient) => {
    const ingredientData = _ingredient;
    const elementBoost = exports.planetaryFoodAssociations[_planet].elementalBoost || {};
    return Object.entries(elementBoost).reduce((acc, [element, boost]) => {
        return acc + (ingredientData.elementalProperties?.[element] || 0) * (boost || 0);
    }, 0);
};
exports.getFlavorBoost = getFlavorBoost;
/**
 * Get nutritional synergy between ingredient and planet
 */
const getNutritionalSynergy = (_planet, _ingredient) => {
    // Implementation depends on your nutritional data
    return [];
};
exports.getNutritionalSynergy = getNutritionalSynergy;
/**
 * Format elemental balance for display
 */
const formatelementalState = (elements) => {
    const validEntries = Object.entries(elements)
        .filter(([_, val]) => Number.isFinite(val))
        .map(([elem, val]) => `${elem} ${Math.round((val || 0) * 100)}%`)
        .join(" · ");
    return validEntries;
};
exports.formatelementalState = formatelementalState;
exports.default = exports.planetaryFoodAssociations;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9jb25zdGFudHMvcGxhbmV0YXJ5Rm9vZEFzc29jaWF0aW9ucy50cyIsIm1hcHBpbmdzIjoiOzs7QUE2RGEsUUFBQSx5QkFBeUIsR0FBb0M7SUFDeEUsR0FBRyxFQUFFO1FBQ0gsSUFBSSxFQUFFLEtBQUs7UUFDWCxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFDbEIsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQztRQUN6QixjQUFjLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQztRQUM5QyxhQUFhLEVBQUUsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQztRQUM3RSxRQUFRLEVBQUUsQ0FBQyxlQUFlLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixDQUFDO1FBQ3ZELGNBQWMsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtLQUM1QztJQUNELElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxNQUFNO1FBQ1osUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDO1FBQ25CLFNBQVMsRUFBRSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUM7UUFDNUIsY0FBYyxFQUFFLENBQUMsWUFBWSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUM7UUFDbEQsYUFBYSxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLENBQUM7UUFDOUUsUUFBUSxFQUFFLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDM0MsY0FBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFO0tBQy9DO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsSUFBSSxFQUFFLFNBQVM7UUFDZixRQUFRLEVBQUUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDO1FBQzFCLFNBQVMsRUFBRSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUM7UUFDakMsY0FBYyxFQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUM7UUFDMUMsYUFBYSxFQUFFLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLGNBQWMsQ0FBQztRQUN0RSxRQUFRLEVBQUUsQ0FBQyxRQUFRLEVBQUUsY0FBYyxFQUFFLFNBQVMsQ0FBQztRQUMvQyxjQUFjLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUU7S0FDN0M7SUFDRCxLQUFLLEVBQUU7UUFDTCxJQUFJLEVBQUUsT0FBTztRQUNiLFFBQVEsRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUM7UUFDNUIsU0FBUyxFQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQztRQUM1QixjQUFjLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQztRQUM3QyxhQUFhLEVBQUUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDO1FBQ3JFLFFBQVEsRUFBRSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsaUJBQWlCLENBQUM7UUFDbEQsY0FBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFO0tBQy9DO0lBQ0QsSUFBSSxFQUFFO1FBQ0osSUFBSSxFQUFFLE1BQU07UUFDWixRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFDbEIsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQztRQUN6QixjQUFjLEVBQUUsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUM5QyxhQUFhLEVBQUUsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDO1FBQ3BFLFFBQVEsRUFBRSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDO1FBQ3JDLGNBQWMsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUU7S0FDaEM7SUFDRCxPQUFPLEVBQUU7UUFDUCxJQUFJLEVBQUUsU0FBUztRQUNmLFFBQVEsRUFBRSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUM7UUFDekIsU0FBUyxFQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQztRQUM1QixjQUFjLEVBQUUsQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQztRQUNqRCxhQUFhLEVBQUUsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDO1FBQy9ELFFBQVEsRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsYUFBYSxDQUFDO1FBQ2hELGNBQWMsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtLQUM1QztJQUNELE1BQU0sRUFBRTtRQUNOLElBQUksRUFBRSxRQUFRO1FBQ2QsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDO1FBQ25CLFNBQVMsRUFBRSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUM7UUFDMUIsY0FBYyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUN4RCxhQUFhLEVBQUUsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDO1FBQ25FLFFBQVEsRUFBRSxDQUFDLFFBQVEsRUFBRSxhQUFhLEVBQUUsV0FBVyxDQUFDO1FBQ2hELGNBQWMsRUFBRSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUU7S0FDakM7SUFDRCxNQUFNLEVBQUU7UUFDTixJQUFJLEVBQUUsUUFBUTtRQUNkLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNqQixTQUFTLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDO1FBQzFCLGNBQWMsRUFBRSxDQUFDLGVBQWUsRUFBRSxtQkFBbUIsQ0FBQztRQUN0RCxhQUFhLEVBQUUsQ0FBQyxlQUFlLEVBQUUsNEJBQTRCLEVBQUUsaUJBQWlCLENBQUM7UUFDakYsUUFBUSxFQUFFLENBQUMsY0FBYyxFQUFFLGFBQWEsRUFBRSxZQUFZLENBQUM7UUFDdkQsY0FBYyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtLQUMvQjtJQUNELE9BQU8sRUFBRTtRQUNQLElBQUksRUFBRSxTQUFTO1FBQ2YsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDO1FBQ25CLFNBQVMsRUFBRSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUM7UUFDNUIsY0FBYyxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQztRQUN6RCxhQUFhLEVBQUUsQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxTQUFTLENBQUM7UUFDcEUsUUFBUSxFQUFFLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUM7UUFDNUMsY0FBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRTtLQUNqQztJQUNELEtBQUssRUFBRTtRQUNMLElBQUksRUFBRSxPQUFPO1FBQ2IsUUFBUSxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQztRQUMzQixTQUFTLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUM3QixjQUFjLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSx5QkFBeUIsQ0FBQztRQUNoRixhQUFhLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLGFBQWEsQ0FBQztRQUN2RSxRQUFRLEVBQUUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQztRQUN4QyxjQUFjLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUU7S0FDOUM7SUFDRCxJQUFJLEVBQUU7UUFDSixJQUFJLEVBQUUsTUFBTTtRQUNaLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUM7UUFDekIsU0FBUyxFQUFFLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQztRQUNuQyxjQUFjLEVBQUUsQ0FBQyxlQUFlLEVBQUUsc0JBQXNCLEVBQUUsa0JBQWtCLENBQUM7UUFDN0UsYUFBYSxFQUFFLENBQUMsZUFBZSxFQUFFLG9CQUFvQixFQUFFLGVBQWUsRUFBRSxxQkFBcUIsQ0FBQztRQUM5RixRQUFRLEVBQUUsQ0FBQyxRQUFRLEVBQUUseUJBQXlCLEVBQUUsa0JBQWtCLENBQUM7UUFDbkUsY0FBYyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO0tBQzVDO0lBQ0QsSUFBSSxFQUFFO1FBQ0osSUFBSSxFQUFFLE1BQU07UUFDWixRQUFRLEVBQUUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDO1FBQzNCLFNBQVMsRUFBRSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUM7UUFDbEMsY0FBYyxFQUFFLENBQUMsY0FBYyxFQUFFLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQztRQUMxRSxhQUFhLEVBQUUsQ0FBQyxjQUFjLEVBQUUsaUJBQWlCLEVBQUUsZUFBZSxFQUFFLFlBQVksQ0FBQztRQUNqRixRQUFRLEVBQUUsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsQ0FBQztRQUM5QyxjQUFjLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUU7S0FDOUM7Q0FDRixDQUFDO0FBYUY7O0dBRUc7QUFDSSxNQUFNLHVCQUF1QixHQUFHLENBQ3JDLElBQWEsRUFBRSxxQkFBcUI7QUFDcEMsZUFBd0MsRUFDeEMsYUFBNkIsRUFDN0IsVUFBOEIsRUFDOUIsRUFBRTtJQUNGLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNkLE1BQU0sZUFBZSxHQUFhLEVBQUUsQ0FBQztJQUNyQyxNQUFNLFNBQVMsR0FBNEMsRUFBRSxDQUFDO0lBRTlELGtDQUFrQztJQUNsQyxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUU7UUFDL0QsTUFBTSxVQUFVLEdBQUcsaUNBQXlCLENBQUMsT0FBaUIsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxVQUFVO1lBQUUsT0FBTztRQUV4Qix3QkFBd0I7UUFDeEIsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLFVBQVUsSUFBSSxHQUFHLENBQUM7UUFDL0MsS0FBSyxJQUFJLFNBQVMsQ0FBQztRQUVuQiw2Q0FBNkM7UUFDN0MsSUFBSSxTQUFTLEdBQUcsR0FBRyxFQUFFO1lBQ25CLGVBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFOUIsK0NBQStDO1lBQy9DLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRztnQkFDbkIsSUFBSSxFQUFFLFNBQTZCO2dCQUNuQyxRQUFRLEVBQUUsU0FBUztnQkFDbkIsb0JBQW9CLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2FBQzNELENBQUM7U0FDSDtJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsaUNBQWlDO0lBQ2pDLElBQUksYUFBYSxFQUFFO1FBQ2pCLEtBQUssSUFBSSxJQUFBLHNCQUFjLEVBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzlDO0lBRUQsaUNBQWlDO0lBQ2pDLElBQUksVUFBVSxFQUFFO1FBQ2QsS0FBSyxJQUFJLElBQUEsMEJBQWtCLEVBQUMsVUFBVSxDQUFDLENBQUM7S0FDekM7SUFFRCxPQUFPO1FBQ0wsS0FBSyxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25DLGVBQWUsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3JELFNBQVM7S0FDVixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBL0NXLFFBQUEsdUJBQXVCLDJCQStDbEM7QUFFRixvQ0FBb0M7QUFDcEMsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLFdBQTJCLEVBQVksRUFBRTtJQUNwRSxpREFBaUQ7SUFDakQsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFhLENBQUM7QUFDaEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxxQkFBcUIsR0FBRyxHQUFXLEVBQUU7SUFDekMsZ0RBQWdEO0lBQ2hELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFDSSxNQUFNLG9CQUFvQixHQUFHLENBQUMsT0FBeUIsRUFBVSxFQUFFO0lBQ3hFLE1BQU0sV0FBVyxHQUFxQztRQUNwRCxVQUFVLEVBQUUsR0FBRztRQUNmLFlBQVksRUFBRSxHQUFHO1FBQ2pCLFlBQVksRUFBRSxHQUFHO1FBQ2pCLE1BQU0sRUFBRSxHQUFHO1FBQ1gsTUFBTSxFQUFFLElBQUk7UUFDWixhQUFhLEVBQUUsR0FBRztRQUNsQixXQUFXLEVBQUUsSUFBSTtRQUNqQixXQUFXLEVBQUUsR0FBRztRQUNoQixNQUFNLEVBQUUsR0FBRztRQUNYLFNBQVMsRUFBRSxHQUFHO0tBQ2YsQ0FBQztJQUNGLE9BQU8sV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQztBQUNyQyxDQUFDLENBQUM7QUFkVyxRQUFBLG9CQUFvQix3QkFjL0I7QUFFRjs7R0FFRztBQUNJLE1BQU0sY0FBYyxHQUFHLENBQUMsVUFBa0IsRUFBRSxJQUFhLEVBQVUsRUFBRTtJQUMxRSwwQkFBMEI7SUFDMUIsTUFBTSxjQUFjLEdBQXVDO1FBQ3pELEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTTtRQUMvQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU87UUFDbkQsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLO1FBQzVDLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTztLQUNuRCxDQUFDO0lBRUYsZ0RBQWdEO0lBQ2hELE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNoRCxNQUFNLGFBQWEsR0FBRyxjQUFjLENBQUMsY0FBYyxDQUFFLElBQUksTUFBTSxDQUFDO0lBRWhFLHlDQUF5QztJQUN6QyxNQUFNLFFBQVEsR0FBRyxJQUFXLENBQUM7SUFDN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRTtRQUNqQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLHFDQUFxQztLQUNsRDtJQUVELDhDQUE4QztJQUM5Qyw0RUFBNEU7SUFDNUUsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0RSxNQUFNLFlBQVksR0FBRyxZQUFZLEdBQUcsR0FBRyxDQUFDLENBQUMsMkNBQTJDO0lBRXBGLGtFQUFrRTtJQUNsRSxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVsRixpRUFBaUU7SUFDakUsSUFBSSxhQUFhLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLE1BQU0sYUFBYSxHQUFHLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDaEUsTUFBTSxVQUFVLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUM1RCw4RUFBOEU7SUFFOUUsSUFBSSxhQUFhLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1FBQzFDLG1EQUFtRDtRQUNuRCxhQUFhLEdBQUcsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQ25FO1NBQU0sSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1FBQzlDLHVEQUF1RDtRQUN2RCxhQUFhLEdBQUcsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQ3BFO1NBQU07UUFDTCxrREFBa0Q7UUFDbEQsYUFBYSxHQUFHLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztLQUNsRTtJQUVELGtGQUFrRjtJQUNsRixNQUFNLGFBQWEsR0FBRywwQkFBMEIsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBRTlFLDRCQUE0QjtJQUM1QixNQUFNLFVBQVUsR0FBRyxZQUFZLEdBQUcsV0FBVyxHQUFHLGFBQWEsR0FBRyxhQUFhLENBQUM7SUFFOUUsNENBQTRDO0lBQzVDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUNsRCxDQUFDLENBQUM7QUFwRFcsUUFBQSxjQUFjLGtCQW9EekI7QUFFRixrREFBa0Q7QUFDbEQsTUFBTSwwQkFBMEIsR0FBRyxDQUFDLFVBQWtCLEVBQUUsSUFBYSxFQUFVLEVBQUU7SUFDL0UsOEJBQThCO0lBQzlCLE1BQU0sU0FBUyxHQUEyQjtRQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVE7UUFDekQsUUFBUSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRO1FBQ3RELE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsUUFBUTtRQUMvRCxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVE7S0FDaEUsQ0FBQztJQUVGLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVyQyxxQ0FBcUM7SUFDckMsTUFBTSxnQkFBZ0IsR0FBdUM7UUFDM0QsUUFBUSxFQUFFLEtBQUs7UUFDZixRQUFRLEVBQUUsTUFBTTtRQUNoQixRQUFRLEVBQUUsT0FBTztRQUNqQixRQUFRLEVBQUUsT0FBTztLQUNsQixDQUFDO0lBRUYsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFakQsa0VBQWtFO0lBQ2xFLCtEQUErRDtJQUMvRCxNQUFNLFFBQVEsR0FBRyxJQUFXLENBQUM7SUFDN0IsT0FBTyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxHQUFHLENBQUM7QUFDaEUsQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFDSSxNQUFNLGtCQUFrQixHQUFHLENBQUMsVUFBc0IsRUFBVSxFQUFFO0lBQ25FLHVEQUF1RDtJQUN2RCwrRUFBK0U7SUFFL0UsMERBQTBEO0lBQzFELE1BQU0sZUFBZSxHQUloQjtRQUNILFVBQVUsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFO1FBQ3JFLGlCQUFpQixFQUFFLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUU7UUFDNUUsZUFBZSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUU7UUFDNUUsZ0JBQWdCLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRTtRQUM3RSxXQUFXLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRTtRQUN4RSxnQkFBZ0IsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFO1FBQzdFLGNBQWMsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFO1FBQzFFLGlCQUFpQixFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUU7S0FDOUUsQ0FBQztJQUVGLCtDQUErQztJQUMvQyxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUMsVUFBVSxDQUFDLElBQUk7UUFDL0MsT0FBTyxFQUFFLE9BQU87UUFDaEIsVUFBVSxFQUFFLFNBQVM7UUFDckIsU0FBUyxFQUFFLEdBQUc7S0FDZixDQUFDO0lBRUYsaURBQWlEO0lBQ2pELDZEQUE2RDtJQUM3RCxPQUFPLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDN0MsQ0FBQyxDQUFDO0FBOUJXLFFBQUEsa0JBQWtCLHNCQThCN0I7QUFFRjs7R0FFRztBQUNJLE1BQU0sY0FBYyxHQUFHLENBQzVCLE9BQWUsRUFDZixXQUFvQixFQUNaLEVBQUU7SUFDVixNQUFNLGNBQWMsR0FBRyxXQUFrQixDQUFDO0lBQzFDLE1BQU0sWUFBWSxHQUFHLGlDQUF5QixDQUFDLE9BQU8sQ0FBQyxDQUFDLGNBQWMsSUFBSSxFQUFFLENBQUM7SUFDN0UsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFO1FBQ25FLE9BQU8sR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLG1CQUFtQixFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUssQ0FBQyxDQUFDLENBQUM7SUFDcEYsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxDQUFDO0FBVFcsUUFBQSxjQUFjLGtCQVN6QjtBQUVGOztHQUVHO0FBQ0ksTUFBTSxxQkFBcUIsR0FBRyxDQUNuQyxPQUFlLEVBQ2YsV0FBb0IsRUFDVixFQUFFO0lBQ1osa0RBQWtEO0lBQ2xELE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQyxDQUFDO0FBTlcsUUFBQSxxQkFBcUIseUJBTWhDO0FBRUY7O0dBRUc7QUFDSSxNQUFNLG9CQUFvQixHQUFHLENBQ2xDLFFBQXlDLEVBQ2pDLEVBQUU7SUFDVixNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztTQUMxQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO1NBQ2hFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVmLE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUMsQ0FBQztBQVRXLFFBQUEsb0JBQW9CLHdCQVMvQjtBQUVGLGtCQUFlLGlDQUF5QixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9HcmVnQ2FzdHJvL0Rlc2t0b3AvV2hhdFRvRWF0TmV4dC9zcmMvY29uc3RhbnRzL3BsYW5ldGFyeUZvb2RBc3NvY2lhdGlvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTHVuYXJQaGFzZVdpdGhTcGFjZXMgfSBmcm9tICcuLi90eXBlcy9hbGNoZW15JztcblxuaW1wb3J0IHsgRWxlbWVudGFsQ2hhcmFjdGVyIH0gZnJvbSAnLi9wbGFuZXRhcnlFbGVtZW50cyc7XG5pbXBvcnQgeyBab2RpYWNTaWduIH0gZnJvbSAnLi96b2RpYWMnO1xuXG4vKipcbiAqIEVuaGFuY2VkIHBsYW5ldCB0eXBlIGluY29ycG9yYXRpbmcgbXVsdGlwbGUgYXN0cm9sb2dpY2FsIHRyYWRpdGlvbnNcbiAqL1xuLyoqXG4gKiBFeHRlbmRlZCBQbGFuZXQgdHlwZSBmb3IgcGxhbmV0YXJ5IGZvb2QgYXNzb2NpYXRpb25zXG4gKi9cbmV4cG9ydCB0eXBlIFBsYW5ldCA9IFxuICB8ICdTdW4nIHwgJ01vb24nIHwgJ01lcmN1cnknIHwgJ1ZlbnVzJyB8ICdNYXJzJyBcbiAgfCAnSnVwaXRlcicgfCAnU2F0dXJuJyB8ICdVcmFudXMnIHwgJ05lcHR1bmUnIHwgJ1BsdXRvJ1xuICB8ICdSYWh1JyB8ICdLZXR1JztcblxuLyoqXG4gKiBQbGFuZXRhcnkgZGlnbml0eSB0eXBlcyBmb3IgY2FsY3VsYXRpb25cbiAqL1xuZXhwb3J0IHR5cGUgUGxhbmV0YXJ5RGlnbml0eSA9IFxuICB8ICdEb21pY2lsZSdcbiAgfCAnRXhhbHRhdGlvbidcbiAgfCAnVHJpcGxpY2l0eSdcbiAgfCAnVGVybSdcbiAgfCAnRmFjZSdcbiAgfCAnTW9vbHRyaWtvbmEnXG4gIHwgJ05ha3NoYXRyYSdcbiAgfCAnRGV0cmltZW50J1xuICB8ICdGYWxsJ1xuICB8ICdOZXV0cmFsJztcblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIHBsYW5ldGFyeSBkaWduaXR5IGRldGFpbHNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQbGFuZXRhcnlEaWduaXR5RGV0YWlscyB7XG4gIHR5cGU6IFBsYW5ldGFyeURpZ25pdHk7XG4gIHN0cmVuZ3RoOiBudW1iZXI7XG4gIGZhdm9yYWJsZVpvZGlhY1NpZ25zPzogc3RyaW5nW107XG4gIHVuZmF2b3JhYmxlWm9kaWFjU2lnbnM/OiBzdHJpbmdbXTtcbn1cblxuLyoqXG4gKiBMdW5hciBwaGFzZSBzeXN0ZW1cbiAqL1xuZXhwb3J0IHR5cGUgTHVuYXJQaGFzZSA9IEx1bmFyUGhhc2VXaXRoU3BhY2VzO1xuXG4vKipcbiAqIFBsYW5ldGFyeSBmb29kIGFzc29jaWF0aW9ucyBzdHJ1Y3R1cmVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBGb29kQXNzb2NpYXRpb24ge1xuICBuYW1lOiBzdHJpbmc7XG4gIGVsZW1lbnRzOiBzdHJpbmdbXTtcbiAgcXVhbGl0aWVzOiBzdHJpbmdbXTtcbiAgZm9vZENhdGVnb3JpZXM6IHN0cmluZ1tdO1xuICBzcGVjaWZpY0Zvb2RzOiBzdHJpbmdbXTtcbiAgY3Vpc2luZXM6IHN0cmluZ1tdO1xuICBjb29raW5nTWV0aG9kcz86IHN0cmluZ1tdO1xuICBib29zdFZhbHVlPzogbnVtYmVyO1xuICBlbGVtZW50YWxCb29zdD86IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XG59XG5cbmV4cG9ydCBjb25zdCBwbGFuZXRhcnlGb29kQXNzb2NpYXRpb25zOiBSZWNvcmQ8UGxhbmV0LCBGb29kQXNzb2NpYXRpb24+ID0ge1xuICBTdW46IHtcbiAgICBuYW1lOiAnU3VuJyxcbiAgICBlbGVtZW50czogWydGaXJlJ10sXG4gICAgcXVhbGl0aWVzOiBbJ0hvdCcsICdEcnknXSxcbiAgICBmb29kQ2F0ZWdvcmllczogWydGcnVpdHMnLCAnU3BpY2VzJywgJ0dyYWlucyddLFxuICAgIHNwZWNpZmljRm9vZHM6IFsnT3JhbmdlcycsICdMZW1vbnMnLCAnSG9uZXknLCAnU2FmZnJvbicsICdDaW5uYW1vbicsICdXaGVhdCddLFxuICAgIGN1aXNpbmVzOiBbJ01lZGl0ZXJyYW5lYW4nLCAnSW5kaWFuJywgJ01pZGRsZSBFYXN0ZXJuJ10sXG4gICAgZWxlbWVudGFsQm9vc3Q6IHsgJ0ZpcmUnOiAwLjMsICdBaXInOiAwLjEgfVxuICB9LFxuICBNb29uOiB7XG4gICAgbmFtZTogJ01vb24nLFxuICAgIGVsZW1lbnRzOiBbJ1dhdGVyJ10sXG4gICAgcXVhbGl0aWVzOiBbJ0NvbGQnLCAnTW9pc3QnXSxcbiAgICBmb29kQ2F0ZWdvcmllczogWydWZWdldGFibGVzJywgJ0RhaXJ5JywgJ1NlYWZvb2QnXSxcbiAgICBzcGVjaWZpY0Zvb2RzOiBbJ0N1Y3VtYmVyJywgJ0xldHR1Y2UnLCAnTWlsaycsICdZb2d1cnQnLCAnV2hpdGUgZmlzaCcsICdSaWNlJ10sXG4gICAgY3Vpc2luZXM6IFsnSmFwYW5lc2UnLCAnTm9yZGljJywgJ0NvYXN0YWwnXSxcbiAgICBlbGVtZW50YWxCb29zdDogeyAnV2F0ZXInOiAwLjMsICdFYXJ0aCc6IDAuMSB9XG4gIH0sXG4gIE1lcmN1cnk6IHtcbiAgICBuYW1lOiAnTWVyY3VyeScsXG4gICAgZWxlbWVudHM6IFsnQWlyJywgJ0VhcnRoJ10sXG4gICAgcXVhbGl0aWVzOiBbJ01peGVkJywgJ0FkYXB0YWJsZSddLFxuICAgIGZvb2RDYXRlZ29yaWVzOiBbJ051dHMnLCAnU2VlZHMnLCAnSGVyYnMnXSxcbiAgICBzcGVjaWZpY0Zvb2RzOiBbJ0FsbW9uZHMnLCAnRmVubmVsJywgJ01pbnQnLCAnQ2VsZXJ5JywgJ01peGVkIGdyZWVucyddLFxuICAgIGN1aXNpbmVzOiBbJ0Z1c2lvbicsICdDb250ZW1wb3JhcnknLCAnRGl2ZXJzZSddLFxuICAgIGVsZW1lbnRhbEJvb3N0OiB7ICdBaXInOiAwLjIsICdFYXJ0aCc6IDAuMiB9XG4gIH0sXG4gIFZlbnVzOiB7XG4gICAgbmFtZTogJ1ZlbnVzJyxcbiAgICBlbGVtZW50czogWydFYXJ0aCcsICdXYXRlciddLFxuICAgIHF1YWxpdGllczogWydDb29sJywgJ01vaXN0J10sXG4gICAgZm9vZENhdGVnb3JpZXM6IFsnRnJ1aXRzJywgJ1N3ZWV0cycsICdEYWlyeSddLFxuICAgIHNwZWNpZmljRm9vZHM6IFsnQXBwbGVzJywgJ0JlcnJpZXMnLCAnQ2hvY29sYXRlJywgJ1ZhbmlsbGEnLCAnQ3JlYW0nXSxcbiAgICBjdWlzaW5lczogWydGcmVuY2gnLCAnSXRhbGlhbicsICdEZXNzZXJ0LWZvY3VzZWQnXSxcbiAgICBlbGVtZW50YWxCb29zdDogeyAnRWFydGgnOiAwLjIsICdXYXRlcic6IDAuMiB9XG4gIH0sXG4gIE1hcnM6IHtcbiAgICBuYW1lOiAnTWFycycsXG4gICAgZWxlbWVudHM6IFsnRmlyZSddLFxuICAgIHF1YWxpdGllczogWydIb3QnLCAnRHJ5J10sXG4gICAgZm9vZENhdGVnb3JpZXM6IFsnTWVhdHMnLCAnU3BpY2VzJywgJ0FsY29ob2wnXSxcbiAgICBzcGVjaWZpY0Zvb2RzOiBbJ1JlZCBtZWF0JywgJ0NoaWxpJywgJ0dhcmxpYycsICdPbmlvbnMnLCAnUmVkIHdpbmUnXSxcbiAgICBjdWlzaW5lczogWydTcGljeScsICdCQlEnLCAnR3JpbGxlZCddLFxuICAgIGVsZW1lbnRhbEJvb3N0OiB7ICdGaXJlJzogMC40IH1cbiAgfSxcbiAgSnVwaXRlcjoge1xuICAgIG5hbWU6ICdKdXBpdGVyJyxcbiAgICBlbGVtZW50czogWydGaXJlJywgJ0FpciddLFxuICAgIHF1YWxpdGllczogWydXYXJtJywgJ01vaXN0J10sXG4gICAgZm9vZENhdGVnb3JpZXM6IFsnUmljaCBmb29kcycsICdGcnVpdHMnLCAnTWVhdHMnXSxcbiAgICBzcGVjaWZpY0Zvb2RzOiBbJ0ZpZycsICdBc3BhcmFndXMnLCAnU2FsbW9uJywgJ1NhZ2UnLCAnTnV0bWVnJ10sXG4gICAgY3Vpc2luZXM6IFsnQWJ1bmRhbnQnLCAnRmVzdGl2ZScsICdDZWxlYnJhdG9yeSddLFxuICAgIGVsZW1lbnRhbEJvb3N0OiB7ICdGaXJlJzogMC4yLCAnQWlyJzogMC4yIH1cbiAgfSxcbiAgU2F0dXJuOiB7XG4gICAgbmFtZTogJ1NhdHVybicsXG4gICAgZWxlbWVudHM6IFsnRWFydGgnXSxcbiAgICBxdWFsaXRpZXM6IFsnQ29sZCcsICdEcnknXSxcbiAgICBmb29kQ2F0ZWdvcmllczogWydSb290IHZlZ2V0YWJsZXMnLCAnR3JhaW5zJywgJ0xlZ3VtZXMnXSxcbiAgICBzcGVjaWZpY0Zvb2RzOiBbJ1BvdGF0b2VzJywgJ0JlZXRzJywgJ1J5ZScsICdMZW50aWxzJywgJ0JsYWNrIHRlYSddLFxuICAgIGN1aXNpbmVzOiBbJ1J1c3RpYycsICdUcmFkaXRpb25hbCcsICdQcmVzZXJ2ZWQnXSxcbiAgICBlbGVtZW50YWxCb29zdDogeyAnRWFydGgnOiAwLjQgfVxuICB9LFxuICBVcmFudXM6IHtcbiAgICBuYW1lOiAnVXJhbnVzJyxcbiAgICBlbGVtZW50czogWydBaXInXSxcbiAgICBxdWFsaXRpZXM6IFsnQ29sZCcsICdEcnknXSxcbiAgICBmb29kQ2F0ZWdvcmllczogWydVbnVzdWFsIGZvb2RzJywgJ05vdmVsIGluZ3JlZGllbnRzJ10sXG4gICAgc3BlY2lmaWNGb29kczogWydFeG90aWMgZnJ1aXRzJywgJ01vbGVjdWxhciBnYXN0cm9ub215IGl0ZW1zJywgJ0Zlcm1lbnRlZCBmb29kcyddLFxuICAgIGN1aXNpbmVzOiBbJ0V4cGVyaW1lbnRhbCcsICdBdmFudC1nYXJkZScsICdGdXR1cmlzdGljJ10sXG4gICAgZWxlbWVudGFsQm9vc3Q6IHsgJ0Fpcic6IDAuNCB9XG4gIH0sXG4gIE5lcHR1bmU6IHtcbiAgICBuYW1lOiAnTmVwdHVuZScsXG4gICAgZWxlbWVudHM6IFsnV2F0ZXInXSxcbiAgICBxdWFsaXRpZXM6IFsnQ29sZCcsICdNb2lzdCddLFxuICAgIGZvb2RDYXRlZ29yaWVzOiBbJ1NlYWZvb2QnLCAnQWxjb2hvbCcsICdFbHVzaXZlIGZsYXZvcnMnXSxcbiAgICBzcGVjaWZpY0Zvb2RzOiBbJ1NlYXdlZWQnLCAnV2hpdGUgd2luZScsICdEZWxpY2F0ZSBmaXNoJywgJ0NvY29udXQnXSxcbiAgICBjdWlzaW5lczogWydFdGhlcmVhbCcsICdTdWJ0bGUnLCAnSW5zcGlyZWQnXSxcbiAgICBlbGVtZW50YWxCb29zdDogeyAnV2F0ZXInOiAwLjQgfVxuICB9LFxuICBQbHV0bzoge1xuICAgIG5hbWU6ICdQbHV0bycsXG4gICAgZWxlbWVudHM6IFsnV2F0ZXInLCAnRmlyZSddLFxuICAgIHF1YWxpdGllczogWydUcmFuc2Zvcm1hdGl2ZSddLFxuICAgIGZvb2RDYXRlZ29yaWVzOiBbJ0Zlcm1lbnRlZCBmb29kcycsICdTdHJvbmcgZmxhdm9ycycsICdUcmFuc2Zvcm1lZCBpbmdyZWRpZW50cyddLFxuICAgIHNwZWNpZmljRm9vZHM6IFsnRGFyayBjaG9jb2xhdGUnLCAnQ29mZmVlJywgJ011c2hyb29tcycsICdBZ2VkIGNoZWVzZSddLFxuICAgIGN1aXNpbmVzOiBbJ0ludGVuc2UnLCAnQ29tcGxleCcsICdEZWVwJ10sXG4gICAgZWxlbWVudGFsQm9vc3Q6IHsgJ1dhdGVyJzogMC4yLCAnRmlyZSc6IDAuMiB9XG4gIH0sXG4gIFJhaHU6IHtcbiAgICBuYW1lOiAnUmFodScsXG4gICAgZWxlbWVudHM6IFsnQWlyJywgJ0ZpcmUnXSxcbiAgICBxdWFsaXRpZXM6IFsnRXhwYW5zaXZlJywgJ0NoYW90aWMnXSxcbiAgICBmb29kQ2F0ZWdvcmllczogWydGb3JlaWduIGZvb2RzJywgJ1VudXN1YWwgY29tYmluYXRpb25zJywgJ0FkZGljdGl2ZSB0YXN0ZXMnXSxcbiAgICBzcGVjaWZpY0Zvb2RzOiBbJ0V4b3RpYyBzcGljZXMnLCAnRm9yZWlnbiBkZWxpY2FjaWVzJywgJ1Ntb2t5IGZsYXZvcnMnLCAnUG93ZXJmdWwgc3RpbXVsYW50cyddLFxuICAgIGN1aXNpbmVzOiBbJ0Z1c2lvbicsICdVbmV4cGVjdGVkIGNvbWJpbmF0aW9ucycsICdGb3JlaWduIGN1aXNpbmVzJ10sXG4gICAgZWxlbWVudGFsQm9vc3Q6IHsgJ0Fpcic6IDAuMiwgJ0ZpcmUnOiAwLjIgfVxuICB9LFxuICBLZXR1OiB7XG4gICAgbmFtZTogJ0tldHUnLFxuICAgIGVsZW1lbnRzOiBbJ0ZpcmUnLCAnV2F0ZXInXSxcbiAgICBxdWFsaXRpZXM6IFsnU3Bpcml0dWFsJywgJ1N1YnRsZSddLFxuICAgIGZvb2RDYXRlZ29yaWVzOiBbJ1NpbXBsZSBmb29kcycsICdIZWFsaW5nIGhlcmJzJywgJ1B1cmlmeWluZyBpbmdyZWRpZW50cyddLFxuICAgIHNwZWNpZmljRm9vZHM6IFsnSGVhbGluZyB0ZWFzJywgJ0NsZWFuc2luZyBoZXJicycsICdTaW1wbGUgZ3JhaW5zJywgJ1B1cmUgd2F0ZXInXSxcbiAgICBjdWlzaW5lczogWydBc2NldGljJywgJ01vbmFzdGljJywgJ1B1cmlmeWluZyddLFxuICAgIGVsZW1lbnRhbEJvb3N0OiB7ICdGaXJlJzogMC4yLCAnV2F0ZXInOiAwLjIgfVxuICB9XG59O1xuXG4vKipcbiAqIFBsYW5ldGFyeSBjb29raW5nIGd1aWRlIGludGVyZmFjZSBmb3IgcmVjb21tZW5kYXRpb24gYWxnb3JpdGhtXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGxhbmV0YXJ5Q29va2luZ0d1aWRlIHtcbiAgb3B0aW1hbENvb2tpbmdUZW1wOiBzdHJpbmc7XG4gIGZsYXZvclBhaXJpbmdzOiBzdHJpbmdbXTtcbiAgbnV0cmllbnRGb2N1czogc3RyaW5nW107XG4gIHByZXNlcnZhdGlvbk1ldGhvZHM6IHN0cmluZ1tdO1xuICB0cmFkaXRpb25hbFJlY2lwZXM6IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSBwbGFuZXRhcnkgYm9vc3QgZm9yIGFuIGluZ3JlZGllbnQgYmFzZWQgb24gY3VycmVudCBhc3Ryb2xvZ2ljYWwgc3RhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZVBsYW5ldGFyeUJvb3N0ID0gKFxuICBpdGVtOiB1bmtub3duLCAvLyBFbGVtZW50YWxJdGVtIHR5cGVcbiAgcGxhbmV0UG9zaXRpb25zOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgY3VycmVudFpvZGlhYz86IHN0cmluZyB8IG51bGwsXG4gIGx1bmFyUGhhc2U/OiBMdW5hclBoYXNlIHwgbnVsbFxuKSA9PiB7XG4gIGxldCBib29zdCA9IDA7XG4gIGNvbnN0IGRvbWluYW50UGxhbmV0czogc3RyaW5nW10gPSBbXTtcbiAgY29uc3QgZGlnbml0aWVzOiBSZWNvcmQ8c3RyaW5nLCBQbGFuZXRhcnlEaWduaXR5RGV0YWlscz4gPSB7fTtcblxuICAvLyBQbGFuZXRhcnkgcG9zaXRpb24gY2FsY3VsYXRpb25zXG4gIE9iamVjdC5lbnRyaWVzKHBsYW5ldFBvc2l0aW9ucykuZm9yRWFjaCgoW19wbGFuZXQsIF9wb3NpdGlvbl0pID0+IHtcbiAgICBjb25zdCBwbGFuZXRJbmZvID0gcGxhbmV0YXJ5Rm9vZEFzc29jaWF0aW9uc1tfcGxhbmV0IGFzIFBsYW5ldF07XG4gICAgaWYgKCFwbGFuZXRJbmZvKSByZXR1cm47XG5cbiAgICAvLyBCYXNpYyBwbGFuZXRhcnkgYm9vc3RcbiAgICBjb25zdCBiYXNlQm9vc3QgPSBwbGFuZXRJbmZvLmJvb3N0VmFsdWUgfHwgMC4xO1xuICAgIGJvb3N0ICs9IGJhc2VCb29zdDtcblxuICAgIC8vIEFkZCBwbGFuZXQgdG8gZG9taW5hbnQgbGlzdCBpZiBzaWduaWZpY2FudFxuICAgIGlmIChiYXNlQm9vc3QgPiAwLjIpIHtcbiAgICAgIGRvbWluYW50UGxhbmV0cy5wdXNoKF9wbGFuZXQpO1xuICAgICAgXG4gICAgICAvLyBBZGQgZGlnbml0eSBpbmZvcm1hdGlvbiBmb3IgZG9taW5hbnQgcGxhbmV0c1xuICAgICAgZGlnbml0aWVzW19wbGFuZXRdID0ge1xuICAgICAgICB0eXBlOiAnTmV1dHJhbCcgYXMgUGxhbmV0YXJ5RGlnbml0eSxcbiAgICAgICAgc3RyZW5ndGg6IGJhc2VCb29zdCxcbiAgICAgICAgZmF2b3JhYmxlWm9kaWFjU2lnbnM6IGN1cnJlbnRab2RpYWMgPyBbY3VycmVudFpvZGlhY10gOiBbXSxcbiAgICAgIH07XG4gICAgfVxuICB9KTtcblxuICAvLyBab2RpYWMgc2lnbiBib29zdCBpZiBhdmFpbGFibGVcbiAgaWYgKGN1cnJlbnRab2RpYWMpIHtcbiAgICBib29zdCArPSBnZXRab2RpYWNCb29zdChjdXJyZW50Wm9kaWFjLCBpdGVtKTtcbiAgfVxuXG4gIC8vIEx1bmFyIHBoYXNlIGJvb3N0IGlmIGF2YWlsYWJsZVxuICBpZiAobHVuYXJQaGFzZSkge1xuICAgIGJvb3N0ICs9IGdldEx1bmFyUGhhc2VCb29zdChsdW5hclBoYXNlKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYm9vc3Q6IHBhcnNlRmxvYXQoYm9vc3QudG9GaXhlZCgyKSksXG4gICAgZG9taW5hbnRQbGFuZXRzOiBBcnJheS5mcm9tKG5ldyBTZXQoZG9taW5hbnRQbGFuZXRzKSksIC8vIEZpeCBmb3IgU2V0IGl0ZXJhdGlvbiBpbiBvbGRlciBKUyB2ZXJzaW9uc1xuICAgIGRpZ25pdGllc1xuICB9O1xufTtcblxuLy8gSGVscGVyIGZ1bmN0aW9ucyBmb3IgY2FsY3VsYXRpb25zXG5jb25zdCBnZXRUcmlwbGljaXR5UnVsZXJzID0gKF96b2RpYWNTaWduPzogc3RyaW5nIHwgbnVsbCk6IFBsYW5ldFtdID0+IHtcbiAgLy8gSW1wbGVtZW50YXRpb24gZGVwZW5kcyBvbiB5b3VyIHpvZGlhYyBtYXBwaW5nc1xuICByZXR1cm4gWydTdW4nLCAnTWFycycsICdKdXBpdGVyJ10gYXMgUGxhbmV0W107XG59O1xuXG5jb25zdCBnZXRTZWFzb25hbE11bHRpcGxpZXIgPSAoKTogbnVtYmVyID0+IHtcbiAgLy8gSW1wbGVtZW50YXRpb24gZGVwZW5kcyBvbiB5b3VyIHNlYXNvbmFsIGxvZ2ljXG4gIHJldHVybiAxLjA7XG59O1xuXG4vKipcbiAqIEdldCBkaWduaXR5IG11bHRpcGxpZXIgZm9yIGNhbGN1bGF0aW9uc1xuICovXG5leHBvcnQgY29uc3QgZ2V0RGlnbml0eU11bHRpcGxpZXIgPSAoZGlnbml0eTogUGxhbmV0YXJ5RGlnbml0eSk6IG51bWJlciA9PiB7XG4gIGNvbnN0IG11bHRpcGxpZXJzOiBSZWNvcmQ8UGxhbmV0YXJ5RGlnbml0eSwgbnVtYmVyPiA9IHtcbiAgICAnRG9taWNpbGUnOiAxLjUsXG4gICAgJ0V4YWx0YXRpb24nOiAxLjMsXG4gICAgJ1RyaXBsaWNpdHknOiAxLjIsXG4gICAgJ1Rlcm0nOiAxLjEsXG4gICAgJ0ZhY2UnOiAxLjA1LFxuICAgICdNb29sdHJpa29uYSc6IDEuNCxcbiAgICAnTmFrc2hhdHJhJzogMS4yNSxcbiAgICAnRGV0cmltZW50JzogMC43LFxuICAgICdGYWxsJzogMC41LFxuICAgICdOZXV0cmFsJzogMS4wXG4gIH07XG4gIHJldHVybiBtdWx0aXBsaWVyc1tkaWduaXR5XSB8fCAxLjA7XG59O1xuXG4vKipcbiAqIEdldCB6b2RpYWMgYm9vc3QgYmFzZWQgb24gZWxlbWVudGFsIHByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFpvZGlhY0Jvb3N0ID0gKHpvZGlhY1NpZ246IHN0cmluZywgaXRlbTogdW5rbm93bik6IG51bWJlciA9PiB7XG4gIC8vIEdldCB6b2RpYWMgc2lnbiBlbGVtZW50XG4gIGNvbnN0IHpvZGlhY0VsZW1lbnRzOiBSZWNvcmQ8c3RyaW5nLCBFbGVtZW50YWxDaGFyYWN0ZXI+ID0ge1xuICAgIGFyaWVzOiAnRmlyZScsIGxlbzogJ0ZpcmUnLCBzYWdpdHRhcml1czogJ0ZpcmUnLFxuICAgIHRhdXJ1czogJ0VhcnRoJywgdmlyZ286ICdFYXJ0aCcsIGNhcHJpY29ybjogJ0VhcnRoJyxcbiAgICBnZW1pbmk6ICdBaXInLCBsaWJyYTogJ0FpcicsIGFxdWFyaXVzOiAnQWlyJyxcbiAgICBjYW5jZXI6ICdXYXRlcicsIHNjb3JwaW86ICdXYXRlcicsIHBpc2NlczogJ1dhdGVyJ1xuICB9O1xuXG4gIC8vIE5vcm1hbGl6ZSB6b2RpYWMgc2lnbiB0byBsb3dlcmNhc2UgZm9yIGxvb2t1cFxuICBjb25zdCBub3JtYWxpemVkU2lnbiA9IHpvZGlhY1NpZ24udG9Mb3dlckNhc2UoKTtcbiAgY29uc3Qgem9kaWFjRWxlbWVudCA9IHpvZGlhY0VsZW1lbnRzW25vcm1hbGl6ZWRTaWduIF0gfHwgJ0ZpcmUnO1xuICBcbiAgLy8gQ2hlY2sgaWYgaXRlbSBoYXMgZWxlbWVudGFsIHByb3BlcnRpZXNcbiAgY29uc3QgaXRlbURhdGEgPSBpdGVtIGFzIGFueTtcbiAgaWYgKCFpdGVtRGF0YS5lbGVtZW50YWxQcm9wZXJ0aWVzKSB7XG4gICAgcmV0dXJuIDAuMTsgLy8gTWluaW11bSBib29zdCBpZiBubyBlbGVtZW50YWwgZGF0YVxuICB9XG4gIFxuICAvLyBDYWxjdWxhdGUgYm9vc3QgYmFzZWQgb24gZWxlbWVudGFsIGFmZmluaXR5XG4gIC8vIEhpZ2hlciBib29zdCBpZiB0aGUgY3Vpc2luZSdzIGRvbWluYW50IGVsZW1lbnQgbWF0Y2hlcyB0aGUgem9kaWFjIGVsZW1lbnRcbiAgY29uc3QgZWxlbWVudFZhbHVlID0gaXRlbURhdGEuZWxlbWVudGFsUHJvcGVydGllc1t6b2RpYWNFbGVtZW50XSB8fCAwO1xuICBjb25zdCBlbGVtZW50Qm9vc3QgPSBlbGVtZW50VmFsdWUgKiAwLjg7IC8vIFNjYWxlIGJhc2VkIG9uIGhvdyBzdHJvbmcgdGhlIGVsZW1lbnQgaXNcblxuICAvLyBDaGVjayBpZiBjdWlzaW5lIGV4cGxpY2l0bHkgbGlzdHMgdGhpcyB6b2RpYWMgc2lnbiBhcyBmYXZvcmFibGVcbiAgY29uc3Qgem9kaWFjQm9vc3QgPSBpdGVtRGF0YS56b2RpYWNJbmZsdWVuY2VzPy5pbmNsdWRlcyhub3JtYWxpemVkU2lnbikgPyAwLjMgOiAwO1xuXG4gIC8vIEFwcGx5IG1vZGFsaXR5IGJvb3N0IGJhc2VkIG9uIGNhcmRpbmFsL2ZpeGVkL211dGFibGUgcXVhbGl0aWVzXG4gIGxldCBtb2RhbGl0eUJvb3N0ID0gMDtcbiAgY29uc3QgY2FyZGluYWxTaWducyA9IFsnYXJpZXMnLCAnY2FuY2VyJywgJ2xpYnJhJywgJ2NhcHJpY29ybiddO1xuICBjb25zdCBmaXhlZFNpZ25zID0gWyd0YXVydXMnLCAnbGVvJywgJ3Njb3JwaW8nLCAnYXF1YXJpdXMnXTtcbiAgLy8gSWYgbm90IGNhcmRpbmFsIG9yIGZpeGVkLCBpdCdzIG11dGFibGUgKGdlbWluaSwgdmlyZ28sIHNhZ2l0dGFyaXVzLCBwaXNjZXMpXG4gIFxuICBpZiAoY2FyZGluYWxTaWducy5pbmNsdWRlcyhub3JtYWxpemVkU2lnbikpIHtcbiAgICAvLyBDYXJkaW5hbCBzaWducyBwcmVmZXIgYm9sZCwgZGlzdGluY3RpdmUgY3Vpc2luZXNcbiAgICBtb2RhbGl0eUJvb3N0ID0gKGl0ZW1EYXRhLmVsZW1lbnRhbFByb3BlcnRpZXNbJ0ZpcmUnXSB8fCAwKSAqIDAuMjtcbiAgfSBlbHNlIGlmIChmaXhlZFNpZ25zLmluY2x1ZGVzKG5vcm1hbGl6ZWRTaWduKSkge1xuICAgIC8vIEZpeGVkIHNpZ25zIHByZWZlciBzdWJzdGFudGlhbCwgdHJhZGl0aW9uYWwgY3Vpc2luZXNcbiAgICBtb2RhbGl0eUJvb3N0ID0gKGl0ZW1EYXRhLmVsZW1lbnRhbFByb3BlcnRpZXNbJ0VhcnRoJ10gfHwgMCkgKiAwLjI7XG4gIH0gZWxzZSB7XG4gICAgLy8gTXV0YWJsZSBzaWducyBwcmVmZXIgYWRhcHRhYmxlLCBmdXNpb24gY3Vpc2luZXNcbiAgICBtb2RhbGl0eUJvb3N0ID0gKGl0ZW1EYXRhLmVsZW1lbnRhbFByb3BlcnRpZXNbJ0FpciddIHx8IDApICogMC4yO1xuICB9XG5cbiAgLy8gQ2FsY3VsYXRlIHNlYXNvbmFsIGFsaWdubWVudCAoY2VydGFpbiBjdWlzaW5lcyBhcmUgYmV0dGVyIGFsaWduZWQgd2l0aCBzZWFzb25zKVxuICBjb25zdCBzZWFzb25hbEJvb3N0ID0gY2FsY3VsYXRlU2Vhc29uYWxBbGlnbm1lbnQobm9ybWFsaXplZFNpZ24sIGl0ZW0pICogMC4xNTtcbiAgXG4gIC8vIENvbWJpbmUgYWxsIGJvb3N0IGZhY3RvcnNcbiAgY29uc3QgdG90YWxCb29zdCA9IGVsZW1lbnRCb29zdCArIHpvZGlhY0Jvb3N0ICsgbW9kYWxpdHlCb29zdCArIHNlYXNvbmFsQm9vc3Q7XG4gIFxuICAvLyBSZXR1cm4gbm9ybWFsaXplZCBib29zdCB2YWx1ZSAoMC0xIHJhbmdlKVxuICByZXR1cm4gTWF0aC5taW4oMC43LCBNYXRoLm1heCgwLjEsIHRvdGFsQm9vc3QpKTtcbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBjYWxjdWxhdGUgc2Vhc29uYWwgYWxpZ25tZW50XG5jb25zdCBjYWxjdWxhdGVTZWFzb25hbEFsaWdubWVudCA9ICh6b2RpYWNTaWduOiBzdHJpbmcsIGl0ZW06IHVua25vd24pOiBudW1iZXIgPT4ge1xuICAvLyBNYXAgem9kaWFjIHNpZ25zIHRvIHNlYXNvbnNcbiAgY29uc3Qgc2Vhc29uTWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgICdhcmllcyc6ICdzcHJpbmcnLCAndGF1cnVzJzogJ3NwcmluZycsICdnZW1pbmknOiAnc3ByaW5nJyxcbiAgICAnY2FuY2VyJzogJ3N1bW1lcicsICdsZW8nOiAnc3VtbWVyJywgJ3ZpcmdvJzogJ3N1bW1lcicsXG4gICAgJ2xpYnJhJzogJ2F1dHVtbicsICdzY29ycGlvJzogJ2F1dHVtbicsICdzYWdpdHRhcml1cyc6ICdhdXR1bW4nLFxuICAgICdjYXByaWNvcm4nOiAnd2ludGVyJywgJ2FxdWFyaXVzJzogJ3dpbnRlcicsICdwaXNjZXMnOiAnd2ludGVyJ1xuICB9O1xuICBcbiAgY29uc3Qgc2Vhc29uID0gc2Vhc29uTWFwW3pvZGlhY1NpZ25dO1xuICBcbiAgLy8gU2Vhc29uYWwgZWxlbWVudGFsIGNvcnJlc3BvbmRlbmNlc1xuICBjb25zdCBzZWFzb25hbEVsZW1lbnRzOiBSZWNvcmQ8c3RyaW5nLCBFbGVtZW50YWxDaGFyYWN0ZXI+ID0ge1xuICAgICdzcHJpbmcnOiAnQWlyJyxcbiAgICAnc3VtbWVyJzogJ0ZpcmUnLFxuICAgICdhdXR1bW4nOiAnRWFydGgnLFxuICAgICd3aW50ZXInOiAnV2F0ZXInXG4gIH07XG4gIFxuICBjb25zdCBzZWFzb25hbEVsZW1lbnQgPSBzZWFzb25hbEVsZW1lbnRzW3NlYXNvbl07XG4gIFxuICAvLyBDYWxjdWxhdGUgYWxpZ25tZW50IGJhc2VkIG9uIHRoZSBjdWlzaW5lJ3MgZWxlbWVudGFsIHByb3BlcnRpZXNcbiAgLy8gSGlnaGVyIHZhbHVlIGlmIHRoZSBjdWlzaW5lIGFsaWducyB3aXRoIHRoZSBzZWFzb24ncyBlbGVtZW50XG4gIGNvbnN0IGl0ZW1EYXRhID0gaXRlbSBhcyBhbnk7XG4gIHJldHVybiBpdGVtRGF0YS5lbGVtZW50YWxQcm9wZXJ0aWVzPy5bc2Vhc29uYWxFbGVtZW50XSB8fCAwLjE7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZSBib29zdCBiYXNlZCBvbiBsdW5hciBwaGFzZVxuICovXG5leHBvcnQgY29uc3QgZ2V0THVuYXJQaGFzZUJvb3N0ID0gKGx1bmFyUGhhc2U6IEx1bmFyUGhhc2UpOiBudW1iZXIgPT4ge1xuICAvLyBOZXcgY2FsY3VsYXRpb24gYmFzZWQgb24gbHVuYXIgcGhhc2UgZW5lcmd5IHBhdHRlcm5zXG4gIC8vIERpZmZlcmVudCBsdW5hciBwaGFzZXMgZW5oYW5jZSBkaWZmZXJlbnQgZWxlbWVudGFsIGFuZCBhbGNoZW1pY2FsIHByb3BlcnRpZXNcbiAgXG4gIC8vIE1hcCBsdW5hciBwaGFzZXMgdG8gZWxlbWVudGFsIGFuZCBhbGNoZW1pY2FsIGluZmx1ZW5jZXNcbiAgY29uc3QgbHVuYXJJbmZsdWVuY2VzOiBSZWNvcmQ8THVuYXJQaGFzZSwge1xuICAgIGVsZW1lbnQ6IEVsZW1lbnRhbENoYXJhY3RlcixcbiAgICBhbGNoZW1pY2FsOiBzdHJpbmcsXG4gICAgaW50ZW5zaXR5OiBudW1iZXJcbiAgfT4gPSB7XG4gICAgJ25ldyBtb29uJzogeyBlbGVtZW50OiAnRmlyZScsIGFsY2hlbWljYWw6ICdTcGlyaXQnLCBpbnRlbnNpdHk6IDAuOCB9LFxuICAgICd3YXhpbmcgY3Jlc2NlbnQnOiB7IGVsZW1lbnQ6ICdGaXJlJywgYWxjaGVtaWNhbDogJ1NwaXJpdCcsIGludGVuc2l0eTogMC43IH0sXG4gICAgJ2ZpcnN0IHF1YXJ0ZXInOiB7IGVsZW1lbnQ6ICdBaXInLCBhbGNoZW1pY2FsOiAnU3Vic3RhbmNlJywgaW50ZW5zaXR5OiAwLjYgfSxcbiAgICAnd2F4aW5nIGdpYmJvdXMnOiB7IGVsZW1lbnQ6ICdBaXInLCBhbGNoZW1pY2FsOiAnU3Vic3RhbmNlJywgaW50ZW5zaXR5OiAwLjcgfSxcbiAgICAnZnVsbCBtb29uJzogeyBlbGVtZW50OiAnV2F0ZXInLCBhbGNoZW1pY2FsOiAnRXNzZW5jZScsIGludGVuc2l0eTogMC44IH0sXG4gICAgJ3dhbmluZyBnaWJib3VzJzogeyBlbGVtZW50OiAnV2F0ZXInLCBhbGNoZW1pY2FsOiAnRXNzZW5jZScsIGludGVuc2l0eTogMC43IH0sXG4gICAgJ2xhc3QgcXVhcnRlcic6IHsgZWxlbWVudDogJ0VhcnRoJywgYWxjaGVtaWNhbDogJ01hdHRlcicsIGludGVuc2l0eTogMC42IH0sXG4gICAgJ3dhbmluZyBjcmVzY2VudCc6IHsgZWxlbWVudDogJ0VhcnRoJywgYWxjaGVtaWNhbDogJ01hdHRlcicsIGludGVuc2l0eTogMC43IH1cbiAgfTtcbiAgXG4gIC8vIEdldCBsdW5hciBpbmZsdWVuY2UgZGF0YSBvciBwcm92aWRlIGZhbGxiYWNrXG4gIGNvbnN0IGluZmx1ZW5jZSA9IGx1bmFySW5mbHVlbmNlc1tsdW5hclBoYXNlXSB8fCB7IFxuICAgIGVsZW1lbnQ6ICdXYXRlcicsIFxuICAgIGFsY2hlbWljYWw6ICdFc3NlbmNlJywgXG4gICAgaW50ZW5zaXR5OiAwLjUgXG4gIH07XG4gIFxuICAvLyBDYWxjdWxhdGUgYm9vc3QgYmFzZWQgb24gbHVuYXIgcGhhc2UgaW50ZW5zaXR5XG4gIC8vIFRoaXMgd2lsbCB2YXJ5IGJldHdlZW4gMC4xNSBhbmQgMC40IGRlcGVuZGluZyBvbiB0aGUgcGhhc2VcbiAgcmV0dXJuIDAuMTUgKyAoaW5mbHVlbmNlLmludGVuc2l0eSAqIDAuMjUpO1xufTtcblxuLyoqXG4gKiBHZXQgZmxhdm9yIGJvb3N0IGZyb20gcGxhbmV0YXJ5IGFzc29jaWF0aW9uc1xuICovXG5leHBvcnQgY29uc3QgZ2V0Rmxhdm9yQm9vc3QgPSAoXG4gIF9wbGFuZXQ6IFBsYW5ldCxcbiAgX2luZ3JlZGllbnQ6IHVua25vd25cbik6IG51bWJlciA9PiB7XG4gIGNvbnN0IGluZ3JlZGllbnREYXRhID0gX2luZ3JlZGllbnQgYXMgYW55O1xuICBjb25zdCBlbGVtZW50Qm9vc3QgPSBwbGFuZXRhcnlGb29kQXNzb2NpYXRpb25zW19wbGFuZXRdLmVsZW1lbnRhbEJvb3N0IHx8IHt9O1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMoZWxlbWVudEJvb3N0KS5yZWR1Y2UoKGFjYywgW2VsZW1lbnQsIGJvb3N0XSkgPT4ge1xuICAgIHJldHVybiBhY2MgKyAoaW5ncmVkaWVudERhdGEuZWxlbWVudGFsUHJvcGVydGllcz8uW2VsZW1lbnRdIHx8IDApICogKGJvb3N0ICB8fCAwKTtcbiAgfSwgMCk7XG59O1xuXG4vKipcbiAqIEdldCBudXRyaXRpb25hbCBzeW5lcmd5IGJldHdlZW4gaW5ncmVkaWVudCBhbmQgcGxhbmV0XG4gKi9cbmV4cG9ydCBjb25zdCBnZXROdXRyaXRpb25hbFN5bmVyZ3kgPSAoXG4gIF9wbGFuZXQ6IFBsYW5ldCxcbiAgX2luZ3JlZGllbnQ6IHVua25vd25cbik6IHN0cmluZ1tdID0+IHtcbiAgLy8gSW1wbGVtZW50YXRpb24gZGVwZW5kcyBvbiB5b3VyIG51dHJpdGlvbmFsIGRhdGFcbiAgcmV0dXJuIFtdO1xufTtcblxuLyoqXG4gKiBGb3JtYXQgZWxlbWVudGFsIGJhbGFuY2UgZm9yIGRpc3BsYXlcbiAqL1xuZXhwb3J0IGNvbnN0IGZvcm1hdGVsZW1lbnRhbFN0YXRlID0gKFxuICBlbGVtZW50czogUGFydGlhbDxSZWNvcmQ8c3RyaW5nLCBudW1iZXI+PlxuKTogc3RyaW5nID0+IHtcbiAgY29uc3QgdmFsaWRFbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoZWxlbWVudHMpXG4gICAgLmZpbHRlcigoW18sIHZhbF0pID0+IE51bWJlci5pc0Zpbml0ZSh2YWwpKVxuICAgIC5tYXAoKFtlbGVtLCB2YWxdKSA9PiBgJHtlbGVtfSAke01hdGgucm91bmQoKHZhbCB8fCAwKSAqIDEwMCl9JWApXG4gICAgLmpvaW4oXCIgwrcgXCIpO1xuICBcbiAgcmV0dXJuIHZhbGlkRW50cmllcztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBsYW5ldGFyeUZvb2RBc3NvY2lhdGlvbnM7XG4iXSwidmVyc2lvbiI6M30=