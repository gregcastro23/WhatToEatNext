{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/data/cuisineFlavorProfiles.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/data/cuisineFlavorProfiles.ts"],"sourcesContent":["import type { ElementalProperties } from '@/types/alchemy';\n\nexport interface CuisineFlavorProfile {\n  id: string;\n  name: string;\n  description?: string;\n  flavorProfiles: {\n    spicy: number;\n    sweet: number;\n    sour: number;\n    bitter: number;\n    salty: number;\n    umami: number;\n  };\n  elementalAlignment: ElementalProperties;\n  signatureTechniques: string[];\n  signatureIngredients: string[];\n  traditionalMealPatterns: string[];\n  planetaryResonance: string[]; // Planets that resonate with this cuisine\n  seasonalPreference: string[]; // Seasons when this cuisine shines\n  parentCuisine?: string; // Parent cuisine for regional variants\n  regionalVariants?: string[]; // Regional variants of this cuisine\n  dietarySuitability?: string[];\n  elementalProperties?: Record<string, number>;\n  flavorIntensities?: Record<string, number>;\n  tastingNotes?: string[];\n  primaryIngredients?: string[];\n  commonCookingMethods?: string[];\n  signatureDishes?: string[];\n  culturalContext?: string;\n}\n\nexport const cuisineFlavorProfiles: Record<string, CuisineFlavorProfile> = {\n  // Mediterranean Cuisines\n  greek: {\n    id: 'greek',\n    name: 'Greek',\n    description:\n      'Fresh, herb-forward cuisine centered around olive oil, vegetables, and seafood.',\n    flavorProfiles: {\n      spicy: 0.3,\n      sweet: 0.4,\n      sour: 0.5,\n      bitter: 0.4,\n      salty: 0.6,\n      umami: 0.5,\n    },\n    elementalAlignment: {\n      Fire: 0.3,\n      Earth: 0.3,\n      Water: 0.3,\n      Air: 0.1,\n    },\n    signatureTechniques: ['grilling', 'braising', 'marinating'],\n    signatureIngredients: [\n      'olive oil',\n      'tomatoes',\n      'lemons',\n      'herbs',\n      'garlic',\n    ],\n    traditionalMealPatterns: ['small plates', 'family-style', 'late dining'],\n    planetaryResonance: ['Sun', 'Mercury', 'Neptune'],\n    seasonalPreference: ['summer', 'spring'],\n    dietarySuitability: ['vegetarian', 'pescatarian', 'Mediterranean'],\n  },\n\n  french: {\n    id: 'french',\n    name: 'French',\n    description:\n      'Sophisticated cuisine built on rich foundations and precise techniques.',\n    flavorProfiles: {\n      spicy: 0.1,\n      sweet: 0.5,\n      sour: 0.4,\n      bitter: 0.3,\n      salty: 0.5,\n      umami: 0.8,\n    },\n    elementalAlignment: {\n      Earth: 0.55,\n      Water: 0.25,\n      Fire: 0.1,\n      Air: 0.1,\n    },\n    signatureTechniques: ['sautéing', 'sous vide', 'flambéing', 'reduction'],\n    signatureIngredients: [\n      'butter',\n      'wine',\n      'cream',\n      'shallots',\n      'herbs de provence',\n    ],\n    traditionalMealPatterns: ['course-based dining', 'wine pairings', 'sauces'],\n    planetaryResonance: ['Venus', 'Moon', 'Jupiter'],\n    seasonalPreference: ['all'],\n    regionalVariants: ['provencal', 'alsatian', 'normandy'],\n    dietarySuitability: ['vegetarian-adaptable', 'dairy-rich'],\n  },\n\n  italian: {\n    id: 'italian',\n    name: 'Italian',\n    description:\n      'Ingredient-focused cuisine celebrating regional specialties and simplicity.',\n    flavorProfiles: {\n      spicy: 0.3,\n      sweet: 0.4,\n      sour: 0.5,\n      bitter: 0.3,\n      salty: 0.6,\n      umami: 0.7,\n    },\n    elementalAlignment: {\n      Earth: 0.5,\n      Fire: 0.3,\n      Water: 0.1,\n      Air: 0.1,\n    },\n    signatureTechniques: [\n      'al dente pasta cooking',\n      'slow simmering',\n      'grilling',\n    ],\n    signatureIngredients: [\n      'tomatoes',\n      'olive oil',\n      'basil',\n      'parmesan',\n      'garlic',\n    ],\n    traditionalMealPatterns: ['antipasti', 'primi', 'secondi', 'family-style'],\n    planetaryResonance: ['Jupiter', 'Venus', 'Sun'],\n    seasonalPreference: ['summer', 'fall'],\n    regionalVariants: ['sicilian', 'tuscan', 'neapolitan'],\n    dietarySuitability: ['vegetarian-friendly', 'Mediterranean'],\n  },\n\n  // Asian Cuisines\n  japanese: {\n    id: 'japanese',\n    name: 'Japanese',\n    description:\n      'Delicate cuisine emphasizing pure flavors, seasonality, and presentation.',\n    flavorProfiles: {\n      spicy: 0.2,\n      sweet: 0.3,\n      sour: 0.4,\n      bitter: 0.3,\n      salty: 0.6,\n      umami: 0.9,\n    },\n    elementalAlignment: {\n      Water: 0.65,\n      Earth: 0.2,\n      Air: 0.1,\n      Fire: 0.05,\n    },\n    signatureTechniques: [\n      'raw preparation',\n      'steaming',\n      'quick grilling',\n      'fermentation',\n    ],\n    signatureIngredients: ['dashi', 'soy sauce', 'mirin', 'rice', 'seaweed'],\n    traditionalMealPatterns: [\n      'seasonal focus',\n      'multiple small dishes',\n      'ichiju-sansai',\n    ],\n    planetaryResonance: ['Moon', 'Mercury', 'Neptune'],\n    seasonalPreference: ['spring', 'winter'],\n    regionalVariants: ['osaka', 'tokyo', 'kyoto', 'okinawan'],\n    dietarySuitability: ['pescatarian', 'low-fat', 'gluten-free-options'],\n  },\n\n  korean: {\n    id: 'korean',\n    name: 'Korean',\n    description:\n      'Bold, harmonious cuisine with balanced flavors and textural contrasts.',\n    flavorProfiles: {\n      spicy: 0.8,\n      sweet: 0.4,\n      sour: 0.6,\n      bitter: 0.2,\n      salty: 0.6,\n      umami: 0.7,\n    },\n    elementalAlignment: {\n      Fire: 0.5,\n      Earth: 0.3,\n      Water: 0.1,\n      Air: 0.1,\n    },\n    signatureTechniques: ['fermentation', 'grilling', 'stewing'],\n    signatureIngredients: [\n      'gochujang',\n      'kimchi',\n      'sesame',\n      'garlic',\n      'soy sauce',\n    ],\n    traditionalMealPatterns: ['banchan', 'communal dining', 'balanced meals'],\n    planetaryResonance: ['Mars', 'Pluto', 'Jupiter'],\n    seasonalPreference: ['all'],\n    dietarySuitability: [\n      'vegetarian-options',\n      'fermented-foods',\n      'gluten-free-adaptable',\n    ],\n  },\n\n  chinese: {\n    id: 'chinese',\n    name: 'Chinese',\n    description:\n      'Diverse, ancient cuisine with emphasis on balance, texture, and technique.',\n    flavorProfiles: {\n      spicy: 0.5,\n      sweet: 0.4,\n      sour: 0.4,\n      bitter: 0.3,\n      salty: 0.6,\n      umami: 0.7,\n    },\n    elementalAlignment: {\n      Fire: 0.3,\n      Earth: 0.4,\n      Water: 0.2,\n      Air: 0.1,\n    },\n    signatureTechniques: [\n      'stir-frying',\n      'steaming',\n      'braising',\n      'double-frying',\n    ],\n    signatureIngredients: [\n      'soy sauce',\n      'rice',\n      'ginger',\n      'garlic',\n      'scallions',\n    ],\n    traditionalMealPatterns: [\n      'balance of flavors and textures',\n      'shared dishes',\n      'rice-based',\n    ],\n    planetaryResonance: ['Saturn', 'Jupiter', 'Mercury'],\n    seasonalPreference: ['all'],\n    regionalVariants: ['sichuanese', 'cantonese', 'shanghainese', 'hunanese'],\n    dietarySuitability: ['vegetarian-adaptable', 'diverse-options'],\n  },\n\n  sichuanese: {\n    id: 'sichuanese',\n    name: 'Sichuanese',\n    description:\n      'Complex, layered cuisine known for bold spices and numbing heat.',\n    flavorProfiles: {\n      spicy: 0.9,\n      sweet: 0.3,\n      sour: 0.5,\n      bitter: 0.4,\n      salty: 0.5,\n      umami: 0.6,\n    },\n    elementalAlignment: {\n      Fire: 0.7,\n      Earth: 0.1,\n      Water: 0.1,\n      Air: 0.1,\n    },\n    signatureTechniques: [\n      'dry-frying',\n      'double-frying',\n      'stir-frying',\n      'steaming',\n    ],\n    signatureIngredients: [\n      'Sichuan peppercorns',\n      'dried chilies',\n      'doubanjiang',\n      'garlic',\n      'ginger',\n    ],\n    traditionalMealPatterns: [\n      'balance of flavors and textures',\n      'shared dishes',\n    ],\n    planetaryResonance: ['Mars', 'Uranus', 'Pluto'],\n    seasonalPreference: ['winter', 'fall'],\n    parentCuisine: 'chinese',\n    dietarySuitability: ['vegetarian-friendly', 'gluten-free-friendly'],\n  },\n\n  cantonese: {\n    id: 'cantonese',\n    name: 'Cantonese',\n    description:\n      'Fresh, delicate cuisine that emphasizes the natural flavors of ingredients.',\n    flavorProfiles: {\n      spicy: 0.2,\n      sweet: 0.6,\n      sour: 0.3,\n      bitter: 0.3,\n      salty: 0.5,\n      umami: 0.7,\n    },\n    elementalAlignment: {\n      Water: 0.4,\n      Earth: 0.3,\n      Fire: 0.2,\n      Air: 0.1,\n    },\n    signatureTechniques: [\n      'steaming',\n      'stir-frying',\n      'roasting',\n      'double-boiling',\n    ],\n    signatureIngredients: [\n      'fresh seafood',\n      'soy sauce',\n      'ginger',\n      'scallions',\n      'rice wine',\n    ],\n    traditionalMealPatterns: ['family-style', 'dim sum', 'fresh ingredients'],\n    planetaryResonance: ['Moon', 'Venus', 'Mercury'],\n    seasonalPreference: ['spring', 'summer'],\n    parentCuisine: 'chinese',\n    dietarySuitability: ['vegetarian-friendly', 'gluten-free-friendly'],\n  },\n\n  // American Cuisines\n  mexican: {\n    id: 'mexican',\n    name: 'Mexican',\n    description:\n      'Diverse cuisine with ancient roots, emphasizing corn, chilies, and herbs.',\n    flavorProfiles: {\n      spicy: 0.7,\n      sweet: 0.3,\n      sour: 0.5,\n      bitter: 0.2,\n      salty: 0.5,\n      umami: 0.4,\n    },\n    elementalAlignment: {\n      Fire: 0.55,\n      Earth: 0.25,\n      Water: 0.1,\n      Air: 0.1,\n    },\n    signatureTechniques: [\n      'nixtamalization',\n      'grilling',\n      'slow cooking',\n      'frying',\n    ],\n    signatureIngredients: ['corn', 'chilies', 'tomatoes', 'avocado', 'lime'],\n    traditionalMealPatterns: [\n      'multiple elements combined',\n      'salsas and condiments',\n    ],\n    planetaryResonance: ['Sun', 'Mars', 'Jupiter'],\n    seasonalPreference: ['summer', 'fall'],\n    regionalVariants: ['oaxacan', 'yucatecan', 'northern'],\n    dietarySuitability: [\n      'vegetarian-adaptable',\n      'corn-based',\n      'gluten-free-options',\n    ],\n  },\n\n  thai: {\n    id: 'thai',\n    name: 'Thai',\n    description:\n      'Vibrant cuisine balancing sweet, sour, salty, and spicy elements.',\n    flavorProfiles: {\n      spicy: 0.8,\n      sweet: 0.7,\n      sour: 0.7,\n      bitter: 0.3,\n      salty: 0.6,\n      umami: 0.5,\n    },\n    elementalAlignment: {\n      Fire: 0.4,\n      Water: 0.3,\n      Earth: 0.2,\n      Air: 0.1,\n    },\n    signatureTechniques: ['stir-frying', 'pounding', 'grilling', 'steaming'],\n    signatureIngredients: [\n      'lemongrass',\n      'fish sauce',\n      'chilies',\n      'coconut milk',\n      'thai basil',\n    ],\n    traditionalMealPatterns: [\n      'balance of flavors',\n      'shared dishes',\n      'rice-centric',\n    ],\n    planetaryResonance: ['Venus', 'Mars', 'Sun'],\n    seasonalPreference: ['summer', 'spring'],\n    regionalVariants: ['northern', 'southern', 'isaan', 'central'],\n    dietarySuitability: ['vegetarian-adaptable', 'gluten-free-friendly'],\n  },\n\n  indian: {\n    id: 'indian',\n    name: 'Indian',\n    description:\n      'Rich, diverse cuisine with layered spices and regional distinctions.',\n    flavorProfiles: {\n      spicy: 0.8,\n      sweet: 0.4,\n      sour: 0.5,\n      bitter: 0.3,\n      salty: 0.6,\n      umami: 0.4,\n    },\n    elementalAlignment: {\n      Fire: 0.5,\n      Earth: 0.3,\n      Water: 0.1,\n      Air: 0.1,\n    },\n    signatureTechniques: [\n      'tempering',\n      'slow cooking',\n      'tandoor',\n      'curry-making',\n    ],\n    signatureIngredients: [\n      'garam masala',\n      'ghee',\n      'chilies',\n      'turmeric',\n      'ginger-garlic',\n    ],\n    traditionalMealPatterns: [\n      'thali',\n      'variety of flavors',\n      'balanced nutrition',\n    ],\n    planetaryResonance: ['Mars', 'Sun', 'Jupiter'],\n    seasonalPreference: ['all'],\n    regionalVariants: ['punjabi', 'bengali', 'south indian', 'gujarati'],\n    dietarySuitability: ['vegetarian', 'vegan-options', 'gluten-free-friendly'],\n  },\n\n  // More cuisines as needed...\n};\n\n/**\n * Calculate match between recipe's flavor profile and cuisine's expected profile\n */\nexport const calculateCuisineFlavorMatch = (\n  recipeFlavorProfile: Record<string, number>,\n  cuisineName: string\n): number => {\n  // Validate inputs\n  if (!recipeFlavorProfile || typeof recipeFlavorProfile !== 'object') {\n    // console.error(`Invalid recipe flavor profile provided for cuisine match calculation`);\n    return 0.5;\n  }\n\n  const cuisineProfile = getCuisineProfile(cuisineName);\n  if (!cuisineProfile) {\n    // console.error(`Cuisine profile not found for: ${cuisineName}`);\n    return 0.5;\n  }\n\n  // Ensure all flavor values are valid numbers\n  const validatedRecipeProfile: Record<string, number> = {};\n  for (const [flavor, value] of Object.entries(recipeFlavorProfile)) {\n    if (typeof value === 'number' && !isNaN(value)) {\n      validatedRecipeProfile[flavor] = value;\n    } else {\n      // console.error(`Invalid ${flavor} value in recipe flavor profile: ${value}`);\n      validatedRecipeProfile[flavor] = 0;\n    }\n  }\n\n  let matchScore = 0;\n  let totalWeight = 0;\n\n  // Compare recipe flavors to cuisine's typical flavor profile - ensuring valid values\n  for (const [flavor, recipeValue] of Object.entries(validatedRecipeProfile)) {\n    const cuisineValue =\n      cuisineProfile.flavorProfiles[\n        flavor as keyof typeof cuisineProfile.flavorProfiles\n      ] || 0;\n\n    // Calculate similarity with a more nuanced and effective formula\n    const difference = Math.abs(recipeValue - cuisineValue);\n\n    // Use an exponential similarity formula for sharper differentiation\n    const similarity = Math.pow(1 - difference, 2.5);\n\n    // More sophisticated weighting system based on cuisine's signature flavors\n    let weight = 1.0;\n\n    // Higher weights for dominant flavors in the cuisine\n    if (cuisineValue > 0.8) weight = 8.0;\n    else if (cuisineValue > 0.6) weight = 6.0;\n    else if (cuisineValue > 0.4) weight = 3.0;\n    else if (cuisineValue > 0.2) weight = 1.5;\n    else weight = 0.5; // Very low weight for non-characteristic flavors\n\n    // Identify \"defining absence\" - when a cuisine distinctly lacks a flavor\n    if (cuisineValue < 0.2 && recipeValue > 0.6) {\n      // Heavy penalty for having strong flavors that should be absent\n      matchScore -= (recipeValue - cuisineValue) * 4.0;\n      totalWeight += 4.0;\n    } else {\n      matchScore += similarity * weight;\n      totalWeight += weight;\n    }\n  }\n\n  // Normalize to 0-1 range - prevent division by zero\n  const normalizedScore =\n    totalWeight > 0 ? Math.max(0, matchScore / totalWeight) : 0.5;\n\n  // Apply non-linear transformation to create better differentiation\n  let transformedScore;\n  if (normalizedScore < 0.3) {\n    transformedScore = normalizedScore * 0.5;\n  } else if (normalizedScore < 0.6) {\n    transformedScore = 0.15 + (normalizedScore - 0.3) * 1.3;\n  } else if (normalizedScore < 0.8) {\n    transformedScore = 0.54 + (normalizedScore - 0.6) * 1.6;\n  } else {\n    transformedScore = 0.86 + (normalizedScore - 0.8) * 1.4;\n  }\n\n  // Ensure result is valid and in proper range\n  return Math.min(Math.max(transformedScore, 0), 1);\n};\n\n/**\n * Get recommended cuisines for a recipe based on flavor profile similarity,\n * including parent-child cuisine relationships\n */\nexport const getRecommendedCuisines = (\n  recipeFlavorProfile: Record<string, number>\n): { cuisine: string; matchScore: number }[] => {\n  const results = Object.entries(cuisineFlavorProfiles)\n    .map(([cuisineName, _profile]) => {\n      // Skip child cuisines that have a parent - will handle them separately\n      if (_profile.parentCuisine) return null;\n\n      const matchScore = calculateCuisineFlavorMatch(\n        recipeFlavorProfile,\n        cuisineName\n      );\n      return {\n        cuisine: cuisineName,\n        matchScore,\n        isParent: !!_profile.regionalVariants?.length,\n      };\n    })\n    .filter((result) => result !== null && result.matchScore > 0.6) as {\n    cuisine: string;\n    matchScore: number;\n    isParent: boolean;\n  }[];\n\n  // Add regional variants with good matches\n  const regionalResults: {\n    cuisine: string;\n    matchScore: number;\n    isParent: boolean;\n  }[] = [];\n\n  Object.entries(cuisineFlavorProfiles)\n    .filter(([_, _profile]) => _profile.parentCuisine)\n    .forEach(([cuisineName, _profile]) => {\n      const matchScore = calculateCuisineFlavorMatch(\n        recipeFlavorProfile,\n        cuisineName\n      );\n      if (matchScore > 0.65) {\n        // Higher threshold for regional variants\n        regionalResults.push({\n          cuisine: cuisineName,\n          matchScore,\n          isParent: false,\n        });\n      }\n    });\n\n  // Combine and sort by match score\n  return [...results, ...regionalResults]\n    .sort((a, b) => b.matchScore - a.matchScore)\n    .map(({ cuisine, matchScore }) => ({ cuisine, matchScore }));\n};\n\n/**\n * Get fusion suggestions based on compatible cuisine flavor profiles,\n * with improved handling of regional cuisine relationships\n */\nexport const getFusionSuggestions = (\n  cuisine1: string,\n  cuisine2: string\n): { compatibility: number; techniques: string[]; ingredients: string[] } => {\n  const profile1 = getCuisineProfile(cuisine1);\n  const profile2 = getCuisineProfile(cuisine2);\n\n  if (!profile1 || !profile2) {\n    return { compatibility: 0, techniques: [], ingredients: [] };\n  }\n\n  // Calculate flavor profile compatibility\n  let flavorSimilarity = 0;\n  Object.entries(profile1.flavorProfiles).forEach(([flavor, value1]) => {\n    const value2 =\n      profile2.flavorProfiles[flavor as keyof typeof profile2.flavorProfiles];\n    flavorSimilarity += 1 - Math.abs(value1 - value2);\n  });\n  flavorSimilarity /= 6; // Normalize\n\n  // Shared planetary resonance increases compatibility\n  const sharedPlanets = profile1.planetaryResonance.filter((planet) =>\n    profile2.planetaryResonance.includes(planet)\n  );\n  const planetaryCompatibility =\n    sharedPlanets.length /\n    Math.max(\n      profile1.planetaryResonance.length,\n      profile2.planetaryResonance.length\n    );\n\n  // Overall compatibility score\n  const compatibility = flavorSimilarity * 0.6 + planetaryCompatibility * 0.4;\n\n  // Fusion suggestions\n  const techniques = [\n    ...new Set([\n      ...profile1.signatureTechniques.slice(0, 2),\n      ...profile2.signatureTechniques.slice(0, 2),\n    ]),\n  ];\n\n  const ingredients = [\n    ...new Set([\n      ...profile1.signatureIngredients.slice(0, 3),\n      ...profile2.signatureIngredients.slice(0, 3),\n    ]),\n  ];\n\n  return {\n    compatibility: compatibility,\n    techniques,\n    ingredients,\n  };\n};\n\n/**\n * Get cuisines related to the input cuisine, like regional variants or related traditions\n * Now returns an empty array to maintain compatibility without generating errors\n */\nexport function getRelatedCuisines(cuisineName: string): string[] {\n  if (!cuisineName) return [];\n\n  // Return empty array to maintain compatibility without checking regional variants\n  return [];\n}\n\n/**\n * Calculate match score between two cuisines based on their flavor profiles\n */\nexport function getCuisineMatchScore(\n  cuisine1: string,\n  cuisine2: string\n): number {\n  // Get cuisine profiles\n  const profile1 = getCuisineProfile(cuisine1);\n  const profile2 = getCuisineProfile(cuisine2);\n\n  if (!profile1 || !profile2) return 0;\n\n  // Calculate similarity based on elemental properties\n  let similarityScore = 0;\n  let totalWeight = 0;\n\n  // Compare elemental properties (most important)\n  if (profile1.elementalProperties && profile2.elementalProperties) {\n    const elements = ['Fire', 'Water', 'Earth', 'Air'];\n    let elementalSimilarity = 0;\n\n    elements.forEach((element) => {\n      const val1 = profile1.elementalProperties?.[element] || 0;\n      const val2 = profile2.elementalProperties?.[element] || 0;\n\n      // Calculate similarity (1 minus the absolute difference)\n      elementalSimilarity += 1 - Math.abs(val1 - val2);\n    });\n\n    // Normalize and weight elemental similarity (60%)\n    similarityScore += (elementalSimilarity / 4) * 0.6;\n    totalWeight += 0.6;\n  }\n\n  // Compare flavor intensities (20%)\n  if (profile1.flavorIntensities && profile2.flavorIntensities) {\n    const flavors = ['sweet', 'salty', 'sour', 'bitter', 'umami', 'spicy'];\n    let flavorSimilarity = 0;\n\n    flavors.forEach((flavor) => {\n      const val1 = profile1.flavorIntensities?.[flavor] || 0;\n      const val2 = profile2.flavorIntensities?.[flavor] || 0;\n\n      // Calculate similarity (1 minus the absolute difference)\n      flavorSimilarity += 1 - Math.abs(val1 - val2);\n    });\n\n    // Normalize and weight flavor similarity (20%)\n    similarityScore += (flavorSimilarity / 6) * 0.2;\n    totalWeight += 0.2;\n  }\n\n  // Bonus for parent-child relationship (20%)\n  const cuisines = [cuisine1.toLowerCase(), cuisine2.toLowerCase()];\n  const relatedCuisines1 = getRelatedCuisines(cuisine1);\n  const relatedCuisines2 = getRelatedCuisines(cuisine2);\n\n  if (\n    relatedCuisines1.some((rc) => rc.toLowerCase() === cuisines[1]) ||\n    relatedCuisines2.some((rc) => rc.toLowerCase() === cuisines[0])\n  ) {\n    similarityScore += 0.2;\n    totalWeight += 0.2;\n  }\n\n  // Normalize final score if we have weights\n  return totalWeight > 0 ? similarityScore / totalWeight : 0;\n}\n\n/**\n * Get a cuisine profile by name\n */\nexport function getCuisineProfile(\n  cuisineName: string\n): CuisineFlavorProfile | undefined {\n  const normalizedName = cuisineName.toLowerCase();\n\n  return Object.values(cuisineFlavorProfiles).find(\n    (c) => c.name.toLowerCase() === normalizedName\n  );\n}\n\n/**\n * Get recipes that match a particular cuisine based on flavor profiles\n */\nexport function getRecipesForCuisineMatch(\n  cuisineName: string,\n  recipes: unknown[],\n  limit = 8\n): unknown[] {\n  if (!cuisineName) {\n    console.warn('getRecipesForCuisineMatch called with empty cuisineName');\n    return [];\n  }\n\n  console.log(`getRecipesForCuisineMatch called for \"${cuisineName}\" with ${recipes?.length || 0} recipes`);\n\n  // Normalize the cuisine name to ensure case-insensitive matching\n  const normalizedCuisineName = cuisineName.toLowerCase().trim();\n\n  // Create a mock recipe generator for fallback if needed\n  const createMockRecipes = (count = 3) => {\n    console.log(`Creating ${count} mock recipes for \"${cuisineName}\"`);\n    const mockRecipes = [];\n    \n    // Common dishes by cuisine - add more as needed\n    const cuisineDishes = {\n      'italian': ['Spaghetti Carbonara', 'Margherita Pizza', 'Risotto', 'Lasagna', 'Tiramisu'],\n      'french': ['Coq au Vin', 'Beef Bourguignon', 'Ratatouille', 'Quiche Lorraine', 'Crème Brûlée'],\n      'japanese': ['Sushi', 'Ramen', 'Tempura', 'Yakitori', 'Miso Soup'],\n      'chinese': ['Kung Pao Chicken', 'Dim Sum', 'Mapo Tofu', 'Peking Duck', 'Hot Pot'],\n      'indian': ['Butter Chicken', 'Biryani', 'Tikka Masala', 'Samosas', 'Naan'],\n      'mexican': ['Tacos', 'Enchiladas', 'Guacamole', 'Mole Poblano', 'Chiles Rellenos'],\n      'thai': ['Pad Thai', 'Green Curry', 'Tom Yum Soup', 'Mango Sticky Rice', 'Som Tam'],\n      'greek': ['Moussaka', 'Souvlaki', 'Greek Salad', 'Spanakopita', 'Baklava'],\n      'american': ['Burger', 'BBQ Ribs', 'Mac and Cheese', 'Apple Pie', 'Fried Chicken'],\n      'african': ['Jollof Rice', 'Bobotie', 'Tagine', 'Piri Piri Chicken', 'Injera'],\n    };\n    \n    // Get dishes specific to this cuisine or use general names\n    const dishNames = cuisineDishes[normalizedCuisineName] || \n      [`${cuisineName} Specialty`, `Traditional ${cuisineName} Dish`, `${cuisineName} Delight`];\n    \n    // Common ingredients for each dish\n    const commonIngredients = [\n      { name: \"Salt\", amount: 1, unit: \"tsp\" },\n      { name: \"Pepper\", amount: 0.5, unit: \"tsp\" },\n      { name: \"Olive Oil\", amount: 2, unit: \"tbsp\" },\n    ];\n    \n    // Generate mock recipes\n    for (let i = 0; i < Math.min(count, dishNames.length); i++) {\n      mockRecipes.push({\n        id: `mock-${normalizedCuisineName}-${i}`,\n        name: dishNames[i],\n        description: `A traditional ${cuisineName} recipe featuring local ingredients and authentic flavors.`,\n        cuisine: cuisineName,\n        ingredients: [...commonIngredients],\n        instructions: [\"Prepare ingredients\", \"Cook according to traditional methods\", \"Serve and enjoy!\"],\n        timeToMake: \"30 minutes\",\n        servingSize: 4,\n        matchScore: 0.85 + (Math.random() * 0.15),\n        matchPercentage: Math.round((0.85 + Math.random() * 0.15) * 100),\n        elementalProperties: {\n          Fire: 0.25,\n          Water: 0.25,\n          Earth: 0.25,\n          Air: 0.25\n        },\n        isMockData: true\n      });\n    }\n    \n    return mockRecipes;\n  };\n\n  try {\n    // Special handling for American and African cuisines that have been problematic\n    if (\n      normalizedCuisineName === 'american' ||\n      normalizedCuisineName === 'african'\n    ) {\n      console.log(`Using specialized handling for ${cuisineName}`);\n      try {\n        // First, try LocalRecipeService\n        const { LocalRecipeService } = require('../services/LocalRecipeService');\n\n        // Clear cache to ensure fresh data\n        LocalRecipeService.clearCache();\n        const localRecipes = LocalRecipeService.getRecipesByCuisine(cuisineName);\n        console.log(`LocalRecipeService returned ${localRecipes?.length || 0} recipes for ${cuisineName}`);\n\n        if (localRecipes && localRecipes.length > 0) {\n          // Apply high match scores to local recipes\n          return localRecipes\n            .map((recipe) => ({\n              ...recipe,\n              matchScore: 0.85 + Math.random() * 0.15, // 85-100% match\n              matchPercentage: Math.round((0.85 + Math.random() * 0.15) * 100), // For display\n            }))\n            .slice(0, limit);\n        }\n\n        // If LocalRecipeService didn't work, try direct import\n        let cuisine;\n        try {\n          if (normalizedCuisineName === 'american') {\n            const { american } = require('../data/cuisines/american');\n            cuisine = american;\n          } else {\n            const { african } = require('../data/cuisines/african');\n            cuisine = african;\n          }\n        } catch (importError) {\n          console.error(`Error importing special cuisine data for ${cuisineName}:`, importError);\n        }\n\n        if (cuisine && cuisine.dishes) {\n          console.log(`Direct import successful for ${cuisineName}, extracting recipes from dishes`);\n\n          // Extract recipes from all meal types\n          const allRecipes = [];\n          const mealTypes = ['breakfast', 'lunch', 'dinner', 'dessert'];\n\n          for (const mealType of mealTypes) {\n            if (\n              cuisine.dishes[mealType]?.all &&\n              Array.isArray(cuisine.dishes[mealType].all)\n            ) {\n              console.log(`Found ${cuisine.dishes[mealType].all.length} ${mealType} recipes for ${cuisineName}`);\n\n              const mealRecipes = cuisine.dishes[mealType].all.map(\n                (recipe: unknown) => ({\n                  ...(recipe as object),\n                  cuisine: cuisineName,\n                  matchScore: 0.9,\n                  matchPercentage: 90,\n                  mealType: [mealType],\n                })\n              );\n\n              allRecipes.push(...mealRecipes);\n            }\n\n            // Also check seasonal recipes\n            const seasons = ['spring', 'summer', 'autumn', 'winter'];\n            for (const season of seasons) {\n              if (\n                cuisine.dishes[mealType]?.[season] &&\n                Array.isArray(cuisine.dishes[mealType][season])\n              ) {\n                console.log(`Found ${cuisine.dishes[mealType][season].length} ${season} ${mealType} recipes for ${cuisineName}`);\n\n                const seasonalRecipes = cuisine.dishes[mealType][season].map(\n                  (recipe: unknown) => ({\n                    ...(recipe as object),\n                    cuisine: cuisineName,\n                    matchScore: 0.85,\n                    matchPercentage: 85,\n                    mealType: [mealType],\n                    season: [season],\n                  })\n                );\n\n                allRecipes.push(...seasonalRecipes);\n              }\n            }\n          }\n\n          // Remove duplicates by name\n          const uniqueRecipes = allRecipes.filter(\n            (recipe, index, self) =>\n              index === self.findIndex((r) => r.name === recipe.name)\n          );\n\n          if (uniqueRecipes.length > 0) {\n            console.log(`Returning ${uniqueRecipes.length} unique recipes for ${cuisineName}`);\n            return uniqueRecipes.slice(0, limit);\n          }\n        }\n      } catch (error) {\n        console.error(`Error in special handling for ${cuisineName}:`, error);\n      }\n    }\n\n    // If special handling didn't return anything or cuisine isn't American/African,\n    // continue with the standard approach\n\n    // If no recipes are provided or empty array, try to fetch from LocalRecipeService\n    if (!Array.isArray(recipes) || recipes.length === 0) {\n      try {\n        console.log(`No recipes array provided, trying LocalRecipeService for ${cuisineName}`);\n        const { LocalRecipeService } = require('../services/LocalRecipeService');\n        const localRecipes = LocalRecipeService.getRecipesByCuisine(cuisineName);\n        console.log(`Fetched ${localRecipes?.length || 0} recipes directly from LocalRecipeService for ${cuisineName}`);\n\n        if (localRecipes && localRecipes.length > 0) {\n          // Apply high match scores to local recipes\n          return localRecipes\n            .map((recipe) => ({\n              ...recipe,\n              matchScore: 0.8 + Math.random() * 0.2, // 80-100% match\n              matchPercentage: Math.round((0.8 + Math.random() * 0.2) * 100), // For display\n            }))\n            .slice(0, limit);\n        } else {\n          console.log(`LocalRecipeService returned no recipes for ${cuisineName}, using mock data`);\n          return createMockRecipes(limit);\n        }\n      } catch (error) {\n        console.error(`Error fetching recipes from LocalRecipeService for ${cuisineName}:`, error);\n        return createMockRecipes(limit);\n      }\n    }\n\n    // Get the cuisine profile\n    const cuisineProfile = getCuisineProfile(cuisineName);\n    if (!cuisineProfile) {\n      console.warn(`No cuisine profile found for ${cuisineName}, using direct matches only`);\n      // Even without a profile, we can still try direct matches\n    }\n\n    // Different tiers of matches with varied scoring\n\n    // Direct exact cuisine matches (highest priority)\n    const exactCuisineMatches = recipes.filter(\n      (recipe) => {\n        const recipeData = recipe as Record<string, unknown>;\n        return recipeData?.cuisine?.toLowerCase() === normalizedCuisineName ||\n               recipeData?.cuisine?.toLowerCase()?.includes(normalizedCuisineName) ||\n               normalizedCuisineName.includes(recipeData?.cuisine?.toLowerCase());\n      }\n    );\n\n    console.log(`Found ${exactCuisineMatches.length} exact cuisine matches for ${cuisineName}`);\n\n    // Regional variant matches\n    const regionalMatches = recipes.filter(\n      (recipe) => {\n        const recipeData = recipe as Record<string, unknown>;\n        return !exactCuisineMatches.includes(recipe) && (\n                 recipeData?.regionalCuisine?.toLowerCase() === normalizedCuisineName ||\n                 recipeData?.regionalCuisine?.toLowerCase()?.includes(normalizedCuisineName) ||\n                 normalizedCuisineName.includes(recipeData?.regionalCuisine?.toLowerCase())\n               );\n      }\n    );\n\n    console.log(`Found ${regionalMatches.length} regional matches for ${cuisineName}`);\n\n    // Calculate match scores for all other recipes\n    const otherRecipes = recipes.filter(\n      (recipe) =>\n        !exactCuisineMatches.includes(recipe) && !regionalMatches.includes(recipe)\n    );\n\n    // Skip other recipe scoring if we already have enough direct matches\n    let scoredOtherRecipes = [];\n    if (exactCuisineMatches.length + regionalMatches.length < limit && cuisineProfile) {\n      // Score recipe matches using various factors\n      scoredOtherRecipes = otherRecipes\n        .map((recipe) => {\n          try {\n            const recipeData = recipe as Record<string, unknown>;\n            const scoreComponents = [];\n            let totalWeight = 0;\n\n            // Base flavor profile match (weight: 0.4)\n            if (cuisineProfile && recipeData?.flavorProfile) {\n              const flavorScore = calculateFlavorProfileMatch(\n                recipeData.flavorProfile,\n                cuisineProfile.flavorProfiles\n              );\n              scoreComponents.push(flavorScore * 0.4);\n              totalWeight += 0.4;\n            }\n\n            // Ingredient similarity (weight: 0.3)\n            if (cuisineProfile.signatureIngredients && recipeData?.ingredients) {\n              const recipeIngredientNames = recipeData.ingredients.map((ing: unknown) => {\n                const ingData = ing as Record<string, unknown>;\n                return typeof ing === 'string' ? ing.toLowerCase() : ingData?.name?.toLowerCase() || '';\n              });\n\n              const commonIngredients = cuisineProfile.signatureIngredients.filter(\n                (ing) =>\n                  recipeIngredientNames.some((ri) => ri?.includes(ing.toLowerCase()))\n              );\n\n              // Calculate score based on how many signature ingredients are used\n              const ingredientScore =\n                commonIngredients.length /\n                Math.max(cuisineProfile.signatureIngredients.length, 1);\n              scoreComponents.push(ingredientScore * 0.3);\n              totalWeight += 0.3;\n            }\n\n            // Technique similarity (weight: 0.2)\n            if (cuisineProfile.signatureTechniques && recipeData?.cookingMethods) {\n              const recipeTechniques = Array.isArray(recipeData.cookingMethods)\n                ? recipeData.cookingMethods.map((tech: string) => tech?.toLowerCase() || '')\n                : [recipeData.cookingMethods?.toLowerCase() || ''];\n\n              const commonTechniques = cuisineProfile.signatureTechniques.filter(\n                (tech) => recipeTechniques.some((rt) => rt?.includes(tech.toLowerCase()))\n              );\n\n              const techniqueScore =\n                commonTechniques.length /\n                Math.max(cuisineProfile.signatureTechniques.length, 1);\n              scoreComponents.push(techniqueScore * 0.2);\n              totalWeight += 0.2;\n            }\n\n            // Elemental alignment (weight: 0.1)\n            if (\n              cuisineProfile.elementalAlignment &&\n              recipeData?.elementalProperties\n            ) {\n              const elementScore = calculateSimilarityScore(\n                cuisineProfile.elementalAlignment,\n                recipeData.elementalProperties\n              );\n              scoreComponents.push(elementScore * 0.1);\n              totalWeight += 0.1;\n            }\n\n            // Calculate final score\n            let finalScore = 0;\n            if (totalWeight > 0) {\n              // Weighted average of all components\n              finalScore = scoreComponents.reduce((sum, score) => sum + score, 0) / totalWeight;\n\n              // Normalize score to ensure it's between 0 and 1\n              finalScore = Math.max(0, Math.min(1, finalScore));\n            } else {\n              // Default score if no components could be calculated\n              finalScore = 0.5;\n            }\n\n            return {\n              ...(recipe as Record<string, unknown>),\n              matchScore: finalScore,\n              matchPercentage: Math.round(finalScore * 100),\n            };\n          } catch (scoreError) {\n            console.error(`Error scoring recipe match for ${cuisineName}:`, scoreError);\n            return {\n              ...(recipe as Record<string, unknown>),\n              matchScore: 0.5,\n              matchPercentage: 50,\n            };\n          }\n        })\n        .filter((recipe) => (recipe as Recipe[])?.matchScore >= 0.5) // Only include reasonably good matches\n        .sort((a, b) => (b as Record<string, unknown>).matchScore - (a as Record<string, unknown>).matchScore); // Sort by score (high to low)\n    }\n\n    console.log(`Found ${scoredOtherRecipes.length} scored other recipes for ${cuisineName}`);\n\n    // Combine all matches, prioritizing direct matches, then regional, then others\n    const allMatches = [\n      ...exactCuisineMatches.map((recipe) => ({\n        ...(recipe as Record<string, unknown>),\n        matchScore: 0.9 + Math.random() * 0.1, // 90-100% match\n        matchPercentage: Math.round((0.9 + Math.random() * 0.1) * 100),\n      })),\n      ...regionalMatches.map((recipe) => ({\n        ...(recipe as Record<string, unknown>),\n        matchScore: 0.8 + Math.random() * 0.1, // 80-90% match\n        matchPercentage: Math.round((0.8 + Math.random() * 0.1) * 100),\n      })),\n      ...scoredOtherRecipes.slice(0, limit - exactCuisineMatches.length - regionalMatches.length),\n    ];\n\n    // Remove duplicates by name\n    const uniqueMatches = allMatches.filter(\n      (recipe, index, self) => {\n        const recipeData = recipe as Record<string, unknown>;\n        return index === self.findIndex((r) => (r as Record<string, unknown>)?.name === recipeData?.name);\n      }\n    );\n\n    // Sort by match score\n    const sortedMatches = uniqueMatches.sort((a, b) => (b as Record<string, unknown>).matchScore - (a as Record<string, unknown>).matchScore);\n    \n    console.log(`Returning ${sortedMatches.length} sorted matches for ${cuisineName}`);\n    \n    // Use mock data if we didn't find enough recipes\n    if (sortedMatches.length < Math.min(3, limit)) {\n      const mockRecipes = createMockRecipes(limit - sortedMatches.length);\n      return [...sortedMatches, ...mockRecipes].slice(0, limit);\n    }\n    \n    return sortedMatches.slice(0, limit);\n  } catch (error) {\n    console.error(`Error in getRecipesForCuisineMatch for ${cuisineName}:`, error);\n    return createMockRecipes(limit);\n  }\n}\n\n// Helper function to calculate flavor profile match\nfunction calculateFlavorProfileMatch(\n  recipeProfile: unknown,\n  cuisineProfile: unknown\n): number {\n  let similarity = 0;\n  let count = 0;\n\n  const recipeData = recipeProfile as Record<string, unknown>;\n  const cuisineData = cuisineProfile as Record<string, unknown>;\n\n  // Compare common flavor dimensions\n  const flavors = ['spicy', 'sweet', 'sour', 'bitter', 'salty', 'umami'];\n\n  flavors.forEach((flavor) => {\n    if (\n      recipeData?.[flavor] !== undefined &&\n      cuisineData?.[flavor] !== undefined\n    ) {\n      similarity +=\n        1 - Math.abs(recipeData[flavor] - cuisineData[flavor]);\n      count++;\n    }\n  });\n\n  return count > 0 ? similarity / count : 0.5;\n}\n\nexport const getCuisineElementalMatch = (\n  cuisineName: string,\n  elementalProps: ElementalProperties\n): number => {\n  let matchScore = 0;\n  let totalWeight = 0;\n\n  // Get the cuisine profile\n  const cuisine = cuisineFlavorProfiles[cuisineName.toLowerCase()];\n  if (!cuisine) return 0.5; // Default neutral match if cuisine not found\n\n  // Compare elemental compatibility\n  if (cuisine.elementalProperties) {\n    Object.keys(elementalProps).forEach((element) => {\n      const elementKey = element as keyof ElementalProperties;\n      const cuisineValue = cuisine.elementalProperties?.[elementKey] || 0;\n      const targetValue = elementalProps[elementKey] || 0;\n\n      // Calculate similarity - the closer the values, the better the match\n      const similarity = 1 - Math.abs(cuisineValue - targetValue);\n      \n      // Weight important elements more heavily\n      const weight = Math.max(cuisineValue, targetValue) * 2;\n      \n      matchScore += similarity * weight;\n      totalWeight += weight;\n    });\n  }\n\n  return totalWeight > 0 ? matchScore / totalWeight : 0.5;\n};\n\nexport const calculateCuisineSimilarity = (\n  cuisine1: string,\n  cuisine2: string\n): number => {\n  const profile1 = getCuisineProfile(cuisine1);\n  const profile2 = getCuisineProfile(cuisine2);\n\n  if (!profile1 || !profile2) {\n    return 0.5; // Default neutral similarity if profiles not found\n  }\n\n  let similarityScore = 0;\n  let totalWeight = 0;\n\n  // Elemental similarity (weight: 0.4)\n  const elements = ['Fire', 'Water', 'Earth', 'Air'];\n  let elementalSimilarity = 0;\n  let elementCount = 0;\n\n  elements.forEach((element) => {\n    const elementKey = element as keyof ElementalProperties;\n    const val1 = profile1.elementalProperties?.[elementKey] || 0;\n    const val2 = profile2.elementalProperties?.[elementKey] || 0;\n    \n    elementalSimilarity += 1 - Math.abs(val1 - val2);\n    elementCount++;\n  });\n\n  const normalizedElementalSimilarity = \n    elementCount > 0 ? elementalSimilarity / elementCount : 0.5;\n  \n  similarityScore += normalizedElementalSimilarity * 0.4;\n  totalWeight += 0.4;\n\n  // Flavor profile similarity (weight: 0.6)\n  const flavors = ['sweet', 'salty', 'sour', 'bitter', 'umami', 'spicy'];\n  let flavorSimilarity = 0;\n  let flavorCount = 0;\n\n  flavors.forEach((flavor) => {\n    const val1 = profile1.flavorIntensities?.[flavor] || 0;\n    const val2 = profile2.flavorIntensities?.[flavor] || 0;\n    \n    flavorSimilarity += 1 - Math.abs(val1 - val2);\n    flavorCount++;\n  });\n\n  const normalizedFlavorSimilarity = \n    flavorCount > 0 ? flavorSimilarity / flavorCount : 0.5;\n  \n  similarityScore += normalizedFlavorSimilarity * 0.6;\n  totalWeight += 0.6;\n\n  return totalWeight > 0 ? similarityScore / totalWeight : 0.5;\n};\n\nexport const findRelatedRecipes = (\n  recipeName: string,\n  recipes: Recipe[],\n  count = 3\n): Recipe[] => {\n  const scoredRecipes = recipes\n    .map((recipe) => {\n      const scoreComponents = [];\n      const totalWeight = 0;\n      \n      // Simple name similarity scoring\n      const nameSimilarity = recipe.name && recipeName ? \n        (recipe.name.toLowerCase().includes(recipeName.toLowerCase()) ? 0.8 : 0.2) : 0.2;\n      \n      return {\n        ...recipe,\n        score: nameSimilarity\n      };\n    })\n    .sort((a, b) => b.score - a.score)\n    .slice(0, count);\n    \n  return scoredRecipes;\n};\n\nexport const calculateSimilarityScore = (\n  elementalProps1: ElementalProperties,\n  elementalProps2: ElementalProperties\n): number => {\n  let similarity = 0;\n  let count = 0;\n  \n  // Compare elemental properties\n  const elements: (keyof ElementalProperties)[] = ['Fire', 'Water', 'Earth', 'Air'];\n  \n  elements.forEach(element => {\n    const val1 = elementalProps1[element] || 0;\n    const val2 = elementalProps2[element] || 0;\n    similarity += 1 - Math.abs(val1 - val2);\n    count++;\n  });\n  \n  return count > 0 ? similarity / count : 0.5;\n};\n"],"version":3}