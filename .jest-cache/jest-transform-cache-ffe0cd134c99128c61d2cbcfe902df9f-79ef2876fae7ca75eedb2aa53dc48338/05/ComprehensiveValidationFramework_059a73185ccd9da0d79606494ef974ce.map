{"file":"/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/scripts/validation/ComprehensiveValidationFramework.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/scripts/validation/ComprehensiveValidationFramework.ts"],"sourcesContent":["/**\n * Comprehensive Validation Framework for Unused Variable Elimination\n *\n * This framework implements comprehensive validation to ensure build stability\n * and quality assurance throughout the unused variable elimination process.\n *\n * Features:\n * - Zero TypeScript compilation error maintenance\n * - Test suite validation after each batch\n * - React component functionality preservation checks\n * - Service integration validation\n * - Quality assurance reporting\n */\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\n\nexport interface ValidationConfig {\n  enableTypeScriptValidation: boolean;\n  enableTestSuiteValidation: boolean;\n  enableComponentValidation: boolean;\n  enableServiceValidation: boolean;\n  enableBuildValidation: boolean;\n  testTimeout: number;\n  compilationTimeout: number;\n  maxRetries: number;\n  logLevel: 'debug' | 'info' | 'warn' | 'error';\n}\n\nexport interface ValidationResult {\n  passed: boolean;\n  validationType: string;\n  errors: string[];\n  warnings: string[];\n  recommendations: string[];\n  executionTime: number;\n  retryCount: number;\n  details: Record<string, any>;\n}\n\nexport interface ComprehensiveValidationResult {\n  overallPassed: boolean;\n  validationResults: ValidationResult[];\n  summary: ValidationSummary;\n  requiresRollback: boolean;\n  qualityScore: number;\n}\n\nexport interface ValidationSummary {\n  totalValidations: number;\n  passedValidations: number;\n  failedValidations: number;\n  warningsCount: number;\n  totalExecutionTime: number;\n  criticalIssues: string[];\n  recommendations: string[];\n}\n\nexport interface ComponentValidationInfo {\n  componentPath: string;\n  componentName: string;\n  hasTests: boolean;\n  exportedFunctions: string[];\n  importedDependencies: string[];\n  propsInterface?: string;\n  stateVariables: string[];\n}\n\nexport interface ServiceValidationInfo {\n  servicePath: string;\n  serviceName: string;\n  apiEndpoints: string[];\n  exportedMethods: string[];\n  dependencies: string[];\n  configurationKeys: string[];\n}\n\nexport class ComprehensiveValidationFramework {\n  private config: ValidationConfig;\n  private validationHistory: Map<string, ValidationResult[]> = new Map();\n\n  constructor(config: Partial<ValidationConfig> = {}) {\n    this.config = {\n      enableTypeScriptValidation: true,\n      enableTestSuiteValidation: true,\n      enableComponentValidation: true,\n      enableServiceValidation: true,\n      enableBuildValidation: true,\n      testTimeout: 30000,\n      compilationTimeout: 45000,\n      maxRetries: 2,\n      logLevel: 'info',\n      ...config\n    };\n  }\n\n  /**\n   * Perform comprehensive validation after batch processing\n   */\n  async performComprehensiveValidation(\n    processedFiles: string[],\n    batchId: string\n  ): Promise<ComprehensiveValidationResult> {\n    const startTime = Date.now();\n    this.log('info', `🔍 Starting comprehensive validation for batch ${batchId}`);\n    this.log('info', `📋 Validating ${processedFiles.length} processed files`);\n\n    const validationResults: ValidationResult[] = [];\n    let overallPassed = true;\n    let qualityScore = 100;\n\n    try {\n      // 1. TypeScript Compilation Validation (Critical)\n      if (this.config.enableTypeScriptValidation) {\n        const tsResult = await this.validateTypeScriptCompilation(batchId);\n        validationResults.push(tsResult);\n        if (!tsResult.passed) {\n          overallPassed = false;\n          qualityScore -= 40; // Major penalty for compilation errors\n        }\n      }\n\n      // 2. Test Suite Validation (High Priority)\n      if (this.config.enableTestSuiteValidation) {\n        const testResult = await this.validateTestSuite(processedFiles, batchId);\n        validationResults.push(testResult);\n        if (!testResult.passed) {\n          overallPassed = false;\n          qualityScore -= 25; // Significant penalty for test failures\n        }\n      }\n\n      // 3. React Component Functionality Validation (High Priority)\n      if (this.config.enableComponentValidation) {\n        const componentResults = await this.validateReactComponents(processedFiles, batchId);\n        validationResults.push(...componentResults);\n        const failedComponents = componentResults.filter(r => !r.passed);\n        if (failedComponents.length > 0) {\n          overallPassed = false;\n          qualityScore -= Math.min(20, failedComponents.length * 5);\n        }\n      }\n\n      // 4. Service Integration Validation (Medium Priority)\n      if (this.config.enableServiceValidation) {\n        const serviceResults = await this.validateServiceIntegration(processedFiles, batchId);\n        validationResults.push(...serviceResults);\n        const failedServices = serviceResults.filter(r => !r.passed);\n        if (failedServices.length > 0) {\n          qualityScore -= Math.min(15, failedServices.length * 3);\n        }\n      }\n\n      // 5. Build System Validation (Medium Priority)\n      if (this.config.enableBuildValidation) {\n        const buildResult = await this.validateBuildSystem(batchId);\n        validationResults.push(buildResult);\n        if (!buildResult.passed) {\n          qualityScore -= 10; // Minor penalty for build issues\n        }\n      }\n\n      // Calculate summary\n      const summary = this.calculateValidationSummary(validationResults, startTime);\n\n      // Determine if rollback is required\n      const requiresRollback = this.shouldRequireRollback(validationResults);\n\n      // Store validation history\n      this.storeValidationHistory(batchId, validationResults);\n\n      const result: ComprehensiveValidationResult = {\n        overallPassed,\n        validationResults,\n        summary,\n        requiresRollback,\n        qualityScore: Math.max(0, qualityScore)\n      };\n\n      this.log('info', `✅ Comprehensive validation completed`);\n      this.log('info', `📊 Overall Result: ${overallPassed ? 'PASSED' : 'FAILED'}`);\n      this.log('info', `🎯 Quality Score: ${result.qualityScore}/100`);\n\n      return result;\n\n    } catch (error) {\n      this.log('error', `❌ Comprehensive validation failed: ${error}`);\n\n      return {\n        overallPassed: false,\n        validationResults: [{\n          passed: false,\n          validationType: 'framework-error',\n          errors: [`Validation framework error: ${error}`],\n          warnings: [],\n          recommendations: ['Review validation framework configuration'],\n          executionTime: Date.now() - startTime,\n          retryCount: 0,\n          details: { error: error.toString() }\n        }],\n        summary: {\n          totalValidations: 1,\n          passedValidations: 0,\n          failedValidations: 1,\n          warningsCount: 0,\n          totalExecutionTime: Date.now() - startTime,\n          criticalIssues: ['Validation framework failure'],\n          recommendations: ['Review validation framework configuration']\n        },\n        requiresRollback: true,\n        qualityScore: 0\n      };\n    }\n  }\n\n  /**\n   * Validate TypeScript compilation with zero error requirement\n   */\n  private async validateTypeScriptCompilation(batchId: string): Promise<ValidationResult> {\n    const startTime = Date.now();\n    const result: ValidationResult = {\n      passed: false,\n      validationType: 'typescript-compilation',\n      errors: [],\n      warnings: [],\n      recommendations: [],\n      executionTime: 0,\n      retryCount: 0,\n      details: {}\n    };\n\n    this.log('debug', '🔍 Validating TypeScript compilation...');\n\n    for (let retry = 0; retry <= this.config.maxRetries; retry++) {\n      try {\n        result.retryCount = retry;\n\n        // Run TypeScript compilation with detailed error reporting\n        const output = execSync('yarn tsc --noEmit --skipLibCheck --pretty', {\n          encoding: 'utf8',\n          timeout: this.config.compilationTimeout,\n          stdio: 'pipe'\n        });\n\n        // If we get here, compilation succeeded\n        result.passed = true;\n        result.details.compilationOutput = 'No errors found';\n        this.log('debug', '✅ TypeScript compilation passed');\n        break;\n\n      } catch (error: any) {\n        const errorOutput = error.stdout || error.stderr || error.message;\n\n        // Parse TypeScript errors\n        const errorLines = errorOutput.split('\\n').filter(line => line.trim());\n        const errorCount = errorLines.filter(line => /error TS\\d+:/.test(line)).length;\n\n        result.errors.push(`TypeScript compilation failed with ${errorCount} errors`);\n        result.details.errorOutput = errorOutput;\n        result.details.errorCount = errorCount;\n\n        // Extract specific error types for analysis\n        const errorTypes = this.extractTypeScriptErrorTypes(errorOutput);\n        result.details.errorTypes = errorTypes;\n\n        if (retry < this.config.maxRetries) {\n          this.log('warn', `⚠️ TypeScript compilation failed (attempt ${retry + 1}), retrying...`);\n          await this.delay(1000); // Wait 1 second before retry\n        } else {\n          this.log('error', `❌ TypeScript compilation failed after ${retry + 1} attempts`);\n          result.recommendations.push('Review TypeScript errors and fix compilation issues');\n          result.recommendations.push('Consider rolling back changes if errors are critical');\n        }\n      }\n    }\n\n    result.executionTime = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Validate test suite execution\n   */\n  private async validateTestSuite(processedFiles: string[], batchId: string): Promise<ValidationResult> {\n    const startTime = Date.now();\n    const result: ValidationResult = {\n      passed: false,\n      validationType: 'test-suite',\n      errors: [],\n      warnings: [],\n      recommendations: [],\n      executionTime: 0,\n      retryCount: 0,\n      details: {}\n    };\n\n    this.log('debug', '🧪 Validating test suite...');\n\n    try {\n      // Find related test files for processed files\n      const relatedTestFiles = this.findRelatedTestFiles(processedFiles);\n      result.details.relatedTestFiles = relatedTestFiles;\n\n      if (relatedTestFiles.length === 0) {\n        result.passed = true;\n        result.warnings.push('No related test files found for processed files');\n        result.recommendations.push('Consider adding tests for modified components');\n        this.log('debug', '⚠️ No related test files found');\n      } else {\n        // Run tests with memory management\n        const testCommand = `NODE_OPTIONS='--expose-gc --max-old-space-size=2048' yarn test --run --passWithNoTests --testPathPattern=\"${relatedTestFiles.join('|')}\"`;\n\n        const output = execSync(testCommand, {\n          encoding: 'utf8',\n          timeout: this.config.testTimeout,\n          stdio: 'pipe'\n        });\n\n        // Parse test results\n        const testResults = this.parseTestResults(output);\n        result.details.testResults = testResults;\n\n        if (testResults.failed === 0) {\n          result.passed = true;\n          this.log('debug', `✅ All ${testResults.passed} tests passed`);\n        } else {\n          result.errors.push(`${testResults.failed} tests failed`);\n          result.recommendations.push('Review and fix failing tests');\n          this.log('error', `❌ ${testResults.failed} tests failed`);\n        }\n      }\n\n    } catch (error: any) {\n      result.errors.push(`Test suite validation failed: ${error.message}`);\n      result.details.error = error.toString();\n      result.recommendations.push('Review test configuration and dependencies');\n      this.log('error', `❌ Test suite validation failed: ${error}`);\n    }\n\n    result.executionTime = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Validate React component functionality preservation\n   */\n  private async validateReactComponents(processedFiles: string[], batchId: string): Promise<ValidationResult[]> {\n    const results: ValidationResult[] = [];\n\n    // Filter for React component files\n    const componentFiles = processedFiles.filter(file =>\n      /\\.(tsx|jsx)$/.test(file) &&\n      /\\/components\\//.test(file)\n    );\n\n    this.log('debug', `🔍 Validating ${componentFiles.length} React components...`);\n\n    for (const componentFile of componentFiles) {\n      const result = await this.validateSingleComponent(componentFile, batchId);\n      results.push(result);\n    }\n\n    return results;\n  }\n\n  /**\n   * Validate a single React component\n   */\n  private async validateSingleComponent(componentPath: string, batchId: string): Promise<ValidationResult> {\n    const startTime = Date.now();\n    const result: ValidationResult = {\n      passed: true,\n      validationType: 'react-component',\n      errors: [],\n      warnings: [],\n      recommendations: [],\n      executionTime: 0,\n      retryCount: 0,\n      details: { componentPath }\n    };\n\n    try {\n      const componentInfo = await this.analyzeComponent(componentPath);\n      result.details.componentInfo = componentInfo;\n\n      // Check if component can still be imported\n      const importValidation = await this.validateComponentImport(componentPath);\n      if (!importValidation.success) {\n        result.passed = false;\n        result.errors.push(`Component import failed: ${importValidation.error}`);\n      }\n\n      // Check if component exports are intact\n      const exportValidation = await this.validateComponentExports(componentPath, componentInfo);\n      if (!exportValidation.success) {\n        result.passed = false;\n        result.errors.push(`Component exports validation failed: ${exportValidation.error}`);\n      }\n\n      // Check if component props interface is preserved\n      if (componentInfo.propsInterface) {\n        const propsValidation = await this.validateComponentProps(componentPath, componentInfo.propsInterface);\n        if (!propsValidation.success) {\n          result.warnings.push(`Props interface may have been affected: ${propsValidation.warning}`);\n        }\n      }\n\n      // Check if component has tests and they still pass\n      if (componentInfo.hasTests) {\n        const testValidation = await this.validateComponentTests(componentPath);\n        if (!testValidation.success) {\n          result.warnings.push(`Component tests may be affected: ${testValidation.warning}`);\n        }\n      } else {\n        result.recommendations.push('Consider adding tests for this component');\n      }\n\n      if (result.passed) {\n        this.log('debug', `✅ Component ${componentInfo.componentName} validation passed`);\n      } else {\n        this.log('error', `❌ Component ${componentInfo.componentName} validation failed`);\n      }\n\n    } catch (error) {\n      result.passed = false;\n      result.errors.push(`Component validation failed: ${error}`);\n      this.log('error', `❌ Component validation failed for ${componentPath}: ${error}`);\n    }\n\n    result.executionTime = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Validate service integration functionality\n   */\n  private async validateServiceIntegration(processedFiles: string[], batchId: string): Promise<ValidationResult[]> {\n    const results: ValidationResult[] = [];\n\n    // Filter for service files\n    const serviceFiles = processedFiles.filter(file =>\n      /\\/services\\//.test(file) ||\n      /Service\\.ts$/.test(file) ||\n      /Client\\.ts$/.test(file)\n    );\n\n    this.log('debug', `🔍 Validating ${serviceFiles.length} service integrations...`);\n\n    for (const serviceFile of serviceFiles) {\n      const result = await this.validateSingleService(serviceFile, batchId);\n      results.push(result);\n    }\n\n    return results;\n  }\n\n  /**\n   * Validate a single service\n   */\n  private async validateSingleService(servicePath: string, batchId: string): Promise<ValidationResult> {\n    const startTime = Date.now();\n    const result: ValidationResult = {\n      passed: true,\n      validationType: 'service-integration',\n      errors: [],\n      warnings: [],\n      recommendations: [],\n      executionTime: 0,\n      retryCount: 0,\n      details: { servicePath }\n    };\n\n    try {\n      const serviceInfo = await this.analyzeService(servicePath);\n      result.details.serviceInfo = serviceInfo;\n\n      // Check if service can still be imported\n      const importValidation = await this.validateServiceImport(servicePath);\n      if (!importValidation.success) {\n        result.passed = false;\n        result.errors.push(`Service import failed: ${importValidation.error}`);\n      }\n\n      // Check if API endpoints are still functional (basic syntax check)\n      if (serviceInfo.apiEndpoints.length > 0) {\n        const endpointValidation = await this.validateApiEndpoints(servicePath, serviceInfo.apiEndpoints);\n        if (!endpointValidation.success) {\n          result.warnings.push(`API endpoints may be affected: ${endpointValidation.warning}`);\n        }\n      }\n\n      // Check if exported methods are intact\n      const methodValidation = await this.validateServiceMethods(servicePath, serviceInfo.exportedMethods);\n      if (!methodValidation.success) {\n        result.passed = false;\n        result.errors.push(`Service methods validation failed: ${methodValidation.error}`);\n      }\n\n      if (result.passed) {\n        this.log('debug', `✅ Service ${serviceInfo.serviceName} validation passed`);\n      } else {\n        this.log('error', `❌ Service ${serviceInfo.serviceName} validation failed`);\n      }\n\n    } catch (error) {\n      result.passed = false;\n      result.errors.push(`Service validation failed: ${error}`);\n      this.log('error', `❌ Service validation failed for ${servicePath}: ${error}`);\n    }\n\n    result.executionTime = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Validate build system functionality\n   */\n  private async validateBuildSystem(batchId: string): Promise<ValidationResult> {\n    const startTime = Date.now();\n    const result: ValidationResult = {\n      passed: false,\n      validationType: 'build-system',\n      errors: [],\n      warnings: [],\n      recommendations: [],\n      executionTime: 0,\n      retryCount: 0,\n      details: {}\n    };\n\n    this.log('debug', '🏗️ Validating build system...');\n\n    try {\n      // Test Next.js build process (dry run)\n      const buildOutput = execSync('yarn next build --dry-run', {\n        encoding: 'utf8',\n        timeout: 60000, // 1 minute timeout for build validation\n        stdio: 'pipe'\n      });\n\n      result.passed = true;\n      result.details.buildOutput = typeof buildOutput === 'string' ? buildOutput : buildOutput.toString();\n      this.log('debug', '✅ Build system validation passed');\n\n    } catch (error: any) {\n      result.errors.push(`Build system validation failed: ${error.message}`);\n      result.details.buildError = error.toString();\n      result.recommendations.push('Review build configuration and dependencies');\n      this.log('error', `❌ Build system validation failed: ${error}`);\n    }\n\n    result.executionTime = Date.now() - startTime;\n    return result;\n  }\n\n  // Helper methods for analysis and validation\n\n  private async analyzeComponent(componentPath: string): Promise<ComponentValidationInfo> {\n    const content = fs.readFileSync(componentPath, 'utf8');\n    const relativePath = path.relative(process.cwd(), componentPath);\n    const componentName = path.basename(componentPath, path.extname(componentPath));\n\n    // Find test file\n    const testPath = componentPath.replace(/\\.(tsx|jsx)$/, '.test.$1');\n    const hasTests = fs.existsSync(testPath);\n\n    // Extract exports (simplified)\n    const exportMatches = content.match(/export\\s+(?:const|function|class)\\s+(\\w+)/g) || [];\n    const exportedFunctions = exportMatches.map(match => {\n      const nameMatch = match.match(/export\\s+(?:const|function|class)\\s+(\\w+)/);\n      return nameMatch ? nameMatch[1] : '';\n    }).filter(Boolean);\n\n    // Extract imports (simplified)\n    const importMatches = content.match(/import\\s+.*?\\s+from\\s+['\"]([^'\"]+)['\"]/g) || [];\n    const importedDependencies = importMatches.map(match => {\n      const pathMatch = match.match(/from\\s+['\"]([^'\"]+)['\"]/);\n      return pathMatch ? pathMatch[1] : '';\n    }).filter(Boolean);\n\n    // Extract props interface (simplified)\n    const propsInterfaceMatch = content.match(/interface\\s+(\\w*Props)\\s*{/);\n    const propsInterface = propsInterfaceMatch ? propsInterfaceMatch[1] : undefined;\n\n    // Extract state variables (simplified)\n    const stateMatches = content.match(/const\\s+\\[(\\w+),\\s*set\\w+\\]\\s*=\\s*useState/g) || [];\n    const stateVariables = stateMatches.map(match => {\n      const nameMatch = match.match(/const\\s+\\[(\\w+),/);\n      return nameMatch ? nameMatch[1] : '';\n    }).filter(Boolean);\n\n    return {\n      componentPath: relativePath,\n      componentName,\n      hasTests,\n      exportedFunctions,\n      importedDependencies,\n      propsInterface,\n      stateVariables\n    };\n  }\n\n  private async analyzeService(servicePath: string): Promise<ServiceValidationInfo> {\n    const content = fs.readFileSync(servicePath, 'utf8');\n    const relativePath = path.relative(process.cwd(), servicePath);\n    const serviceName = path.basename(servicePath, path.extname(servicePath));\n\n    // Extract API endpoints (simplified)\n    const apiMatches = content.match(/['\"`]\\/api\\/[^'\"`]+['\"`]/g) || [];\n    const apiEndpoints = apiMatches.map(match => match.replace(/['\"`]/g, ''));\n\n    // Extract exported methods (simplified)\n    const exportMatches = content.match(/export\\s+(?:const|function|class)\\s+(\\w+)/g) || [];\n    const exportedMethods = exportMatches.map(match => {\n      const nameMatch = match.match(/export\\s+(?:const|function|class)\\s+(\\w+)/);\n      return nameMatch ? nameMatch[1] : '';\n    }).filter(Boolean);\n\n    // Extract dependencies (simplified)\n    const importMatches = content.match(/import\\s+.*?\\s+from\\s+['\"]([^'\"]+)['\"]/g) || [];\n    const dependencies = importMatches.map(match => {\n      const pathMatch = match.match(/from\\s+['\"]([^'\"]+)['\"]/);\n      return pathMatch ? pathMatch[1] : '';\n    }).filter(Boolean);\n\n    // Extract configuration keys (simplified)\n    const configMatches = content.match(/process\\.env\\.(\\w+)/g) || [];\n    const configurationKeys = configMatches.map(match => {\n      const keyMatch = match.match(/process\\.env\\.(\\w+)/);\n      return keyMatch ? keyMatch[1] : '';\n    }).filter(Boolean);\n\n    return {\n      servicePath: relativePath,\n      serviceName,\n      apiEndpoints,\n      exportedMethods,\n      dependencies,\n      configurationKeys\n    };\n  }\n\n  private async validateComponentImport(componentPath: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      // This is a simplified check - in a real implementation, you might use TypeScript compiler API\n      const content = fs.readFileSync(componentPath, 'utf8');\n\n      // Check for basic syntax errors that would prevent import\n      if (content.includes('export default') || content.includes('export {') || content.includes('export const')) {\n        return { success: true };\n      } else {\n        return { success: false, error: 'No exports found in component' };\n      }\n    } catch (error) {\n      return { success: false, error: `Failed to read component: ${error}` };\n    }\n  }\n\n  private async validateComponentExports(componentPath: string, componentInfo: ComponentValidationInfo): Promise<{ success: boolean; error?: string }> {\n    try {\n      const content = fs.readFileSync(componentPath, 'utf8');\n\n      // Check if previously identified exports are still present\n      for (const exportedFunction of componentInfo.exportedFunctions) {\n        if (!content.includes(exportedFunction)) {\n          return { success: false, error: `Exported function ${exportedFunction} not found` };\n        }\n      }\n\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: `Failed to validate exports: ${error}` };\n    }\n  }\n\n  private async validateComponentProps(componentPath: string, propsInterface: string): Promise<{ success: boolean; warning?: string }> {\n    try {\n      const content = fs.readFileSync(componentPath, 'utf8');\n\n      if (!content.includes(propsInterface)) {\n        return { success: false, warning: `Props interface ${propsInterface} not found` };\n      }\n\n      return { success: true };\n    } catch (error) {\n      return { success: false, warning: `Failed to validate props: ${error}` };\n    }\n  }\n\n  private async validateComponentTests(componentPath: string): Promise<{ success: boolean; warning?: string }> {\n    try {\n      const testPath = componentPath.replace(/\\.(tsx|jsx)$/, '.test.$1');\n\n      if (!fs.existsSync(testPath)) {\n        return { success: false, warning: 'Test file not found' };\n      }\n\n      // This is a simplified check - in a real implementation, you might run the specific test\n      return { success: true };\n    } catch (error) {\n      return { success: false, warning: `Failed to validate tests: ${error}` };\n    }\n  }\n\n  private async validateServiceImport(servicePath: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      const content = fs.readFileSync(servicePath, 'utf8');\n\n      // Check for basic syntax errors that would prevent import\n      if (content.includes('export')) {\n        return { success: true };\n      } else {\n        return { success: false, error: 'No exports found in service' };\n      }\n    } catch (error) {\n      return { success: false, error: `Failed to read service: ${error}` };\n    }\n  }\n\n  private async validateApiEndpoints(servicePath: string, endpoints: string[]): Promise<{ success: boolean; warning?: string }> {\n    try {\n      const content = fs.readFileSync(servicePath, 'utf8');\n\n      // Check if API endpoints are still referenced\n      for (const endpoint of endpoints) {\n        if (!content.includes(endpoint)) {\n          return { success: false, warning: `API endpoint ${endpoint} not found` };\n        }\n      }\n\n      return { success: true };\n    } catch (error) {\n      return { success: false, warning: `Failed to validate API endpoints: ${error}` };\n    }\n  }\n\n  private async validateServiceMethods(servicePath: string, methods: string[]): Promise<{ success: boolean; error?: string }> {\n    try {\n      const content = fs.readFileSync(servicePath, 'utf8');\n\n      // Check if previously identified methods are still present\n      for (const method of methods) {\n        if (!content.includes(method)) {\n          return { success: false, error: `Service method ${method} not found` };\n        }\n      }\n\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: `Failed to validate service methods: ${error}` };\n    }\n  }\n\n  private findRelatedTestFiles(processedFiles: string[]): string[] {\n    const testFiles: string[] = [];\n\n    for (const file of processedFiles) {\n      // Look for corresponding test files\n      const testPatterns = [\n        file.replace(/\\.(ts|tsx|js|jsx)$/, '.test.$1'),\n        file.replace(/\\.(ts|tsx|js|jsx)$/, '.spec.$1'),\n        file.replace(/\\/([^/]+)\\.(ts|tsx|js|jsx)$/, '/__tests__/$1.test.$2')\n      ];\n\n      for (const testPattern of testPatterns) {\n        if (fs.existsSync(testPattern)) {\n          testFiles.push(testPattern);\n          break;\n        }\n      }\n    }\n\n    return testFiles;\n  }\n\n  private parseTestResults(output: string | Buffer): { passed: number; failed: number; total: number } {\n    // Parse Jest output (simplified)\n    // Handle both string and Buffer types\n    const outputStr = typeof output === 'string' ? output : output.toString();\n\n    const passedMatch = outputStr.match(/(\\d+) passed/);\n    const failedMatch = outputStr.match(/(\\d+) failed/);\n\n    const passed = passedMatch ? parseInt(passedMatch[1]) : 0;\n    const failed = failedMatch ? parseInt(failedMatch[1]) : 0;\n    const total = passed + failed;\n\n    return { passed, failed, total };\n  }\n\n  private extractTypeScriptErrorTypes(errorOutput: string): Record<string, number> {\n    const errorTypes: Record<string, number> = {};\n    const errorMatches = errorOutput.match(/error TS(\\d+):/g) || [];\n\n    for (const match of errorMatches) {\n      const errorCode = match.match(/TS(\\d+)/)?.[1];\n      if (errorCode) {\n        errorTypes[`TS${errorCode}`] = (errorTypes[`TS${errorCode}`] || 0) + 1;\n      }\n    }\n\n    return errorTypes;\n  }\n\n  private calculateValidationSummary(validationResults: ValidationResult[], startTime: number): ValidationSummary {\n    const totalValidations = validationResults.length;\n    const passedValidations = validationResults.filter(r => r.passed).length;\n    const failedValidations = totalValidations - passedValidations;\n    const warningsCount = validationResults.reduce((sum, r) => sum + r.warnings.length, 0);\n    const totalExecutionTime = Date.now() - startTime;\n\n    const criticalIssues: string[] = [];\n    const recommendations: string[] = [];\n\n    for (const result of validationResults) {\n      if (!result.passed && result.validationType === 'typescript-compilation') {\n        criticalIssues.push('TypeScript compilation errors detected');\n      }\n      if (!result.passed && result.validationType === 'test-suite') {\n        criticalIssues.push('Test suite failures detected');\n      }\n      recommendations.push(...result.recommendations);\n    }\n\n    return {\n      totalValidations,\n      passedValidations,\n      failedValidations,\n      warningsCount,\n      totalExecutionTime,\n      criticalIssues: [...new Set(criticalIssues)],\n      recommendations: [...new Set(recommendations)]\n    };\n  }\n\n  private shouldRequireRollback(validationResults: ValidationResult[]): boolean {\n    // Require rollback for critical failures\n    return validationResults.some(result =>\n      !result.passed && (\n        result.validationType === 'typescript-compilation' ||\n        (result.validationType === 'test-suite' && result.errors.length > 0) ||\n        (result.validationType === 'react-component' && result.errors.length > 0)\n      )\n    );\n  }\n\n  private storeValidationHistory(batchId: string, validationResults: ValidationResult[]): void {\n    const existing = this.validationHistory.get(batchId) || [];\n    this.validationHistory.set(batchId, [...existing, ...validationResults]);\n  }\n\n  /**\n   * Get validation history for analysis\n   */\n  getValidationHistory(): Map<string, ValidationResult[]> {\n    return new Map(this.validationHistory);\n  }\n\n  /**\n   * Generate validation report\n   */\n  generateValidationReport(batchId?: string): string {\n    const history = batchId\n      ? this.validationHistory.get(batchId) || []\n      : Array.from(this.validationHistory.values()).flat();\n\n    if (history.length === 0) {\n      return 'No validation history available';\n    }\n\n    const report = [\n      '# Validation Report',\n      `Generated: ${new Date().toISOString()}`,\n      batchId ? `Batch ID: ${batchId}` : 'All Batches',\n      '',\n      '## Summary',\n      `Total Validations: ${history.length}`,\n      `Passed: ${history.filter(r => r.passed).length}`,\n      `Failed: ${history.filter(r => !r.passed).length}`,\n      `Average Execution Time: ${(history.reduce((sum, r) => sum + r.executionTime, 0) / history.length).toFixed(2)}ms`,\n      '',\n      '## Validation Results'\n    ];\n\n    for (const result of history) {\n      report.push(`### ${result.validationType} - ${result.passed ? 'PASSED' : 'FAILED'}`);\n      report.push(`Execution Time: ${result.executionTime}ms`);\n\n      if (result.errors.length > 0) {\n        report.push('**Errors:**');\n        result.errors.forEach(error => report.push(`- ${error}`));\n      }\n\n      if (result.warnings.length > 0) {\n        report.push('**Warnings:**');\n        result.warnings.forEach(warning => report.push(`- ${warning}`));\n      }\n\n      if (result.recommendations.length > 0) {\n        report.push('**Recommendations:**');\n        result.recommendations.forEach(rec => report.push(`- ${rec}`));\n      }\n\n      report.push('');\n    }\n\n    return report.join('\\n');\n  }\n\n  private async delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  private log(level: 'debug' | 'info' | 'warn' | 'error', message: string): void {\n    const levels = { debug: 0, info: 1, warn: 2, error: 3 };\n    const configLevel = levels[this.config.logLevel];\n    const messageLevel = levels[level];\n\n    if (messageLevel >= configLevel) {\n      const timestamp = new Date().toISOString();\n      const prefix = level.toUpperCase().padEnd(5);\n      console.log(`[${timestamp}] ${prefix} ${message}`);\n    }\n  }\n}\n"],"version":3}