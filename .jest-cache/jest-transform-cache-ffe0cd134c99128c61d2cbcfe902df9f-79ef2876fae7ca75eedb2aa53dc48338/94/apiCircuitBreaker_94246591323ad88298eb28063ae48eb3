8197f8dc2bd3b3933b31d980e6f7c48d
"use strict";
/**
 * Circuit Breaker for API calls
 * Prevents overwhelming a failing API with repeated requests
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.astrologizeApiCircuitBreaker = exports.CircuitBreaker = void 0;
var CircuitState;
(function (CircuitState) {
    CircuitState["CLOSED"] = "CLOSED";
    CircuitState["OPEN"] = "OPEN";
    CircuitState["HALF_OPEN"] = "HALF_OPEN";
})(CircuitState || (CircuitState = {}));
class CircuitBreaker {
    constructor(options = {}) {
        this.state = CircuitState.CLOSED;
        this.failureCount = 0;
        this.lastFailureTime = 0;
        this.options = {
            failureThreshold: 3,
            resetTimeout: 60000,
            monitoringWindow: 300000,
            ...options,
        };
    }
    async call(fn, fallback) {
        if (this.state === CircuitState.OPEN) {
            if (Date.now() - this.lastFailureTime > this.options.resetTimeout) {
                this.state = CircuitState.HALF_OPEN;
                this.failureCount = 0;
            }
            else {
                if (fallback) {
                    return fallback();
                }
                throw new Error('Circuit breaker is OPEN');
            }
        }
        try {
            const result = await fn();
            this.onSuccess();
            return result;
        }
        catch (error) {
            this.onFailure();
            if (fallback) {
                return fallback();
            }
            throw error;
        }
    }
    onSuccess() {
        this.failureCount = 0;
        this.state = CircuitState.CLOSED;
    }
    onFailure() {
        this.failureCount++;
        this.lastFailureTime = Date.now();
        if (this.failureCount >= this.options.failureThreshold) {
            this.state = CircuitState.OPEN;
        }
    }
    getState() {
        return this.state;
    }
    reset() {
        this.state = CircuitState.CLOSED;
        this.failureCount = 0;
        this.lastFailureTime = 0;
    }
}
exports.CircuitBreaker = CircuitBreaker;
// Global circuit breaker for astrologize API
exports.astrologizeApiCircuitBreaker = new CircuitBreaker({
    failureThreshold: 1,
    resetTimeout: 60000,
    monitoringWindow: 300000, // 5 minutes
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy91dGlscy9hcGlDaXJjdWl0QnJlYWtlci50cyIsIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFRSCxJQUFLLFlBSUo7QUFKRCxXQUFLLFlBQVk7SUFDZixpQ0FBaUIsQ0FBQTtJQUNqQiw2QkFBYSxDQUFBO0lBQ2IsdUNBQXVCLENBQUE7QUFDekIsQ0FBQyxFQUpJLFlBQVksS0FBWixZQUFZLFFBSWhCO0FBRUQsTUFBYSxjQUFjO0lBTXpCLFlBQVksVUFBMEMsRUFBRTtRQUxoRCxVQUFLLEdBQWlCLFlBQVksQ0FBQyxNQUFNLENBQUM7UUFDMUMsaUJBQVksR0FBRyxDQUFDLENBQUM7UUFDakIsb0JBQWUsR0FBRyxDQUFDLENBQUM7UUFJMUIsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLGdCQUFnQixFQUFFLENBQUM7WUFDbkIsWUFBWSxFQUFFLEtBQUs7WUFDbkIsZ0JBQWdCLEVBQUUsTUFBTTtZQUN4QixHQUFHLE9BQU87U0FDWCxDQUFDO0lBQ0osQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJLENBQUksRUFBb0IsRUFBRSxRQUFrQjtRQUNwRCxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssWUFBWSxDQUFDLElBQUksRUFBRTtZQUNwQyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO2dCQUNqRSxJQUFJLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUM7Z0JBQ3BDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO2FBQ3ZCO2lCQUFNO2dCQUNMLElBQUksUUFBUSxFQUFFO29CQUNaLE9BQU8sUUFBUSxFQUFFLENBQUM7aUJBQ25CO2dCQUNELE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQzthQUM1QztTQUNGO1FBRUQsSUFBSTtZQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRSxFQUFFLENBQUM7WUFDMUIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2pCLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUVqQixJQUFJLFFBQVEsRUFBRTtnQkFDWixPQUFPLFFBQVEsRUFBRSxDQUFDO2FBQ25CO1lBRUQsTUFBTSxLQUFLLENBQUM7U0FDYjtJQUNILENBQUM7SUFFTyxTQUFTO1FBQ2YsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO0lBQ25DLENBQUM7SUFFTyxTQUFTO1FBQ2YsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRWxDLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFO1lBQ3RELElBQUksQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQztTQUNoQztJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7Q0FDRjtBQWxFRCx3Q0FrRUM7QUFFRCw2Q0FBNkM7QUFDaEMsUUFBQSw0QkFBNEIsR0FBRyxJQUFJLGNBQWMsQ0FBQztJQUM3RCxnQkFBZ0IsRUFBRSxDQUFDO0lBQ25CLFlBQVksRUFBRSxLQUFLO0lBQ25CLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxZQUFZO0NBQ3ZDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvR3JlZ0Nhc3Ryby9EZXNrdG9wL1doYXRUb0VhdE5leHQvc3JjL3V0aWxzL2FwaUNpcmN1aXRCcmVha2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2lyY3VpdCBCcmVha2VyIGZvciBBUEkgY2FsbHNcbiAqIFByZXZlbnRzIG92ZXJ3aGVsbWluZyBhIGZhaWxpbmcgQVBJIHdpdGggcmVwZWF0ZWQgcmVxdWVzdHNcbiAqL1xuXG5pbnRlcmZhY2UgQ2lyY3VpdEJyZWFrZXJPcHRpb25zIHtcbiAgZmFpbHVyZVRocmVzaG9sZDogbnVtYmVyO1xuICByZXNldFRpbWVvdXQ6IG51bWJlcjtcbiAgbW9uaXRvcmluZ1dpbmRvdzogbnVtYmVyO1xufVxuXG5lbnVtIENpcmN1aXRTdGF0ZSB7XG4gIENMT1NFRCA9ICdDTE9TRUQnLFxuICBPUEVOID0gJ09QRU4nLFxuICBIQUxGX09QRU4gPSAnSEFMRl9PUEVOJyxcbn1cblxuZXhwb3J0IGNsYXNzIENpcmN1aXRCcmVha2VyIHtcbiAgcHJpdmF0ZSBzdGF0ZTogQ2lyY3VpdFN0YXRlID0gQ2lyY3VpdFN0YXRlLkNMT1NFRDtcbiAgcHJpdmF0ZSBmYWlsdXJlQ291bnQgPSAwO1xuICBwcml2YXRlIGxhc3RGYWlsdXJlVGltZSA9IDA7XG4gIHByaXZhdGUgb3B0aW9uczogQ2lyY3VpdEJyZWFrZXJPcHRpb25zO1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFBhcnRpYWw8Q2lyY3VpdEJyZWFrZXJPcHRpb25zPiA9IHt9KSB7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgZmFpbHVyZVRocmVzaG9sZDogMyxcbiAgICAgIHJlc2V0VGltZW91dDogNjAwMDAsIC8vIDEgbWludXRlXG4gICAgICBtb25pdG9yaW5nV2luZG93OiAzMDAwMDAsIC8vIDUgbWludXRlc1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgY2FsbDxUPihmbjogKCkgPT4gUHJvbWlzZTxUPiwgZmFsbGJhY2s/OiAoKSA9PiBUKTogUHJvbWlzZTxUPiB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IENpcmN1aXRTdGF0ZS5PUEVOKSB7XG4gICAgICBpZiAoRGF0ZS5ub3coKSAtIHRoaXMubGFzdEZhaWx1cmVUaW1lID4gdGhpcy5vcHRpb25zLnJlc2V0VGltZW91dCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gQ2lyY3VpdFN0YXRlLkhBTEZfT1BFTjtcbiAgICAgICAgdGhpcy5mYWlsdXJlQ291bnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDaXJjdWl0IGJyZWFrZXIgaXMgT1BFTicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmbigpO1xuICAgICAgdGhpcy5vblN1Y2Nlc3MoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMub25GYWlsdXJlKCk7XG5cbiAgICAgIGlmIChmYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2soKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvblN1Y2Nlc3MoKSB7XG4gICAgdGhpcy5mYWlsdXJlQ291bnQgPSAwO1xuICAgIHRoaXMuc3RhdGUgPSBDaXJjdWl0U3RhdGUuQ0xPU0VEO1xuICB9XG5cbiAgcHJpdmF0ZSBvbkZhaWx1cmUoKSB7XG4gICAgdGhpcy5mYWlsdXJlQ291bnQrKztcbiAgICB0aGlzLmxhc3RGYWlsdXJlVGltZSA9IERhdGUubm93KCk7XG5cbiAgICBpZiAodGhpcy5mYWlsdXJlQ291bnQgPj0gdGhpcy5vcHRpb25zLmZhaWx1cmVUaHJlc2hvbGQpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSBDaXJjdWl0U3RhdGUuT1BFTjtcbiAgICB9XG4gIH1cblxuICBnZXRTdGF0ZSgpOiBDaXJjdWl0U3RhdGUge1xuICAgIHJldHVybiB0aGlzLnN0YXRlO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IENpcmN1aXRTdGF0ZS5DTE9TRUQ7XG4gICAgdGhpcy5mYWlsdXJlQ291bnQgPSAwO1xuICAgIHRoaXMubGFzdEZhaWx1cmVUaW1lID0gMDtcbiAgfVxufVxuXG4vLyBHbG9iYWwgY2lyY3VpdCBicmVha2VyIGZvciBhc3Ryb2xvZ2l6ZSBBUElcbmV4cG9ydCBjb25zdCBhc3Ryb2xvZ2l6ZUFwaUNpcmN1aXRCcmVha2VyID0gbmV3IENpcmN1aXRCcmVha2VyKHtcbiAgZmFpbHVyZVRocmVzaG9sZDogMSwgLy8gRmFpbCBmYXN0IGFmdGVyIDEgYXR0ZW1wdCBmb3IgaW1tZWRpYXRlIGZhbGxiYWNrXG4gIHJlc2V0VGltZW91dDogNjAwMDAsIC8vIDEgbWludXRlIGJlZm9yZSByZXRyeSAoZmFzdGVyIHJlY292ZXJ5KVxuICBtb25pdG9yaW5nV2luZG93OiAzMDAwMDAsIC8vIDUgbWludXRlc1xufSk7XG4iXSwidmVyc2lvbiI6M30=