2ddb13d02e8c1c33d133c3f5e25b349f


/**
 * Domain-Specific Rule Validation and Optimization Script
 * 
 * This script validates and optimizes the domain-specific ESLint rules for:
 * - Astrological calculation files (mathematical constants and planetary variables)
 * - Campaign system files (enterprise patterns and extensive logging)
 * - Test files (appropriate relaxations for mock variables)
 * - Configuration files (dynamic requires and build tools)
 * 
 * Requirements: 4.1, 4.2, 4.3, 4.4
 */

const { execSync } = require('child_process');
const { existsSync, readFileSync, writeFileSync } = require('fs');
const { join } = require('path');

class DomainSpecificRuleValidator {
  constructor() {
    this.projectRoot = process.cwd();
    this.results = {
      astrologicalFiles: this.createEmptyResult('Astrological Calculation Files'),
      campaignSystemFiles: this.createEmptyResult('Campaign System Files'),
      testFiles: this.createEmptyResult('Test Files'),
      configurationFiles: this.createEmptyResult('Configuration Files'),
      overall: {
        passed: false,
        score: 0,
        summary: ''
      }
    };
  }

  createEmptyResult(category) {
    return {
      category,
      passed: false,
      details: [],
      errors: [],
      warnings: [],
      recommendations: []
    };
  }

  /**
   * Main validation entry point
   */
  async validateDomainSpecificRules() {
    console.log('üîç Starting Domain-Specific Rule Validation...\n');

    try {
      // Validate each domain category
      await this.validateAstrologicalFiles();
      await this.validateCampaignSystemFiles();
      await this.validateTestFiles();
      await this.validateConfigurationFiles();

      // Calculate overall results
      this.calculateOverallResults();

      // Generate report
      this.generateValidationReport();

      return this.results;
    } catch (error) {
      console.error('‚ùå Validation failed:', error);
      throw error;
    }
  }

  /**
   * Validate astrological calculation file rules
   * Requirements: 4.1, 4.2
   */
  async validateAstrologicalFiles() {
    console.log('üåü Validating Astrological Calculation File Rules...');
    
    const astroResult = this.results.astrologicalFiles;
    
    try {
      // Test mathematical constants preservation
      const constantsTest = await this.testMathematicalConstantsPreservation();
      astroResult.details.push(`Mathematical constants preservation: ${constantsTest.passed ? '‚úÖ' : '‚ùå'}`);
      if (!constantsTest.passed) {
        astroResult.errors.push(...constantsTest.errors);
      }

      // Test planetary variable patterns
      const planetaryTest = await this.testPlanetaryVariablePatterns();
      astroResult.details.push(`Planetary variable patterns: ${planetaryTest.passed ? '‚úÖ' : '‚ùå'}`);
      if (!planetaryTest.passed) {
        astroResult.errors.push(...planetaryTest.errors);
      }

      // Test console debugging allowance
      const consoleTest = await this.testAstrologicalConsoleAllowance();
      astroResult.details.push(`Console debugging allowance: ${consoleTest.passed ? '‚úÖ' : '‚ùå'}`);
      if (!consoleTest.passed) {
        astroResult.errors.push(...consoleTest.errors);
      }

      astroResult.passed = astroResult.errors.length === 0;
      
      if (astroResult.passed) {
        console.log('‚úÖ Astrological file rules validation passed');
      } else {
        console.log('‚ùå Astrological file rules validation failed');
        astroResult.errors.forEach(error => console.log(`   - ${error}`));
      }

    } catch (error) {
      astroResult.errors.push(`Validation error: ${error}`);
      console.error('‚ùå Astrological validation error:', error);
    }
  }

  /**
   * Validate campaign system file rules
   * Requirements: 4.3
   */
  async validateCampaignSystemFiles() {
    console.log('üöÄ Validating Campaign System File Rules...');
    
    const campaignResult = this.results.campaignSystemFiles;
    
    try {
      // Test enterprise patterns allowance
      const enterpriseTest = await this.testEnterprisePatterns();
      campaignResult.details.push(`Enterprise patterns: ${enterpriseTest.passed ? '‚úÖ' : '‚ùå'}`);
      if (!enterpriseTest.passed) {
        campaignResult.errors.push(...enterpriseTest.errors);
      }

      // Test extensive logging allowance
      const loggingTest = await this.testExtensiveLogging();
      campaignResult.details.push(`Extensive logging: ${loggingTest.passed ? '‚úÖ' : '‚ùå'}`);
      if (!loggingTest.passed) {
        campaignResult.errors.push(...loggingTest.errors);
      }

      // Test campaign variable patterns
      const variableTest = await this.testCampaignVariablePatterns();
      campaignResult.details.push(`Campaign variable patterns: ${variableTest.passed ? '‚úÖ' : '‚ùå'}`);
      if (!variableTest.passed) {
        campaignResult.errors.push(...variableTest.errors);
      }

      campaignResult.passed = campaignResult.errors.length === 0;
      
      if (campaignResult.passed) {
        console.log('‚úÖ Campaign system file rules validation passed');
      } else {
        console.log('‚ùå Campaign system file rules validation failed');
        campaignResult.errors.forEach(error => console.log(`   - ${error}`));
      }

    } catch (error) {
      campaignResult.errors.push(`Validation error: ${error}`);
      console.error('‚ùå Campaign system validation error:', error);
    }
  }

  /**
   * Validate test file rules
   * Requirements: 4.4
   */
  async validateTestFiles() {
    console.log('üß™ Validating Test File Rules...');
    
    const testResult = this.results.testFiles;
    
    try {
      // Test mock variable relaxations
      const mockTest = await this.testMockVariableRelaxations();
      testResult.details.push(`Mock variable relaxations: ${mockTest.passed ? '‚úÖ' : '‚ùå'}`);
      if (!mockTest.passed) {
        testResult.errors.push(...mockTest.errors);
      }

      // Test test-specific rule relaxations
      const relaxationTest = await this.testTestSpecificRelaxations();
      testResult.details.push(`Test-specific relaxations: ${relaxationTest.passed ? '‚úÖ' : '‚ùå'}`);
      if (!relaxationTest.passed) {
        testResult.errors.push(...relaxationTest.errors);
      }

      // Test Jest globals availability
      const globalsTest = await this.testJestGlobalsAvailability();
      testResult.details.push(`Jest globals availability: ${globalsTest.passed ? '‚úÖ' : '‚ùå'}`);
      if (!globalsTest.passed) {
        testResult.errors.push(...globalsTest.errors);
      }

      testResult.passed = testResult.errors.length === 0;
      
      if (testResult.passed) {
        console.log('‚úÖ Test file rules validation passed');
      } else {
        console.log('‚ùå Test file rules validation failed');
        testResult.errors.forEach(error => console.log(`   - ${error}`));
      }

    } catch (error) {
      testResult.errors.push(`Validation error: ${error}`);
      console.error('‚ùå Test file validation error:', error);
    }
  }

  /**
   * Validate configuration file rules
   * Requirements: 4.4
   */
  async validateConfigurationFiles() {
    console.log('‚öôÔ∏è Validating Configuration File Rules...');
    
    const configResult = this.results.configurationFiles;
    
    try {
      // Test dynamic require allowances
      const requireTest = await this.testDynamicRequireAllowances();
      configResult.details.push(`Dynamic require allowances: ${requireTest.passed ? '‚úÖ' : '‚ùå'}`);
      if (!requireTest.passed) {
        configResult.errors.push(...requireTest.errors);
      }

      // Test build tool patterns
      const buildToolTest = await this.testBuildToolPatterns();
      configResult.details.push(`Build tool patterns: ${buildToolTest.passed ? '‚úÖ' : '‚ùå'}`);
      if (!buildToolTest.passed) {
        configResult.errors.push(...buildToolTest.errors);
      }

      // Test configuration-specific relaxations
      const configRelaxationTest = await this.testConfigurationRelaxations();
      configResult.details.push(`Configuration relaxations: ${configRelaxationTest.passed ? '‚úÖ' : '‚ùå'}`);
      if (!configRelaxationTest.passed) {
        configResult.errors.push(...configRelaxationTest.errors);
      }

      configResult.passed = configResult.errors.length === 0;
      
      if (configResult.passed) {
        console.log('‚úÖ Configuration file rules validation passed');
      } else {
        console.log('‚ùå Configuration file rules validation failed');
        configResult.errors.forEach(error => console.log(`   - ${error}`));
      }

    } catch (error) {
      configResult.errors.push(`Validation error: ${error}`);
      console.error('‚ùå Configuration file validation error:', error);
    }
  }

  /**
   * Test mathematical constants preservation in astrological files
   */
  async testMathematicalConstantsPreservation() {
    const errors = [];
    
    try {
      // Check if astrological files exist and have proper rule application
      const astroFiles = [
        'src/calculations/culinary/culinaryAstrology.ts',
        'src/utils/reliableAstronomy.ts'
      ];

      let hasAstroFiles = false;
      for (const file of astroFiles) {
        if (existsSync(join(this.projectRoot, file))) {
          hasAstroFiles = true;
          break;
        }
      }

      if (hasAstroFiles) {
        // Test that astrological constants are preserved
        const testContent = `
          const DEGREES_PER_SIGN = 30;
          const RELIABLE_POSITIONS = { sun: { sign: 'aries', degree: 8.5 } };
          
          function calculatePosition(longitude) {
            return Math.floor(longitude / DEGREES_PER_SIGN);
          }
        `;

        const testFile = join(this.projectRoot, 'src/calculations/temp-constants-test.ts');
        writeFileSync(testFile, testContent);

        try {
          execSync(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs`, {
            stdio: 'pipe',
            cwd: this.projectRoot
          });
          
          // If no error, constants are properly preserved
        } catch (eslintError) {
          const output = eslintError.stderr?.toString() || '';
          if (output.includes('preserve-planetary-constants')) {
            errors.push('Mathematical constants preservation rule not working correctly');
          }
        } finally {
          // Clean up test file
          try {
            execSync(`rm -f "${testFile}"`);
          } catch {}
        }
      } else {
        // If no astrological files exist, we can't test this properly
        console.log('   ‚ÑπÔ∏è No astrological files found to test constants preservation');
      }

      return { passed: errors.length === 0, errors };
    } catch (error) {
      errors.push(`Error testing mathematical constants: ${error.message}`);
      return { passed: false, errors };
    }
  }

  /**
   * Test planetary variable patterns
   */
  async testPlanetaryVariablePatterns() {
    const errors = [];
    
    try {
      // Test that planetary variable patterns are recognized
      const testContent = `
        const planet = 'mars';
        const position = { sign: 'cancer', degree: 22.63 };
        const longitude = 112.63;
        const retrograde = false;
        const UNUSED_planet = 'unused';
      `;

      const testFile = join(this.projectRoot, 'src/calculations/temp-planetary-test.ts');
      writeFileSync(testFile, testContent);

      try {
        const output = execSync(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
          encoding: 'utf8',
          cwd: this.projectRoot
        });

        const result = JSON.parse(output);
        
        if (result.length > 0 && result[0].messages) {
          const unusedVarErrors = result[0].messages.filter(msg => 
            msg.ruleId === '@typescript-eslint/no-unused-vars' &&
            (msg.message.includes('planet') || msg.message.includes('position') || msg.message.includes('longitude'))
          );
          
          if (unusedVarErrors.length > 0) {
            errors.push('Planetary variable patterns not properly ignored by unused-vars rule');
          }
        }
      } catch (eslintError) {
        const output = eslintError.stdout?.toString() || '';
        if (output) {
          const result = JSON.parse(output);
          if (result.length > 0 && result[0].messages) {
            const unusedVarErrors = result[0].messages.filter(msg => 
              msg.ruleId === '@typescript-eslint/no-unused-vars' &&
              (msg.message.includes('planet') || msg.message.includes('position') || msg.message.includes('longitude'))
            );
            
            if (unusedVarErrors.length > 0) {
              errors.push('Planetary variable patterns not properly ignored by unused-vars rule');
            }
          }
        }
      } finally {
        // Clean up test file
        try {
          execSync(`rm -f "${testFile}"`);
        } catch {}
      }

      return { passed: errors.length === 0, errors };
    } catch (error) {
      errors.push(`Error testing planetary variable patterns: ${error.message}`);
      return { passed: false, errors };
    }
  }

  /**
   * Test astrological console allowance
   */
  async testAstrologicalConsoleAllowance() {
    const errors = [];
    
    try {
      // Test that astrological files allow console statements
      const testContent = `
        function calculatePlanetaryPosition(date) {
          console.info('Calculating planetary position for', date);
          console.debug('Using reliable astronomy calculations');
          console.warn('Fallback to cached positions if API fails');
          
          return { sign: 'aries', degree: 8.5 };
        }
      `;

      const testFile = join(this.projectRoot, 'src/calculations/temp-console-test.ts');
      writeFileSync(testFile, testContent);

      try {
        const output = execSync(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
          encoding: 'utf8',
          cwd: this.projectRoot
        });

        const result = JSON.parse(output);
        
        if (result.length > 0 && result[0].messages) {
          const consoleErrors = result[0].messages.filter(msg => 
            msg.ruleId === 'no-console' && msg.severity === 2 // error level
          );
          
          if (consoleErrors.length > 0) {
            errors.push('Astrological files should allow console statements for debugging');
          }
        }
      } catch (eslintError) {
        const output = eslintError.stdout?.toString() || '';
        if (output) {
          const result = JSON.parse(output);
          if (result.length > 0 && result[0].messages) {
            const consoleErrors = result[0].messages.filter(msg => 
              msg.ruleId === 'no-console' && msg.severity === 2
            );
            
            if (consoleErrors.length > 0) {
              errors.push('Astrological files should allow console statements for debugging');
            }
          }
        }
      } finally {
        try {
          execSync(`rm -f "${testFile}"`);
        } catch {}
      }

      return { passed: errors.length === 0, errors };
    } catch (error) {
      errors.push(`Error testing astrological console allowance: ${error.message}`);
      return { passed: false, errors };
    }
  }

  /**
   * Test enterprise patterns in campaign system files
   */
  async testEnterprisePatterns() {
    const errors = [];
    
    try {
      // Test that campaign files allow enterprise patterns
      const campaignFiles = [
        'src/services/campaign/CampaignController.ts',
        'src/services/campaign/ProgressTracker.ts'
      ];

      let hasCampaignFiles = false;
      for (const file of campaignFiles) {
        if (existsSync(join(this.projectRoot, file))) {
          hasCampaignFiles = true;
          
          try {
            const output = execSync(`npx eslint "${file}" --no-eslintrc --config eslint.config.cjs --format json`, {
              encoding: 'utf8',
              cwd: this.projectRoot
            });

            const result = JSON.parse(output);
            
            if (result.length > 0 && result[0].messages) {
              const restrictiveErrors = result[0].messages.filter(msg => 
                (msg.ruleId === 'complexity' && msg.severity === 2) || // error level complexity
                (msg.ruleId === 'max-lines-per-function' && msg.severity === 2) ||
                (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2)
              );
              
              if (restrictiveErrors.length > 0) {
                errors.push(`${file} has overly restrictive rules for enterprise patterns`);
              }
            }
          } catch (eslintError) {
            const output = eslintError.stdout?.toString() || '';
            if (output) {
              const result = JSON.parse(output);
              if (result.length > 0 && result[0].messages) {
                const restrictiveErrors = result[0].messages.filter(msg => 
                  (msg.ruleId === 'complexity' && msg.severity === 2) ||
                  (msg.ruleId === 'max-lines-per-function' && msg.severity === 2) ||
                  (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2)
                );
                
                if (restrictiveErrors.length > 0) {
                  errors.push(`${file} has overly restrictive rules for enterprise patterns`);
                }
              }
            }
          }
        }
      }

      if (!hasCampaignFiles) {
        console.log('   ‚ÑπÔ∏è No campaign files found to test enterprise patterns');
      }

      return { passed: errors.length === 0, errors };
    } catch (error) {
      errors.push(`Error testing enterprise patterns: ${error.message}`);
      return { passed: false, errors };
    }
  }

  /**
   * Test extensive logging allowance in campaign files
   */
  async testExtensiveLogging() {
    const errors = [];
    
    try {
      // Test that campaign files allow console statements
      const testContent = `
        console.log('Campaign progress update');
        console.warn('Safety protocol activated');
        console.error('Campaign failure detected');
        console.info('Metrics collected');
        console.debug('Detailed debugging info');
      `;

      const testFile = join(this.projectRoot, 'src/services/campaign/temp-logging-test.ts');
      writeFileSync(testFile, testContent);

      try {
        const output = execSync(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
          encoding: 'utf8',
          cwd: this.projectRoot
        });

        const result = JSON.parse(output);
        
        if (result.length > 0 && result[0].messages) {
          const consoleErrors = result[0].messages.filter(msg => 
            msg.ruleId === 'no-console' && msg.severity === 2 // error level
          );
          
          if (consoleErrors.length > 0) {
            errors.push('Campaign files should allow extensive console logging');
          }
        }
      } catch (eslintError) {
        const output = eslintError.stdout?.toString() || '';
        if (output) {
          const result = JSON.parse(output);
          if (result.length > 0 && result[0].messages) {
            const consoleErrors = result[0].messages.filter(msg => 
              msg.ruleId === 'no-console' && msg.severity === 2
            );
            
            if (consoleErrors.length > 0) {
              errors.push('Campaign files should allow extensive console logging');
            }
          }
        }
      } finally {
        try {
          execSync(`rm -f "${testFile}"`);
        } catch {}
      }

      return { passed: errors.length === 0, errors };
    } catch (error) {
      errors.push(`Error testing extensive logging: ${error.message}`);
      return { passed: false, errors };
    }
  }

  /**
   * Test campaign variable patterns
   */
  async testCampaignVariablePatterns() {
    const errors = [];
    
    try {
      // Test that campaign variable patterns are recognized
      const testContent = `
        const campaign = 'typescript-elimination';
        const progress = 0.75;
        const metrics = { errors: 100 };
        const safety = true;
        const UNUSED_campaign = 'unused';
      `;

      const testFile = join(this.projectRoot, 'src/services/campaign/temp-variable-test.ts');
      writeFileSync(testFile, testContent);

      try {
        const output = execSync(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
          encoding: 'utf8',
          cwd: this.projectRoot
        });

        const result = JSON.parse(output);
        
        if (result.length > 0 && result[0].messages) {
          const unusedVarErrors = result[0].messages.filter(msg => 
            msg.ruleId === '@typescript-eslint/no-unused-vars' &&
            (msg.message.includes('campaign') || msg.message.includes('progress') || 
             msg.message.includes('metrics') || msg.message.includes('safety'))
          );
          
          if (unusedVarErrors.length > 0) {
            errors.push('Campaign variable patterns not properly ignored by unused-vars rule');
          }
        }
      } catch (eslintError) {
        const output = eslintError.stdout?.toString() || '';
        if (output) {
          const result = JSON.parse(output);
          if (result.length > 0 && result[0].messages) {
            const unusedVarErrors = result[0].messages.filter(msg => 
              msg.ruleId === '@typescript-eslint/no-unused-vars' &&
              (msg.message.includes('campaign') || msg.message.includes('progress') || 
               msg.message.includes('metrics') || msg.message.includes('safety'))
            );
            
            if (unusedVarErrors.length > 0) {
              errors.push('Campaign variable patterns not properly ignored by unused-vars rule');
            }
          }
        }
      } finally {
        try {
          execSync(`rm -f "${testFile}"`);
        } catch {}
      }

      return { passed: errors.length === 0, errors };
    } catch (error) {
      errors.push(`Error testing campaign variable patterns: ${error.message}`);
      return { passed: false, errors };
    }
  }

  /**
   * Test mock variable relaxations in test files
   */
  async testMockVariableRelaxations() {
    const errors = [];
    
    try {
      // Test that test files allow mock variables
      const testContent = `
        const mockFunction = jest.fn();
        const stubValue = 'test-stub';
        const testData = { id: 1 };
        const UNUSED_mock = 'unused';
      `;

      const testFile = join(this.projectRoot, 'temp-mock-test.test.ts');
      writeFileSync(testFile, testContent);

      try {
        const output = execSync(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
          encoding: 'utf8',
          cwd: this.projectRoot
        });

        const result = JSON.parse(output);
        
        if (result.length > 0 && result[0].messages) {
          const unusedVarErrors = result[0].messages.filter(msg => 
            msg.ruleId === '@typescript-eslint/no-unused-vars' &&
            (msg.message.includes('mockFunction') || msg.message.includes('stubValue') || 
             msg.message.includes('testData'))
          );
          
          if (unusedVarErrors.length > 0) {
            errors.push('Mock variable patterns not properly ignored in test files');
          }
        }
      } catch (eslintError) {
        const output = eslintError.stdout?.toString() || '';
        if (output) {
          const result = JSON.parse(output);
          if (result.length > 0 && result[0].messages) {
            const unusedVarErrors = result[0].messages.filter(msg => 
              msg.ruleId === '@typescript-eslint/no-unused-vars' &&
              (msg.message.includes('mockFunction') || msg.message.includes('stubValue') || 
               msg.message.includes('testData'))
            );
            
            if (unusedVarErrors.length > 0) {
              errors.push('Mock variable patterns not properly ignored in test files');
            }
          }
        }
      } finally {
        try {
          execSync(`rm -f "${testFile}"`);
        } catch {}
      }

      return { passed: errors.length === 0, errors };
    } catch (error) {
      errors.push(`Error testing mock variable relaxations: ${error.message}`);
      return { passed: false, errors };
    }
  }

  /**
   * Test test-specific rule relaxations
   */
  async testTestSpecificRelaxations() {
    const errors = [];
    
    try {
      // Test that test files have appropriate rule relaxations
      const testContent = `
        const anyValue = 'test-any';
        console.log('Test output');
        const magicNumber = 42;
      `;

      const testFile = join(this.projectRoot, 'temp-relaxation-test.test.ts');
      writeFileSync(testFile, testContent);

      try {
        const output = execSync(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
          encoding: 'utf8',
          cwd: this.projectRoot
        });

        const result = JSON.parse(output);
        
        if (result.length > 0 && result[0].messages) {
          const restrictiveErrors = result[0].messages.filter(msg => 
            (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||
            (msg.ruleId === 'no-console' && msg.severity === 2) ||
            (msg.ruleId === 'no-magic-numbers' && msg.severity === 2)
          );
          
          if (restrictiveErrors.length > 0) {
            errors.push('Test files should have relaxed rules for testing patterns');
          }
        }
      } catch (eslintError) {
        const output = eslintError.stdout?.toString() || '';
        if (output) {
          const result = JSON.parse(output);
          if (result.length > 0 && result[0].messages) {
            const restrictiveErrors = result[0].messages.filter(msg => 
              (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||
              (msg.ruleId === 'no-console' && msg.severity === 2) ||
              (msg.ruleId === 'no-magic-numbers' && msg.severity === 2)
            );
            
            if (restrictiveErrors.length > 0) {
              errors.push('Test files should have relaxed rules for testing patterns');
            }
          }
        }
      } finally {
        try {
          execSync(`rm -f "${testFile}"`);
        } catch {}
      }

      return { passed: errors.length === 0, errors };
    } catch (error) {
      errors.push(`Error testing test-specific relaxations: ${error.message}`);
      return { passed: false, errors };
    }
  }

  /**
   * Test Jest globals availability
   */
  async testJestGlobalsAvailability() {
    const errors = [];
    
    try {
      // Test that Jest globals are available in test files
      const testContent = `
        describe('Test suite', () => {
          it('should work', () => {
            expect(true).toBe(true);
          });
          
          beforeEach(() => {
            jest.clearAllMocks();
          });
        });
      `;

      const testFile = join(this.projectRoot, 'temp-globals-test.test.ts');
      writeFileSync(testFile, testContent);

      try {
        const output = execSync(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
          encoding: 'utf8',
          cwd: this.projectRoot
        });

        const result = JSON.parse(output);
        
        if (result.length > 0 && result[0].messages) {
          const undefErrors = result[0].messages.filter(msg => 
            msg.ruleId === 'no-undef' &&
            (msg.message.includes('describe') || msg.message.includes('it') || 
             msg.message.includes('expect') || msg.message.includes('jest'))
          );
          
          if (undefErrors.length > 0) {
            errors.push('Jest globals not properly defined in test files');
          }
        }
      } catch (eslintError) {
        const output = eslintError.stdout?.toString() || '';
        if (output) {
          const result = JSON.parse(output);
          if (result.length > 0 && result[0].messages) {
            const undefErrors = result[0].messages.filter(msg => 
              msg.ruleId === 'no-undef' &&
              (msg.message.includes('describe') || msg.message.includes('it') || 
               msg.message.includes('expect') || msg.message.includes('jest'))
            );
            
            if (undefErrors.length > 0) {
              errors.push('Jest globals not properly defined in test files');
            }
          }
        }
      } finally {
        try {
          execSync(`rm -f "${testFile}"`);
        } catch {}
      }

      return { passed: errors.length === 0, errors };
    } catch (error) {
      errors.push(`Error testing Jest globals availability: ${error.message}`);
      return { passed: false, errors };
    }
  }

  /**
   * Test dynamic require allowances in configuration files
   */
  async testDynamicRequireAllowances() {
    const errors = [];
    
    try {
      // Test that config files allow dynamic requires
      const testContent = `
        const config = require('./some-config');
        const dynamicModule = require(process.env.MODULE_NAME);
        module.exports = { ...config };
      `;

      const testFile = join(this.projectRoot, 'temp-require-test.config.js');
      writeFileSync(testFile, testContent);

      try {
        const output = execSync(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
          encoding: 'utf8',
          cwd: this.projectRoot
        });

        const result = JSON.parse(output);
        
        if (result.length > 0 && result[0].messages) {
          const requireErrors = result[0].messages.filter(msg => 
            msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2
          );
          
          if (requireErrors.length > 0) {
            errors.push('Configuration files should allow dynamic requires');
          }
        }
      } catch (eslintError) {
        const output = eslintError.stdout?.toString() || '';
        if (output) {
          const result = JSON.parse(output);
          if (result.length > 0 && result[0].messages) {
            const requireErrors = result[0].messages.filter(msg => 
              msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2
            );
            
            if (requireErrors.length > 0) {
              errors.push('Configuration files should allow dynamic requires');
            }
          }
        }
      } finally {
        try {
          execSync(`rm -f "${testFile}"`);
        } catch {}
      }

      return { passed: errors.length === 0, errors };
    } catch (error) {
      errors.push(`Error testing dynamic require allowances: ${error.message}`);
      return { passed: false, errors };
    }
  }

  /**
   * Test build tool patterns in configuration files
   */
  async testBuildToolPatterns() {
    const errors = [];
    
    try {
      // Check existing config files for proper rule application
      const configFiles = [
        'next.config.js',
        'tailwind.config.js',
        'jest.config.js'
      ];

      let hasConfigFiles = false;
      for (const file of configFiles) {
        if (existsSync(join(this.projectRoot, file))) {
          hasConfigFiles = true;
          
          try {
            const output = execSync(`npx eslint "${file}" --no-eslintrc --config eslint.config.cjs --format json`, {
              encoding: 'utf8',
              cwd: this.projectRoot
            });

            const result = JSON.parse(output);
            
            if (result.length > 0 && result[0].messages) {
              const restrictiveErrors = result[0].messages.filter(msg => 
                (msg.ruleId === 'no-console' && msg.severity === 2) ||
                (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||
                (msg.ruleId === '@typescript-eslint/no-var-requires' && msg.severity === 2)
              );
              
              if (restrictiveErrors.length > 0) {
                errors.push(`${file} has overly restrictive rules for build tool patterns`);
              }
            }
          } catch (eslintError) {
            const output = eslintError.stdout?.toString() || '';
            if (output) {
              const result = JSON.parse(output);
              if (result.length > 0 && result[0].messages) {
                const restrictiveErrors = result[0].messages.filter(msg => 
                  (msg.ruleId === 'no-console' && msg.severity === 2) ||
                  (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||
                  (msg.ruleId === '@typescript-eslint/no-var-requires' && msg.severity === 2)
                );
                
                if (restrictiveErrors.length > 0) {
                  errors.push(`${file} has overly restrictive rules for build tool patterns`);
                }
              }
            }
          }
        }
      }

      if (!hasConfigFiles) {
        console.log('   ‚ÑπÔ∏è No configuration files found to test build tool patterns');
      }

      return { passed: errors.length === 0, errors };
    } catch (error) {
      errors.push(`Error testing build tool patterns: ${error.message}`);
      return { passed: false, errors };
    }
  }

  /**
   * Test configuration-specific relaxations
   */
  async testConfigurationRelaxations() {
    const errors = [];
    
    try {
      // Test that config files have appropriate relaxations
      const testContent = `
        const anyConfig = process.env.CONFIG;
        console.log('Configuration loaded');
        const dynamicRequire = require(process.env.MODULE);
      `;

      const testFile = join(this.projectRoot, 'temp-config-relaxation.config.ts');
      writeFileSync(testFile, testContent);

      try {
        const output = execSync(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
          encoding: 'utf8',
          cwd: this.projectRoot
        });

        const result = JSON.parse(output);
        
        if (result.length > 0 && result[0].messages) {
          const restrictiveErrors = result[0].messages.filter(msg => 
            (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||
            (msg.ruleId === 'no-console' && msg.severity === 2) ||
            (msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2)
          );
          
          if (restrictiveErrors.length > 0) {
            errors.push('Configuration files should have relaxed rules for build patterns');
          }
        }
      } catch (eslintError) {
        const output = eslintError.stdout?.toString() || '';
        if (output) {
          const result = JSON.parse(output);
          if (result.length > 0 && result[0].messages) {
            const restrictiveErrors = result[0].messages.filter(msg => 
              (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||
              (msg.ruleId === 'no-console' && msg.severity === 2) ||
              (msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2)
            );
            
            if (restrictiveErrors.length > 0) {
              errors.push('Configuration files should have relaxed rules for build patterns');
            }
          }
        }
      } finally {
        try {
          execSync(`rm -f "${testFile}"`);
        } catch {}
      }

      return { passed: errors.length === 0, errors };
    } catch (error) {
      errors.push(`Error testing configuration relaxations: ${error.message}`);
      return { passed: false, errors };
    }
  }

  /**
   * Calculate overall validation results
   */
  calculateOverallResults() {
    const categories = [
      this.results.astrologicalFiles,
      this.results.campaignSystemFiles,
      this.results.testFiles,
      this.results.configurationFiles
    ];

    const passedCategories = categories.filter(cat => cat.passed).length;
    const totalCategories = categories.length;
    
    this.results.overall.score = Math.round((passedCategories / totalCategories) * 100);
    this.results.overall.passed = passedCategories === totalCategories;
    
    if (this.results.overall.passed) {
      this.results.overall.summary = '‚úÖ All domain-specific rules are properly configured and validated';
    } else {
      const failedCategories = categories.filter(cat => !cat.passed).map(cat => cat.category);
      this.results.overall.summary = `‚ùå Failed categories: ${failedCategories.join(', ')}`;
    }
  }

  /**
   * Generate comprehensive validation report
   */
  generateValidationReport() {
    console.log('\n' + '='.repeat(80));
    console.log('üìä DOMAIN-SPECIFIC RULE VALIDATION REPORT');
    console.log('='.repeat(80));
    
    console.log(`\nüéØ Overall Score: ${this.results.overall.score}%`);
    console.log(`üìã Summary: ${this.results.overall.summary}\n`);

    // Report each category
    const categories = [
      this.results.astrologicalFiles,
      this.results.campaignSystemFiles,
      this.results.testFiles,
      this.results.configurationFiles
    ];

    categories.forEach(category => {
      console.log(`\nüìÅ ${category.category}`);
      console.log(`   Status: ${category.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
      
      if (category.details.length > 0) {
        console.log('   Details:');
        category.details.forEach(detail => console.log(`     ${detail}`));
      }
      
      if (category.errors.length > 0) {
        console.log('   Errors:');
        category.errors.forEach(error => console.log(`     ‚ùå ${error}`));
      }
      
      if (category.warnings.length > 0) {
        console.log('   Warnings:');
        category.warnings.forEach(warning => console.log(`     ‚ö†Ô∏è ${warning}`));
      }
    });

    // Save detailed report
    const reportPath = join(this.projectRoot, 'domain-specific-rule-validation-report.json');
    writeFileSync(reportPath, JSON.stringify(this.results, null, 2));
    console.log(`\nüìÑ Detailed report saved to: ${reportPath}`);
    
    console.log('\n' + '='.repeat(80));
  }
}

/**
 * Main execution
 */
async function main() {
  try {
    const validator = new DomainSpecificRuleValidator();
    const results = await validator.validateDomainSpecificRules();
    
    if (results.overall.passed) {
      console.log('\nüéâ Domain-specific rule validation completed successfully!');
      process.exit(0);
    } else {
      console.log('\n‚ö†Ô∏è Domain-specific rule validation completed with issues.');
      process.exit(1);
    }
  } catch (error) {
    console.error('\nüí• Domain-specific rule validation failed:', error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = { DomainSpecificRuleValidator };