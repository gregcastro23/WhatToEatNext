{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/__tests__/performance/BuildPerformance.test.ts","mappings":";AAAA;;;GAGG;;;;;;;;;;;;;;;;;;;;;;;;;AAgBH,oBAAoB;AACpB,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAhBhB,iDAAyC;AACzC,uCAAyB;AAEzB,yDAKoC;AACpC,iEAA8D;AAC9D,2DAAwD;AAQxD,MAAM,YAAY,GAAG,wBAAgD,CAAC;AACtE,MAAM,MAAM,GAAG,EAA4B,CAAC;AAE5C,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,IAAI,eAAgC,CAAC;IACrC,IAAI,kBAAsC,CAAC;IAC3C,IAAI,UAA0B,CAAC;IAE/B,UAAU,CAAC,GAAG,EAAE;QACd,MAAM,cAAc,GAAmB;YACrC,gBAAgB,EAAE,EAAE;YACpB,wBAAwB,EAAE,CAAC;YAC3B,uBAAuB,EAAE,EAAE;YAC3B,0BAA0B,EAAE,IAAI;YAChC,wBAAwB,EAAE,IAAI;YAC9B,kBAAkB,EAAE,CAAC;SACtB,CAAC;QAEF,UAAU,GAAG;YACX,MAAM,EAAE,CAAC;oBACP,EAAE,EAAE,wBAAwB;oBAC5B,IAAI,EAAE,wBAAwB;oBAC9B,WAAW,EAAE,+BAA+B;oBAC5C,KAAK,EAAE,CAAC;4BACN,UAAU,EAAE,oCAAoC;4BAChD,UAAU,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE;4BAC5B,SAAS,EAAE,EAAE;4BACb,WAAW,EAAE,sBAAW,CAAC,MAAM;yBAChC,CAAC;oBACF,eAAe,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;oBAClC,iBAAiB,EAAE,EAAE;iBACtB,CAAC;YACF,cAAc;YACd,eAAe,EAAE,EAAE,gBAAgB,EAAE,CAAC,EAAE,eAAe,EAAE,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,iBAAiB,EAAE,GAAG,EAAE;YACnG,iBAAiB,EAAE;gBACjB,kBAAkB,EAAE,+DAA+D;gBACnF,gBAAgB,EAAE,yDAAyD;gBAC3E,oBAAoB,EAAE,2DAA2D;gBACjF,qBAAqB,EAAE,mDAAmD;aAC3E;SACF,CAAC;QAEF,eAAe,GAAG,IAAI,iCAAe,EAAE,CAAC;QACxC,kBAAkB,GAAG,IAAI,uCAAkB,CAAC,UAAU,CAAC,CAAC;QAExD,cAAc;QACd,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,+BAA+B;QAC/B,YAAY,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QACjC,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QACxC,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,kBAAkB;YAClB,IAAI,cAAsB,CAAC;YAC3B,YAAY,CAAC,kBAAkB,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC1C,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;oBAC7C,cAAc,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;oBAC5B,kCAAkC;oBAClC,MAAM,KAAK,GAAG,IAAI,CAAC;oBACnB,MAAM,OAAO,GAAG,cAAc,GAAG,KAAK,CAAC;oBACvC,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,EAAE;wBAC3B,mCAAmC;qBACpC;oBACD,OAAO,EAAE,CAAC;iBACX;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG,MAAM,eAAe,CAAC,YAAY,EAAE,CAAC;YAEvD,MAAM,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACnC,MAAM,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,kBAAkB;YAClB,YAAY,CAAC,kBAAkB,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC1C,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;oBAC7C,mCAAmC;oBACnC,MAAM,KAAK,GAAG,GAAG,CAAC,CAAC,yCAAyC;oBAC5D,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;oBACnC,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,EAAE;wBAC3B,YAAY;qBACb;oBACD,OAAO,EAAE,CAAC;iBACX;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG,MAAM,eAAe,CAAC,YAAY,EAAE,CAAC;YAEvD,+CAA+C;YAC/C,MAAM,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,YAAY,CAAC,kBAAkB,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC1C,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;oBAC7C,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;iBAC7C;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG,MAAM,eAAe,CAAC,YAAY,EAAE,CAAC;YAEvD,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,0BAA0B;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,MAAM,UAAU,GAAkB,EAAE,CAAC;YACrC,MAAM,eAAe,GAAG,CAAC,CAAC,CAAC,YAAY;YAEvC,YAAY,CAAC,kBAAkB,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC1C,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;oBAC7C,qDAAqD;oBACrD,MAAM,QAAQ,GAAG,eAAe,GAAG,IAAI,CAAC;oBACxC,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,qBAAqB;oBAC5D,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,GAAG,QAAQ,GAAG,GAAG,CAAC,CAAC,CAAC,qCAAqC;oBAC7F,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,oCAAoC;oBACvF,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,EAAE;wBAC3B,YAAY;qBACb;oBACD,OAAO,EAAE,CAAC;iBACX;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,oCAAoC;YACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,MAAM,SAAS,GAAG,MAAM,eAAe,CAAC,YAAY,EAAE,CAAC;gBACvD,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC5B;YAED,+DAA+D;YAC/D,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAElC,qBAAqB;YACrB,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC;YACpF,MAAM,QAAQ,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC;YAC5G,MAAM,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAE9C,gEAAgE;YAChE,MAAM,CAAC,iBAAiB,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,kCAAkC;YAClC,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,iBAAiB,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAEvE,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,eAAe,EAAE,CAAC;YAE7D,MAAM,CAAC,YAAY,CAAC,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,qBAAqB;YACvE,MAAM,CAAC,YAAY,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAC,qBAAqB;QACtE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,8BAA8B;YAC9B,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,iBAAiB,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAEvE,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,eAAe,EAAE,CAAC;YAE7D,MAAM,CAAC,YAAY,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,eAAe;QACzD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,6BAA6B;YAC7B,MAAM,mBAAmB,GAAG,OAAO,CAAC,WAAW,CAAC;YAC/C,OAAe,CAAC,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;gBACvD,QAAQ,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI;gBAC1B,SAAS,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;gBAC5B,QAAQ,EAAE,CAAC;gBACX,GAAG,EAAE,CAAC;gBACN,YAAY,EAAE,CAAC;aAChB,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,eAAe,CAAC,cAAc,EAAE,CAAC;YAE3D,MAAM,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc;YACpD,MAAM,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAEvC,OAAO,CAAC,WAAW,GAAG,mBAAmB,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,yBAAyB;YACzB,MAAM,mBAAmB,GAAG,OAAO,CAAC,WAAW,CAAC;YAC/C,OAAe,CAAC,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;gBACvD,QAAQ,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI;gBAC1B,SAAS,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;gBAC5B,QAAQ,EAAE,CAAC;gBACX,GAAG,EAAE,CAAC;gBACN,YAAY,EAAE,CAAC;aAChB,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,eAAe,CAAC,cAAc,EAAE,CAAC;YAE3D,MAAM,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,sBAAsB;YAE/D,OAAO,CAAC,WAAW,GAAG,mBAAmB,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,+BAA+B;YAC/B,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC5C,OAAO,IAAI,KAAK,OAAO,IAAI,IAAI,KAAK,MAAM,CAAC;YAC7C,CAAC,CAAC,CAAC;YAEH,YAAY,CAAC,kBAAkB,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC1C,MAAM,GAAG,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;gBAC/B,IAAI,GAAG,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;oBAChC,OAAO,KAAK,CAAC,CAAC,QAAQ;iBACvB;gBACD,IAAI,GAAG,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;oBAC/B,OAAO,KAAK,CAAC,CAAC,QAAQ;iBACvB;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,MAAM,UAAU,GAAG,MAAM,eAAe,CAAC,aAAa,EAAE,CAAC;YAEzD,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,oBAAoB;YAClD,MAAM,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,eAAe;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,yBAAyB;YACzB,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACxC,YAAY,CAAC,kBAAkB,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC1C,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;oBACzC,OAAO,KAAK,CAAC,CAAC,yBAAyB;iBACxC;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,MAAM,UAAU,GAAG,MAAM,eAAe,CAAC,aAAa,EAAE,CAAC;YAEzD,MAAM,CAAC,UAAU,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,iBAAiB;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAEzC,MAAM,UAAU,GAAG,MAAM,eAAe,CAAC,aAAa,EAAE,CAAC;YAEzD,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,6BAA6B;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;YACzE,MAAM,SAAS,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YAC7C,MAAM,aAAa,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK;YAE3C,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC5C,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAc,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;YAEH,YAAY,CAAC,kBAAkB,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC1C,MAAM,GAAG,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;gBAC/B,IAAI,GAAG,CAAC,QAAQ,CAAC,cAAc,CAAC;oBAAE,OAAO,KAAK,CAAC;gBAC/C,IAAI,GAAG,CAAC,QAAQ,CAAC,aAAa,CAAC;oBAAE,OAAO,KAAK,CAAC;gBAC9C,IAAI,GAAG,CAAC,QAAQ,CAAC,cAAc,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC9C,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,MAAM,UAAU,GAAG,MAAM,eAAe,CAAC,aAAa,EAAE,CAAC;YAEzD,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,yBAAyB;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YAC9E,MAAM,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAEnC,+BAA+B;YAC/B,IAAI,kBAAkB,GAAG,CAAC,CAAC;YAC3B,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC,kBAAkB,CAAC,KAAK,IAAI,EAAE;gBACxE,kBAAkB,EAAE,CAAC;gBACrB,6CAA6C;gBAC7C,OAAO,CAAC,GAAG,kBAAkB,GAAG,CAAC,CAAC,CAAC,qBAAqB;YAC1D,CAAC,CAAC,CAAC;YAEH,sDAAsD;YACtD,MAAM,OAAO,GAAe,EAAE,CAAC;YAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAC5D,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACtB;YAED,wDAAwD;YACxD,MAAM,cAAc,GAAG,MAAM,eAAe,CAAC,YAAY,EAAE,CAAC;YAC5D,MAAM,CAAC,cAAc,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,iBAAiB;QAC/D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YACxE,MAAM,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAEnC,+BAA+B;YAC/B,IAAI,kBAAkB,GAAG,CAAC,CAAC;YAC3B,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC,kBAAkB,CAAC,KAAK,IAAI,EAAE;gBACxE,kBAAkB,EAAE,CAAC;gBACrB,6CAA6C;gBAC7C,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC,mBAAmB;YACtE,CAAC,CAAC,CAAC;YAEH,uDAAuD;YACvD,MAAM,OAAO,GAAe,EAAE,CAAC;YAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAC5D,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACtB;YAED,iCAAiC;YACjC,MAAM,cAAc,GAAG,MAAM,eAAe,CAAC,YAAY,EAAE,CAAC;YAC5D,MAAM,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,kBAAkB,GAAsB,EAAE,CAAC;YAEjD,2CAA2C;YAC3C,IAAI,gBAAgB,GAAG,CAAC,CAAC;YACzB,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,oBAAoB,CAAC,CAAC,kBAAkB,CAAC,KAAK,IAAI,EAAE;gBAC9E,gBAAgB,EAAE,CAAC;gBACnB,MAAM,OAAO,GAAoB;oBAC/B,gBAAgB,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE;oBACzE,eAAe,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE;oBAC1E,gBAAgB,EAAE;wBAChB,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,gBAAgB,CAAC;wBAC/C,UAAU,EAAE,EAAE;wBACd,YAAY,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,gBAAgB,GAAG,GAAG,CAAC;wBACzD,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,GAAG,gBAAgB,GAAG,CAAC,CAAC,CAAC,yBAAyB;qBAC/E;oBACD,iBAAiB,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,kBAAkB,EAAE,CAAC,EAAE;iBACtE,CAAC;gBACF,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACjC,OAAO,OAAO,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,kDAAkD;YAClD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,MAAM,eAAe,CAAC,kBAAkB,EAAE,CAAC;aAC5C;YAED,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAE1C,uCAAuC;YACvC,MAAM,YAAY,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC;YAC3C,MAAM,WAAW,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAEtE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,YAAY,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;YACzG,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,eAAe,CAAC,YAAY,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;YAC9G,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,YAAY,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QAC3G,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,MAAM,gBAAgB,GAAkB,EAAE,CAAC;YAE3C,YAAY,CAAC,kBAAkB,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC1C,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;oBAC3C,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;oBAC7B,uCAAuC;oBACvC,MAAM,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,WAAW;oBACnD,MAAM,OAAO,GAAG,SAAS,GAAG,KAAK,CAAC;oBAClC,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,EAAE;wBAC3B,YAAY;qBACb;oBACD,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;oBAC9C,OAAO,GAAG,CAAC,CAAC,YAAY;iBACzB;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,uCAAuC;YACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,MAAM,eAAe,CAAC,uBAAuB,EAAE,CAAC;aACjD;YAED,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE5D,qCAAqC;YACrC,MAAM,WAAW,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC,GAAG,gBAAgB,CAAC,MAAM,CAAC;YACpG,MAAM,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,2BAA2B;QACrE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,YAAY,GAAkB,EAAE,CAAC;YAEvC,YAAY,CAAC,kBAAkB,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC1C,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;oBAC5C,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;oBAC7B,wBAAwB;oBACxB,MAAM,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,WAAW;oBAClD,MAAM,OAAO,GAAG,SAAS,GAAG,KAAK,CAAC;oBAClC,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,EAAE;wBAC3B,YAAY;qBACb;oBACD,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;oBAC1C,OAAO,GAAG,CAAC,CAAC,cAAc;iBAC3B;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,8BAA8B;YAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,MAAM,eAAe,CAAC,sBAAsB,EAAE,CAAC;aAChD;YAED,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAExD,iCAAiC;YACjC,MAAM,WAAW,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC;YAC5F,MAAM,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,8BAA8B;QACvE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,aAAa,GAAkB,EAAE,CAAC;YAExC,YAAY,CAAC,kBAAkB,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC1C,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,+BAA+B,CAAC,EAAE;oBAChE,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;oBAC7B,+BAA+B;oBAC/B,MAAM,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,UAAU;oBACjD,MAAM,OAAO,GAAG,SAAS,GAAG,KAAK,CAAC;oBAClC,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,EAAE;wBAC3B,YAAY;qBACb;oBACD,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;oBAC3C,OAAO,KAAK,CAAC,CAAC,oBAAoB;iBACnC;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,wCAAwC;YACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,MAAM,eAAe,CAAC,wBAAwB,EAAE,CAAC;aAClD;YAED,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEzD,kCAAkC;YAClC,MAAM,WAAW,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC;YAC9F,MAAM,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,8BAA8B;QACvE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,8BAA8B;YAC9B,YAAY,CAAC,kBAAkB,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC1C,MAAM,GAAG,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;gBAC/B,IAAI,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;oBAC5B,iDAAiD;oBACjD,MAAM,KAAK,GAAG,GAAG,CAAC,CAAC,6BAA6B;oBAChD,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;oBACnC,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,EAAE;wBAC3B,YAAY;qBACb;oBACD,OAAO,KAAK,CAAC,CAAC,wBAAwB;iBACvC;gBACD,IAAI,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;oBAC7B,OAAO,OAAO,CAAC,CAAC,0BAA0B;iBAC3C;gBACD,IAAI,GAAG,CAAC,QAAQ,CAAC,+BAA+B,CAAC,EAAE;oBACjD,OAAO,MAAM,CAAC,CAAC,2BAA2B;iBAC3C;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,MAAM,eAAe,CAAC,kBAAkB,EAAE,CAAC;YAE3D,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnD,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpD,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAErD,iEAAiE;YACjE,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACtE,yDAAyD;YACzD,MAAM,QAAQ,GAAG;gBACf,eAAe,CAAC,uBAAuB,EAAE;gBACzC,eAAe,CAAC,sBAAsB,EAAE;gBACxC,eAAe,CAAC,wBAAwB,EAAE;gBAC1C,eAAe,CAAC,YAAY,EAAE;gBAC9B,eAAe,CAAC,cAAc,EAAE;aACjC,CAAC;YAEF,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC7B,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC5C,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAEzC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvE,MAAM,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,mCAAmC;QAC3E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,0CAA0C;YAC1C,MAAM,mBAAmB,GAAsB,EAAE,CAAC;YAElD,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,oBAAoB,CAAC,CAAC,kBAAkB,CAAC,KAAK,IAAI,EAAE;gBAC9E,MAAM,OAAO,GAAoB;oBAC/B,gBAAgB,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE;oBACzE,eAAe,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE;oBAC1E,gBAAgB,EAAE,EAAE,WAAW,EAAE,GAAG,EAAE,UAAU,EAAE,EAAE,EAAE,YAAY,EAAE,GAAG,EAAE,WAAW,EAAE,EAAE,EAAE;oBAC1F,iBAAiB,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,kBAAkB,EAAE,CAAC,EAAE;iBACtE,CAAC;gBACF,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAClC,OAAO,OAAO,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,iCAAiC;YACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC5B,MAAM,eAAe,CAAC,kBAAkB,EAAE,CAAC;aAC5C;YAED,MAAM,OAAO,GAAG,eAAe,CAAC,iBAAiB,EAAE,CAAC;YAEpD,qDAAqD;YACrD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC,oBAAoB;QACtE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/__tests__/performance/BuildPerformance.test.ts"],"sourcesContent":["/**\n * Performance Tests for Build Time Validation\n * Perfect Codebase Campaign - Build Performance Testing\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\n\nimport {\n  CampaignConfig,\n  SafetySettings,\n  SafetyLevel,\n  ProgressMetrics\n} from '../../../../types/campaign';\nimport { CampaignController } from '../../CampaignController';\nimport { ProgressTracker } from '../../ProgressTracker';\nimport { SafetyProtocol } from '../../SafetyProtocol';\n\n\n// Mock dependencies\njest.mock('child_process');\njest.mock('fs');\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('Build Performance Tests', () => {\n  let progressTracker: ProgressTracker;\n  let campaignController: CampaignController;\n  let mockConfig: CampaignConfig;\n\n  beforeEach(() => {\n    const safetySettings: SafetySettings = {\n      maxFilesPerBatch: 25,\n      buildValidationFrequency: 5,\n      testValidationFrequency: 10,\n      corruptionDetectionEnabled: true,\n      automaticRollbackEnabled: true,\n      stashRetentionDays: 7\n    };\n\n    mockConfig = {\n      phases: [{\n        id: 'performance-test-phase',\n        name: 'Performance Test Phase',\n        description: 'Phase for performance testing',\n        tools: [{\n          scriptPath: 'scripts/performance/test-script.js',\n          parameters: { maxFiles: 50 },\n          batchSize: 50,\n          safetyLevel: SafetyLevel.MEDIUM\n        }],\n        successCriteria: { buildTime: 10 },\n        safetyCheckpoints: []\n      }],\n      safetySettings,\n      progressTargets: { typeScriptErrors: 0, lintingWarnings: 0, buildTime: 10, enterpriseSystems: 200 },\n      toolConfiguration: {\n        enhancedErrorFixer: 'scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js',\n        explicitAnyFixer: 'scripts/typescript-fixes/fix-explicit-any-systematic.js',\n        unusedVariablesFixer: 'scripts/typescript-fixes/fix-unused-variables-enhanced.js',\n        consoleStatementFixer: 'scripts/lint-fixes/fix-console-statements-only.js'\n      }\n    };\n\n    progressTracker = new ProgressTracker();\n    campaignController = new CampaignController(mockConfig);\n\n    // Reset mocks\n    jest.clearAllMocks();\n    \n    // Default mock implementations\n    mockExecSync.mockReturnValue('');\n    mockFs.existsSync.mockReturnValue(true);\n    mockFs.writeFileSync.mockImplementation(() => {});\n  });\n\n  describe('Build Time Measurement', () => {\n    it('should measure build time under 10 seconds target', async () => {\n      // Mock fast build\n      let buildStartTime: number;\n      mockExecSync.mockImplementation((command) => {\n        if (command.toString().includes('yarn build')) {\n          buildStartTime = Date.now();\n          // Simulate fast build (2 seconds)\n          const delay = 2000;\n          const endTime = buildStartTime + delay;\n          while (Date.now() < endTime) {\n            // Busy wait to simulate build time\n          }\n          return '';\n        }\n        return '';\n      });\n\n      const buildTime = await progressTracker.getBuildTime();\n\n      expect(buildTime).toBeLessThan(10);\n      expect(buildTime).toBeGreaterThan(0);\n    });\n\n    it('should detect build time regression', async () => {\n      // Mock slow build\n      mockExecSync.mockImplementation((command) => {\n        if (command.toString().includes('yarn build')) {\n          // Simulate slow build (12 seconds)\n          const delay = 100; // Use shorter delay for test performance\n          const endTime = Date.now() + delay;\n          while (Date.now() < endTime) {\n            // Busy wait\n          }\n          return '';\n        }\n        return '';\n      });\n\n      const buildTime = await progressTracker.getBuildTime();\n\n      // Should detect that build time exceeds target\n      expect(buildTime).toBeGreaterThan(0);\n    });\n\n    it('should handle build failures gracefully', async () => {\n      mockExecSync.mockImplementation((command) => {\n        if (command.toString().includes('yarn build')) {\n          throw new Error('Build compilation failed');\n        }\n        return '';\n      });\n\n      const buildTime = await progressTracker.getBuildTime();\n\n      expect(buildTime).toBe(-1); // Indicates build failure\n    });\n\n    it('should measure build time consistently across multiple runs', async () => {\n      const buildTimes: Array<number> = [];\n      const targetBuildTime = 8; // 8 seconds\n\n      mockExecSync.mockImplementation((command) => {\n        if (command.toString().includes('yarn build')) {\n          // Simulate consistent build time with small variance\n          const baseTime = targetBuildTime * 1000;\n          const variance = Math.random() * 1000; // ±1 second variance\n          const delay = Math.max(100, baseTime + variance - 500); // Minimum 100ms for test performance\n          const endTime = Date.now() + Math.min(delay, 200); // Cap at 200ms for test performance\n          while (Date.now() < endTime) {\n            // Busy wait\n          }\n          return '';\n        }\n        return '';\n      });\n\n      // Measure build time multiple times\n      for (let i = 0; i < 5; i++) {\n        const buildTime = await progressTracker.getBuildTime();\n        buildTimes.push(buildTime);\n      }\n\n      // All build times should be positive and relatively consistent\n      expect(buildTimes.every(time => time > 0)).toBe(true);\n      expect(buildTimes.length).toBe(5);\n\n      // Calculate variance\n      const average = buildTimes.reduce((sum, time) => sum + time, 0) / buildTimes.length;\n      const variance = buildTimes.reduce((sum, time) => sum + Math.pow(time - average, 2), 0) / buildTimes.length;\n      const standardDeviation = Math.sqrt(variance);\n\n      // Standard deviation should be reasonable (less than 2 seconds)\n      expect(standardDeviation).toBeLessThan(2);\n    });\n  });\n\n  describe('Build Performance Optimization', () => {\n    it('should validate cache hit rate performance', async () => {\n      // Mock cache hit rate measurement\n      jest.spyOn(progressTracker, 'getCacheHitRate').mockResolvedValue(0.85);\n\n      const cacheHitRate = await progressTracker.getCacheHitRate();\n\n      expect(cacheHitRate).toBeGreaterThanOrEqual(0.8); // 80% minimum target\n      expect(cacheHitRate).toBeLessThanOrEqual(1.0); // Cannot exceed 100%\n    });\n\n    it('should detect cache performance degradation', async () => {\n      // Mock poor cache performance\n      jest.spyOn(progressTracker, 'getCacheHitRate').mockResolvedValue(0.65);\n\n      const cacheHitRate = await progressTracker.getCacheHitRate();\n\n      expect(cacheHitRate).toBeLessThan(0.8); // Below target\n    });\n\n    it('should measure memory usage during build', async () => {\n      // Mock memory usage tracking\n      const originalMemoryUsage = process.memoryUsage;\n      (process as any).memoryUsage = jest.fn().mockReturnValue({\n        heapUsed: 45 * 1024 * 1024, // 45MB\n        heapTotal: 100 * 1024 * 1024,\n        external: 0,\n        rss: 0,\n        arrayBuffers: 0\n      });\n\n      const memoryUsage = await progressTracker.getMemoryUsage();\n\n      expect(memoryUsage).toBeLessThan(50); // 50MB target\n      expect(memoryUsage).toBeGreaterThan(0);\n\n      process.memoryUsage = originalMemoryUsage;\n    });\n\n    it('should detect memory usage spikes', async () => {\n      // Mock high memory usage\n      const originalMemoryUsage = process.memoryUsage;\n      (process as any).memoryUsage = jest.fn().mockReturnValue({\n        heapUsed: 75 * 1024 * 1024, // 75MB - exceeds target\n        heapTotal: 150 * 1024 * 1024,\n        external: 0,\n        rss: 0,\n        arrayBuffers: 0\n      });\n\n      const memoryUsage = await progressTracker.getMemoryUsage();\n\n      expect(memoryUsage).toBeGreaterThan(50); // Exceeds 50MB target\n\n      process.memoryUsage = originalMemoryUsage;\n    });\n  });\n\n  describe('Bundle Size Performance', () => {\n    it('should validate bundle size under 420kB target', async () => {\n      // Mock bundle size measurement\n      mockFs.existsSync.mockImplementation((path) => {\n        return path === '.next' || path === 'dist';\n      });\n\n      mockExecSync.mockImplementation((command) => {\n        const cmd = command.toString();\n        if (cmd.includes('du -sk .next')) {\n          return '300'; // 300kB\n        }\n        if (cmd.includes('du -sk dist')) {\n          return '100'; // 100kB\n        }\n        return '';\n      });\n\n      const bundleSize = await progressTracker.getBundleSize();\n\n      expect(bundleSize).toBe(400); // 300 + 100 = 400kB\n      expect(bundleSize).toBeLessThan(420); // Under target\n    });\n\n    it('should detect bundle size regression', async () => {\n      // Mock large bundle size\n      mockFs.existsSync.mockReturnValue(true);\n      mockExecSync.mockImplementation((command) => {\n        if (command.toString().includes('du -sk')) {\n          return '500'; // 500kB - exceeds target\n        }\n        return '';\n      });\n\n      const bundleSize = await progressTracker.getBundleSize();\n\n      expect(bundleSize).toBeGreaterThan(420); // Exceeds target\n    });\n\n    it('should handle missing build directories', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      const bundleSize = await progressTracker.getBundleSize();\n\n      expect(bundleSize).toBe(0); // No build directories found\n    });\n\n    it('should measure bundle size across different build outputs', async () => {\n      const buildDirs = ['.next', 'dist', 'build'];\n      const expectedSizes = [200, 150, 50]; // kB\n\n      mockFs.existsSync.mockImplementation((path) => {\n        return buildDirs.includes(path as string);\n      });\n\n      mockExecSync.mockImplementation((command) => {\n        const cmd = command.toString();\n        if (cmd.includes('du -sk .next')) return '200';\n        if (cmd.includes('du -sk dist')) return '150';\n        if (cmd.includes('du -sk build')) return '50';\n        return '';\n      });\n\n      const bundleSize = await progressTracker.getBundleSize();\n\n      expect(bundleSize).toBe(400); // 200 + 150 + 50 = 400kB\n    });\n  });\n\n  describe('Performance Regression Testing', () => {\n    it('should detect performance regression during campaign execution', async () => {\n      const phase = mockConfig.phases[0];\n      \n      // Mock performance degradation\n      let buildTimeCallCount = 0;\n      jest.spyOn(progressTracker, 'getBuildTime').mockImplementation(async () => {\n        buildTimeCallCount++;\n        // Simulate performance degradation over time\n        return 8 + buildTimeCallCount * 2; // 8s, 10s, 12s, etc.\n      });\n\n      // Execute phase multiple times to simulate regression\n      const results: Array<any> = [];\n      for (let i = 0; i < 3; i++) {\n        const result = await campaignController.executePhase(phase);\n        results.push(result);\n      }\n\n      // Verify that performance degradation would be detected\n      const finalBuildTime = await progressTracker.getBuildTime();\n      expect(finalBuildTime).toBeGreaterThan(10); // Exceeds target\n    });\n\n    it('should validate performance improvements during campaign', async () => {\n      const phase = mockConfig.phases[0];\n      \n      // Mock performance improvement\n      let buildTimeCallCount = 0;\n      jest.spyOn(progressTracker, 'getBuildTime').mockImplementation(async () => {\n        buildTimeCallCount++;\n        // Simulate performance improvement over time\n        return Math.max(6, 12 - buildTimeCallCount * 2); // 12s, 10s, 8s, 6s\n      });\n\n      // Execute phase multiple times to simulate improvement\n      const results: Array<any> = [];\n      for (let i = 0; i < 4; i++) {\n        const result = await campaignController.executePhase(phase);\n        results.push(result);\n      }\n\n      // Verify performance improvement\n      const finalBuildTime = await progressTracker.getBuildTime();\n      expect(finalBuildTime).toBeLessThan(10); // Under target\n    });\n\n    it('should track performance metrics over time', async () => {\n      const performanceHistory: ProgressMetrics[] = [];\n\n      // Mock progressive performance improvement\n      let metricsCallCount = 0;\n      jest.spyOn(progressTracker, 'getProgressMetrics').mockImplementation(async () => {\n        metricsCallCount++;\n        const metrics: ProgressMetrics = {\n          typeScriptErrors: { current: 86, target: 0, reduction: 0, percentage: 0 },\n          lintingWarnings: { current: 4506, target: 0, reduction: 0, percentage: 0 },\n          buildPerformance: {\n            currentTime: Math.max(7, 12 - metricsCallCount), // Improving build time\n            targetTime: 10,\n            cacheHitRate: Math.min(0.9, 0.6 + metricsCallCount * 0.1), // Improving cache hit rate\n            memoryUsage: Math.max(35, 55 - metricsCallCount * 5) // Improving memory usage\n          },\n          enterpriseSystems: { current: 0, target: 200, transformedExports: 0 }\n        };\n        performanceHistory.push(metrics);\n        return metrics;\n      });\n\n      // Collect performance metrics over multiple calls\n      for (let i = 0; i < 5; i++) {\n        await progressTracker.getProgressMetrics();\n      }\n\n      expect(performanceHistory.length).toBe(5);\n\n      // Verify performance improvement trend\n      const firstMetrics = performanceHistory[0];\n      const lastMetrics = performanceHistory[performanceHistory.length - 1];\n\n      expect(lastMetrics.buildPerformance.currentTime).toBeLessThan(firstMetrics.buildPerformance.currentTime);\n      expect(lastMetrics.buildPerformance.cacheHitRate).toBeGreaterThan(firstMetrics.buildPerformance.cacheHitRate);\n      expect(lastMetrics.buildPerformance.memoryUsage).toBeLessThan(firstMetrics.buildPerformance.memoryUsage);\n    });\n  });\n\n  describe('Performance Benchmarking', () => {\n    it('should benchmark TypeScript compilation performance', async () => {\n      const compilationTimes: Array<number> = [];\n\n      mockExecSync.mockImplementation((command) => {\n        if (command.toString().includes('yarn tsc')) {\n          const startTime = Date.now();\n          // Simulate TypeScript compilation time\n          const delay = 50 + Math.random() * 100; // 50-150ms\n          const endTime = startTime + delay;\n          while (Date.now() < endTime) {\n            // Busy wait\n          }\n          compilationTimes.push(Date.now() - startTime);\n          return '0'; // No errors\n        }\n        return '';\n      });\n\n      // Run multiple TypeScript error checks\n      for (let i = 0; i < 5; i++) {\n        await progressTracker.getTypeScriptErrorCount();\n      }\n\n      expect(compilationTimes.length).toBe(5);\n      expect(compilationTimes.every(time => time > 0)).toBe(true);\n\n      // Calculate average compilation time\n      const averageTime = compilationTimes.reduce((sum, time) => sum + time, 0) / compilationTimes.length;\n      expect(averageTime).toBeLessThan(1000); // Should be under 1 second\n    });\n\n    it('should benchmark linting performance', async () => {\n      const lintingTimes: Array<number> = [];\n\n      mockExecSync.mockImplementation((command) => {\n        if (command.toString().includes('yarn lint')) {\n          const startTime = Date.now();\n          // Simulate linting time\n          const delay = 30 + Math.random() * 70; // 30-100ms\n          const endTime = startTime + delay;\n          while (Date.now() < endTime) {\n            // Busy wait\n          }\n          lintingTimes.push(Date.now() - startTime);\n          return '0'; // No warnings\n        }\n        return '';\n      });\n\n      // Run multiple linting checks\n      for (let i = 0; i < 5; i++) {\n        await progressTracker.getLintingWarningCount();\n      }\n\n      expect(lintingTimes.length).toBe(5);\n      expect(lintingTimes.every(time => time > 0)).toBe(true);\n\n      // Calculate average linting time\n      const averageTime = lintingTimes.reduce((sum, time) => sum + time, 0) / lintingTimes.length;\n      expect(averageTime).toBeLessThan(500); // Should be under 0.5 seconds\n    });\n\n    it('should benchmark enterprise system counting performance', async () => {\n      const countingTimes: Array<number> = [];\n\n      mockExecSync.mockImplementation((command) => {\n        if (command.toString().includes('grep -r \"INTELLIGENCE_SYSTEM\"')) {\n          const startTime = Date.now();\n          // Simulate grep operation time\n          const delay = 20 + Math.random() * 30; // 20-50ms\n          const endTime = startTime + delay;\n          while (Date.now() < endTime) {\n            // Busy wait\n          }\n          countingTimes.push(Date.now() - startTime);\n          return '150'; // 150 systems found\n        }\n        return '';\n      });\n\n      // Run multiple enterprise system counts\n      for (let i = 0; i < 5; i++) {\n        await progressTracker.getEnterpriseSystemCount();\n      }\n\n      expect(countingTimes.length).toBe(5);\n      expect(countingTimes.every(time => time > 0)).toBe(true);\n\n      // Calculate average counting time\n      const averageTime = countingTimes.reduce((sum, time) => sum + time, 0) / countingTimes.length;\n      expect(averageTime).toBeLessThan(200); // Should be under 0.2 seconds\n    });\n  });\n\n  describe('Scalability Testing', () => {\n    it('should handle large codebase performance', async () => {\n      // Mock large codebase metrics\n      mockExecSync.mockImplementation((command) => {\n        const cmd = command.toString();\n        if (cmd.includes('yarn tsc')) {\n          // Simulate longer compilation for large codebase\n          const delay = 100; // 100ms for test performance\n          const endTime = Date.now() + delay;\n          while (Date.now() < endTime) {\n            // Busy wait\n          }\n          return '500'; // 500 TypeScript errors\n        }\n        if (cmd.includes('yarn lint')) {\n          return '10000'; // 10,000 linting warnings\n        }\n        if (cmd.includes('grep -r \"INTELLIGENCE_SYSTEM\"')) {\n          return '1000'; // 1,000 enterprise systems\n        }\n        return '';\n      });\n\n      const metrics = await progressTracker.getProgressMetrics();\n\n      expect(metrics.typeScriptErrors.current).toBe(500);\n      expect(metrics.lintingWarnings.current).toBe(10000);\n      expect(metrics.enterpriseSystems.current).toBe(1000);\n\n      // Performance should still be reasonable even with large numbers\n      expect(metrics).toBeDefined();\n    });\n\n    it('should maintain performance with concurrent operations', async () => {\n      // Run multiple progress tracking operations concurrently\n      const promises = [\n        progressTracker.getTypeScriptErrorCount(),\n        progressTracker.getLintingWarningCount(),\n        progressTracker.getEnterpriseSystemCount(),\n        progressTracker.getBuildTime(),\n        progressTracker.getMemoryUsage()\n      ];\n\n      const startTime = Date.now();\n      const results = await Promise.all(promises);\n      const totalTime = Date.now() - startTime;\n\n      expect(results.length).toBe(5);\n      expect(results.every(result => typeof result === 'number')).toBe(true);\n      expect(totalTime).toBeLessThan(2000); // Should complete within 2 seconds\n    });\n\n    it('should handle memory-intensive operations efficiently', async () => {\n      // Mock memory-intensive progress tracking\n      const largeMetricsHistory: ProgressMetrics[] = [];\n\n      jest.spyOn(progressTracker, 'getProgressMetrics').mockImplementation(async () => {\n        const metrics: ProgressMetrics = {\n          typeScriptErrors: { current: 86, target: 0, reduction: 0, percentage: 0 },\n          lintingWarnings: { current: 4506, target: 0, reduction: 0, percentage: 0 },\n          buildPerformance: { currentTime: 8.5, targetTime: 10, cacheHitRate: 0.8, memoryUsage: 45 },\n          enterpriseSystems: { current: 0, target: 200, transformedExports: 0 }\n        };\n        largeMetricsHistory.push(metrics);\n        return metrics;\n      });\n\n      // Generate large metrics history\n      for (let i = 0; i < 100; i++) {\n        await progressTracker.getProgressMetrics();\n      }\n\n      const history = progressTracker.getMetricsHistory();\n      \n      // Should limit history size to prevent memory issues\n      expect(history.length).toBeLessThanOrEqual(50); // Should be trimmed\n    });\n  });\n});"],"version":3}