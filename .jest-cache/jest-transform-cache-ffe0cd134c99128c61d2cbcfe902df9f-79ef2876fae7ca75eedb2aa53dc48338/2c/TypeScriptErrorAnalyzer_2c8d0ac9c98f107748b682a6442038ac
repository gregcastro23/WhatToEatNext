dd5ef861b3905ee6b4268b6ce73da8fd
"use strict";
/**
 * TypeScript Error Analyzer for Perfect Codebase Campaign
 *
 * Implements systematic TypeScript error elimination using existing Enhanced Error Fixer v3.0 patterns
 * Provides error distribution analysis, categorization, and priority ranking system
 *
 * Requirements: 1.2, 1.3, 1.4, 1.5
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeScriptErrorAnalyzer = exports.ErrorSeverity = exports.ErrorCategory = void 0;
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
var ErrorCategory;
(function (ErrorCategory) {
    ErrorCategory["TS2352_TYPE_CONVERSION"] = "TS2352";
    ErrorCategory["TS2345_ARGUMENT_MISMATCH"] = "TS2345";
    ErrorCategory["TS2698_SPREAD_TYPE"] = "TS2698";
    ErrorCategory["TS2304_CANNOT_FIND_NAME"] = "TS2304";
    ErrorCategory["TS2362_ARITHMETIC_OPERATION"] = "TS2362";
    ErrorCategory["OTHER"] = "OTHER";
})(ErrorCategory || (exports.ErrorCategory = ErrorCategory = {}));
var ErrorSeverity;
(function (ErrorSeverity) {
    ErrorSeverity["HIGH"] = "HIGH";
    ErrorSeverity["MEDIUM"] = "MEDIUM";
    ErrorSeverity["LOW"] = "LOW";
})(ErrorSeverity || (exports.ErrorSeverity = ErrorSeverity = {}));
class TypeScriptErrorAnalyzer {
    HIGH_PRIORITY_ERRORS = ['TS2352', 'TS2345', 'TS2698', 'TS2304', 'TS2362'];
    MEDIUM_PRIORITY_ERRORS = ['TS2322', 'TS2740', 'TS2339', 'TS2741', 'TS2688'];
    LOW_PRIORITY_ERRORS = ['TS2820', 'TS2588', 'TS2300'];
    /**
     * Analyze TypeScript errors using `yarn tsc --noEmit --skipLibCheck` output
     */
    async analyzeErrors() {
        console.log('🔍 Analyzing TypeScript errors...');
        const errors = await this.getTypeScriptErrors();
        const distribution = this.createErrorDistribution(errors);
        const recommendations = this.generateRecommendations(distribution);
        return {
            distribution,
            recommendations,
            timestamp: new Date().toISOString(),
        };
    }
    /**
     * Get TypeScript errors using compiler output
     */
    async getTypeScriptErrors() {
        try {
            // Run TypeScript compiler with no emit and skip lib check for faster analysis
            (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck', {
                encoding: 'utf8',
                stdio: 'pipe',
                timeout: 120000, // 2 minute timeout
            });
            // If no errors, return empty array
            return [];
        }
        catch (error) {
            const output = error.stdout || error.stderr || '';
            return this.parseErrorsFromOutput(output);
        }
    }
    /**
     * Parse TypeScript compiler output to extract error information
     */
    parseErrorsFromOutput(output) {
        const lines = output.split('\n');
        const errors = [];
        for (const line of lines) {
            // Parse TypeScript error format: file(line,col): error TS#### message
            const match = line.match(/^(.+?)\((\d+),(\d+)\):\s+error\s+(TS\d+):\s*(.+)$/);
            if (match) {
                const [, filePath, lineNum, colNum, code, message] = match;
                // Clean up file path to be relative to project root
                const cleanFilePath = filePath.replace(/^.*?\/WhatToEatNext\//, '');
                const error = {
                    filePath: cleanFilePath,
                    line: parseInt(lineNum),
                    column: parseInt(colNum),
                    code,
                    message: message.trim(),
                    category: this.categorizeError(code),
                    priority: this.calculateErrorPriority(code, cleanFilePath, message),
                    severity: this.determineSeverity(code, message),
                };
                errors.push(error);
            }
        }
        console.log(`📊 Found ${errors.length} TypeScript errors`);
        return errors;
    }
    /**
     * Categorize error by code for targeted fixing
     */
    categorizeError(code) {
        switch (code) {
            case 'TS2352':
                return ErrorCategory.TS2352_TYPE_CONVERSION;
            case 'TS2345':
                return ErrorCategory.TS2345_ARGUMENT_MISMATCH;
            case 'TS2698':
                return ErrorCategory.TS2698_SPREAD_TYPE;
            case 'TS2304':
                return ErrorCategory.TS2304_CANNOT_FIND_NAME;
            case 'TS2362':
                return ErrorCategory.TS2362_ARITHMETIC_OPERATION;
            default:
                return ErrorCategory.OTHER;
        }
    }
    /**
     * Calculate priority ranking based on error frequency and impact
     */
    calculateErrorPriority(code, filePath, message) {
        let priority = 0;
        // Error code priority (based on requirements 1.2, 1.3, 1.4, 1.5)
        if (this.HIGH_PRIORITY_ERRORS.includes(code)) {
            priority += 15;
        }
        else if (this.MEDIUM_PRIORITY_ERRORS.includes(code)) {
            priority += 10;
        }
        else if (this.LOW_PRIORITY_ERRORS.includes(code)) {
            priority += 5;
        }
        // File type priority - core system files get higher priority
        if (filePath.includes('/types/'))
            priority += 8;
        if (filePath.includes('/services/'))
            priority += 7;
        if (filePath.includes('/components/'))
            priority += 6;
        if (filePath.includes('/utils/'))
            priority += 4;
        if (filePath.includes('/data/'))
            priority += 3;
        // Message content priority - critical errors get higher priority
        if (message.includes('not assignable'))
            priority += 5;
        if (message.includes('Cannot find'))
            priority += 6;
        if (message.includes('not exported'))
            priority += 7;
        if (message.includes('missing'))
            priority += 4;
        if (message.includes('Conversion of type'))
            priority += 8; // TS2352 specific
        if (message.includes('Argument of type'))
            priority += 6; // TS2345 specific
        return priority;
    }
    /**
     * Determine error severity for processing order
     */
    determineSeverity(code, message) {
        // High severity - breaks builds or critical type safety
        if (this.HIGH_PRIORITY_ERRORS.includes(code)) {
            return ErrorSeverity.HIGH;
        }
        // Medium severity - type safety issues but not build-breaking
        if (this.MEDIUM_PRIORITY_ERRORS.includes(code)) {
            return ErrorSeverity.MEDIUM;
        }
        // Low severity - style or minor issues
        return ErrorSeverity.LOW;
    }
    /**
     * Create comprehensive error distribution analysis
     */
    createErrorDistribution(errors) {
        const errorsByCategory = {
            [ErrorCategory.TS2352_TYPE_CONVERSION]: [],
            [ErrorCategory.TS2345_ARGUMENT_MISMATCH]: [],
            [ErrorCategory.TS2698_SPREAD_TYPE]: [],
            [ErrorCategory.TS2304_CANNOT_FIND_NAME]: [],
            [ErrorCategory.TS2362_ARITHMETIC_OPERATION]: [],
            [ErrorCategory.OTHER]: [],
        };
        const errorsByFile = {};
        // Categorize errors
        for (const error of errors) {
            errorsByCategory[error.category].push(error);
            if (!errorsByFile[error.filePath]) {
                errorsByFile[error.filePath] = [];
            }
            errorsByFile[error.filePath].push(error);
        }
        // Create priority ranking
        const priorityRanking = [...errors].sort((a, b) => b.priority - a.priority);
        // Identify high-impact files (>10 errors)
        const highImpactFiles = Object.entries(errorsByFile)
            .filter(([, fileErrors]) => fileErrors.length > 10)
            .map(([filePath, fileErrors]) => ({
            filePath,
            errorCount: fileErrors.length,
            categories: [...new Set(fileErrors.map(e => e.category))],
            averagePriority: fileErrors.reduce((sum, e) => sum + e.priority, 0) / fileErrors.length,
        }))
            .sort((a, b) => b.errorCount - a.errorCount);
        return {
            totalErrors: errors.length,
            errorsByCategory,
            errorsByFile,
            priorityRanking,
            highImpactFiles,
        };
    }
    /**
     * Generate fix recommendations based on error distribution
     */
    generateRecommendations(distribution) {
        const recommendations = [];
        // TS2352 Type Conversion Errors (highest priority per requirements)
        const ts2352Count = distribution.errorsByCategory[ErrorCategory.TS2352_TYPE_CONVERSION].length;
        if (ts2352Count > 0) {
            recommendations.push({
                category: ErrorCategory.TS2352_TYPE_CONVERSION,
                errorCount: ts2352Count,
                priority: 1,
                description: 'Fix type conversion errors - often caused by incorrect type assertions or unsafe casts',
                estimatedReduction: Math.round(ts2352Count * 0.9), // High success rate expected
            });
        }
        // TS2345 Argument Type Mismatch (second priority)
        const ts2345Count = distribution.errorsByCategory[ErrorCategory.TS2345_ARGUMENT_MISMATCH].length;
        if (ts2345Count > 0) {
            recommendations.push({
                category: ErrorCategory.TS2345_ARGUMENT_MISMATCH,
                errorCount: ts2345Count,
                priority: 2,
                description: 'Fix argument type mismatches - usually requires type assertions or interface updates',
                estimatedReduction: Math.round(ts2345Count * 0.85),
            });
        }
        // TS2304 Cannot Find Name (third priority)
        const ts2304Count = distribution.errorsByCategory[ErrorCategory.TS2304_CANNOT_FIND_NAME].length;
        if (ts2304Count > 0) {
            recommendations.push({
                category: ErrorCategory.TS2304_CANNOT_FIND_NAME,
                errorCount: ts2304Count,
                priority: 3,
                description: 'Fix missing imports and undefined references - often cascades to fix other errors',
                estimatedReduction: Math.round(ts2304Count * 1.2), // Can fix cascading errors
            });
        }
        // TS2698 Spread Type Errors
        const ts2698Count = distribution.errorsByCategory[ErrorCategory.TS2698_SPREAD_TYPE].length;
        if (ts2698Count > 0) {
            recommendations.push({
                category: ErrorCategory.TS2698_SPREAD_TYPE,
                errorCount: ts2698Count,
                priority: 4,
                description: 'Fix spread operator type errors - requires careful type analysis',
                estimatedReduction: Math.round(ts2698Count * 0.8),
            });
        }
        // TS2362 Arithmetic Operation Errors
        const ts2362Count = distribution.errorsByCategory[ErrorCategory.TS2362_ARITHMETIC_OPERATION].length;
        if (ts2362Count > 0) {
            recommendations.push({
                category: ErrorCategory.TS2362_ARITHMETIC_OPERATION,
                errorCount: ts2362Count,
                priority: 5,
                description: 'Fix arithmetic operation type errors - usually requires number type assertions',
                estimatedReduction: Math.round(ts2362Count * 0.9),
            });
        }
        return recommendations.sort((a, b) => a.priority - b.priority);
    }
    /**
     * Display analysis results in formatted output
     */
    displayResults(result) {
        console.log('\n📊 TYPESCRIPT ERROR ANALYSIS RESULTS');
        console.log('=====================================');
        console.log(`\n📈 Total Errors: ${result.distribution.totalErrors}`);
        console.log('\n🏷️  Errors by Category:');
        Object.entries(result.distribution.errorsByCategory).forEach(([category, errors]) => {
            if (errors.length > 0) {
                console.log(`  ${category}: ${errors.length} errors`);
            }
        });
        console.log('\n🔥 High-Impact Files (>10 errors):');
        result.distribution.highImpactFiles.slice(0, 10).forEach(file => {
            console.log(`  ${file.filePath}: ${file.errorCount} errors (avg priority: ${file.averagePriority.toFixed(1)})`);
            console.log(`    Categories: ${file.categories.join(', ')}`);
        });
        console.log('\n💡 Recommended Fix Order:');
        result.recommendations.forEach(rec => {
            console.log(`  ${rec.priority}. ${rec.category}: ${rec.errorCount} errors`);
            console.log(`     Expected reduction: ~${rec.estimatedReduction} errors`);
            console.log(`     ${rec.description}\n`);
        });
        const totalEstimatedReduction = result.recommendations.reduce((sum, rec) => sum + rec.estimatedReduction, 0);
        console.log(`📉 Estimated total error reduction: ${totalEstimatedReduction} errors`);
        console.log(`📊 Estimated remaining errors: ${result.distribution.totalErrors - totalEstimatedReduction}`);
        console.log(`⏰ Analysis completed at: ${new Date(result.timestamp).toLocaleString()}`);
    }
    /**
     * Save analysis results to file for tracking progress
     */
    async saveAnalysis(result, outputPath) {
        const defaultPath = path_1.default.join(process.cwd(), '.typescript-error-analysis.json');
        const filePath = outputPath || defaultPath;
        try {
            await fs_1.default.promises.writeFile(filePath, JSON.stringify(result, null, 2));
            console.log(`\n💾 Analysis saved to: ${filePath}`);
        }
        catch (error) {
            console.error(`❌ Failed to save analysis: ${error}`);
        }
    }
    /**
     * Get current error count for progress tracking
     */
    async getCurrentErrorCount() {
        try {
            const output = (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c "error TS"', {
                encoding: 'utf8',
                stdio: 'pipe',
                timeout: 30000, // 30 second timeout
            });
            return parseInt(output.trim()) || 0;
        }
        catch (error) {
            // If grep finds no matches, it returns exit code 1, or timeout occurred
            console.warn('TypeScript error count check failed or timed out:', error.message);
            return 0;
        }
    }
}
exports.TypeScriptErrorAnalyzer = TypeScriptErrorAnalyzer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0Ly5jb25zb2xpZGF0aW9uLWJhY2t1cHMtMjAyNS0wOC0yM1QxNy01NC0xMC0wOTJaL3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi9UeXBlU2NyaXB0RXJyb3JBbmFseXplci50cyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7R0FPRzs7Ozs7O0FBRUgsaURBQXlDO0FBQ3pDLDRDQUFvQjtBQUNwQixnREFBd0I7QUFheEIsSUFBWSxhQU9YO0FBUEQsV0FBWSxhQUFhO0lBQ3ZCLGtEQUFpQyxDQUFBO0lBQ2pDLG9EQUFtQyxDQUFBO0lBQ25DLDhDQUE2QixDQUFBO0lBQzdCLG1EQUFrQyxDQUFBO0lBQ2xDLHVEQUFzQyxDQUFBO0lBQ3RDLGdDQUFlLENBQUE7QUFDakIsQ0FBQyxFQVBXLGFBQWEsNkJBQWIsYUFBYSxRQU94QjtBQUVELElBQVksYUFJWDtBQUpELFdBQVksYUFBYTtJQUN2Qiw4QkFBYSxDQUFBO0lBQ2Isa0NBQWlCLENBQUE7SUFDakIsNEJBQVcsQ0FBQTtBQUNiLENBQUMsRUFKVyxhQUFhLDZCQUFiLGFBQWEsUUFJeEI7QUEyQkQsTUFBYSx1QkFBdUI7SUFDakIsb0JBQW9CLEdBQUcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDMUUsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDNUUsbUJBQW1CLEdBQUcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRXRFOztPQUVHO0lBQ0gsS0FBSyxDQUFDLGFBQWE7UUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1FBRWpELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDaEQsTUFBTSxZQUFZLEdBQUcsSUFBSSxD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QUNkLHdFQUF3RTtZQUN4RSxPQUFPLENBQUMsSUFBSSxDQUFDLG1EQUFtRCxFQUFHLEtBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1RixPQUFPLENBQUMsQ0FBQztTQUNWO0lBQ0gsQ0FBQztDQUNGO0FBdFdELDBEQXNXQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvR3JlZ0Nhc3Ryby9EZXNrdG9wL1doYXRUb0VhdE5leHQvLmNvbnNvbGlkYXRpb24tYmFja3Vwcy0yMDI1LTA4LTIzVDE3LTU0LTEwLTA5Mlovc3JjL3NlcnZpY2VzL2NhbXBhaWduL1R5cGVTY3JpcHRFcnJvckFuYWx5emVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVHlwZVNjcmlwdCBFcnJvciBBbmFseXplciBmb3IgUGVyZmVjdCBDb2RlYmFzZSBDYW1wYWlnblxuICpcbiAqIEltcGxlbWVudHMgc3lzdGVtYXRpYyBUeXBlU2NyaXB0IGVycm9yIGVsaW1pbmF0aW9uIHVzaW5nIGV4aXN0aW5nIEVuaGFuY2VkIEVycm9yIEZpeGVyIHYzLjAgcGF0dGVybnNcbiAqIFByb3ZpZGVzIGVycm9yIGRpc3RyaWJ1dGlvbiBhbmFseXNpcywgY2F0ZWdvcml6YXRpb24sIGFuZCBwcmlvcml0eSByYW5raW5nIHN5c3RlbVxuICpcbiAqIFJlcXVpcmVtZW50czogMS4yLCAxLjMsIDEuNCwgMS41XG4gKi9cblxuaW1wb3J0IHsgZXhlY1N5bmMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuZXhwb3J0IGludGVyZmFjZSBUeXBlU2NyaXB0RXJyb3Ige1xuICBmaWxlUGF0aDogc3RyaW5nO1xuICBsaW5lOiBudW1iZXI7XG4gIGNvbHVtbjogbnVtYmVyO1xuICBjb2RlOiBzdHJpbmc7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgY2F0ZWdvcnk6IEVycm9yQ2F0ZWdvcnk7XG4gIHByaW9yaXR5OiBudW1iZXI7XG4gIHNldmVyaXR5OiBFcnJvclNldmVyaXR5O1xufVxuXG5leHBvcnQgZW51bSBFcnJvckNhdGVnb3J5IHtcbiAgVFMyMzUyX1RZUEVfQ09OVkVSU0lPTiA9ICdUUzIzNTInLFxuICBUUzIzNDVfQVJHVU1FTlRfTUlTTUFUQ0ggPSAnVFMyMzQ1JyxcbiAgVFMyNjk4X1NQUkVBRF9UWVBFID0gJ1RTMjY5OCcsXG4gIFRTMjMwNF9DQU5OT1RfRklORF9OQU1FID0gJ1RTMjMwNCcsXG4gIFRTMjM2Ml9BUklUSE1FVElDX09QRVJBVElPTiA9ICdUUzIzNjInLFxuICBPVEhFUiA9ICdPVEhFUicsXG59XG5cbmV4cG9ydCBlbnVtIEVycm9yU2V2ZXJpdHkge1xuICBISUdIID0gJ0hJR0gnLFxuICBNRURJVU0gPSAnTUVESVVNJyxcbiAgTE9XID0gJ0xPVycsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JEaXN0cmlidXRpb24ge1xuICB0b3RhbEVycm9yczogbnVtYmVyO1xuICBlcnJvcnNCeUNhdGVnb3J5OiBSZWNvcmQ8RXJyb3JDYXRlZ29yeSwgVHlwZVNjcmlwdEVycm9yW10+O1xuICBlcnJvcnNCeUZpbGU6IFJlY29yZDxzdHJpbmcsIFR5cGVTY3JpcHRFcnJvcltdPjtcbiAgcHJpb3JpdHlSYW5raW5nOiBUeXBlU2NyaXB0RXJyb3JbXTtcbiAgaGlnaEltcGFjdEZpbGVzOiBBcnJheTx7XG4gICAgZmlsZVBhdGg6IHN0cmluZztcbiAgICBlcnJvckNvdW50OiBudW1iZXI7XG4gICAgY2F0ZWdvcmllczogRXJyb3JDYXRlZ29yeVtdO1xuICAgIGF2ZXJhZ2VQcmlvcml0eTogbnVtYmVyO1xuICB9Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBbmFseXNpc1Jlc3VsdCB7XG4gIGRpc3RyaWJ1dGlvbjogRXJyb3JEaXN0cmlidXRpb247XG4gIHJlY29tbWVuZGF0aW9uczogQXJyYXk8e1xuICAgIGNhdGVnb3J5OiBFcnJvckNhdGVnb3J5O1xuICAgIGVycm9yQ291bnQ6IG51bWJlcjtcbiAgICBwcmlvcml0eTogbnVtYmVyO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgZXN0aW1hdGVkUmVkdWN0aW9uOiBudW1iZXI7XG4gIH0+O1xuICB0aW1lc3RhbXA6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFR5cGVTY3JpcHRFcnJvckFuYWx5emVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBISUdIX1BSSU9SSVRZX0VSUk9SUyA9IFsnVFMyMzUyJywgJ1RTMjM0NScsICdUUzI2OTgnLCAnVFMyMzA0JywgJ1RTMjM2MiddO1xuICBwcml2YXRlIHJlYWRvbmx5IE1FRElVTV9QUklPUklUWV9FUlJPUlMgPSBbJ1RTMjMyMicsICdUUzI3NDAnLCAnVFMyMzM5JywgJ1RTMjc0MScsICdUUzI2ODgnXTtcbiAgcHJpdmF0ZSByZWFkb25seSBMT1dfUFJJT1JJVFlfRVJST1JTID0gWydUUzI4MjAnLCAnVFMyNTg4JywgJ1RTMjMwMCddO1xuXG4gIC8qKlxuICAgKiBBbmFseXplIFR5cGVTY3JpcHQgZXJyb3JzIHVzaW5nIGB5YXJuIHRzYyAtLW5vRW1pdCAtLXNraXBMaWJDaGVja2Agb3V0cHV0XG4gICAqL1xuICBhc3luYyBhbmFseXplRXJyb3JzKCk6IFByb21pc2U8QW5hbHlzaXNSZXN1bHQ+IHtcbiAgICBjb25zb2xlLmxvZygn8J+UjSBBbmFseXppbmcgVHlwZVNjcmlwdCBlcnJvcnMuLi4nKTtcblxuICAgIGNvbnN0IGVycm9ycyA9IGF3YWl0IHRoaXMuZ2V0VHlwZVNjcmlwdEVycm9ycygpO1xuICAgIGNvbnN0IGRpc3RyaWJ1dGlvbiA9IHRoaXMuY3JlYXRlRXJyb3JEaXN0cmlidXRpb24oZXJyb3JzKTtcbiAgICBjb25zdCByZWNvbW1lbmRhdGlvbnMgPSB0aGlzLmdlbmVyYXRlUmVjb21tZW5kYXRpb25zKGRpc3RyaWJ1dGlvbik7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGlzdHJpYnV0aW9uLFxuICAgICAgcmVjb21tZW5kYXRpb25zLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgVHlwZVNjcmlwdCBlcnJvcnMgdXNpbmcgY29tcGlsZXIgb3V0cHV0XG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGdldFR5cGVTY3JpcHRFcnJvcnMoKTogUHJvbWlzZTxUeXBlU2NyaXB0RXJyb3JbXT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBSdW4gVHlwZVNjcmlwdCBjb21waWxlciB3aXRoIG5vIGVtaXQgYW5kIHNraXAgbGliIGNoZWNrIGZvciBmYXN0ZXIgYW5hbHlzaXNcbiAgICAgIGV4ZWNTeW5jKCd5YXJuIHRzYyAtLW5vRW1pdCAtLXNraXBMaWJDaGVjaycsIHtcbiAgICAgICAgZW5jb2Rpbmc6ICd1dGY4JyxcbiAgICAgICAgc3RkaW86ICdwaXBlJyxcbiAgICAgICAgdGltZW91dDogMTIwMDAwLCAvLyAyIG1pbnV0ZSB0aW1lb3V0XG4gICAgICB9KTtcblxuICAgICAgLy8gSWYgbm8gZXJyb3JzLCByZXR1cm4gZW1wdHkgYXJyYXlcbiAgICAgIHJldHVybiBbXTtcbiAgICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgICAgY29uc3Qgb3V0cHV0ID0gZXJyb3Iuc3Rkb3V0IHx8IGVycm9yLnN0ZGVyciB8fCAnJztcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlRXJyb3JzRnJvbU91dHB1dChvdXRwdXQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBUeXBlU2NyaXB0IGNvbXBpbGVyIG91dHB1dCB0byBleHRyYWN0IGVycm9yIGluZm9ybWF0aW9uXG4gICAqL1xuICBwcml2YXRlIHBhcnNlRXJyb3JzRnJvbU91dHB1dChvdXRwdXQ6IHN0cmluZyk6IFR5cGVTY3JpcHRFcnJvcltdIHtcbiAgICBjb25zdCBsaW5lcyA9IG91dHB1dC5zcGxpdCgnXFxuJyk7XG4gICAgY29uc3QgZXJyb3JzOiBUeXBlU2NyaXB0RXJyb3JbXSA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgICAvLyBQYXJzZSBUeXBlU2NyaXB0IGVycm9yIGZvcm1hdDogZmlsZShsaW5lLGNvbCk6IGVycm9yIFRTIyMjIyBtZXNzYWdlXG4gICAgICBjb25zdCBtYXRjaCA9IGxpbmUubWF0Y2goL14oLis/KVxcKChcXGQrKSwoXFxkKylcXCk6XFxzK2Vycm9yXFxzKyhUU1xcZCspOlxccyooLispJC8pO1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGNvbnN0IFssIGZpbGVQYXRoLCBsaW5lTnVtLCBjb2xOdW0sIGNvZGUsIG1lc3NhZ2VdID0gbWF0Y2g7XG5cbiAgICAgICAgLy8gQ2xlYW4gdXAgZmlsZSBwYXRoIHRvIGJlIHJlbGF0aXZlIHRvIHByb2plY3Qgcm9vdFxuICAgICAgICBjb25zdCBjbGVhbkZpbGVQYXRoID0gZmlsZVBhdGgucmVwbGFjZSgvXi4qP1xcL1doYXRUb0VhdE5leHRcXC8vLCAnJyk7XG5cbiAgICAgICAgY29uc3QgZXJyb3I6IFR5cGVTY3JpcHRFcnJvciA9IHtcbiAgICAgICAgICBmaWxlUGF0aDogY2xlYW5GaWxlUGF0aCxcbiAgICAgICAgICBsaW5lOiBwYXJzZUludChsaW5lTnVtKSxcbiAgICAgICAgICBjb2x1bW46IHBhcnNlSW50KGNvbE51bSksXG4gICAgICAgICAgY29kZSxcbiAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLnRyaW0oKSxcbiAgICAgICAgICBjYXRlZ29yeTogdGhpcy5jYXRlZ29yaXplRXJyb3IoY29kZSksXG4gICAgICAgICAgcHJpb3JpdHk6IHRoaXMuY2FsY3VsYXRlRXJyb3JQcmlvcml0eShjb2RlLCBjbGVhbkZpbGVQYXRoLCBtZXNzYWdlKSxcbiAgICAgICAgICBzZXZlcml0eTogdGhpcy5kZXRlcm1pbmVTZXZlcml0eShjb2RlLCBtZXNzYWdlKSxcbiAgICAgICAgfTtcblxuICAgICAgICBlcnJvcnMucHVzaChlcnJvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coYPCfk4ogRm91bmQgJHtlcnJvcnMubGVuZ3RofSBUeXBlU2NyaXB0IGVycm9yc2ApO1xuICAgIHJldHVybiBlcnJvcnM7XG4gIH1cblxuICAvKipcbiAgICogQ2F0ZWdvcml6ZSBlcnJvciBieSBjb2RlIGZvciB0YXJnZXRlZCBmaXhpbmdcbiAgICovXG4gIHByaXZhdGUgY2F0ZWdvcml6ZUVycm9yKGNvZGU6IHN0cmluZyk6IEVycm9yQ2F0ZWdvcnkge1xuICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgY2FzZSAnVFMyMzUyJzpcbiAgICAgICAgcmV0dXJuIEVycm9yQ2F0ZWdvcnkuVFMyMzUyX1RZUEVfQ09OVkVSU0lPTjtcbiAgICAgIGNhc2UgJ1RTMjM0NSc6XG4gICAgICAgIHJldHVybiBFcnJvckNhdGVnb3J5LlRTMjM0NV9BUkdVTUVOVF9NSVNNQVRDSDtcbiAgICAgIGNhc2UgJ1RTMjY5OCc6XG4gICAgICAgIHJldHVybiBFcnJvckNhdGVnb3J5LlRTMjY5OF9TUFJFQURfVFlQRTtcbiAgICAgIGNhc2UgJ1RTMjMwNCc6XG4gICAgICAgIHJldHVybiBFcnJvckNhdGVnb3J5LlRTMjMwNF9DQU5OT1RfRklORF9OQU1FO1xuICAgICAgY2FzZSAnVFMyMzYyJzpcbiAgICAgICAgcmV0dXJuIEVycm9yQ2F0ZWdvcnkuVFMyMzYyX0FSSVRITUVUSUNfT1BFUkFUSU9OO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIEVycm9yQ2F0ZWdvcnkuT1RIRVI7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBwcmlvcml0eSByYW5raW5nIGJhc2VkIG9uIGVycm9yIGZyZXF1ZW5jeSBhbmQgaW1wYWN0XG4gICAqL1xuICBwcml2YXRlIGNhbGN1bGF0ZUVycm9yUHJpb3JpdHkoY29kZTogc3RyaW5nLCBmaWxlUGF0aDogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIGxldCBwcmlvcml0eSA9IDA7XG5cbiAgICAvLyBFcnJvciBjb2RlIHByaW9yaXR5IChiYXNlZCBvbiByZXF1aXJlbWVudHMgMS4yLCAxLjMsIDEuNCwgMS41KVxuICAgIGlmICh0aGlzLkhJR0hfUFJJT1JJVFlfRVJST1JTLmluY2x1ZGVzKGNvZGUpKSB7XG4gICAgICBwcmlvcml0eSArPSAxNTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuTUVESVVNX1BSSU9SSVRZX0VSUk9SUy5pbmNsdWRlcyhjb2RlKSkge1xuICAgICAgcHJpb3JpdHkgKz0gMTA7XG4gICAgfSBlbHNlIGlmICh0aGlzLkxPV19QUklPUklUWV9FUlJPUlMuaW5jbHVkZXMoY29kZSkpIHtcbiAgICAgIHByaW9yaXR5ICs9IDU7XG4gICAgfVxuXG4gICAgLy8gRmlsZSB0eXBlIHByaW9yaXR5IC0gY29yZSBzeXN0ZW0gZmlsZXMgZ2V0IGhpZ2hlciBwcmlvcml0eVxuICAgIGlmIChmaWxlUGF0aC5pbmNsdWRlcygnL3R5cGVzLycpKSBwcmlvcml0eSArPSA4O1xuICAgIGlmIChmaWxlUGF0aC5pbmNsdWRlcygnL3NlcnZpY2VzLycpKSBwcmlvcml0eSArPSA3O1xuICAgIGlmIChmaWxlUGF0aC5pbmNsdWRlcygnL2NvbXBvbmVudHMvJykpIHByaW9yaXR5ICs9IDY7XG4gICAgaWYgKGZpbGVQYXRoLmluY2x1ZGVzKCcvdXRpbHMvJykpIHByaW9yaXR5ICs9IDQ7XG4gICAgaWYgKGZpbGVQYXRoLmluY2x1ZGVzKCcvZGF0YS8nKSkgcHJpb3JpdHkgKz0gMztcblxuICAgIC8vIE1lc3NhZ2UgY29udGVudCBwcmlvcml0eSAtIGNyaXRpY2FsIGVycm9ycyBnZXQgaGlnaGVyIHByaW9yaXR5XG4gICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ25vdCBhc3NpZ25hYmxlJykpIHByaW9yaXR5ICs9IDU7XG4gICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ0Nhbm5vdCBmaW5kJykpIHByaW9yaXR5ICs9IDY7XG4gICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ25vdCBleHBvcnRlZCcpKSBwcmlvcml0eSArPSA3O1xuICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCdtaXNzaW5nJykpIHByaW9yaXR5ICs9IDQ7XG4gICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ0NvbnZlcnNpb24gb2YgdHlwZScpKSBwcmlvcml0eSArPSA4OyAvLyBUUzIzNTIgc3BlY2lmaWNcbiAgICBpZiAobWVzc2FnZS5pbmNsdWRlcygnQXJndW1lbnQgb2YgdHlwZScpKSBwcmlvcml0eSArPSA2OyAvLyBUUzIzNDUgc3BlY2lmaWNcblxuICAgIHJldHVybiBwcmlvcml0eTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgZXJyb3Igc2V2ZXJpdHkgZm9yIHByb2Nlc3Npbmcgb3JkZXJcbiAgICovXG4gIHByaXZhdGUgZGV0ZXJtaW5lU2V2ZXJpdHkoY29kZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpOiBFcnJvclNldmVyaXR5IHtcbiAgICAvLyBIaWdoIHNldmVyaXR5IC0gYnJlYWtzIGJ1aWxkcyBvciBjcml0aWNhbCB0eXBlIHNhZmV0eVxuICAgIGlmICh0aGlzLkhJR0hfUFJJT1JJVFlfRVJST1JTLmluY2x1ZGVzKGNvZGUpKSB7XG4gICAgICByZXR1cm4gRXJyb3JTZXZlcml0eS5ISUdIO1xuICAgIH1cblxuICAgIC8vIE1lZGl1bSBzZXZlcml0eSAtIHR5cGUgc2FmZXR5IGlzc3VlcyBidXQgbm90IGJ1aWxkLWJyZWFraW5nXG4gICAgaWYgKHRoaXMuTUVESVVNX1BSSU9SSVRZX0VSUk9SUy5pbmNsdWRlcyhjb2RlKSkge1xuICAgICAgcmV0dXJuIEVycm9yU2V2ZXJpdHkuTUVESVVNO1xuICAgIH1cblxuICAgIC8vIExvdyBzZXZlcml0eSAtIHN0eWxlIG9yIG1pbm9yIGlzc3Vlc1xuICAgIHJldHVybiBFcnJvclNldmVyaXR5LkxPVztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgY29tcHJlaGVuc2l2ZSBlcnJvciBkaXN0cmlidXRpb24gYW5hbHlzaXNcbiAgICovXG4gIHByaXZhdGUgY3JlYXRlRXJyb3JEaXN0cmlidXRpb24oZXJyb3JzOiBUeXBlU2NyaXB0RXJyb3JbXSk6IEVycm9yRGlzdHJpYnV0aW9uIHtcbiAgICBjb25zdCBlcnJvcnNCeUNhdGVnb3J5OiBSZWNvcmQ8RXJyb3JDYXRlZ29yeSwgVHlwZVNjcmlwdEVycm9yW10+ID0ge1xuICAgICAgW0Vycm9yQ2F0ZWdvcnkuVFMyMzUyX1RZUEVfQ09OVkVSU0lPTl06IFtdLFxuICAgICAgW0Vycm9yQ2F0ZWdvcnkuVFMyMzQ1X0FSR1VNRU5UX01JU01BVENIXTogW10sXG4gICAgICBbRXJyb3JDYXRlZ29yeS5UUzI2OThfU1BSRUFEX1RZUEVdOiBbXSxcbiAgICAgIFtFcnJvckNhdGVnb3J5LlRTMjMwNF9DQU5OT1RfRklORF9OQU1FXTogW10sXG4gICAgICBbRXJyb3JDYXRlZ29yeS5UUzIzNjJfQVJJVEhNRVRJQ19PUEVSQVRJT05dOiBbXSxcbiAgICAgIFtFcnJvckNhdGVnb3J5Lk9USEVSXTogW10sXG4gICAgfTtcblxuICAgIGNvbnN0IGVycm9yc0J5RmlsZTogUmVjb3JkPHN0cmluZywgVHlwZVNjcmlwdEVycm9yW10+ID0ge307XG5cbiAgICAvLyBDYXRlZ29yaXplIGVycm9yc1xuICAgIGZvciAoY29uc3QgZXJyb3Igb2YgZXJyb3JzKSB7XG4gICAgICBlcnJvcnNCeUNhdGVnb3J5W2Vycm9yLmNhdGVnb3J5XS5wdXNoKGVycm9yKTtcblxuICAgICAgaWYgKCFlcnJvcnNCeUZpbGVbZXJyb3IuZmlsZVBhdGhdKSB7XG4gICAgICAgIGVycm9yc0J5RmlsZVtlcnJvci5maWxlUGF0aF0gPSBbXTtcbiAgICAgIH1cbiAgICAgIGVycm9yc0J5RmlsZVtlcnJvci5maWxlUGF0aF0ucHVzaChlcnJvcik7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIHByaW9yaXR5IHJhbmtpbmdcbiAgICBjb25zdCBwcmlvcml0eVJhbmtpbmcgPSBbLi4uZXJyb3JzXS5zb3J0KChhLCBiKSA9PiBiLnByaW9yaXR5IC0gYS5wcmlvcml0eSk7XG5cbiAgICAvLyBJZGVudGlmeSBoaWdoLWltcGFjdCBmaWxlcyAoPjEwIGVycm9ycylcbiAgICBjb25zdCBoaWdoSW1wYWN0RmlsZXMgPSBPYmplY3QuZW50cmllcyhlcnJvcnNCeUZpbGUpXG4gICAgICAuZmlsdGVyKChbLCBmaWxlRXJyb3JzXSkgPT4gZmlsZUVycm9ycy5sZW5ndGggPiAxMClcbiAgICAgIC5tYXAoKFtmaWxlUGF0aCwgZmlsZUVycm9yc10pID0+ICh7XG4gICAgICAgIGZpbGVQYXRoLFxuICAgICAgICBlcnJvckNvdW50OiBmaWxlRXJyb3JzLmxlbmd0aCxcbiAgICAgICAgY2F0ZWdvcmllczogWy4uLm5ldyBTZXQoZmlsZUVycm9ycy5tYXAoZSA9PiBlLmNhdGVnb3J5KSldLFxuICAgICAgICBhdmVyYWdlUHJpb3JpdHk6IGZpbGVFcnJvcnMucmVkdWNlKChzdW0sIGUpID0+IHN1bSArIGUucHJpb3JpdHksIDApIC8gZmlsZUVycm9ycy5sZW5ndGgsXG4gICAgICB9KSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBiLmVycm9yQ291bnQgLSBhLmVycm9yQ291bnQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdGFsRXJyb3JzOiBlcnJvcnMubGVuZ3RoLFxuICAgICAgZXJyb3JzQnlDYXRlZ29yeSxcbiAgICAgIGVycm9yc0J5RmlsZSxcbiAgICAgIHByaW9yaXR5UmFua2luZyxcbiAgICAgIGhpZ2hJbXBhY3RGaWxlcyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGZpeCByZWNvbW1lbmRhdGlvbnMgYmFzZWQgb24gZXJyb3IgZGlzdHJpYnV0aW9uXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlUmVjb21tZW5kYXRpb25zKGRpc3RyaWJ1dGlvbjogRXJyb3JEaXN0cmlidXRpb24pOiBBcnJheTx7XG4gICAgY2F0ZWdvcnk6IEVycm9yQ2F0ZWdvcnk7XG4gICAgZXJyb3JDb3VudDogbnVtYmVyO1xuICAgIHByaW9yaXR5OiBudW1iZXI7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBlc3RpbWF0ZWRSZWR1Y3Rpb246IG51bWJlcjtcbiAgfT4ge1xuICAgIGNvbnN0IHJlY29tbWVuZGF0aW9uczogQXJyYXk8e1xuICAgICAgY2F0ZWdvcnk6IEVycm9yQ2F0ZWdvcnk7XG4gICAgICBlcnJvckNvdW50OiBudW1iZXI7XG4gICAgICBwcmlvcml0eTogbnVtYmVyO1xuICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgIGVzdGltYXRlZFJlZHVjdGlvbjogbnVtYmVyO1xuICAgIH0+ID0gW107XG5cbiAgICAvLyBUUzIzNTIgVHlwZSBDb252ZXJzaW9uIEVycm9ycyAoaGlnaGVzdCBwcmlvcml0eSBwZXIgcmVxdWlyZW1lbnRzKVxuICAgIGNvbnN0IHRzMjM1MkNvdW50ID0gZGlzdHJpYnV0aW9uLmVycm9yc0J5Q2F0ZWdvcnlbRXJyb3JDYXRlZ29yeS5UUzIzNTJfVFlQRV9DT05WRVJTSU9OXS5sZW5ndGg7XG4gICAgaWYgKHRzMjM1MkNvdW50ID4gMCkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xuICAgICAgICBjYXRlZ29yeTogRXJyb3JDYXRlZ29yeS5UUzIzNTJfVFlQRV9DT05WRVJTSU9OLFxuICAgICAgICBlcnJvckNvdW50OiB0czIzNTJDb3VudCxcbiAgICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICdGaXggdHlwZSBjb252ZXJzaW9uIGVycm9ycyAtIG9mdGVuIGNhdXNlZCBieSBpbmNvcnJlY3QgdHlwZSBhc3NlcnRpb25zIG9yIHVuc2FmZSBjYXN0cycsXG4gICAgICAgIGVzdGltYXRlZFJlZHVjdGlvbjogTWF0aC5yb3VuZCh0czIzNTJDb3VudCAqIDAuOSksIC8vIEhpZ2ggc3VjY2VzcyByYXRlIGV4cGVjdGVkXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBUUzIzNDUgQXJndW1lbnQgVHlwZSBNaXNtYXRjaCAoc2Vjb25kIHByaW9yaXR5KVxuICAgIGNvbnN0IHRzMjM0NUNvdW50ID1cbiAgICAgIGRpc3RyaWJ1dGlvbi5lcnJvcnNCeUNhdGVnb3J5W0Vycm9yQ2F0ZWdvcnkuVFMyMzQ1X0FSR1VNRU5UX01JU01BVENIXS5sZW5ndGg7XG4gICAgaWYgKHRzMjM0NUNvdW50ID4gMCkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xuICAgICAgICBjYXRlZ29yeTogRXJyb3JDYXRlZ29yeS5UUzIzNDVfQVJHVU1FTlRfTUlTTUFUQ0gsXG4gICAgICAgIGVycm9yQ291bnQ6IHRzMjM0NUNvdW50LFxuICAgICAgICBwcmlvcml0eTogMixcbiAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgJ0ZpeCBhcmd1bWVudCB0eXBlIG1pc21hdGNoZXMgLSB1c3VhbGx5IHJlcXVpcmVzIHR5cGUgYXNzZXJ0aW9ucyBvciBpbnRlcmZhY2UgdXBkYXRlcycsXG4gICAgICAgIGVzdGltYXRlZFJlZHVjdGlvbjogTWF0aC5yb3VuZCh0czIzNDVDb3VudCAqIDAuODUpLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVFMyMzA0IENhbm5vdCBGaW5kIE5hbWUgKHRoaXJkIHByaW9yaXR5KVxuICAgIGNvbnN0IHRzMjMwNENvdW50ID0gZGlzdHJpYnV0aW9uLmVycm9yc0J5Q2F0ZWdvcnlbRXJyb3JDYXRlZ29yeS5UUzIzMDRfQ0FOTk9UX0ZJTkRfTkFNRV0ubGVuZ3RoO1xuICAgIGlmICh0czIzMDRDb3VudCA+IDApIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcbiAgICAgICAgY2F0ZWdvcnk6IEVycm9yQ2F0ZWdvcnkuVFMyMzA0X0NBTk5PVF9GSU5EX05BTUUsXG4gICAgICAgIGVycm9yQ291bnQ6IHRzMjMwNENvdW50LFxuICAgICAgICBwcmlvcml0eTogMyxcbiAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgJ0ZpeCBtaXNzaW5nIGltcG9ydHMgYW5kIHVuZGVmaW5lZCByZWZlcmVuY2VzIC0gb2Z0ZW4gY2FzY2FkZXMgdG8gZml4IG90aGVyIGVycm9ycycsXG4gICAgICAgIGVzdGltYXRlZFJlZHVjdGlvbjogTWF0aC5yb3VuZCh0czIzMDRDb3VudCAqIDEuMiksIC8vIENhbiBmaXggY2FzY2FkaW5nIGVycm9yc1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVFMyNjk4IFNwcmVhZCBUeXBlIEVycm9yc1xuICAgIGNvbnN0IHRzMjY5OENvdW50ID0gZGlzdHJpYnV0aW9uLmVycm9yc0J5Q2F0ZWdvcnlbRXJyb3JDYXRlZ29yeS5UUzI2OThfU1BSRUFEX1RZUEVdLmxlbmd0aDtcbiAgICBpZiAodHMyNjk4Q291bnQgPiAwKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICAgIGNhdGVnb3J5OiBFcnJvckNhdGVnb3J5LlRTMjY5OF9TUFJFQURfVFlQRSxcbiAgICAgICAgZXJyb3JDb3VudDogdHMyNjk4Q291bnQsXG4gICAgICAgIHByaW9yaXR5OiA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0ZpeCBzcHJlYWQgb3BlcmF0b3IgdHlwZSBlcnJvcnMgLSByZXF1aXJlcyBjYXJlZnVsIHR5cGUgYW5hbHlzaXMnLFxuICAgICAgICBlc3RpbWF0ZWRSZWR1Y3Rpb246IE1hdGgucm91bmQodHMyNjk4Q291bnQgKiAwLjgpLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVFMyMzYyIEFyaXRobWV0aWMgT3BlcmF0aW9uIEVycm9yc1xuICAgIGNvbnN0IHRzMjM2MkNvdW50ID1cbiAgICAgIGRpc3RyaWJ1dGlvbi5lcnJvcnNCeUNhdGVnb3J5W0Vycm9yQ2F0ZWdvcnkuVFMyMzYyX0FSSVRITUVUSUNfT1BFUkFUSU9OXS5sZW5ndGg7XG4gICAgaWYgKHRzMjM2MkNvdW50ID4gMCkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xuICAgICAgICBjYXRlZ29yeTogRXJyb3JDYXRlZ29yeS5UUzIzNjJfQVJJVEhNRVRJQ19PUEVSQVRJT04sXG4gICAgICAgIGVycm9yQ291bnQ6IHRzMjM2MkNvdW50LFxuICAgICAgICBwcmlvcml0eTogNSxcbiAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgJ0ZpeCBhcml0aG1ldGljIG9wZXJhdGlvbiB0eXBlIGVycm9ycyAtIHVzdWFsbHkgcmVxdWlyZXMgbnVtYmVyIHR5cGUgYXNzZXJ0aW9ucycsXG4gICAgICAgIGVzdGltYXRlZFJlZHVjdGlvbjogTWF0aC5yb3VuZCh0czIzNjJDb3VudCAqIDAuOSksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVjb21tZW5kYXRpb25zLnNvcnQoKGEsIGIpID0+IGEucHJpb3JpdHkgLSBiLnByaW9yaXR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwbGF5IGFuYWx5c2lzIHJlc3VsdHMgaW4gZm9ybWF0dGVkIG91dHB1dFxuICAgKi9cbiAgZGlzcGxheVJlc3VsdHMocmVzdWx0OiBBbmFseXNpc1Jlc3VsdCk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKCdcXG7wn5OKIFRZUEVTQ1JJUFQgRVJST1IgQU5BTFlTSVMgUkVTVUxUUycpO1xuICAgIGNvbnNvbGUubG9nKCc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Jyk7XG5cbiAgICBjb25zb2xlLmxvZyhgXFxu8J+TiCBUb3RhbCBFcnJvcnM6ICR7cmVzdWx0LmRpc3RyaWJ1dGlvbi50b3RhbEVycm9yc31gKTtcblxuICAgIGNvbnNvbGUubG9nKCdcXG7wn4+377iPICBFcnJvcnMgYnkgQ2F0ZWdvcnk6Jyk7XG4gICAgT2JqZWN0LmVudHJpZXMocmVzdWx0LmRpc3RyaWJ1dGlvbi5lcnJvcnNCeUNhdGVnb3J5KS5mb3JFYWNoKChbY2F0ZWdvcnksIGVycm9yc10pID0+IHtcbiAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLmxvZyhgICAke2NhdGVnb3J5fTogJHtlcnJvcnMubGVuZ3RofSBlcnJvcnNgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnNvbGUubG9nKCdcXG7wn5SlIEhpZ2gtSW1wYWN0IEZpbGVzICg+MTAgZXJyb3JzKTonKTtcbiAgICByZXN1bHQuZGlzdHJpYnV0aW9uLmhpZ2hJbXBhY3RGaWxlcy5zbGljZSgwLCAxMCkuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgICAke2ZpbGUuZmlsZVBhdGh9OiAke2ZpbGUuZXJyb3JDb3VudH0gZXJyb3JzIChhdmcgcHJpb3JpdHk6ICR7ZmlsZS5hdmVyYWdlUHJpb3JpdHkudG9GaXhlZCgxKX0pYCxcbiAgICAgICk7XG4gICAgICBjb25zb2xlLmxvZyhgICAgIENhdGVnb3JpZXM6ICR7ZmlsZS5jYXRlZ29yaWVzLmpvaW4oJywgJyl9YCk7XG4gICAgfSk7XG5cbiAgICBjb25zb2xlLmxvZygnXFxu8J+SoSBSZWNvbW1lbmRlZCBGaXggT3JkZXI6Jyk7XG4gICAgcmVzdWx0LnJlY29tbWVuZGF0aW9ucy5mb3JFYWNoKHJlYyA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhgICAke3JlYy5wcmlvcml0eX0uICR7cmVjLmNhdGVnb3J5fTogJHtyZWMuZXJyb3JDb3VudH0gZXJyb3JzYCk7XG4gICAgICBjb25zb2xlLmxvZyhgICAgICBFeHBlY3RlZCByZWR1Y3Rpb246IH4ke3JlYy5lc3RpbWF0ZWRSZWR1Y3Rpb259IGVycm9yc2ApO1xuICAgICAgY29uc29sZS5sb2coYCAgICAgJHtyZWMuZGVzY3JpcHRpb259XFxuYCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b3RhbEVzdGltYXRlZFJlZHVjdGlvbiA9IHJlc3VsdC5yZWNvbW1lbmRhdGlvbnMucmVkdWNlKFxuICAgICAgKHN1bSwgcmVjKSA9PiBzdW0gKyByZWMuZXN0aW1hdGVkUmVkdWN0aW9uLFxuICAgICAgMCxcbiAgICApO1xuXG4gICAgY29uc29sZS5sb2coYPCfk4kgRXN0aW1hdGVkIHRvdGFsIGVycm9yIHJlZHVjdGlvbjogJHt0b3RhbEVzdGltYXRlZFJlZHVjdGlvbn0gZXJyb3JzYCk7XG4gICAgY29uc29sZS5sb2coXG4gICAgICBg8J+TiiBFc3RpbWF0ZWQgcmVtYWluaW5nIGVycm9yczogJHtyZXN1bHQuZGlzdHJpYnV0aW9uLnRvdGFsRXJyb3JzIC0gdG90YWxFc3RpbWF0ZWRSZWR1Y3Rpb259YCxcbiAgICApO1xuICAgIGNvbnNvbGUubG9nKGDij7AgQW5hbHlzaXMgY29tcGxldGVkIGF0OiAke25ldyBEYXRlKHJlc3VsdC50aW1lc3RhbXApLnRvTG9jYWxlU3RyaW5nKCl9YCk7XG4gIH1cblxuICAvKipcbiAgICogU2F2ZSBhbmFseXNpcyByZXN1bHRzIHRvIGZpbGUgZm9yIHRyYWNraW5nIHByb2dyZXNzXG4gICAqL1xuICBhc3luYyBzYXZlQW5hbHlzaXMocmVzdWx0OiBBbmFseXNpc1Jlc3VsdCwgb3V0cHV0UGF0aD86IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGRlZmF1bHRQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICcudHlwZXNjcmlwdC1lcnJvci1hbmFseXNpcy5qc29uJyk7XG4gICAgY29uc3QgZmlsZVBhdGggPSBvdXRwdXRQYXRoIHx8IGRlZmF1bHRQYXRoO1xuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGZzLnByb21pc2VzLndyaXRlRmlsZShmaWxlUGF0aCwgSlNPTi5zdHJpbmdpZnkocmVzdWx0LCBudWxsLCAyKSk7XG4gICAgICBjb25zb2xlLmxvZyhgXFxu8J+SviBBbmFseXNpcyBzYXZlZCB0bzogJHtmaWxlUGF0aH1gKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihg4p2MIEZhaWxlZCB0byBzYXZlIGFuYWx5c2lzOiAke2Vycm9yfWApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCBlcnJvciBjb3VudCBmb3IgcHJvZ3Jlc3MgdHJhY2tpbmdcbiAgICovXG4gIGFzeW5jIGdldEN1cnJlbnRFcnJvckNvdW50KCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG91dHB1dCA9IGV4ZWNTeW5jKCd5YXJuIHRzYyAtLW5vRW1pdCAtLXNraXBMaWJDaGVjayAyPiYxIHwgZ3JlcCAtYyBcImVycm9yIFRTXCInLCB7XG4gICAgICAgIGVuY29kaW5nOiAndXRmOCcsXG4gICAgICAgIHN0ZGlvOiAncGlwZScsXG4gICAgICAgIHRpbWVvdXQ6IDMwMDAwLCAvLyAzMCBzZWNvbmQgdGltZW91dFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcGFyc2VJbnQob3V0cHV0LnRyaW0oKSkgfHwgMDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWYgZ3JlcCBmaW5kcyBubyBtYXRjaGVzLCBpdCByZXR1cm5zIGV4aXQgY29kZSAxLCBvciB0aW1lb3V0IG9jY3VycmVkXG4gICAgICBjb25zb2xlLndhcm4oJ1R5cGVTY3JpcHQgZXJyb3IgY291bnQgY2hlY2sgZmFpbGVkIG9yIHRpbWVkIG91dDonLCAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UpO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9XG59XG4iXSwidmVyc2lvbiI6M30=