436d72c9ddab37ac1d8703529d69d87d
"use strict";
'use client';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const logger_1 = require("@/utils/logger");
const lucide_react_1 = require("lucide-react");
const cuisineRecommender_1 = require("@/utils/cuisineRecommender");
const monicaKalchmCalculations_1 = require("@/utils/monicaKalchmCalculations");
const CulturalAnalyticsService_1 = require("@/services/CulturalAnalyticsService");
const hooks_1 = require("@/contexts/AlchemicalContext/hooks");
const recipes_1 = require("@/data/recipes");
const RecipeRecommendations_1 = __importDefault(require("./RecipeRecommendations"));
const SauceRecommendations_1 = __importDefault(require("./SauceRecommendations"));
const AdvancedSearchFilters_1 = __importDefault(require("./AdvancedSearchFilters"));
const naturalLanguageProcessor_1 = require("@/utils/naturalLanguageProcessor");
const useRecommendationAnalytics_1 = require("@/hooks/useRecommendationAnalytics");
const PerformanceAnalyticsDashboard_1 = __importDefault(require("@/components/analytics/PerformanceAnalyticsDashboard"));
const EnterpriseIntelligencePanel_1 = __importDefault(require("@/components/intelligence/EnterpriseIntelligencePanel"));
// ========== HELPER FUNCTIONS ==========
const getSafeScore = (score) => {
    const numScore = typeof score === 'number' ? score : parseFloat(String(score));
    return !isNaN(numScore) ? numScore : 0.5;
};
const getCurrentSeason = () => {
    const now = new Date();
    const month = now.getMonth(); // 0 = January, 11 = December
    if (month >= 2 && month <= 4)
        return 'spring';
    if (month >= 5 && month <= 7)
        return 'summer';
    if (month >= 8 && month <= 10)
        return 'autumn';
    return 'winter';
};
// Calculate alchemical balance optimization score
const calculateAlchemicalBalance = (alchemicalProperties) => {
    if (!alchemicalProperties)
        return 0.5;
    const { Spirit, Essence, Matter, Substance } = alchemicalProperties;
    // Calculate balance based on how evenly distributed the alchemical properties are
    const values = [Spirit, Essence, Matter, Substance];
    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;
    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;
    const standardDeviation = Math.sqrt(variance);
    // Lower standard deviation = better balance
    // Normalize to 0-1 scale where 1 is perfect balance
    const balanceScore = Math.max(0, 1 - (standardDeviation / mean));
    return Math.min(1, Math.max(0, balanceScore));
};
// Calculate seasonal optimization score for cuisine
const calculateSeasonalOptimization = (cuisineName, season) => {
    // Seasonal preferences for different cuisines
    const seasonalPreferences = {
        'italian': { spring: 0.9, summer: 0.95, autumn: 0.85, winter: 0.8 },
        'chinese': { spring: 0.85, summer: 0.8, autumn: 0.9, winter: 0.95 },
        'japanese': { spring: 0.95, summer: 0.85, autumn: 0.9, winter: 0.8 },
        'indian': { spring: 0.8, summer: 0.7, autumn: 0.85, winter: 0.9 },
        'thai': { spring: 0.85, summer: 0.95, autumn: 0.8, winter: 0.7 },
        'mexican': { spring: 0.9, summer: 0.95, autumn: 0.85, winter: 0.8 },
        'french': { spring: 0.9, summer: 0.85, autumn: 0.95, winter: 0.9 },
        'mediterranean': { spring: 0.95, summer: 0.95, autumn: 0.85, winter: 0.75 },
        'middle-eastern': { spring: 0.85, summer: 0.9, autumn: 0.8, winter: 0.85 }
    };
    const cuisineKey = cuisineName.toLowerCase();
    const preferences = seasonalPreferences[cuisineKey];
    if (preferences && preferences[season]) {
        return preferences[season];
    }
    // Default seasonal optimization
    return 0.8;
};
// Calculate Kalchm harmony score for recipe recommendations
const calculateRecipeKalchmHarmony = (recipeThermodynamics, cuisineThermodynamics) => {
    if (!recipeThermodynamics)
        return 0.7;
    // If we have cuisine thermodynamics, compare them
    if (cuisineThermodynamics) {
        const kalchmRatio = Math.min(recipeThermodynamics.kalchm, cuisineThermodynamics.kalchm) /
            Math.max(recipeThermodynamics.kalchm, cuisineThermodynamics.kalchm);
        const monicaHarmony = 1 - Math.abs(recipeThermodynamics.monica - cuisineThermodynamics.monica) / 5;
        return Math.max(0, Math.min(1, (kalchmRatio * 0.6) + (monicaHarmony * 0.4)));
    }
    // Otherwise, score based on thermodynamic stability
    const stabilityScore = Math.max(0, 1 - Math.abs(recipeThermodynamics.gregsEnergy) / 5);
    const kalchmScore = Math.min(1, recipeThermodynamics.kalchm / 2); // Normalize Kalchm
    return Math.max(0, Math.min(1, (stabilityScore * 0.5) + (kalchmScore * 0.5)));
};
// Calculate thermodynamic optimization for recipes
const calculateThermodynamicOptimization = (thermodynamics, currentElementalProfile) => {
    if (!thermodynamics)
        return 0.7;
    // Calculate optimization based on thermodynamic efficiency
    const heatEfficiency = Math.max(0, Math.min(1, thermodynamics.heat));
    const entropyBalance = Math.max(0, 1 - thermodynamics.entropy / 2);
    const reactivityOptimal = Math.max(0, 1 - Math.abs(thermodynamics.reactivity - 1) / 2);
    // Weight the factors for overall optimization
    const optimization = (heatEfficiency * 0.4) + (entropyBalance * 0.3) + (reactivityOptimal * 0.3);
    return Math.max(0, Math.min(1, optimization));
};
const buildCompleteRecipe = (recipe, cuisineName) => {
    const defaultElementalProperties = {
        Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25
    };
    const matchScore = typeof recipe.matchScore === 'number' ? recipe.matchScore : 0.85;
    return {
        id: recipe.id || `recipe-${Math.random().toString(36).substring(2, 9)}`,
        name: recipe.name || `${cuisineName} Recipe`,
        description: recipe.description || `A traditional recipe from ${cuisineName} cuisine.`,
        cuisine: recipe.cuisine || cuisineName,
        matchPercentage: recipe.matchPercentage || Math.round(matchScore * 100),
        matchScore,
        elementalProperties: recipe.elementalProperties || defaultElementalProperties,
        ingredients: Array.isArray(recipe.ingredients) ? recipe.ingredients : [],
        instructions: Array.isArray(recipe.instructions) ? recipe.instructions : [],
        cookTime: String(recipe.cookTime || "30 minutes"),
        prepTime: String(recipe.prepTime || "15 minutes"),
        servingSize: typeof recipe.servingSize === 'number' ? recipe.servingSize : 4,
        difficulty: String(recipe.difficulty || "Medium"),
        ...recipe
    };
};
// ========== ERROR BOUNDARY COMPONENT ==========
class CuisineRecommenderErrorBoundary extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.handleRetry = () => {
            if (this.state.retryCount < 3) {
                this.setState(prevState => ({
                    hasError: false,
                    error: null,
                    retryCount: prevState.retryCount + 1
                }));
                this.props.onRetry();
            }
        };
        this.state = { hasError: false, error: null, retryCount: 0 };
    }
    static getDerivedStateFromError(error) {
        return { hasError: true, error, retryCount: 0 };
    }
    componentDidCatch(error, errorInfo) {
        logger_1.logger.error('CuisineRecommender Error:', error, errorInfo);
    }
    render() {
        if (this.state.hasError) {
            return ((0, jsx_runtime_1.jsxs)("div", { className: "p-6 bg-red-50 border border-red-200 rounded-lg", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2 mb-3", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertCircle, { className: "text-red-500", size: 20 }), (0, jsx_runtime_1.jsx)("h3", { className: "text-red-800 font-medium", children: "Something went wrong" })] }), (0, jsx_runtime_1.jsxs)("p", { className: "text-red-600 text-sm mb-4", children: ["We encountered an error loading the cuisine recommendations.", this.state.retryCount < 3 && " You can try again."] }), this.state.retryCount < 3 && ((0, jsx_runtime_1.jsxs)("button", { onClick: this.handleRetry, className: "flex items-center space-x-2 px-4 py-2 bg-red-100 hover:bg-red-200 text-red-700 rounded transition-colors", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { size: 16 }), (0, jsx_runtime_1.jsxs)("span", { children: ["Try Again (", 3 - this.state.retryCount, " attempts left)"] })] }))] }));
        }
        return this.props.children;
    }
}
// ========== LOADING COMPONENT ==========
const LoadingComponent = ({ loadingState }) => ((0, jsx_runtime_1.jsxs)("div", { className: "p-6 flex flex-col items-center justify-center space-y-3 bg-white rounded-lg shadow", children: [(0, jsx_runtime_1.jsx)("div", { className: "w-10 h-10 border-4 border-blue-200 border-t-blue-500 rounded-full animate-spin" }), (0, jsx_runtime_1.jsx)("p", { className: "text-lg font-medium", children: "Loading cuisine recommendations..." }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-500", children: loadingState.step }), (0, jsx_runtime_1.jsx)("div", { className: "w-full max-w-xs bg-gray-200 rounded-full h-2", children: (0, jsx_runtime_1.jsx)("div", { className: "bg-blue-500 h-2 rounded-full transition-all duration-300", style: { width: `${loadingState.progress}%` } }) })] }));
// ========== MAIN COMPONENT ==========
function CuisineRecommender() {
    var _a, _b;
    // ========== CONTEXT AND STATE ==========
    const alchemicalContext = (0, hooks_1.useAlchemical)();
    const { planetaryPositions = {}, state } = alchemicalContext !== null && alchemicalContext !== void 0 ? alchemicalContext : {};
    const { astrologicalState = { zodiacSign: 'aries', lunarPhase: 'new moon' } } = state !== null && state !== void 0 ? state : {};
    const { zodiacSign: currentZodiac, lunarPhase } = astrologicalState;
    // Component state
    const [selectedCuisine, setSelectedCuisine] = (0, react_1.useState)(null);
    const [cuisineRecommendations, setCuisineRecommendations] = (0, react_1.useState)([]);
    const [loadingState, setLoadingState] = (0, react_1.useState)({
        isLoading: true,
        step: 'Initializing...',
        progress: 0
    });
    const [error, setError] = (0, react_1.useState)(null);
    const [matchingRecipes, setMatchingRecipes] = (0, react_1.useState)([]);
    const [sauceRecommendations, setSauceRecommendations] = (0, react_1.useState)([]);
    // Cultural Analytics state
    const [culturalAnalytics, setCulturalAnalytics] = (0, react_1.useState)({});
    const [fusionRecommendations, setFusionRecommendations] = (0, react_1.useState)([]);
    // UI state
    const [showCuisineDetails, setShowCuisineDetails] = (0, react_1.useState)(false);
    const [selectedRecipe, setSelectedRecipe] = (0, react_1.useState)(null);
    const [showCulturalAnalytics, setShowCulturalAnalytics] = (0, react_1.useState)(false);
    const [showFusionRecommendations, setShowFusionRecommendations] = (0, react_1.useState)(false);
    // Advanced Search and Filtering state
    const [searchFilters, setSearchFilters] = (0, react_1.useState)({
        query: '',
        dietaryRestrictions: [],
        difficultyLevel: [],
        cookingTime: { min: 0, max: 480 },
        cuisineTypes: [],
        mealTypes: [],
        spiciness: [],
        ingredients: []
    });
    const [searchIntent, setSearchIntent] = (0, react_1.useState)(null);
    const [filteredCuisines, setFilteredCuisines] = (0, react_1.useState)([]);
    const [originalCuisines, setOriginalCuisines] = (0, react_1.useState)([]);
    // Performance Analytics and Caching state
    const [showPerformanceAnalytics, setShowPerformanceAnalytics] = (0, react_1.useState)(false);
    // Enterprise Intelligence state
    const [showEnterpriseIntelligence, setShowEnterpriseIntelligence] = (0, react_1.useState)(false);
    const [enterpriseIntelligenceAnalysis, setEnterpriseIntelligenceAnalysis] = (0, react_1.useState)(null);
    // Analytics hooks
    const [analyticsState, analyticsActions] = (0, useRecommendationAnalytics_1.useRecommendationAnalytics)({
        enablePerformanceTracking: true,
        enableCaching: true,
        enableInteractionTracking: true,
        metricsUpdateInterval: 5000
    });
    const { trackClick, trackView, trackExpand, trackSearch, trackFilter } = (0, useRecommendationAnalytics_1.useInteractionTracking)();
    // ========== MEMOIZED VALUES ==========
    const currentMomentElementalProfile = (0, react_1.useMemo)(() => {
        var _a;
        const elementalState = (state === null || state === void 0 ? void 0 : state.elementalState) || ((_a = state === null || state === void 0 ? void 0 : state.astrologicalState) === null || _a === void 0 ? void 0 : _a.elementalState);
        if (elementalState) {
            return elementalState;
        }
        if (currentZodiac) {
            return (0, cuisineRecommender_1.calculateElementalProfileFromZodiac)(currentZodiac);
        }
        return { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 };
    }, [state, currentZodiac]);
    const astrologicalStateForRecommendations = (0, react_1.useMemo)(() => ({
        zodiacSign: String(currentZodiac || 'aries'),
        lunarPhase: String(lunarPhase || 'new moon'),
        planetaryPositions: planetaryPositions || {},
    }), [currentZodiac, lunarPhase, planetaryPositions]);
    // ========== DATA LOADING ==========
    const loadCuisineData = (0, react_1.useCallback)(async () => {
        var _a, _b;
        // Start performance tracking
        const endTiming = analyticsActions.startTiming('cuisine_recommendation_load');
        const loadStartTime = performance.now();
        try {
            setLoadingState({ isLoading: true, step: 'Getting astrological state...', progress: 10 });
            setError(null);
            // Check cache first
            const cacheKey = `cuisine_recommendations_${JSON.stringify(currentMomentElementalProfile)}_${JSON.stringify(astrologicalStateForRecommendations)}`;
            const cachedRecommendations = analyticsActions.getCachedRecommendation(cacheKey);
            if (cachedRecommendations) {
                logger_1.logger.info('Using cached cuisine recommendations');
                setCuisineRecommendations(cachedRecommendations.cuisines);
                setOriginalCuisines(cachedRecommendations.cuisines);
                setFilteredCuisines(cachedRecommendations.cuisines);
                setCulturalAnalytics(cachedRecommendations.culturalAnalytics);
                setFusionRecommendations(cachedRecommendations.fusionRecommendations);
                setSauceRecommendations(cachedRecommendations.sauces);
                const loadTime = performance.now() - loadStartTime;
                analyticsActions.recordLoadTime(loadTime);
                endTiming();
                setLoadingState({ isLoading: false, step: 'Complete!', progress: 100 });
                return;
            }
            // Small delay to show loading state
            await new Promise(resolve => setTimeout(resolve, 100));
            setLoadingState({ isLoading: true, step: 'Generating cuisine recommendations...', progress: 30 });
            const recommendations = (0, cuisineRecommender_1.getCuisineRecommendations)(currentMomentElementalProfile, astrologicalStateForRecommendations, { count: 12, includeRegional: true });
            setLoadingState({ isLoading: true, step: 'Loading recipe data...', progress: 50 });
            const recipes = await (0, recipes_1.getAllRecipes)();
            setLoadingState({ isLoading: true, step: 'Calculating Monica/Kalchm compatibility...', progress: 65 });
            // Enhanced recommendations with Monica/Kalchm integration
            const enhancedRecommendations = recommendations.map(cuisine => {
                // Ensure elemental properties are properly typed
                const cuisineElemental = cuisine.elementalProperties ||
                    { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 };
                // Perform comprehensive enhanced analysis
                const enhancedAnalysis = (0, monicaKalchmCalculations_1.performEnhancedAnalysis)({ elemental: cuisineElemental }, currentMomentElementalProfile);
                // Calculate Monica compatibility
                const monicaCompatibility = (0, monicaKalchmCalculations_1.calculateMonicaKalchmCompatibility)({ elemental: cuisineElemental }, { elemental: currentMomentElementalProfile });
                // Calculate moment Monica constant for user and cuisine
                const userMonica = (0, monicaKalchmCalculations_1.calculateMomentMonicaConstant)(currentMomentElementalProfile);
                const cuisineMonica = (0, monicaKalchmCalculations_1.calculateMomentMonicaConstant)(cuisineElemental);
                // Calculate thermodynamic harmony score
                const thermodynamicHarmony = Math.max(0, 1 - Math.abs(enhancedAnalysis.thermodynamicMetrics.gregsEnergy) / 10);
                // Calculate alchemical balance optimization
                const alchemicalBalance = calculateAlchemicalBalance(enhancedAnalysis.alchemicalProperties);
                // Calculate cultural synergy score (5% weight in 7-factor algorithm)
                const culturalSynergyData = CulturalAnalyticsService_1.CulturalAnalyticsService.calculateCulturalSynergy(cuisine.name.toLowerCase(), [], { season: getCurrentSeason() });
                // Enhanced 7-factor scoring algorithm:
                // 1. Original astrological score (50%)
                // 2. Monica/Kalchm compatibility (20%)
                // 3. Thermodynamic harmony (10%)
                // 4. Alchemical balance (10%)
                // 5. Cultural synergy (5%)
                // 6. Confidence factor (3%)
                // 7. Seasonal optimization (2%)
                const originalScore = getSafeScore(cuisine.score);
                const seasonalOptimization = calculateSeasonalOptimization(cuisine.name, getCurrentSeason());
                const enhancedScore = ((originalScore * 0.50) +
                    (monicaCompatibility * 0.20) +
                    (thermodynamicHarmony * 0.10) +
                    (alchemicalBalance * 0.10) +
                    (culturalSynergyData.score * 0.05) +
                    (enhancedAnalysis.confidence * 0.03) +
                    (seasonalOptimization * 0.02));
                // Log enhanced analytics integration for verification
                logger_1.logger.info(`Enhanced Monica/Kalchm Analytics for ${cuisine.name}:`, {
                    originalScore,
                    monicaCompatibility,
                    thermodynamicHarmony,
                    alchemicalBalance,
                    culturalSynergy: culturalSynergyData.score,
                    confidence: enhancedAnalysis.confidence,
                    seasonalOptimization,
                    enhancedScore,
                    thermodynamicMetrics: enhancedAnalysis.thermodynamicMetrics
                });
                return {
                    ...cuisine,
                    score: enhancedScore,
                    matchPercentage: Math.round(enhancedScore * 100),
                    monicaCompatibility,
                    userMonica,
                    cuisineMonica,
                    thermodynamicHarmony,
                    alchemicalBalance,
                    enhancedAnalysis,
                    reasoning: [
                        ...(cuisine.reasoning || []),
                        `Monica compatibility: ${Math.round(monicaCompatibility * 100)}%`,
                        `Thermodynamic harmony: ${Math.round(thermodynamicHarmony * 100)}%`,
                        `Alchemical balance: ${Math.round(alchemicalBalance * 100)}%`
                    ]
                };
            });
            setLoadingState({ isLoading: true, step: 'Matching recipes to cuisines...', progress: 75 });
            const cuisinesWithRecipes = enhancedRecommendations.map(cuisine => {
                const matching = recipes.filter(recipe => recipe.cuisine && recipe.cuisine.toLowerCase() === cuisine.name.toLowerCase());
                // Enhanced recipe building with Monica/Kalchm integration
                const enhancedRecipes = matching.map(recipe => {
                    var _a;
                    const baseRecipe = buildCompleteRecipe(recipe, cuisine.name);
                    // Perform enhanced analysis on recipe
                    if (baseRecipe.elementalProperties) {
                        const analysis = (0, monicaKalchmCalculations_1.performEnhancedAnalysis)({ elemental: baseRecipe.elementalProperties }, currentMomentElementalProfile);
                        // Calculate Kalchm harmony score for recipe
                        const kalchmHarmony = calculateRecipeKalchmHarmony(analysis.thermodynamicMetrics, (_a = cuisine.enhancedAnalysis) === null || _a === void 0 ? void 0 : _a.thermodynamicMetrics);
                        // Calculate recipe thermodynamic optimization
                        const thermodynamicOptimization = calculateThermodynamicOptimization(analysis.thermodynamicMetrics, currentMomentElementalProfile);
                        // Enhanced recipe scoring with thermodynamic properties
                        const originalScore = baseRecipe.matchScore || 0.85;
                        const enhancedRecipeScore = ((originalScore * 0.60) +
                            (analysis.compatibilityScore * 0.25) +
                            (kalchmHarmony * 0.10) +
                            (thermodynamicOptimization * 0.05));
                        return {
                            ...baseRecipe,
                            enhancedAnalysis: analysis,
                            monicaScore: analysis.thermodynamicMetrics.monica,
                            kalchmScore: analysis.thermodynamicMetrics.kalchm,
                            kalchmHarmony,
                            thermodynamicOptimization,
                            compatibilityScore: analysis.compatibilityScore,
                            confidence: analysis.confidence,
                            matchScore: enhancedRecipeScore,
                            matchPercentage: Math.round(enhancedRecipeScore * 100)
                        };
                    }
                    return baseRecipe;
                });
                return {
                    ...cuisine,
                    recipes: enhancedRecipes
                };
            });
            setCuisineRecommendations(cuisinesWithRecipes);
            setOriginalCuisines(cuisinesWithRecipes);
            setFilteredCuisines(cuisinesWithRecipes);
            setLoadingState({ isLoading: true, step: 'Analyzing cultural intelligence...', progress: 80 });
            // Generate cultural analytics for each cuisine
            const culturalAnalyticsData = {};
            for (const cuisine of cuisinesWithRecipes) {
                try {
                    const analytics = CulturalAnalyticsService_1.CulturalAnalyticsService.generateCulturalAnalytics(cuisine.name.toLowerCase(), cuisine.elementalProperties || { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 }, astrologicalStateForRecommendations);
                    culturalAnalyticsData[cuisine.id] = analytics;
                }
                catch (error) {
                    logger_1.logger.warn(`Failed to generate cultural analytics for ${cuisine.name}:`, error);
                }
            }
            setCulturalAnalytics(culturalAnalyticsData);
            // Generate fusion recommendations
            const availableCuisineNames = cuisinesWithRecipes.map(c => c.name.toLowerCase());
            const topCuisine = (_b = (_a = cuisinesWithRecipes[0]) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.toLowerCase();
            if (topCuisine) {
                const fusionRecs = CulturalAnalyticsService_1.CulturalAnalyticsService.generateFusionRecommendations(topCuisine, availableCuisineNames, 3);
                setFusionRecommendations(fusionRecs);
            }
            setLoadingState({ isLoading: true, step: 'Harmonizing sauces...', progress: 90 });
            const topSauces = (0, cuisineRecommender_1.generateTopSauceRecommendations)(currentMomentElementalProfile, 6, astrologicalStateForRecommendations);
            setSauceRecommendations(topSauces);
            // Calculate overall confidence score for caching
            const overallConfidence = analyticsActions.calculateConfidence({
                astrologicalAlignment: 0.9,
                elementalHarmony: 0.85,
                culturalRelevance: 0.8,
                seasonalOptimization: calculateSeasonalOptimization('average', getCurrentSeason()),
                userPreferenceMatch: 0.8,
                dataQuality: 0.95
            });
            // Cache the complete recommendation set with confidence-based TTL
            const cacheData = {
                cuisines: cuisinesWithRecipes,
                culturalAnalytics: culturalAnalyticsData,
                fusionRecommendations: fusionRecs,
                sauces: topSauces
            };
            analyticsActions.cacheRecommendation(cacheKey, cacheData, overallConfidence.overallScore);
            // Record final load time
            const totalLoadTime = performance.now() - loadStartTime;
            analyticsActions.recordLoadTime(totalLoadTime);
            endTiming();
            logger_1.logger.info(`Cuisine recommendations loaded in ${totalLoadTime.toFixed(2)}ms with confidence ${overallConfidence.overallScore.toFixed(2)}`);
            setLoadingState({ isLoading: false, step: 'Complete!', progress: 100 });
        }
        catch (err) {
            logger_1.logger.error('Error loading cuisine data:', err);
            setError('Failed to load cuisine recommendations. Please try again.');
            setLoadingState({ isLoading: false, step: 'Error', progress: 0 });
            // Record error in analytics
            const errorLoadTime = performance.now() - loadStartTime;
            analyticsActions.recordLoadTime(errorLoadTime);
            endTiming();
        }
    }, [currentMomentElementalProfile, astrologicalStateForRecommendations, analyticsActions]);
    // ========== EFFECTS ==========
    (0, react_1.useEffect)(() => {
        loadCuisineData();
    }, [loadCuisineData]);
    // ========== EVENT HANDLERS ==========
    const handleCuisineSelect = (0, react_1.useCallback)((cuisineId) => {
        var _a;
        // Track user interaction
        const selectedData = cuisineRecommendations.find(c => c.id === cuisineId);
        trackClick(`cuisine_${cuisineId}`, {
            cuisineName: selectedData === null || selectedData === void 0 ? void 0 : selectedData.name,
            matchPercentage: selectedData === null || selectedData === void 0 ? void 0 : selectedData.matchPercentage,
            isExpanding: selectedCuisine !== cuisineId
        });
        if (selectedCuisine === cuisineId) {
            setShowCuisineDetails(!showCuisineDetails);
            trackExpand(`cuisine_details_${cuisineId}`, {
                action: showCuisineDetails ? 'collapse' : 'expand'
            });
            return;
        }
        setSelectedCuisine(cuisineId);
        setShowCuisineDetails(true);
        if (((_a = selectedData === null || selectedData === void 0 ? void 0 : selectedData.recipes) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            setMatchingRecipes(selectedData.recipes);
        }
        else {
            setMatchingRecipes([]);
        }
    }, [selectedCuisine, showCuisineDetails, cuisineRecommendations, trackClick, trackExpand]);
    const handleRetry = (0, react_1.useCallback)(() => {
        setError(null);
        loadCuisineData();
    }, [loadCuisineData]);
    // ========== ADVANCED SEARCH AND FILTERING HANDLERS ==========
    const handleFiltersChange = (0, react_1.useCallback)((filters) => {
        setSearchFilters(filters);
        // Process natural language query if present
        if (filters.query.trim()) {
            const intent = (0, naturalLanguageProcessor_1.processNaturalLanguageQuery)(filters.query);
            setSearchIntent(intent);
            // Merge extracted filters with manual filters
            const mergedFilters = {
                ...filters,
                ...intent.extractedFilters,
                // Preserve manual selections over extracted ones for arrays
                dietaryRestrictions: [
                    ...new Set([
                        ...filters.dietaryRestrictions,
                        ...(intent.extractedFilters.dietaryRestrictions || [])
                    ])
                ],
                cuisineTypes: [
                    ...new Set([
                        ...filters.cuisineTypes,
                        ...(intent.extractedFilters.cuisineTypes || [])
                    ])
                ],
                difficultyLevel: [
                    ...new Set([
                        ...filters.difficultyLevel,
                        ...(intent.extractedFilters.difficultyLevel || [])
                    ])
                ]
            };
            // Apply enhanced search and filtering
            let filtered = originalCuisines;
            // Apply text search first
            if (intent.query.trim()) {
                filtered = (0, naturalLanguageProcessor_1.enhancedSearch)(filtered, intent.query, ['name', 'description']);
            }
            // Apply filters
            filtered = (0, naturalLanguageProcessor_1.applyFilters)(filtered, mergedFilters);
            setFilteredCuisines(filtered);
        }
        else {
            // No query, just apply filters
            const filtered = (0, naturalLanguageProcessor_1.applyFilters)(originalCuisines, filters);
            setFilteredCuisines(filtered);
            setSearchIntent(null);
        }
    }, [originalCuisines]);
    const handleSearch = (0, react_1.useCallback)((query) => {
        // Track search interaction
        trackSearch(query, {
            originalResultCount: originalCuisines.length,
            timestamp: Date.now()
        });
        const intent = (0, naturalLanguageProcessor_1.processNaturalLanguageQuery)(query);
        setSearchIntent(intent);
        // Update filters with extracted information
        const updatedFilters = {
            ...searchFilters,
            query,
            ...intent.extractedFilters
        };
        setSearchFilters(updatedFilters);
        // Apply enhanced search
        let filtered = originalCuisines;
        if (intent.query.trim()) {
            filtered = (0, naturalLanguageProcessor_1.enhancedSearch)(filtered, intent.query, ['name', 'description']);
        }
        filtered = (0, naturalLanguageProcessor_1.applyFilters)(filtered, updatedFilters);
        setFilteredCuisines(filtered);
        // Track filter results
        trackFilter('search_results', {
            query,
            resultCount: filtered.length,
            originalCount: originalCuisines.length,
            confidence: intent.confidence
        });
    }, [searchFilters, originalCuisines, trackSearch, trackFilter]);
    // ========== RENDER HELPERS ==========
    const selectedCuisineData = (0, react_1.useMemo)(() => cuisineRecommendations.find(c => c.id === selectedCuisine), [cuisineRecommendations, selectedCuisine]);
    // ========== RENDER ==========
    if (loadingState.isLoading) {
        return (0, jsx_runtime_1.jsx)(LoadingComponent, { loadingState: loadingState });
    }
    if (error) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: "p-4 bg-red-50 border border-red-200 text-red-700 rounded-lg", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2 mb-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertCircle, { size: 20 }), (0, jsx_runtime_1.jsx)("span", { className: "font-medium", children: "Error" })] }), (0, jsx_runtime_1.jsx)("p", { className: "mb-3", children: error }), (0, jsx_runtime_1.jsxs)("button", { onClick: handleRetry, className: "flex items-center space-x-2 px-3 py-1 bg-red-100 hover:bg-red-200 rounded transition-colors", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { size: 16 }), (0, jsx_runtime_1.jsx)("span", { children: "Retry" })] })] }));
    }
    return ((0, jsx_runtime_1.jsx)(CuisineRecommenderErrorBoundary, { onRetry: handleRetry, children: (0, jsx_runtime_1.jsxs)("div", { className: "bg-white rounded-lg shadow p-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between mb-3", children: [(0, jsx_runtime_1.jsx)("h2", { className: "text-xl font-medium", children: "Celestial Cuisine Guide" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsxs)("button", { onClick: () => setShowEnterpriseIntelligence(!showEnterpriseIntelligence), className: `flex items-center space-x-1 px-3 py-1 text-sm rounded transition-colors ${showEnterpriseIntelligence
                                        ? 'bg-purple-100 text-purple-700'
                                        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'}`, title: "Toggle Enterprise Intelligence", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Brain, { size: 14 }), (0, jsx_runtime_1.jsx)("span", { children: "Intelligence" })] }), (0, jsx_runtime_1.jsxs)("button", { onClick: () => setShowPerformanceAnalytics(!showPerformanceAnalytics), className: `flex items-center space-x-1 px-3 py-1 text-sm rounded transition-colors ${showPerformanceAnalytics
                                        ? 'bg-blue-100 text-blue-700'
                                        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'}`, title: "Toggle Performance Analytics", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.BarChart3, { size: 14 }), (0, jsx_runtime_1.jsx)("span", { children: "Analytics" })] })] })] }), showPerformanceAnalytics && ((0, jsx_runtime_1.jsx)("div", { className: "mb-6", children: (0, jsx_runtime_1.jsx)(PerformanceAnalyticsDashboard_1.default, { className: "border-t pt-4", compact: false, showDetails: true }) })), showEnterpriseIntelligence && ((0, jsx_runtime_1.jsx)("div", { className: "mb-6", children: (0, jsx_runtime_1.jsx)(EnterpriseIntelligencePanel_1.default, { recipeData: selectedCuisine ? cuisineRecommendations.find(c => c.id === selectedCuisine) : null, ingredientData: { ingredients: matchingRecipes }, astrologicalContext: {
                            zodiacSign: astrologicalStateForRecommendations.zodiacSign,
                            lunarPhase: astrologicalStateForRecommendations.lunarPhase,
                            elementalProperties: currentMomentElementalProfile,
                            planetaryPositions: astrologicalStateForRecommendations.planetaryPositions
                        }, className: "border-t pt-4", showDetailedMetrics: true, autoAnalyze: true, onAnalysisComplete: (analysis) => {
                            setEnterpriseIntelligenceAnalysis(analysis);
                            logger_1.logger.info('Enterprise Intelligence Analysis completed:', {
                                overallScore: analysis.overallScore,
                                systemHealth: analysis.systemHealth
                            });
                        } }) })), !showPerformanceAnalytics && analyticsState.metrics && ((0, jsx_runtime_1.jsxs)("div", { className: "mb-4 flex items-center justify-between text-xs text-gray-500 bg-gray-50 px-3 py-2 rounded", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Zap, { size: 12, className: "text-blue-500" }), (0, jsx_runtime_1.jsxs)("span", { children: ["Load: ", analyticsState.metrics.loadTime.toFixed(0), "ms"] })] }), (0, jsx_runtime_1.jsx)("div", { className: "flex items-center space-x-1", children: (0, jsx_runtime_1.jsxs)("span", { children: ["Cache: ", (analyticsState.cacheStats.hitRate * 100).toFixed(0), "%"] }) }), (0, jsx_runtime_1.jsx)("div", { className: "flex items-center space-x-1", children: (0, jsx_runtime_1.jsxs)("span", { children: ["Score: ", analyticsState.performanceTrends.performanceScore.toFixed(0), "/100"] }) })] }), (0, jsx_runtime_1.jsx)("button", { onClick: () => setShowPerformanceAnalytics(true), className: "text-blue-600 hover:text-blue-800 underline", children: "View Details" })] })), (0, jsx_runtime_1.jsxs)("div", { className: "mb-6", children: [(0, jsx_runtime_1.jsx)(AdvancedSearchFilters_1.default, { onFiltersChange: handleFiltersChange, onSearch: handleSearch, availableCuisines: originalCuisines.map(c => c.name.toLowerCase()), className: "mb-4" }), searchIntent && searchIntent.confidence > 0.5 && ((0, jsx_runtime_1.jsxs)("div", { className: "mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2 mb-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { size: 16, className: "text-blue-500" }), (0, jsx_runtime_1.jsx)("span", { className: "text-sm font-medium text-blue-700", children: "Search Intelligence" }), (0, jsx_runtime_1.jsxs)("span", { className: "text-xs bg-blue-100 text-blue-600 px-2 py-1 rounded", children: [Math.round(searchIntent.confidence * 100), "% confidence"] })] }), searchIntent.suggestions.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "text-sm text-blue-600", children: [(0, jsx_runtime_1.jsx)("span", { className: "font-medium", children: "Suggestions: " }), searchIntent.suggestions.slice(0, 3).join(', ')] }))] })), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between mb-4 text-sm text-gray-600", children: [(0, jsx_runtime_1.jsxs)("span", { children: ["Showing ", filteredCuisines.length, " of ", originalCuisines.length, " cuisines", searchFilters.query && ` for "${searchFilters.query}"`] }), filteredCuisines.length !== originalCuisines.length && ((0, jsx_runtime_1.jsx)("button", { onClick: () => {
                                        setSearchFilters({
                                            query: '',
                                            dietaryRestrictions: [],
                                            difficultyLevel: [],
                                            cookingTime: { min: 0, max: 480 },
                                            cuisineTypes: [],
                                            mealTypes: [],
                                            spiciness: [],
                                            ingredients: []
                                        });
                                        setFilteredCuisines(originalCuisines);
                                        setSearchIntent(null);
                                    }, className: "text-blue-600 hover:text-blue-800 underline", children: "Clear filters" }))] })] }), (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 mb-4", children: filteredCuisines.map(cuisine => {
                        var _a, _b;
                        return ((0, jsx_runtime_1.jsxs)("div", { className: `rounded border p-3 cursor-pointer transition-all duration-200 hover:shadow-md ${selectedCuisine === cuisine.id ? 'border-blue-400 bg-blue-50' : 'border-gray-200'}`, onClick: () => handleCuisineSelect(cuisine.id), children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center mb-2", children: [(0, jsx_runtime_1.jsx)("h3", { className: "font-medium text-sm", children: cuisine.name }), (0, jsx_runtime_1.jsxs)("span", { className: `text-xs px-2 py-1 rounded ${(0, cuisineRecommender_1.getMatchScoreClass)(getSafeScore(cuisine.score))}`, children: [cuisine.matchPercentage, "%"] })] }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-600 mb-2 line-clamp-2", title: cuisine.description, children: cuisine.description }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2 text-xs text-gray-500", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { size: 14, className: "text-yellow-500" }), (0, jsx_runtime_1.jsx)("span", { children: (_a = cuisine.reasoning) === null || _a === void 0 ? void 0 : _a[0] })] }), ((_b = cuisine.reasoning) === null || _b === void 0 ? void 0 : _b[1]) && ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2 text-xs text-gray-500 mt-1", children: [cuisine.reasoning[1].includes('Favorable') ?
                                            (0, jsx_runtime_1.jsx)(lucide_react_1.Star, { size: 14, className: "text-green-500" }) :
                                            (0, jsx_runtime_1.jsx)(lucide_react_1.Moon, { size: 14, className: "text-blue-500" }), (0, jsx_runtime_1.jsx)("span", { children: cuisine.reasoning[1] })] }))] }, cuisine.id));
                    }) }), (0, jsx_runtime_1.jsx)("div", { className: "mt-6 pt-4 border-t border-gray-200", children: (0, jsx_runtime_1.jsx)(SauceRecommendations_1.default, { sauces: sauceRecommendations, currentElementalProfile: currentMomentElementalProfile, currentZodiac: currentZodiac, lunarPhase: lunarPhase, currentSeason: getCurrentSeason(), maxDisplayed: 6, onSauceSelect: (sauce) => {
                            logger_1.logger.info('Sauce selected:', sauce.name);
                            // Future: Add sauce selection logic here
                        } }) }), selectedCuisineData && showCuisineDetails && ((0, jsx_runtime_1.jsxs)("div", { className: "mt-4 pt-3 border-t border-gray-200", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center mb-2", children: [(0, jsx_runtime_1.jsxs)("h3", { className: "font-semibold text-lg", children: [selectedCuisineData.name, " Cuisine"] }), (0, jsx_runtime_1.jsxs)("span", { className: `text-xs px-2 py-1 rounded ${(0, cuisineRecommender_1.getMatchScoreClass)(getSafeScore(selectedCuisineData.score))}`, children: [selectedCuisineData.matchPercentage, "% match"] })] }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600 mb-3", children: selectedCuisineData.description }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4 mb-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "bg-gray-50 p-3 rounded border", children: [(0, jsx_runtime_1.jsx)("h4", { className: "text-sm font-medium mb-2", children: "Elemental Properties" }), (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-2 gap-2", children: Object.entries(selectedCuisineData.elementalProperties || {}).map(([element, value]) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm", children: element }), (0, jsx_runtime_1.jsx)("div", { className: "w-20 bg-gray-200 rounded-full h-2.5", children: (0, jsx_runtime_1.jsx)("div", { className: "h-2.5 rounded-full bg-blue-500", style: { width: `${Math.round(Number(value) * 100)}%` } }) })] }, element))) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-gray-50 p-3 rounded border", children: [(0, jsx_runtime_1.jsx)("h4", { className: "text-sm font-medium mb-2", children: "Recommendation Reasoning" }), (0, jsx_runtime_1.jsx)("ul", { className: "list-disc pl-4 text-sm text-gray-600", children: (_a = selectedCuisineData.reasoning) === null || _a === void 0 ? void 0 : _a.map((reason, i) => (0, jsx_runtime_1.jsx)("li", { children: reason }, i)) })] })] }), selectedCuisineData.monicaCompatibility && ((0, jsx_runtime_1.jsxs)("div", { className: "mb-4 bg-gradient-to-r from-purple-50 to-blue-50 p-4 rounded-lg border", children: [(0, jsx_runtime_1.jsxs)("h4", { className: "text-sm font-medium mb-3 flex items-center", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { size: 16, className: "text-purple-500 mr-2" }), "Alchemical Compatibility Analysis"] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-3", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-lg font-semibold text-purple-600", children: [Math.round((selectedCuisineData.monicaCompatibility || 0) * 100), "%"] }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-600", children: "Monica Compatibility" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-lg font-semibold text-blue-600", children: (selectedCuisineData.userMonica || 1.0).toFixed(2) }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-600", children: "Your Monica Constant" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-lg font-semibold text-green-600", children: (selectedCuisineData.cuisineMonica || 1.0).toFixed(2) }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-600", children: "Cuisine Monica" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-lg font-semibold text-orange-600", children: Math.abs((selectedCuisineData.userMonica || 1.0) - (selectedCuisineData.cuisineMonica || 1.0)) < 0.5 ? 'High' : 'Medium' }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-600", children: "Harmony Level" })] })] }), (0, jsx_runtime_1.jsx)("div", { className: "mt-3 text-xs text-gray-600", children: "Monica constants measure alchemical transformation potential. Closer values indicate better compatibility." })] })), selectedCuisineData.enhancedAnalysis && ((0, jsx_runtime_1.jsxs)("div", { className: "mb-4 bg-gradient-to-r from-green-50 to-teal-50 p-4 rounded-lg border", children: [(0, jsx_runtime_1.jsxs)("h4", { className: "text-sm font-medium mb-3 flex items-center", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Star, { size: 16, className: "text-green-500 mr-2" }), "Enhanced Thermodynamic Analysis"] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-3 mb-3", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-lg font-semibold text-green-600", children: [Math.round((selectedCuisineData.thermodynamicHarmony || 0) * 100), "%"] }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-600", children: "Thermodynamic Harmony" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-lg font-semibold text-teal-600", children: [Math.round((selectedCuisineData.alchemicalBalance || 0) * 100), "%"] }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-600", children: "Alchemical Balance" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-lg font-semibold text-blue-600", children: (selectedCuisineData.enhancedAnalysis.thermodynamicMetrics.kalchm || 1.0).toFixed(2) }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-600", children: "Kalchm Constant" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-lg font-semibold text-purple-600", children: (selectedCuisineData.enhancedAnalysis.thermodynamicMetrics.gregsEnergy || 0).toFixed(2) }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-600", children: "Greg's Energy" })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-3", children: [(0, jsx_runtime_1.jsxs)("div", { className: "bg-white p-3 rounded border", children: [(0, jsx_runtime_1.jsx)("h5", { className: "text-sm font-medium mb-2", children: "Heat Efficiency" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm", children: (selectedCuisineData.enhancedAnalysis.thermodynamicMetrics.heat || 0).toFixed(3) }), (0, jsx_runtime_1.jsx)("div", { className: "w-16 bg-gray-200 rounded-full h-2", children: (0, jsx_runtime_1.jsx)("div", { className: "h-2 rounded-full bg-red-500", style: { width: `${Math.min(100, Math.max(0, (selectedCuisineData.enhancedAnalysis.thermodynamicMetrics.heat || 0) * 100))}%` } }) })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-white p-3 rounded border", children: [(0, jsx_runtime_1.jsx)("h5", { className: "text-sm font-medium mb-2", children: "Entropy Balance" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm", children: (selectedCuisineData.enhancedAnalysis.thermodynamicMetrics.entropy || 0).toFixed(3) }), (0, jsx_runtime_1.jsx)("div", { className: "w-16 bg-gray-200 rounded-full h-2", children: (0, jsx_runtime_1.jsx)("div", { className: "h-2 rounded-full bg-yellow-500", style: { width: `${Math.min(100, Math.max(0, (selectedCuisineData.enhancedAnalysis.thermodynamicMetrics.entropy || 0) * 50))}%` } }) })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-white p-3 rounded border", children: [(0, jsx_runtime_1.jsx)("h5", { className: "text-sm font-medium mb-2", children: "Reactivity" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm", children: (selectedCuisineData.enhancedAnalysis.thermodynamicMetrics.reactivity || 0).toFixed(3) }), (0, jsx_runtime_1.jsx)("div", { className: "w-16 bg-gray-200 rounded-full h-2", children: (0, jsx_runtime_1.jsx)("div", { className: "h-2 rounded-full bg-orange-500", style: { width: `${Math.min(100, Math.max(0, (selectedCuisineData.enhancedAnalysis.thermodynamicMetrics.reactivity || 0) * 50))}%` } }) })] })] })] }), (0, jsx_runtime_1.jsx)("div", { className: "mt-3 text-xs text-gray-600", children: "Enhanced thermodynamic analysis integrates heat efficiency, entropy balance, and reactivity for optimal culinary recommendations." })] })), ((_b = selectedCuisineData.enhancedAnalysis) === null || _b === void 0 ? void 0 : _b.alchemicalProperties) && ((0, jsx_runtime_1.jsxs)("div", { className: "mb-4 bg-gradient-to-r from-yellow-50 to-amber-50 p-4 rounded-lg border", children: [(0, jsx_runtime_1.jsxs)("h4", { className: "text-sm font-medium mb-3 flex items-center", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { size: 16, className: "text-yellow-500 mr-2" }), "Alchemical Properties Balance"] }), (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-3", children: Object.entries(selectedCuisineData.enhancedAnalysis.alchemicalProperties).map(([property, value]) => ((0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-lg font-semibold text-amber-600", children: (Number(value) || 0).toFixed(2) }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-600", children: property }), (0, jsx_runtime_1.jsx)("div", { className: "w-full bg-gray-200 rounded-full h-2 mt-1", children: (0, jsx_runtime_1.jsx)("div", { className: "h-2 rounded-full bg-amber-500", style: { width: `${Math.min(100, Math.max(0, (Number(value) || 0) * 100))}%` } }) })] }, property))) }), (0, jsx_runtime_1.jsx)("div", { className: "mt-3 text-xs text-gray-600", children: "Alchemical balance optimization contributes 10% weight to the enhanced 7-factor scoring algorithm." })] })), culturalAnalytics[selectedCuisineData.id] && ((0, jsx_runtime_1.jsxs)("div", { className: "mb-4 bg-gradient-to-r from-amber-50 to-orange-50 p-4 rounded-lg border", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center mb-3", children: [(0, jsx_runtime_1.jsxs)("h4", { className: "text-sm font-medium flex items-center", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Star, { size: 16, className: "text-amber-500 mr-2" }), "Cultural Analytics & Intelligence"] }), (0, jsx_runtime_1.jsx)("button", { onClick: () => setShowCulturalAnalytics(!showCulturalAnalytics), className: "text-xs px-2 py-1 bg-amber-100 hover:bg-amber-200 rounded transition-colors", children: showCulturalAnalytics ? 'Hide Details' : 'Show Details' })] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-3 mb-3", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-lg font-semibold text-amber-600", children: [Math.round(culturalAnalytics[selectedCuisineData.id].culturalSynergy * 100), "%"] }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-600", children: "Cultural Synergy" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-lg font-semibold text-orange-600", children: [Math.round(culturalAnalytics[selectedCuisineData.id].culturalCompatibility * 100), "%"] }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-600", children: "Astrological Compatibility" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-lg font-semibold text-yellow-600", children: [Math.round(culturalAnalytics[selectedCuisineData.id].fusionPotential * 100), "%"] }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-600", children: "Fusion Potential" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-lg font-semibold text-red-600", children: [Math.round(culturalAnalytics[selectedCuisineData.id].culturalDiversityScore * 100), "%"] }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-600", children: "Cultural Diversity" })] })] }), showCulturalAnalytics && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-3 mt-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "bg-white p-3 rounded border", children: [(0, jsx_runtime_1.jsx)("h5", { className: "text-sm font-medium mb-2", children: "Historical Significance" }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-700", children: culturalAnalytics[selectedCuisineData.id].historicalSignificance })] }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-white p-3 rounded border", children: [(0, jsx_runtime_1.jsx)("h5", { className: "text-sm font-medium mb-2", children: "Cultural Context" }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-700", children: culturalAnalytics[selectedCuisineData.id].culturalContext })] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-3", children: [(0, jsx_runtime_1.jsxs)("div", { className: "bg-white p-3 rounded border", children: [(0, jsx_runtime_1.jsx)("h5", { className: "text-sm font-medium mb-2", children: "Traditional Principles" }), (0, jsx_runtime_1.jsx)("ul", { className: "list-disc pl-4 text-xs text-gray-700", children: culturalAnalytics[selectedCuisineData.id].traditionalPrinciples.slice(0, 3).map((principle, i) => ((0, jsx_runtime_1.jsx)("li", { children: principle }, i))) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-white p-3 rounded border", children: [(0, jsx_runtime_1.jsx)("h5", { className: "text-sm font-medium mb-2", children: "Modern Adaptations" }), (0, jsx_runtime_1.jsx)("ul", { className: "list-disc pl-4 text-xs text-gray-700", children: culturalAnalytics[selectedCuisineData.id].modernAdaptations.slice(0, 3).map((adaptation, i) => ((0, jsx_runtime_1.jsx)("li", { children: adaptation }, i))) })] })] })] })), (0, jsx_runtime_1.jsx)("div", { className: "mt-3 text-xs text-gray-600", children: "Cultural synergy contributes 5% weight to the 7-factor recommendation algorithm." })] })), fusionRecommendations.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "mb-4 bg-gradient-to-r from-indigo-50 to-purple-50 p-4 rounded-lg border", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center mb-3", children: [(0, jsx_runtime_1.jsxs)("h4", { className: "text-sm font-medium flex items-center", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { size: 16, className: "text-indigo-500 mr-2" }), "Fusion Cuisine Recommendations"] }), (0, jsx_runtime_1.jsx)("button", { onClick: () => setShowFusionRecommendations(!showFusionRecommendations), className: "text-xs px-2 py-1 bg-indigo-100 hover:bg-indigo-200 rounded transition-colors", children: showFusionRecommendations ? 'Hide Fusion' : 'Show Fusion' })] }), showFusionRecommendations && ((0, jsx_runtime_1.jsx)("div", { className: "space-y-3", children: fusionRecommendations.map((fusion, index) => ((0, jsx_runtime_1.jsxs)("div", { className: "bg-white p-3 rounded border", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center mb-2", children: [(0, jsx_runtime_1.jsx)("h5", { className: "text-sm font-medium", children: fusion.name }), (0, jsx_runtime_1.jsxs)("div", { className: "flex space-x-2", children: [(0, jsx_runtime_1.jsxs)("span", { className: "text-xs px-2 py-1 bg-indigo-100 rounded", children: [Math.round(fusion.fusionScore * 100), "% Fusion"] }), (0, jsx_runtime_1.jsxs)("span", { className: "text-xs px-2 py-1 bg-purple-100 rounded", children: [Math.round(fusion.culturalHarmony * 100), "% Harmony"] })] })] }), (0, jsx_runtime_1.jsxs)("p", { className: "text-xs text-gray-600 mb-2", children: ["Blend of ", fusion.parentCuisines.join(' and '), " cuisines"] }), (0, jsx_runtime_1.jsxs)("div", { className: "mb-2", children: [(0, jsx_runtime_1.jsx)("h6", { className: "text-xs font-medium mb-1", children: "Recommended Dishes:" }), (0, jsx_runtime_1.jsx)("div", { className: "flex flex-wrap gap-1", children: fusion.recommendedDishes.map((dish, i) => ((0, jsx_runtime_1.jsx)("span", { className: "text-xs px-2 py-1 bg-gray-100 rounded", children: dish }, i))) })] }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-700", children: (0, jsx_runtime_1.jsx)("p", { children: fusion.culturalNotes[0] }) })] }, index))) })), (0, jsx_runtime_1.jsx)("div", { className: "mt-3 text-xs text-gray-600", children: "Fusion recommendations based on cultural compatibility and culinary harmony analysis." })] })), (0, jsx_runtime_1.jsx)("div", { className: "mt-4", children: (0, jsx_runtime_1.jsx)(RecipeRecommendations_1.default, { recipes: matchingRecipes, cuisineName: selectedCuisineData.name, currentElementalProfile: currentMomentElementalProfile, maxDisplayed: 6, onRecipeSelect: (recipe) => {
                                    logger_1.logger.info('Recipe selected:', recipe.name);
                                    setSelectedRecipe(recipe);
                                } }) }), selectedRecipe && ((0, jsx_runtime_1.jsx)("div", { className: "mt-6 pt-4 border-t border-gray-200", children: (0, jsx_runtime_1.jsx)(SauceRecommendations_1.default, { sauces: sauceRecommendations, cuisineName: selectedCuisineData.name, selectedRecipe: selectedRecipe, currentElementalProfile: currentMomentElementalProfile, currentZodiac: currentZodiac, lunarPhase: lunarPhase, currentSeason: getCurrentSeason(), maxDisplayed: 4, onSauceSelect: (sauce) => {
                                    logger_1.logger.info('Sauce selected for recipe:', sauce.name, 'with', selectedRecipe.name);
                                    // Future: Add sauce-recipe pairing logic here
                                } }) }))] }))] }) }));
}
exports.default = CuisineRecommender;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,