{
  "enabled": true,
  "name": "Auto-Lint Fixer",
  "description": "Intelligent linting recovery system with dry-run validation, specialized error fixing, and comprehensive safety protocols. Uses battle-tested tools from systematic recovery campaigns.",
  "version": "2.0",
  "when": {
    "type": "userTriggered",
    "patterns": [
      "src/**/*.ts",
      "src/**/*.tsx",
      "src/**/*.js",
      "src/**/*.jsx",
      "*.ts",
      "*.tsx",
      "*.js",
      "*.jsx"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "**INTELLIGENT LINTING RECOVERY SYSTEM v2.0 + ROLLBACK PROTECTION**\n\n**CURRENT VERIFIED STATE:**\n- TypeScript Errors: 3,588 (verified via `yarn tsc --noEmit --skipLibCheck`)\n- ESLint Issues: 6,036 (verified via `yarn lint --max-warnings=0`)\n- Build Status: ✅ SUCCESSFUL (verified via `yarn build`)\n- Recovery Infrastructure: 50+ specialized scripts available\n- Protection System: 🛡️ ACTIVE (rollback protection deployed)\n\n**FILE TO PROCESS:** ${filePath}\n\n**ROLLBACK PROTECTION INTEGRATION:**\n\n0. **AUTOMATIC PROTECTION ACTIVATION**\n   - Create automatic backup: `node .kiro/specs/linting-excellence/backup-tasks.cjs create \"auto-lint-pre-${filePath}\"`\n   - Validate protection system: `node .kiro/specs/linting-excellence/restore-tasks.cjs validate`\n   - Emergency recovery ready: `node .kiro/specs/linting-excellence/restore-tasks.cjs --emergency`\n\n**EXECUTION PROTOCOL - DRY-RUN FIRST MANDATORY:**\n\n1. **PRE-EXECUTION ANALYSIS**\n   - Verify current error count: `yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c \"error TS\" || echo \"0\"`\n   - Check ESLint issues: `yarn lint --max-warnings=0 2>&1 | grep -E \"warning|error\" | wc -l || echo \"0\"`\n   - Create timestamped backup before any changes\n   - Validate rollback protection system is active\n\n2. **DRY-RUN VALIDATION (MANDATORY)**\n   - Execute ALL fixes with `--dry-run` flag first\n   - Review proposed changes for safety and correctness\n   - Validate no critical patterns will be affected\n   - Only proceed if dry-run validation passes\n   - **PROTECTION**: If dry-run fails, no changes made - protection system prevents corruption\n\n3. **SPECIALIZED ERROR TARGETING**\n   - **TS1005 Syntax Errors**: Use `fix-ts1005-targeted-safe.cjs --dry-run` first\n   - **TS1003 Identifier Errors**: Use `fix-ts1003-identifier-errors.cjs --dry-run` first\n   - **TS1128 Declaration Errors**: Use `enhanced-ts1128-declaration-fixer.cjs --dry-run` first\n   - **ESLint Auto-Fix**: Use `yarn lint --fix` for safe automated fixes\n   - **PROTECTION**: All tools integrated with backup system\n\n4. **SAFETY VALIDATION CHECKPOINTS**\n   - Build validation: `yarn build` (must succeed)\n   - TypeScript validation: `yarn tsc --noEmit --skipLibCheck`\n   - Error count verification: Compare before/after counts\n   - Critical pattern preservation: Astrological calculations, campaign systems\n   - **PROTECTION**: Automatic rollback on any validation failure\n\n5. **AUTOMATIC ROLLBACK TRIGGERS**\n   - Any build failure → Automatic restoration from backup\n   - TypeScript compilation errors increase → Emergency recovery\n   - Critical functionality patterns disrupted → Immediate rollback\n   - Syntax corruption detected → Protection system activation\n   - **NEW**: Git pre-commit hooks prevent accidental commits of broken code\n\n6. **REAL-TIME PROGRESS MONITORING**\n   - Track error count reduction in real-time\n   - Log all changes and validation results\n   - Report success metrics and any issues\n   - Maintain performance benchmarks (<30 second analysis)\n   - **PROTECTION**: Continuous backup validation ensures integrity\n\n7. **DOMAIN-SPECIFIC PRESERVATION**\n   - Astrological calculation accuracy (planetary positions, transit dates)\n   - Campaign system intelligence patterns (progress tracking, safety protocols)\n   - Elemental harmony principles and self-reinforcement logic\n   - Build stability and performance metrics\n   - **PROTECTION**: Task list rollback protection ensures methodology preservation\n\n**SUCCESS CRITERIA:**\n- Zero build failures introduced\n- Error count reduction (any improvement is success)\n- All critical functionality preserved\n- Performance benchmarks maintained\n- **NEW**: Protection system validates all changes\n\n**EMERGENCY PROCEDURES:**\n- If anything goes wrong: `node .kiro/specs/linting-excellence/restore-tasks.cjs --emergency`\n- Validate system state: `node .kiro/specs/linting-excellence/restore-tasks.cjs validate`\n- Create manual backup: `node .kiro/specs/linting-excellence/backup-tasks.cjs create \"manual-safety\"`\n\n**Use the proven recovery infrastructure with dry-run first methodology and rollback protection. Focus on incremental improvement with absolute safety. The protection system ensures no progress is ever lost.**"
  }
}
